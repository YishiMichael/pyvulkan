<registry>
  <class name="ArrayWrapper1D" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T, size_t N&gt;">
    <base name="std::array&lt;T, N&gt;" />
    <constructor name="ArrayWrapper1D&lt;T, N&gt;" />
    <constructor name="ArrayWrapper1D&lt;T, N&gt;">
      <argument name="data" type="const std::array&lt;T, N&gt; &amp;" />
    </constructor>
    <method name="ArrayWrapper1D&lt;T, N&gt;" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_same&lt;B, char&gt;" />
    <conversion_function name="operator const type-parameter-0-0 *" />
    <conversion_function name="operator type-parameter-0-0 *" />
    <method name="operator basic_string" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_same&lt;B, char&gt;" />
    <method name="operator&lt;" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_same&lt;B, char&gt;" />
    <method name="operator&lt;=" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_same&lt;B, char&gt;" />
    <method name="operator&gt;" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_same&lt;B, char&gt;" />
    <method name="operator&gt;=" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_same&lt;B, char&gt;" />
    <method name="operator==" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_same&lt;B, char&gt;" />
    <method name="operator!=" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_same&lt;B, char&gt;" />
  </class>
  <class name="ArrayWrapper2D" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T, size_t N, size_t M&gt;">
    <base name="std::array&lt;ArrayWrapper1D&lt;T, M&gt;, N&gt;" />
    <constructor name="ArrayWrapper2D&lt;T, N, M&gt;" />
    <constructor name="ArrayWrapper2D&lt;T, N, M&gt;">
      <argument name="data" type="const std::array&lt;std::array&lt;T, M&gt;, N&gt; &amp;" />
    </constructor>
  </class>
  <class name="DispatchLoaderBase" namespace="vk" filename="vulkan/vulkan.hpp">
    <constructor name="DispatchLoaderBase" />
    <constructor name="DispatchLoaderBase">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <method name="getVkHeaderVersion" />
  </class>
  <class name="DispatchLoaderDynamic" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="DispatchLoaderBase" />
    <field name="vkCreateInstance" />
    <field name="vkDestroyInstance" />
    <field name="vkEnumeratePhysicalDevices" />
    <field name="vkGetPhysicalDeviceFeatures" />
    <field name="vkGetPhysicalDeviceFormatProperties" />
    <field name="vkGetPhysicalDeviceImageFormatProperties" />
    <field name="vkGetPhysicalDeviceProperties" />
    <field name="vkGetPhysicalDeviceQueueFamilyProperties" />
    <field name="vkGetPhysicalDeviceMemoryProperties" />
    <field name="vkGetInstanceProcAddr" />
    <field name="vkGetDeviceProcAddr" />
    <field name="vkCreateDevice" />
    <field name="vkDestroyDevice" />
    <field name="vkEnumerateInstanceExtensionProperties" />
    <field name="vkEnumerateDeviceExtensionProperties" />
    <field name="vkEnumerateInstanceLayerProperties" />
    <field name="vkEnumerateDeviceLayerProperties" />
    <field name="vkGetDeviceQueue" />
    <field name="vkQueueSubmit" />
    <field name="vkQueueWaitIdle" />
    <field name="vkDeviceWaitIdle" />
    <field name="vkAllocateMemory" />
    <field name="vkFreeMemory" />
    <field name="vkMapMemory" />
    <field name="vkUnmapMemory" />
    <field name="vkFlushMappedMemoryRanges" />
    <field name="vkInvalidateMappedMemoryRanges" />
    <field name="vkGetDeviceMemoryCommitment" />
    <field name="vkBindBufferMemory" />
    <field name="vkBindImageMemory" />
    <field name="vkGetBufferMemoryRequirements" />
    <field name="vkGetImageMemoryRequirements" />
    <field name="vkGetImageSparseMemoryRequirements" />
    <field name="vkGetPhysicalDeviceSparseImageFormatProperties" />
    <field name="vkQueueBindSparse" />
    <field name="vkCreateFence" />
    <field name="vkDestroyFence" />
    <field name="vkResetFences" />
    <field name="vkGetFenceStatus" />
    <field name="vkWaitForFences" />
    <field name="vkCreateSemaphore" />
    <field name="vkDestroySemaphore" />
    <field name="vkCreateEvent" />
    <field name="vkDestroyEvent" />
    <field name="vkGetEventStatus" />
    <field name="vkSetEvent" />
    <field name="vkResetEvent" />
    <field name="vkCreateQueryPool" />
    <field name="vkDestroyQueryPool" />
    <field name="vkGetQueryPoolResults" />
    <field name="vkCreateBuffer" />
    <field name="vkDestroyBuffer" />
    <field name="vkCreateBufferView" />
    <field name="vkDestroyBufferView" />
    <field name="vkCreateImage" />
    <field name="vkDestroyImage" />
    <field name="vkGetImageSubresourceLayout" />
    <field name="vkCreateImageView" />
    <field name="vkDestroyImageView" />
    <field name="vkCreateShaderModule" />
    <field name="vkDestroyShaderModule" />
    <field name="vkCreatePipelineCache" />
    <field name="vkDestroyPipelineCache" />
    <field name="vkGetPipelineCacheData" />
    <field name="vkMergePipelineCaches" />
    <field name="vkCreateGraphicsPipelines" />
    <field name="vkCreateComputePipelines" />
    <field name="vkDestroyPipeline" />
    <field name="vkCreatePipelineLayout" />
    <field name="vkDestroyPipelineLayout" />
    <field name="vkCreateSampler" />
    <field name="vkDestroySampler" />
    <field name="vkCreateDescriptorSetLayout" />
    <field name="vkDestroyDescriptorSetLayout" />
    <field name="vkCreateDescriptorPool" />
    <field name="vkDestroyDescriptorPool" />
    <field name="vkResetDescriptorPool" />
    <field name="vkAllocateDescriptorSets" />
    <field name="vkFreeDescriptorSets" />
    <field name="vkUpdateDescriptorSets" />
    <field name="vkCreateFramebuffer" />
    <field name="vkDestroyFramebuffer" />
    <field name="vkCreateRenderPass" />
    <field name="vkDestroyRenderPass" />
    <field name="vkGetRenderAreaGranularity" />
    <field name="vkCreateCommandPool" />
    <field name="vkDestroyCommandPool" />
    <field name="vkResetCommandPool" />
    <field name="vkAllocateCommandBuffers" />
    <field name="vkFreeCommandBuffers" />
    <field name="vkBeginCommandBuffer" />
    <field name="vkEndCommandBuffer" />
    <field name="vkResetCommandBuffer" />
    <field name="vkCmdBindPipeline" />
    <field name="vkCmdSetViewport" />
    <field name="vkCmdSetScissor" />
    <field name="vkCmdSetLineWidth" />
    <field name="vkCmdSetDepthBias" />
    <field name="vkCmdSetBlendConstants" />
    <field name="vkCmdSetDepthBounds" />
    <field name="vkCmdSetStencilCompareMask" />
    <field name="vkCmdSetStencilWriteMask" />
    <field name="vkCmdSetStencilReference" />
    <field name="vkCmdBindDescriptorSets" />
    <field name="vkCmdBindIndexBuffer" />
    <field name="vkCmdBindVertexBuffers" />
    <field name="vkCmdDraw" />
    <field name="vkCmdDrawIndexed" />
    <field name="vkCmdDrawIndirect" />
    <field name="vkCmdDrawIndexedIndirect" />
    <field name="vkCmdDispatch" />
    <field name="vkCmdDispatchIndirect" />
    <field name="vkCmdCopyBuffer" />
    <field name="vkCmdCopyImage" />
    <field name="vkCmdBlitImage" />
    <field name="vkCmdCopyBufferToImage" />
    <field name="vkCmdCopyImageToBuffer" />
    <field name="vkCmdUpdateBuffer" />
    <field name="vkCmdFillBuffer" />
    <field name="vkCmdClearColorImage" />
    <field name="vkCmdClearDepthStencilImage" />
    <field name="vkCmdClearAttachments" />
    <field name="vkCmdResolveImage" />
    <field name="vkCmdSetEvent" />
    <field name="vkCmdResetEvent" />
    <field name="vkCmdWaitEvents" />
    <field name="vkCmdPipelineBarrier" />
    <field name="vkCmdBeginQuery" />
    <field name="vkCmdEndQuery" />
    <field name="vkCmdResetQueryPool" />
    <field name="vkCmdWriteTimestamp" />
    <field name="vkCmdCopyQueryPoolResults" />
    <field name="vkCmdPushConstants" />
    <field name="vkCmdBeginRenderPass" />
    <field name="vkCmdNextSubpass" />
    <field name="vkCmdEndRenderPass" />
    <field name="vkCmdExecuteCommands" />
    <field name="vkEnumerateInstanceVersion" />
    <field name="vkBindBufferMemory2" />
    <field name="vkBindImageMemory2" />
    <field name="vkGetDeviceGroupPeerMemoryFeatures" />
    <field name="vkCmdSetDeviceMask" />
    <field name="vkCmdDispatchBase" />
    <field name="vkEnumeratePhysicalDeviceGroups" />
    <field name="vkGetImageMemoryRequirements2" />
    <field name="vkGetBufferMemoryRequirements2" />
    <field name="vkGetImageSparseMemoryRequirements2" />
    <field name="vkGetPhysicalDeviceFeatures2" />
    <field name="vkGetPhysicalDeviceProperties2" />
    <field name="vkGetPhysicalDeviceFormatProperties2" />
    <field name="vkGetPhysicalDeviceImageFormatProperties2" />
    <field name="vkGetPhysicalDeviceQueueFamilyProperties2" />
    <field name="vkGetPhysicalDeviceMemoryProperties2" />
    <field name="vkGetPhysicalDeviceSparseImageFormatProperties2" />
    <field name="vkTrimCommandPool" />
    <field name="vkGetDeviceQueue2" />
    <field name="vkCreateSamplerYcbcrConversion" />
    <field name="vkDestroySamplerYcbcrConversion" />
    <field name="vkCreateDescriptorUpdateTemplate" />
    <field name="vkDestroyDescriptorUpdateTemplate" />
    <field name="vkUpdateDescriptorSetWithTemplate" />
    <field name="vkGetPhysicalDeviceExternalBufferProperties" />
    <field name="vkGetPhysicalDeviceExternalFenceProperties" />
    <field name="vkGetPhysicalDeviceExternalSemaphoreProperties" />
    <field name="vkGetDescriptorSetLayoutSupport" />
    <field name="vkCmdDrawIndirectCount" />
    <field name="vkCmdDrawIndexedIndirectCount" />
    <field name="vkCreateRenderPass2" />
    <field name="vkCmdBeginRenderPass2" />
    <field name="vkCmdNextSubpass2" />
    <field name="vkCmdEndRenderPass2" />
    <field name="vkResetQueryPool" />
    <field name="vkGetSemaphoreCounterValue" />
    <field name="vkWaitSemaphores" />
    <field name="vkSignalSemaphore" />
    <field name="vkGetBufferDeviceAddress" />
    <field name="vkGetBufferOpaqueCaptureAddress" />
    <field name="vkGetDeviceMemoryOpaqueCaptureAddress" />
    <field name="vkGetPhysicalDeviceToolProperties" />
    <field name="vkCreatePrivateDataSlot" />
    <field name="vkDestroyPrivateDataSlot" />
    <field name="vkSetPrivateData" />
    <field name="vkGetPrivateData" />
    <field name="vkCmdSetEvent2" />
    <field name="vkCmdResetEvent2" />
    <field name="vkCmdWaitEvents2" />
    <field name="vkCmdPipelineBarrier2" />
    <field name="vkCmdWriteTimestamp2" />
    <field name="vkQueueSubmit2" />
    <field name="vkCmdCopyBuffer2" />
    <field name="vkCmdCopyImage2" />
    <field name="vkCmdCopyBufferToImage2" />
    <field name="vkCmdCopyImageToBuffer2" />
    <field name="vkCmdBlitImage2" />
    <field name="vkCmdResolveImage2" />
    <field name="vkCmdBeginRendering" />
    <field name="vkCmdEndRendering" />
    <field name="vkCmdSetCullMode" />
    <field name="vkCmdSetFrontFace" />
    <field name="vkCmdSetPrimitiveTopology" />
    <field name="vkCmdSetViewportWithCount" />
    <field name="vkCmdSetScissorWithCount" />
    <field name="vkCmdBindVertexBuffers2" />
    <field name="vkCmdSetDepthTestEnable" />
    <field name="vkCmdSetDepthWriteEnable" />
    <field name="vkCmdSetDepthCompareOp" />
    <field name="vkCmdSetDepthBoundsTestEnable" />
    <field name="vkCmdSetStencilTestEnable" />
    <field name="vkCmdSetStencilOp" />
    <field name="vkCmdSetRasterizerDiscardEnable" />
    <field name="vkCmdSetDepthBiasEnable" />
    <field name="vkCmdSetPrimitiveRestartEnable" />
    <field name="vkGetDeviceBufferMemoryRequirements" />
    <field name="vkGetDeviceImageMemoryRequirements" />
    <field name="vkGetDeviceImageSparseMemoryRequirements" />
    <field name="vkDestroySurfaceKHR" />
    <field name="vkGetPhysicalDeviceSurfaceSupportKHR" />
    <field name="vkGetPhysicalDeviceSurfaceCapabilitiesKHR" />
    <field name="vkGetPhysicalDeviceSurfaceFormatsKHR" />
    <field name="vkGetPhysicalDeviceSurfacePresentModesKHR" />
    <field name="vkCreateSwapchainKHR" />
    <field name="vkDestroySwapchainKHR" />
    <field name="vkGetSwapchainImagesKHR" />
    <field name="vkAcquireNextImageKHR" />
    <field name="vkQueuePresentKHR" />
    <field name="vkGetDeviceGroupPresentCapabilitiesKHR" />
    <field name="vkGetDeviceGroupSurfacePresentModesKHR" />
    <field name="vkGetPhysicalDevicePresentRectanglesKHR" />
    <field name="vkAcquireNextImage2KHR" />
    <field name="vkGetPhysicalDeviceDisplayPropertiesKHR" />
    <field name="vkGetPhysicalDeviceDisplayPlanePropertiesKHR" />
    <field name="vkGetDisplayPlaneSupportedDisplaysKHR" />
    <field name="vkGetDisplayModePropertiesKHR" />
    <field name="vkCreateDisplayModeKHR" />
    <field name="vkGetDisplayPlaneCapabilitiesKHR" />
    <field name="vkCreateDisplayPlaneSurfaceKHR" />
    <field name="vkCreateSharedSwapchainsKHR" />
    <field name="vkCreateXlibSurfaceKHR_placeholder" />
    <field name="vkGetPhysicalDeviceXlibPresentationSupportKHR_placeholder" />
    <field name="vkCreateXcbSurfaceKHR_placeholder" />
    <field name="vkGetPhysicalDeviceXcbPresentationSupportKHR_placeholder" />
    <field name="vkCreateWaylandSurfaceKHR_placeholder" />
    <field name="vkGetPhysicalDeviceWaylandPresentationSupportKHR_placeholder" />
    <field name="vkCreateAndroidSurfaceKHR_placeholder" />
    <field name="vkCreateWin32SurfaceKHR_placeholder" />
    <field name="vkGetPhysicalDeviceWin32PresentationSupportKHR_placeholder" />
    <field name="vkCreateDebugReportCallbackEXT" />
    <field name="vkDestroyDebugReportCallbackEXT" />
    <field name="vkDebugReportMessageEXT" />
    <field name="vkDebugMarkerSetObjectTagEXT" />
    <field name="vkDebugMarkerSetObjectNameEXT" />
    <field name="vkCmdDebugMarkerBeginEXT" />
    <field name="vkCmdDebugMarkerEndEXT" />
    <field name="vkCmdDebugMarkerInsertEXT" />
    <field name="vkGetPhysicalDeviceVideoCapabilitiesKHR" />
    <field name="vkGetPhysicalDeviceVideoFormatPropertiesKHR" />
    <field name="vkCreateVideoSessionKHR" />
    <field name="vkDestroyVideoSessionKHR" />
    <field name="vkGetVideoSessionMemoryRequirementsKHR" />
    <field name="vkBindVideoSessionMemoryKHR" />
    <field name="vkCreateVideoSessionParametersKHR" />
    <field name="vkUpdateVideoSessionParametersKHR" />
    <field name="vkDestroyVideoSessionParametersKHR" />
    <field name="vkCmdBeginVideoCodingKHR" />
    <field name="vkCmdEndVideoCodingKHR" />
    <field name="vkCmdControlVideoCodingKHR" />
    <field name="vkCmdDecodeVideoKHR" />
    <field name="vkCmdBindTransformFeedbackBuffersEXT" />
    <field name="vkCmdBeginTransformFeedbackEXT" />
    <field name="vkCmdEndTransformFeedbackEXT" />
    <field name="vkCmdBeginQueryIndexedEXT" />
    <field name="vkCmdEndQueryIndexedEXT" />
    <field name="vkCmdDrawIndirectByteCountEXT" />
    <field name="vkCreateCuModuleNVX" />
    <field name="vkCreateCuFunctionNVX" />
    <field name="vkDestroyCuModuleNVX" />
    <field name="vkDestroyCuFunctionNVX" />
    <field name="vkCmdCuLaunchKernelNVX" />
    <field name="vkGetImageViewHandleNVX" />
    <field name="vkGetImageViewAddressNVX" />
    <field name="vkCmdDrawIndirectCountAMD" />
    <field name="vkCmdDrawIndexedIndirectCountAMD" />
    <field name="vkGetShaderInfoAMD" />
    <field name="vkCmdBeginRenderingKHR" />
    <field name="vkCmdEndRenderingKHR" />
    <field name="vkCreateStreamDescriptorSurfaceGGP_placeholder" />
    <field name="vkGetPhysicalDeviceExternalImageFormatPropertiesNV" />
    <field name="vkGetMemoryWin32HandleNV_placeholder" />
    <field name="vkGetPhysicalDeviceFeatures2KHR" />
    <field name="vkGetPhysicalDeviceProperties2KHR" />
    <field name="vkGetPhysicalDeviceFormatProperties2KHR" />
    <field name="vkGetPhysicalDeviceImageFormatProperties2KHR" />
    <field name="vkGetPhysicalDeviceQueueFamilyProperties2KHR" />
    <field name="vkGetPhysicalDeviceMemoryProperties2KHR" />
    <field name="vkGetPhysicalDeviceSparseImageFormatProperties2KHR" />
    <field name="vkGetDeviceGroupPeerMemoryFeaturesKHR" />
    <field name="vkCmdSetDeviceMaskKHR" />
    <field name="vkCmdDispatchBaseKHR" />
    <field name="vkCreateViSurfaceNN_placeholder" />
    <field name="vkTrimCommandPoolKHR" />
    <field name="vkEnumeratePhysicalDeviceGroupsKHR" />
    <field name="vkGetPhysicalDeviceExternalBufferPropertiesKHR" />
    <field name="vkGetMemoryWin32HandleKHR_placeholder" />
    <field name="vkGetMemoryWin32HandlePropertiesKHR_placeholder" />
    <field name="vkGetMemoryFdKHR" />
    <field name="vkGetMemoryFdPropertiesKHR" />
    <field name="vkGetPhysicalDeviceExternalSemaphorePropertiesKHR" />
    <field name="vkImportSemaphoreWin32HandleKHR_placeholder" />
    <field name="vkGetSemaphoreWin32HandleKHR_placeholder" />
    <field name="vkImportSemaphoreFdKHR" />
    <field name="vkGetSemaphoreFdKHR" />
    <field name="vkCmdPushDescriptorSetKHR" />
    <field name="vkCmdPushDescriptorSetWithTemplateKHR" />
    <field name="vkCmdBeginConditionalRenderingEXT" />
    <field name="vkCmdEndConditionalRenderingEXT" />
    <field name="vkCreateDescriptorUpdateTemplateKHR" />
    <field name="vkDestroyDescriptorUpdateTemplateKHR" />
    <field name="vkUpdateDescriptorSetWithTemplateKHR" />
    <field name="vkCmdSetViewportWScalingNV" />
    <field name="vkReleaseDisplayEXT" />
    <field name="vkAcquireXlibDisplayEXT_placeholder" />
    <field name="vkGetRandROutputDisplayEXT_placeholder" />
    <field name="vkGetPhysicalDeviceSurfaceCapabilities2EXT" />
    <field name="vkDisplayPowerControlEXT" />
    <field name="vkRegisterDeviceEventEXT" />
    <field name="vkRegisterDisplayEventEXT" />
    <field name="vkGetSwapchainCounterEXT" />
    <field name="vkGetRefreshCycleDurationGOOGLE" />
    <field name="vkGetPastPresentationTimingGOOGLE" />
    <field name="vkCmdSetDiscardRectangleEXT" />
    <field name="vkCmdSetDiscardRectangleEnableEXT" />
    <field name="vkCmdSetDiscardRectangleModeEXT" />
    <field name="vkSetHdrMetadataEXT" />
    <field name="vkCreateRenderPass2KHR" />
    <field name="vkCmdBeginRenderPass2KHR" />
    <field name="vkCmdNextSubpass2KHR" />
    <field name="vkCmdEndRenderPass2KHR" />
    <field name="vkGetSwapchainStatusKHR" />
    <field name="vkGetPhysicalDeviceExternalFencePropertiesKHR" />
    <field name="vkImportFenceWin32HandleKHR_placeholder" />
    <field name="vkGetFenceWin32HandleKHR_placeholder" />
    <field name="vkImportFenceFdKHR" />
    <field name="vkGetFenceFdKHR" />
    <field name="vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR" />
    <field name="vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR" />
    <field name="vkAcquireProfilingLockKHR" />
    <field name="vkReleaseProfilingLockKHR" />
    <field name="vkGetPhysicalDeviceSurfaceCapabilities2KHR" />
    <field name="vkGetPhysicalDeviceSurfaceFormats2KHR" />
    <field name="vkGetPhysicalDeviceDisplayProperties2KHR" />
    <field name="vkGetPhysicalDeviceDisplayPlaneProperties2KHR" />
    <field name="vkGetDisplayModeProperties2KHR" />
    <field name="vkGetDisplayPlaneCapabilities2KHR" />
    <field name="vkCreateIOSSurfaceMVK_placeholder" />
    <field name="vkCreateMacOSSurfaceMVK_placeholder" />
    <field name="vkSetDebugUtilsObjectNameEXT" />
    <field name="vkSetDebugUtilsObjectTagEXT" />
    <field name="vkQueueBeginDebugUtilsLabelEXT" />
    <field name="vkQueueEndDebugUtilsLabelEXT" />
    <field name="vkQueueInsertDebugUtilsLabelEXT" />
    <field name="vkCmdBeginDebugUtilsLabelEXT" />
    <field name="vkCmdEndDebugUtilsLabelEXT" />
    <field name="vkCmdInsertDebugUtilsLabelEXT" />
    <field name="vkCreateDebugUtilsMessengerEXT" />
    <field name="vkDestroyDebugUtilsMessengerEXT" />
    <field name="vkSubmitDebugUtilsMessageEXT" />
    <field name="vkGetAndroidHardwareBufferPropertiesANDROID_placeholder" />
    <field name="vkGetMemoryAndroidHardwareBufferANDROID_placeholder" />
    <field name="vkCreateExecutionGraphPipelinesAMDX_placeholder" />
    <field name="vkGetExecutionGraphPipelineScratchSizeAMDX_placeholder" />
    <field name="vkGetExecutionGraphPipelineNodeIndexAMDX_placeholder" />
    <field name="vkCmdInitializeGraphScratchMemoryAMDX_placeholder" />
    <field name="vkCmdDispatchGraphAMDX_placeholder" />
    <field name="vkCmdDispatchGraphIndirectAMDX_placeholder" />
    <field name="vkCmdDispatchGraphIndirectCountAMDX_placeholder" />
    <field name="vkCmdSetSampleLocationsEXT" />
    <field name="vkGetPhysicalDeviceMultisamplePropertiesEXT" />
    <field name="vkGetImageMemoryRequirements2KHR" />
    <field name="vkGetBufferMemoryRequirements2KHR" />
    <field name="vkGetImageSparseMemoryRequirements2KHR" />
    <field name="vkCreateAccelerationStructureKHR" />
    <field name="vkDestroyAccelerationStructureKHR" />
    <field name="vkCmdBuildAccelerationStructuresKHR" />
    <field name="vkCmdBuildAccelerationStructuresIndirectKHR" />
    <field name="vkBuildAccelerationStructuresKHR" />
    <field name="vkCopyAccelerationStructureKHR" />
    <field name="vkCopyAccelerationStructureToMemoryKHR" />
    <field name="vkCopyMemoryToAccelerationStructureKHR" />
    <field name="vkWriteAccelerationStructuresPropertiesKHR" />
    <field name="vkCmdCopyAccelerationStructureKHR" />
    <field name="vkCmdCopyAccelerationStructureToMemoryKHR" />
    <field name="vkCmdCopyMemoryToAccelerationStructureKHR" />
    <field name="vkGetAccelerationStructureDeviceAddressKHR" />
    <field name="vkCmdWriteAccelerationStructuresPropertiesKHR" />
    <field name="vkGetDeviceAccelerationStructureCompatibilityKHR" />
    <field name="vkGetAccelerationStructureBuildSizesKHR" />
    <field name="vkCmdTraceRaysKHR" />
    <field name="vkCreateRayTracingPipelinesKHR" />
    <field name="vkGetRayTracingShaderGroupHandlesKHR" />
    <field name="vkGetRayTracingCaptureReplayShaderGroupHandlesKHR" />
    <field name="vkCmdTraceRaysIndirectKHR" />
    <field name="vkGetRayTracingShaderGroupStackSizeKHR" />
    <field name="vkCmdSetRayTracingPipelineStackSizeKHR" />
    <field name="vkCreateSamplerYcbcrConversionKHR" />
    <field name="vkDestroySamplerYcbcrConversionKHR" />
    <field name="vkBindBufferMemory2KHR" />
    <field name="vkBindImageMemory2KHR" />
    <field name="vkGetImageDrmFormatModifierPropertiesEXT" />
    <field name="vkCreateValidationCacheEXT" />
    <field name="vkDestroyValidationCacheEXT" />
    <field name="vkMergeValidationCachesEXT" />
    <field name="vkGetValidationCacheDataEXT" />
    <field name="vkCmdBindShadingRateImageNV" />
    <field name="vkCmdSetViewportShadingRatePaletteNV" />
    <field name="vkCmdSetCoarseSampleOrderNV" />
    <field name="vkCreateAccelerationStructureNV" />
    <field name="vkDestroyAccelerationStructureNV" />
    <field name="vkGetAccelerationStructureMemoryRequirementsNV" />
    <field name="vkBindAccelerationStructureMemoryNV" />
    <field name="vkCmdBuildAccelerationStructureNV" />
    <field name="vkCmdCopyAccelerationStructureNV" />
    <field name="vkCmdTraceRaysNV" />
    <field name="vkCreateRayTracingPipelinesNV" />
    <field name="vkGetRayTracingShaderGroupHandlesNV" />
    <field name="vkGetAccelerationStructureHandleNV" />
    <field name="vkCmdWriteAccelerationStructuresPropertiesNV" />
    <field name="vkCompileDeferredNV" />
    <field name="vkGetDescriptorSetLayoutSupportKHR" />
    <field name="vkCmdDrawIndirectCountKHR" />
    <field name="vkCmdDrawIndexedIndirectCountKHR" />
    <field name="vkGetMemoryHostPointerPropertiesEXT" />
    <field name="vkCmdWriteBufferMarkerAMD" />
    <field name="vkGetPhysicalDeviceCalibrateableTimeDomainsEXT" />
    <field name="vkGetCalibratedTimestampsEXT" />
    <field name="vkCmdDrawMeshTasksNV" />
    <field name="vkCmdDrawMeshTasksIndirectNV" />
    <field name="vkCmdDrawMeshTasksIndirectCountNV" />
    <field name="vkCmdSetExclusiveScissorEnableNV" />
    <field name="vkCmdSetExclusiveScissorNV" />
    <field name="vkCmdSetCheckpointNV" />
    <field name="vkGetQueueCheckpointDataNV" />
    <field name="vkGetSemaphoreCounterValueKHR" />
    <field name="vkWaitSemaphoresKHR" />
    <field name="vkSignalSemaphoreKHR" />
    <field name="vkInitializePerformanceApiINTEL" />
    <field name="vkUninitializePerformanceApiINTEL" />
    <field name="vkCmdSetPerformanceMarkerINTEL" />
    <field name="vkCmdSetPerformanceStreamMarkerINTEL" />
    <field name="vkCmdSetPerformanceOverrideINTEL" />
    <field name="vkAcquirePerformanceConfigurationINTEL" />
    <field name="vkReleasePerformanceConfigurationINTEL" />
    <field name="vkQueueSetPerformanceConfigurationINTEL" />
    <field name="vkGetPerformanceParameterINTEL" />
    <field name="vkSetLocalDimmingAMD" />
    <field name="vkCreateImagePipeSurfaceFUCHSIA_placeholder" />
    <field name="vkCreateMetalSurfaceEXT_placeholder" />
    <field name="vkGetPhysicalDeviceFragmentShadingRatesKHR" />
    <field name="vkCmdSetFragmentShadingRateKHR" />
    <field name="vkGetBufferDeviceAddressEXT" />
    <field name="vkGetPhysicalDeviceToolPropertiesEXT" />
    <field name="vkWaitForPresentKHR" />
    <field name="vkGetPhysicalDeviceCooperativeMatrixPropertiesNV" />
    <field name="vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV" />
    <field name="vkGetPhysicalDeviceSurfacePresentModes2EXT_placeholder" />
    <field name="vkAcquireFullScreenExclusiveModeEXT_placeholder" />
    <field name="vkReleaseFullScreenExclusiveModeEXT_placeholder" />
    <field name="vkGetDeviceGroupSurfacePresentModes2EXT_placeholder" />
    <field name="vkCreateHeadlessSurfaceEXT" />
    <field name="vkGetBufferDeviceAddressKHR" />
    <field name="vkGetBufferOpaqueCaptureAddressKHR" />
    <field name="vkGetDeviceMemoryOpaqueCaptureAddressKHR" />
    <field name="vkCmdSetLineStippleEXT" />
    <field name="vkResetQueryPoolEXT" />
    <field name="vkCmdSetCullModeEXT" />
    <field name="vkCmdSetFrontFaceEXT" />
    <field name="vkCmdSetPrimitiveTopologyEXT" />
    <field name="vkCmdSetViewportWithCountEXT" />
    <field name="vkCmdSetScissorWithCountEXT" />
    <field name="vkCmdBindVertexBuffers2EXT" />
    <field name="vkCmdSetDepthTestEnableEXT" />
    <field name="vkCmdSetDepthWriteEnableEXT" />
    <field name="vkCmdSetDepthCompareOpEXT" />
    <field name="vkCmdSetDepthBoundsTestEnableEXT" />
    <field name="vkCmdSetStencilTestEnableEXT" />
    <field name="vkCmdSetStencilOpEXT" />
    <field name="vkCreateDeferredOperationKHR" />
    <field name="vkDestroyDeferredOperationKHR" />
    <field name="vkGetDeferredOperationMaxConcurrencyKHR" />
    <field name="vkGetDeferredOperationResultKHR" />
    <field name="vkDeferredOperationJoinKHR" />
    <field name="vkGetPipelineExecutablePropertiesKHR" />
    <field name="vkGetPipelineExecutableStatisticsKHR" />
    <field name="vkGetPipelineExecutableInternalRepresentationsKHR" />
    <field name="vkCopyMemoryToImageEXT" />
    <field name="vkCopyImageToMemoryEXT" />
    <field name="vkCopyImageToImageEXT" />
    <field name="vkTransitionImageLayoutEXT" />
    <field name="vkGetImageSubresourceLayout2EXT" />
    <field name="vkMapMemory2KHR" />
    <field name="vkUnmapMemory2KHR" />
    <field name="vkReleaseSwapchainImagesEXT" />
    <field name="vkGetGeneratedCommandsMemoryRequirementsNV" />
    <field name="vkCmdPreprocessGeneratedCommandsNV" />
    <field name="vkCmdExecuteGeneratedCommandsNV" />
    <field name="vkCmdBindPipelineShaderGroupNV" />
    <field name="vkCreateIndirectCommandsLayoutNV" />
    <field name="vkDestroyIndirectCommandsLayoutNV" />
    <field name="vkCmdSetDepthBias2EXT" />
    <field name="vkAcquireDrmDisplayEXT" />
    <field name="vkGetDrmDisplayEXT" />
    <field name="vkCreatePrivateDataSlotEXT" />
    <field name="vkDestroyPrivateDataSlotEXT" />
    <field name="vkSetPrivateDataEXT" />
    <field name="vkGetPrivateDataEXT" />
    <field name="vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR" />
    <field name="vkGetEncodedVideoSessionParametersKHR" />
    <field name="vkCmdEncodeVideoKHR" />
    <field name="vkCreateCudaModuleNV_placeholder" />
    <field name="vkGetCudaModuleCacheNV_placeholder" />
    <field name="vkCreateCudaFunctionNV_placeholder" />
    <field name="vkDestroyCudaModuleNV_placeholder" />
    <field name="vkDestroyCudaFunctionNV_placeholder" />
    <field name="vkCmdCudaLaunchKernelNV_placeholder" />
    <field name="vkExportMetalObjectsEXT_placeholder" />
    <field name="vkCmdSetEvent2KHR" />
    <field name="vkCmdResetEvent2KHR" />
    <field name="vkCmdWaitEvents2KHR" />
    <field name="vkCmdPipelineBarrier2KHR" />
    <field name="vkCmdWriteTimestamp2KHR" />
    <field name="vkQueueSubmit2KHR" />
    <field name="vkCmdWriteBufferMarker2AMD" />
    <field name="vkGetQueueCheckpointData2NV" />
    <field name="vkGetDescriptorSetLayoutSizeEXT" />
    <field name="vkGetDescriptorSetLayoutBindingOffsetEXT" />
    <field name="vkGetDescriptorEXT" />
    <field name="vkCmdBindDescriptorBuffersEXT" />
    <field name="vkCmdSetDescriptorBufferOffsetsEXT" />
    <field name="vkCmdBindDescriptorBufferEmbeddedSamplersEXT" />
    <field name="vkGetBufferOpaqueCaptureDescriptorDataEXT" />
    <field name="vkGetImageOpaqueCaptureDescriptorDataEXT" />
    <field name="vkGetImageViewOpaqueCaptureDescriptorDataEXT" />
    <field name="vkGetSamplerOpaqueCaptureDescriptorDataEXT" />
    <field name="vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT" />
    <field name="vkCmdSetFragmentShadingRateEnumNV" />
    <field name="vkCmdDrawMeshTasksEXT" />
    <field name="vkCmdDrawMeshTasksIndirectEXT" />
    <field name="vkCmdDrawMeshTasksIndirectCountEXT" />
    <field name="vkCmdCopyBuffer2KHR" />
    <field name="vkCmdCopyImage2KHR" />
    <field name="vkCmdCopyBufferToImage2KHR" />
    <field name="vkCmdCopyImageToBuffer2KHR" />
    <field name="vkCmdBlitImage2KHR" />
    <field name="vkCmdResolveImage2KHR" />
    <field name="vkGetDeviceFaultInfoEXT" />
    <field name="vkAcquireWinrtDisplayNV_placeholder" />
    <field name="vkGetWinrtDisplayNV_placeholder" />
    <field name="vkCreateDirectFBSurfaceEXT_placeholder" />
    <field name="vkGetPhysicalDeviceDirectFBPresentationSupportEXT_placeholder" />
    <field name="vkCmdSetVertexInputEXT" />
    <field name="vkGetMemoryZirconHandleFUCHSIA_placeholder" />
    <field name="vkGetMemoryZirconHandlePropertiesFUCHSIA_placeholder" />
    <field name="vkImportSemaphoreZirconHandleFUCHSIA_placeholder" />
    <field name="vkGetSemaphoreZirconHandleFUCHSIA_placeholder" />
    <field name="vkCreateBufferCollectionFUCHSIA_placeholder" />
    <field name="vkSetBufferCollectionImageConstraintsFUCHSIA_placeholder" />
    <field name="vkSetBufferCollectionBufferConstraintsFUCHSIA_placeholder" />
    <field name="vkDestroyBufferCollectionFUCHSIA_placeholder" />
    <field name="vkGetBufferCollectionPropertiesFUCHSIA_placeholder" />
    <field name="vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI" />
    <field name="vkCmdSubpassShadingHUAWEI" />
    <field name="vkCmdBindInvocationMaskHUAWEI" />
    <field name="vkGetMemoryRemoteAddressNV" />
    <field name="vkGetPipelinePropertiesEXT" />
    <field name="vkCmdSetPatchControlPointsEXT" />
    <field name="vkCmdSetRasterizerDiscardEnableEXT" />
    <field name="vkCmdSetDepthBiasEnableEXT" />
    <field name="vkCmdSetLogicOpEXT" />
    <field name="vkCmdSetPrimitiveRestartEnableEXT" />
    <field name="vkCreateScreenSurfaceQNX_placeholder" />
    <field name="vkGetPhysicalDeviceScreenPresentationSupportQNX_placeholder" />
    <field name="vkCmdSetColorWriteEnableEXT" />
    <field name="vkCmdTraceRaysIndirect2KHR" />
    <field name="vkCmdDrawMultiEXT" />
    <field name="vkCmdDrawMultiIndexedEXT" />
    <field name="vkCreateMicromapEXT" />
    <field name="vkDestroyMicromapEXT" />
    <field name="vkCmdBuildMicromapsEXT" />
    <field name="vkBuildMicromapsEXT" />
    <field name="vkCopyMicromapEXT" />
    <field name="vkCopyMicromapToMemoryEXT" />
    <field name="vkCopyMemoryToMicromapEXT" />
    <field name="vkWriteMicromapsPropertiesEXT" />
    <field name="vkCmdCopyMicromapEXT" />
    <field name="vkCmdCopyMicromapToMemoryEXT" />
    <field name="vkCmdCopyMemoryToMicromapEXT" />
    <field name="vkCmdWriteMicromapsPropertiesEXT" />
    <field name="vkGetDeviceMicromapCompatibilityEXT" />
    <field name="vkGetMicromapBuildSizesEXT" />
    <field name="vkCmdDrawClusterHUAWEI" />
    <field name="vkCmdDrawClusterIndirectHUAWEI" />
    <field name="vkSetDeviceMemoryPriorityEXT" />
    <field name="vkGetDeviceBufferMemoryRequirementsKHR" />
    <field name="vkGetDeviceImageMemoryRequirementsKHR" />
    <field name="vkGetDeviceImageSparseMemoryRequirementsKHR" />
    <field name="vkGetDescriptorSetLayoutHostMappingInfoVALVE" />
    <field name="vkGetDescriptorSetHostMappingVALVE" />
    <field name="vkCmdCopyMemoryIndirectNV" />
    <field name="vkCmdCopyMemoryToImageIndirectNV" />
    <field name="vkCmdDecompressMemoryNV" />
    <field name="vkCmdDecompressMemoryIndirectCountNV" />
    <field name="vkGetPipelineIndirectMemoryRequirementsNV" />
    <field name="vkCmdUpdatePipelineIndirectBufferNV" />
    <field name="vkGetPipelineIndirectDeviceAddressNV" />
    <field name="vkCmdSetTessellationDomainOriginEXT" />
    <field name="vkCmdSetDepthClampEnableEXT" />
    <field name="vkCmdSetPolygonModeEXT" />
    <field name="vkCmdSetRasterizationSamplesEXT" />
    <field name="vkCmdSetSampleMaskEXT" />
    <field name="vkCmdSetAlphaToCoverageEnableEXT" />
    <field name="vkCmdSetAlphaToOneEnableEXT" />
    <field name="vkCmdSetLogicOpEnableEXT" />
    <field name="vkCmdSetColorBlendEnableEXT" />
    <field name="vkCmdSetColorBlendEquationEXT" />
    <field name="vkCmdSetColorWriteMaskEXT" />
    <field name="vkCmdSetRasterizationStreamEXT" />
    <field name="vkCmdSetConservativeRasterizationModeEXT" />
    <field name="vkCmdSetExtraPrimitiveOverestimationSizeEXT" />
    <field name="vkCmdSetDepthClipEnableEXT" />
    <field name="vkCmdSetSampleLocationsEnableEXT" />
    <field name="vkCmdSetColorBlendAdvancedEXT" />
    <field name="vkCmdSetProvokingVertexModeEXT" />
    <field name="vkCmdSetLineRasterizationModeEXT" />
    <field name="vkCmdSetLineStippleEnableEXT" />
    <field name="vkCmdSetDepthClipNegativeOneToOneEXT" />
    <field name="vkCmdSetViewportWScalingEnableNV" />
    <field name="vkCmdSetViewportSwizzleNV" />
    <field name="vkCmdSetCoverageToColorEnableNV" />
    <field name="vkCmdSetCoverageToColorLocationNV" />
    <field name="vkCmdSetCoverageModulationModeNV" />
    <field name="vkCmdSetCoverageModulationTableEnableNV" />
    <field name="vkCmdSetCoverageModulationTableNV" />
    <field name="vkCmdSetShadingRateImageEnableNV" />
    <field name="vkCmdSetRepresentativeFragmentTestEnableNV" />
    <field name="vkCmdSetCoverageReductionModeNV" />
    <field name="vkGetShaderModuleIdentifierEXT" />
    <field name="vkGetShaderModuleCreateInfoIdentifierEXT" />
    <field name="vkGetPhysicalDeviceOpticalFlowImageFormatsNV" />
    <field name="vkCreateOpticalFlowSessionNV" />
    <field name="vkDestroyOpticalFlowSessionNV" />
    <field name="vkBindOpticalFlowSessionImageNV" />
    <field name="vkCmdOpticalFlowExecuteNV" />
    <field name="vkCmdBindIndexBuffer2KHR" />
    <field name="vkGetRenderingAreaGranularityKHR" />
    <field name="vkGetDeviceImageSubresourceLayoutKHR" />
    <field name="vkGetImageSubresourceLayout2KHR" />
    <field name="vkCreateShadersEXT" />
    <field name="vkDestroyShaderEXT" />
    <field name="vkGetShaderBinaryDataEXT" />
    <field name="vkCmdBindShadersEXT" />
    <field name="vkGetFramebufferTilePropertiesQCOM" />
    <field name="vkGetDynamicRenderingTilePropertiesQCOM" />
    <field name="vkSetLatencySleepModeNV" />
    <field name="vkLatencySleepNV" />
    <field name="vkSetLatencyMarkerNV" />
    <field name="vkGetLatencyTimingsNV" />
    <field name="vkQueueNotifyOutOfBandNV" />
    <field name="vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR" />
    <field name="vkCmdSetAttachmentFeedbackLoopEnableEXT" />
    <field name="vkGetScreenBufferPropertiesQNX_placeholder" />
    <field name="vkGetPhysicalDeviceCalibrateableTimeDomainsKHR" />
    <field name="vkGetCalibratedTimestampsKHR" />
    <field name="vkCmdBindDescriptorSets2KHR" />
    <field name="vkCmdPushConstants2KHR" />
    <field name="vkCmdPushDescriptorSet2KHR" />
    <field name="vkCmdPushDescriptorSetWithTemplate2KHR" />
    <field name="vkCmdSetDescriptorBufferOffsets2EXT" />
    <field name="vkCmdBindDescriptorBufferEmbeddedSamplers2EXT" />
    <constructor name="DispatchLoaderDynamic" />
    <constructor name="DispatchLoaderDynamic">
      <argument name="rhs" type="const DispatchLoaderDynamic &amp;" />
    </constructor>
    <constructor name="DispatchLoaderDynamic">
      <argument name="getInstanceProcAddr" type="PFN_vkGetInstanceProcAddr" />
    </constructor>
    <constructor name="DispatchLoaderDynamic">
      <argument name="instance" type="VkInstance" />
      <argument name="getInstanceProcAddr" type="PFN_vkGetInstanceProcAddr" />
      <argument name="device" type="VkDevice" default_raw="{}" />
      <argument name="getDeviceProcAddr" type="PFN_vkGetDeviceProcAddr" default_raw="nullptr" />
    </constructor>
    <method name="init" template_raw="template &lt;typename DynamicLoader #if VULKAN_HPP_ENABLE_DYNAMIC_LOADER_TOOL = VULKAN_HPP_NAMESPACE::DynamicLoader #endif &gt;" />
    <method name="init" template_raw="template &lt;typename DynamicLoader&gt;" />
    <method name="init">
      <argument name="getInstanceProcAddr" type="PFN_vkGetInstanceProcAddr" />
    </method>
    <method name="init">
      <argument name="instance" type="VkInstance" />
      <argument name="getInstanceProcAddr" type="PFN_vkGetInstanceProcAddr" />
      <argument name="device" type="VkDevice" default_raw="{}" />
      <argument name="" type="PFN_vkGetDeviceProcAddr" default_raw="nullptr" />
    </method>
    <method name="init">
      <argument name="instanceCpp" type="vk::Instance" />
    </method>
    <method name="init">
      <argument name="deviceCpp" type="vk::Device" />
    </method>
    <method name="init" template_raw="template &lt;typename DynamicLoader&gt;" />
    <method name="init" template_raw="template &lt;typename DynamicLoader #if VULKAN_HPP_ENABLE_DYNAMIC_LOADER_TOOL = VULKAN_HPP_NAMESPACE::DynamicLoader #endif &gt;" />
  </class>
  <class name="Flags" namespace="vk" filename="vulkan/vulkan_enums.hpp" template_raw="template &lt;typename BitType&gt;">
    <constructor name="Flags&lt;BitType&gt;" />
    <constructor name="Flags&lt;BitType&gt;">
      <argument name="bit" type="BitType" />
    </constructor>
    <constructor name="Flags&lt;BitType&gt;">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </constructor>
    <constructor name="Flags&lt;BitType&gt;">
      <argument name="flags" type="MaskType" />
    </constructor>
    <method name="operator&lt;">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator&lt;=">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator&gt;">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator&gt;=">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator!" />
    <method name="operator&amp;">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator|">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator^">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator~" />
    <method name="operator=">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator|=">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator&amp;=">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <method name="operator^=">
      <argument name="rhs" type="const Flags&lt;BitType&gt; &amp;" />
    </method>
    <conversion_function name="operator bool" />
    <conversion_function name="operator typename underlying_type&lt;type-parameter-0-0&gt;::type" />
  </class>
  <class name="FlagTraits" namespace="vk" filename="vulkan/vulkan_enums.hpp" template_raw="template &lt;typename FlagBitsType&gt;" />
  <class name="DispatchLoaderStatic" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="DispatchLoaderBase" />
    <method name="vkCreateInstance">
      <argument name="pCreateInfo" type="const VkInstanceCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pInstance" type="VkInstance *" />
    </method>
    <method name="vkDestroyInstance">
      <argument name="instance" type="VkInstance" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkEnumeratePhysicalDevices">
      <argument name="instance" type="VkInstance" />
      <argument name="pPhysicalDeviceCount" type="uint32_t *" />
      <argument name="pPhysicalDevices" type="VkPhysicalDevice *" />
    </method>
    <method name="vkGetPhysicalDeviceFeatures">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFeatures" type="VkPhysicalDeviceFeatures *" />
    </method>
    <method name="vkGetPhysicalDeviceFormatProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="pFormatProperties" type="VkFormatProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceImageFormatProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="type" type="VkImageType" />
      <argument name="tiling" type="VkImageTiling" />
      <argument name="usage" type="VkImageUsageFlags" />
      <argument name="flags" type="VkImageCreateFlags" />
      <argument name="pImageFormatProperties" type="VkImageFormatProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pProperties" type="VkPhysicalDeviceProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceQueueFamilyProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pQueueFamilyPropertyCount" type="uint32_t *" />
      <argument name="pQueueFamilyProperties" type="VkQueueFamilyProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceMemoryProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pMemoryProperties" type="VkPhysicalDeviceMemoryProperties *" />
    </method>
    <method name="vkGetInstanceProcAddr">
      <argument name="instance" type="VkInstance" />
      <argument name="pName" type="const char *" />
    </method>
    <method name="vkGetDeviceProcAddr">
      <argument name="device" type="VkDevice" />
      <argument name="pName" type="const char *" />
    </method>
    <method name="vkCreateDevice">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pCreateInfo" type="const VkDeviceCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pDevice" type="VkDevice *" />
    </method>
    <method name="vkDestroyDevice">
      <argument name="device" type="VkDevice" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkEnumerateInstanceExtensionProperties">
      <argument name="pLayerName" type="const char *" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkExtensionProperties *" />
    </method>
    <method name="vkEnumerateDeviceExtensionProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pLayerName" type="const char *" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkExtensionProperties *" />
    </method>
    <method name="vkEnumerateInstanceLayerProperties">
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkLayerProperties *" />
    </method>
    <method name="vkEnumerateDeviceLayerProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkLayerProperties *" />
    </method>
    <method name="vkGetDeviceQueue">
      <argument name="device" type="VkDevice" />
      <argument name="queueFamilyIndex" type="uint32_t" />
      <argument name="queueIndex" type="uint32_t" />
      <argument name="pQueue" type="VkQueue *" />
    </method>
    <method name="vkQueueSubmit">
      <argument name="queue" type="VkQueue" />
      <argument name="submitCount" type="uint32_t" />
      <argument name="pSubmits" type="const VkSubmitInfo *" />
      <argument name="fence" type="VkFence" />
    </method>
    <method name="vkQueueWaitIdle">
      <argument name="queue" type="VkQueue" />
    </method>
    <method name="vkDeviceWaitIdle">
      <argument name="device" type="VkDevice" />
    </method>
    <method name="vkAllocateMemory">
      <argument name="device" type="VkDevice" />
      <argument name="pAllocateInfo" type="const VkMemoryAllocateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pMemory" type="VkDeviceMemory *" />
    </method>
    <method name="vkFreeMemory">
      <argument name="device" type="VkDevice" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkMapMemory">
      <argument name="device" type="VkDevice" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="size" type="VkDeviceSize" />
      <argument name="flags" type="VkMemoryMapFlags" />
      <argument name="ppData" type="void **" />
    </method>
    <method name="vkUnmapMemory">
      <argument name="device" type="VkDevice" />
      <argument name="memory" type="VkDeviceMemory" />
    </method>
    <method name="vkFlushMappedMemoryRanges">
      <argument name="device" type="VkDevice" />
      <argument name="memoryRangeCount" type="uint32_t" />
      <argument name="pMemoryRanges" type="const VkMappedMemoryRange *" />
    </method>
    <method name="vkInvalidateMappedMemoryRanges">
      <argument name="device" type="VkDevice" />
      <argument name="memoryRangeCount" type="uint32_t" />
      <argument name="pMemoryRanges" type="const VkMappedMemoryRange *" />
    </method>
    <method name="vkGetDeviceMemoryCommitment">
      <argument name="device" type="VkDevice" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="pCommittedMemoryInBytes" type="VkDeviceSize *" />
    </method>
    <method name="vkBindBufferMemory">
      <argument name="device" type="VkDevice" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="memoryOffset" type="VkDeviceSize" />
    </method>
    <method name="vkBindImageMemory">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="memoryOffset" type="VkDeviceSize" />
    </method>
    <method name="vkGetBufferMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements *" />
    </method>
    <method name="vkGetImageMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements *" />
    </method>
    <method name="vkGetImageSparseMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pSparseMemoryRequirementCount" type="uint32_t *" />
      <argument name="pSparseMemoryRequirements" type="VkSparseImageMemoryRequirements *" />
    </method>
    <method name="vkGetPhysicalDeviceSparseImageFormatProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="type" type="VkImageType" />
      <argument name="samples" type="VkSampleCountFlagBits" />
      <argument name="usage" type="VkImageUsageFlags" />
      <argument name="tiling" type="VkImageTiling" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkSparseImageFormatProperties *" />
    </method>
    <method name="vkQueueBindSparse">
      <argument name="queue" type="VkQueue" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfo" type="const VkBindSparseInfo *" />
      <argument name="fence" type="VkFence" />
    </method>
    <method name="vkCreateFence">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkFenceCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pFence" type="VkFence *" />
    </method>
    <method name="vkDestroyFence">
      <argument name="device" type="VkDevice" />
      <argument name="fence" type="VkFence" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkResetFences">
      <argument name="device" type="VkDevice" />
      <argument name="fenceCount" type="uint32_t" />
      <argument name="pFences" type="const VkFence *" />
    </method>
    <method name="vkGetFenceStatus">
      <argument name="device" type="VkDevice" />
      <argument name="fence" type="VkFence" />
    </method>
    <method name="vkWaitForFences">
      <argument name="device" type="VkDevice" />
      <argument name="fenceCount" type="uint32_t" />
      <argument name="pFences" type="const VkFence *" />
      <argument name="waitAll" type="VkBool32" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="vkCreateSemaphore">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkSemaphoreCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSemaphore" type="VkSemaphore *" />
    </method>
    <method name="vkDestroySemaphore">
      <argument name="device" type="VkDevice" />
      <argument name="semaphore" type="VkSemaphore" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateEvent">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkEventCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pEvent" type="VkEvent *" />
    </method>
    <method name="vkDestroyEvent">
      <argument name="device" type="VkDevice" />
      <argument name="event" type="VkEvent" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetEventStatus">
      <argument name="device" type="VkDevice" />
      <argument name="event" type="VkEvent" />
    </method>
    <method name="vkSetEvent">
      <argument name="device" type="VkDevice" />
      <argument name="event" type="VkEvent" />
    </method>
    <method name="vkResetEvent">
      <argument name="device" type="VkDevice" />
      <argument name="event" type="VkEvent" />
    </method>
    <method name="vkCreateQueryPool">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkQueryPoolCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pQueryPool" type="VkQueryPool *" />
    </method>
    <method name="vkDestroyQueryPool">
      <argument name="device" type="VkDevice" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetQueryPoolResults">
      <argument name="device" type="VkDevice" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
      <argument name="stride" type="VkDeviceSize" />
      <argument name="flags" type="VkQueryResultFlags" />
    </method>
    <method name="vkCreateBuffer">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkBufferCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pBuffer" type="VkBuffer *" />
    </method>
    <method name="vkDestroyBuffer">
      <argument name="device" type="VkDevice" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateBufferView">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkBufferViewCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pView" type="VkBufferView *" />
    </method>
    <method name="vkDestroyBufferView">
      <argument name="device" type="VkDevice" />
      <argument name="bufferView" type="VkBufferView" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateImage">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkImageCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pImage" type="VkImage *" />
    </method>
    <method name="vkDestroyImage">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetImageSubresourceLayout">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pSubresource" type="const VkImageSubresource *" />
      <argument name="pLayout" type="VkSubresourceLayout *" />
    </method>
    <method name="vkCreateImageView">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkImageViewCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pView" type="VkImageView *" />
    </method>
    <method name="vkDestroyImageView">
      <argument name="device" type="VkDevice" />
      <argument name="imageView" type="VkImageView" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateShaderModule">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkShaderModuleCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pShaderModule" type="VkShaderModule *" />
    </method>
    <method name="vkDestroyShaderModule">
      <argument name="device" type="VkDevice" />
      <argument name="shaderModule" type="VkShaderModule" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreatePipelineCache">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkPipelineCacheCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelineCache" type="VkPipelineCache *" />
    </method>
    <method name="vkDestroyPipelineCache">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetPipelineCacheData">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="pDataSize" type="size_t *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkMergePipelineCaches">
      <argument name="device" type="VkDevice" />
      <argument name="dstCache" type="VkPipelineCache" />
      <argument name="srcCacheCount" type="uint32_t" />
      <argument name="pSrcCaches" type="const VkPipelineCache *" />
    </method>
    <method name="vkCreateGraphicsPipelines">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="createInfoCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkGraphicsPipelineCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelines" type="VkPipeline *" />
    </method>
    <method name="vkCreateComputePipelines">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="createInfoCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkComputePipelineCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelines" type="VkPipeline *" />
    </method>
    <method name="vkDestroyPipeline">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreatePipelineLayout">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkPipelineLayoutCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelineLayout" type="VkPipelineLayout *" />
    </method>
    <method name="vkDestroyPipelineLayout">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineLayout" type="VkPipelineLayout" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateSampler">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkSamplerCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSampler" type="VkSampler *" />
    </method>
    <method name="vkDestroySampler">
      <argument name="device" type="VkDevice" />
      <argument name="sampler" type="VkSampler" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateDescriptorSetLayout">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorSetLayoutCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSetLayout" type="VkDescriptorSetLayout *" />
    </method>
    <method name="vkDestroyDescriptorSetLayout">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorSetLayout" type="VkDescriptorSetLayout" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateDescriptorPool">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorPoolCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pDescriptorPool" type="VkDescriptorPool *" />
    </method>
    <method name="vkDestroyDescriptorPool">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorPool" type="VkDescriptorPool" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkResetDescriptorPool">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorPool" type="VkDescriptorPool" />
      <argument name="flags" type="VkDescriptorPoolResetFlags" />
    </method>
    <method name="vkAllocateDescriptorSets">
      <argument name="device" type="VkDevice" />
      <argument name="pAllocateInfo" type="const VkDescriptorSetAllocateInfo *" />
      <argument name="pDescriptorSets" type="VkDescriptorSet *" />
    </method>
    <method name="vkFreeDescriptorSets">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorPool" type="VkDescriptorPool" />
      <argument name="descriptorSetCount" type="uint32_t" />
      <argument name="pDescriptorSets" type="const VkDescriptorSet *" />
    </method>
    <method name="vkUpdateDescriptorSets">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorWriteCount" type="uint32_t" />
      <argument name="pDescriptorWrites" type="const VkWriteDescriptorSet *" />
      <argument name="descriptorCopyCount" type="uint32_t" />
      <argument name="pDescriptorCopies" type="const VkCopyDescriptorSet *" />
    </method>
    <method name="vkCreateFramebuffer">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkFramebufferCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pFramebuffer" type="VkFramebuffer *" />
    </method>
    <method name="vkDestroyFramebuffer">
      <argument name="device" type="VkDevice" />
      <argument name="framebuffer" type="VkFramebuffer" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateRenderPass">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkRenderPassCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pRenderPass" type="VkRenderPass *" />
    </method>
    <method name="vkDestroyRenderPass">
      <argument name="device" type="VkDevice" />
      <argument name="renderPass" type="VkRenderPass" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetRenderAreaGranularity">
      <argument name="device" type="VkDevice" />
      <argument name="renderPass" type="VkRenderPass" />
      <argument name="pGranularity" type="VkExtent2D *" />
    </method>
    <method name="vkCreateCommandPool">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkCommandPoolCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pCommandPool" type="VkCommandPool *" />
    </method>
    <method name="vkDestroyCommandPool">
      <argument name="device" type="VkDevice" />
      <argument name="commandPool" type="VkCommandPool" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkResetCommandPool">
      <argument name="device" type="VkDevice" />
      <argument name="commandPool" type="VkCommandPool" />
      <argument name="flags" type="VkCommandPoolResetFlags" />
    </method>
    <method name="vkAllocateCommandBuffers">
      <argument name="device" type="VkDevice" />
      <argument name="pAllocateInfo" type="const VkCommandBufferAllocateInfo *" />
      <argument name="pCommandBuffers" type="VkCommandBuffer *" />
    </method>
    <method name="vkFreeCommandBuffers">
      <argument name="device" type="VkDevice" />
      <argument name="commandPool" type="VkCommandPool" />
      <argument name="commandBufferCount" type="uint32_t" />
      <argument name="pCommandBuffers" type="const VkCommandBuffer *" />
    </method>
    <method name="vkBeginCommandBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBeginInfo" type="const VkCommandBufferBeginInfo *" />
    </method>
    <method name="vkEndCommandBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkResetCommandBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="flags" type="VkCommandBufferResetFlags" />
    </method>
    <method name="vkCmdBindPipeline">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="pipeline" type="VkPipeline" />
    </method>
    <method name="vkCmdSetViewport">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstViewport" type="uint32_t" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pViewports" type="const VkViewport *" />
    </method>
    <method name="vkCmdSetScissor">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstScissor" type="uint32_t" />
      <argument name="scissorCount" type="uint32_t" />
      <argument name="pScissors" type="const VkRect2D *" />
    </method>
    <method name="vkCmdSetLineWidth">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="lineWidth" type="float" />
    </method>
    <method name="vkCmdSetDepthBias">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthBiasConstantFactor" type="float" />
      <argument name="depthBiasClamp" type="float" />
      <argument name="depthBiasSlopeFactor" type="float" />
    </method>
    <method name="vkCmdSetBlendConstants">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="blendConstants" type="const float[4]" />
    </method>
    <method name="vkCmdSetDepthBounds">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="minDepthBounds" type="float" />
      <argument name="maxDepthBounds" type="float" />
    </method>
    <method name="vkCmdSetStencilCompareMask">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="faceMask" type="VkStencilFaceFlags" />
      <argument name="compareMask" type="uint32_t" />
    </method>
    <method name="vkCmdSetStencilWriteMask">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="faceMask" type="VkStencilFaceFlags" />
      <argument name="writeMask" type="uint32_t" />
    </method>
    <method name="vkCmdSetStencilReference">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="faceMask" type="VkStencilFaceFlags" />
      <argument name="reference" type="uint32_t" />
    </method>
    <method name="vkCmdBindDescriptorSets">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="firstSet" type="uint32_t" />
      <argument name="descriptorSetCount" type="uint32_t" />
      <argument name="pDescriptorSets" type="const VkDescriptorSet *" />
      <argument name="dynamicOffsetCount" type="uint32_t" />
      <argument name="pDynamicOffsets" type="const uint32_t *" />
    </method>
    <method name="vkCmdBindIndexBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="indexType" type="VkIndexType" />
    </method>
    <method name="vkCmdBindVertexBuffers">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstBinding" type="uint32_t" />
      <argument name="bindingCount" type="uint32_t" />
      <argument name="pBuffers" type="const VkBuffer *" />
      <argument name="pOffsets" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdDraw">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="vertexCount" type="uint32_t" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstVertex" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndexed">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="indexCount" type="uint32_t" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstIndex" type="uint32_t" />
      <argument name="vertexOffset" type="int32_t" />
      <argument name="firstInstance" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndirect">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndexedIndirect">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDispatch">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="vkCmdDispatchIndirect">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
    </method>
    <method name="vkCmdCopyBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcBuffer" type="VkBuffer" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkBufferCopy *" />
    </method>
    <method name="vkCmdCopyImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcImage" type="VkImage" />
      <argument name="srcImageLayout" type="VkImageLayout" />
      <argument name="dstImage" type="VkImage" />
      <argument name="dstImageLayout" type="VkImageLayout" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkImageCopy *" />
    </method>
    <method name="vkCmdBlitImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcImage" type="VkImage" />
      <argument name="srcImageLayout" type="VkImageLayout" />
      <argument name="dstImage" type="VkImage" />
      <argument name="dstImageLayout" type="VkImageLayout" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkImageBlit *" />
      <argument name="filter" type="VkFilter" />
    </method>
    <method name="vkCmdCopyBufferToImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcBuffer" type="VkBuffer" />
      <argument name="dstImage" type="VkImage" />
      <argument name="dstImageLayout" type="VkImageLayout" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkBufferImageCopy *" />
    </method>
    <method name="vkCmdCopyImageToBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcImage" type="VkImage" />
      <argument name="srcImageLayout" type="VkImageLayout" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkBufferImageCopy *" />
    </method>
    <method name="vkCmdUpdateBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="dstOffset" type="VkDeviceSize" />
      <argument name="dataSize" type="VkDeviceSize" />
      <argument name="pData" type="const void *" />
    </method>
    <method name="vkCmdFillBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="dstOffset" type="VkDeviceSize" />
      <argument name="size" type="VkDeviceSize" />
      <argument name="data" type="uint32_t" />
    </method>
    <method name="vkCmdClearColorImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="image" type="VkImage" />
      <argument name="imageLayout" type="VkImageLayout" />
      <argument name="pColor" type="const VkClearColorValue *" />
      <argument name="rangeCount" type="uint32_t" />
      <argument name="pRanges" type="const VkImageSubresourceRange *" />
    </method>
    <method name="vkCmdClearDepthStencilImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="image" type="VkImage" />
      <argument name="imageLayout" type="VkImageLayout" />
      <argument name="pDepthStencil" type="const VkClearDepthStencilValue *" />
      <argument name="rangeCount" type="uint32_t" />
      <argument name="pRanges" type="const VkImageSubresourceRange *" />
    </method>
    <method name="vkCmdClearAttachments">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pAttachments" type="const VkClearAttachment *" />
      <argument name="rectCount" type="uint32_t" />
      <argument name="pRects" type="const VkClearRect *" />
    </method>
    <method name="vkCmdResolveImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcImage" type="VkImage" />
      <argument name="srcImageLayout" type="VkImageLayout" />
      <argument name="dstImage" type="VkImage" />
      <argument name="dstImageLayout" type="VkImageLayout" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkImageResolve *" />
    </method>
    <method name="vkCmdSetEvent">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="stageMask" type="VkPipelineStageFlags" />
    </method>
    <method name="vkCmdResetEvent">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="stageMask" type="VkPipelineStageFlags" />
    </method>
    <method name="vkCmdWaitEvents">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="eventCount" type="uint32_t" />
      <argument name="pEvents" type="const VkEvent *" />
      <argument name="srcStageMask" type="VkPipelineStageFlags" />
      <argument name="dstStageMask" type="VkPipelineStageFlags" />
      <argument name="memoryBarrierCount" type="uint32_t" />
      <argument name="pMemoryBarriers" type="const VkMemoryBarrier *" />
      <argument name="bufferMemoryBarrierCount" type="uint32_t" />
      <argument name="pBufferMemoryBarriers" type="const VkBufferMemoryBarrier *" />
      <argument name="imageMemoryBarrierCount" type="uint32_t" />
      <argument name="pImageMemoryBarriers" type="const VkImageMemoryBarrier *" />
    </method>
    <method name="vkCmdPipelineBarrier">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcStageMask" type="VkPipelineStageFlags" />
      <argument name="dstStageMask" type="VkPipelineStageFlags" />
      <argument name="dependencyFlags" type="VkDependencyFlags" />
      <argument name="memoryBarrierCount" type="uint32_t" />
      <argument name="pMemoryBarriers" type="const VkMemoryBarrier *" />
      <argument name="bufferMemoryBarrierCount" type="uint32_t" />
      <argument name="pBufferMemoryBarriers" type="const VkBufferMemoryBarrier *" />
      <argument name="imageMemoryBarrierCount" type="uint32_t" />
      <argument name="pImageMemoryBarriers" type="const VkImageMemoryBarrier *" />
    </method>
    <method name="vkCmdBeginQuery">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
      <argument name="flags" type="VkQueryControlFlags" />
    </method>
    <method name="vkCmdEndQuery">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="vkCmdResetQueryPool">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
    </method>
    <method name="vkCmdWriteTimestamp">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineStage" type="VkPipelineStageFlagBits" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="vkCmdCopyQueryPoolResults">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="dstOffset" type="VkDeviceSize" />
      <argument name="stride" type="VkDeviceSize" />
      <argument name="flags" type="VkQueryResultFlags" />
    </method>
    <method name="vkCmdPushConstants">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="stageFlags" type="VkShaderStageFlags" />
      <argument name="offset" type="uint32_t" />
      <argument name="size" type="uint32_t" />
      <argument name="pValues" type="const void *" />
    </method>
    <method name="vkCmdBeginRenderPass">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRenderPassBegin" type="const VkRenderPassBeginInfo *" />
      <argument name="contents" type="VkSubpassContents" />
    </method>
    <method name="vkCmdNextSubpass">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="contents" type="VkSubpassContents" />
    </method>
    <method name="vkCmdEndRenderPass">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCmdExecuteCommands">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="commandBufferCount" type="uint32_t" />
      <argument name="pCommandBuffers" type="const VkCommandBuffer *" />
    </method>
    <method name="vkEnumerateInstanceVersion">
      <argument name="pApiVersion" type="uint32_t *" />
    </method>
    <method name="vkBindBufferMemory2">
      <argument name="device" type="VkDevice" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfos" type="const VkBindBufferMemoryInfo *" />
    </method>
    <method name="vkBindImageMemory2">
      <argument name="device" type="VkDevice" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfos" type="const VkBindImageMemoryInfo *" />
    </method>
    <method name="vkGetDeviceGroupPeerMemoryFeatures">
      <argument name="device" type="VkDevice" />
      <argument name="heapIndex" type="uint32_t" />
      <argument name="localDeviceIndex" type="uint32_t" />
      <argument name="remoteDeviceIndex" type="uint32_t" />
      <argument name="pPeerMemoryFeatures" type="VkPeerMemoryFeatureFlags *" />
    </method>
    <method name="vkCmdSetDeviceMask">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="deviceMask" type="uint32_t" />
    </method>
    <method name="vkCmdDispatchBase">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="baseGroupX" type="uint32_t" />
      <argument name="baseGroupY" type="uint32_t" />
      <argument name="baseGroupZ" type="uint32_t" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="vkEnumeratePhysicalDeviceGroups">
      <argument name="instance" type="VkInstance" />
      <argument name="pPhysicalDeviceGroupCount" type="uint32_t *" />
      <argument name="pPhysicalDeviceGroupProperties" type="VkPhysicalDeviceGroupProperties *" />
    </method>
    <method name="vkGetImageMemoryRequirements2">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageMemoryRequirementsInfo2 *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetBufferMemoryRequirements2">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferMemoryRequirementsInfo2 *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetImageSparseMemoryRequirements2">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageSparseMemoryRequirementsInfo2 *" />
      <argument name="pSparseMemoryRequirementCount" type="uint32_t *" />
      <argument name="pSparseMemoryRequirements" type="VkSparseImageMemoryRequirements2 *" />
    </method>
    <method name="vkGetPhysicalDeviceFeatures2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFeatures" type="VkPhysicalDeviceFeatures2 *" />
    </method>
    <method name="vkGetPhysicalDeviceProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pProperties" type="VkPhysicalDeviceProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceFormatProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="pFormatProperties" type="VkFormatProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceImageFormatProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pImageFormatInfo" type="const VkPhysicalDeviceImageFormatInfo2 *" />
      <argument name="pImageFormatProperties" type="VkImageFormatProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceQueueFamilyProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pQueueFamilyPropertyCount" type="uint32_t *" />
      <argument name="pQueueFamilyProperties" type="VkQueueFamilyProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceMemoryProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pMemoryProperties" type="VkPhysicalDeviceMemoryProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceSparseImageFormatProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFormatInfo" type="const VkPhysicalDeviceSparseImageFormatInfo2 *" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkSparseImageFormatProperties2 *" />
    </method>
    <method name="vkTrimCommandPool">
      <argument name="device" type="VkDevice" />
      <argument name="commandPool" type="VkCommandPool" />
      <argument name="flags" type="VkCommandPoolTrimFlags" />
    </method>
    <method name="vkGetDeviceQueue2">
      <argument name="device" type="VkDevice" />
      <argument name="pQueueInfo" type="const VkDeviceQueueInfo2 *" />
      <argument name="pQueue" type="VkQueue *" />
    </method>
    <method name="vkCreateSamplerYcbcrConversion">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkSamplerYcbcrConversionCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pYcbcrConversion" type="VkSamplerYcbcrConversion *" />
    </method>
    <method name="vkDestroySamplerYcbcrConversion">
      <argument name="device" type="VkDevice" />
      <argument name="ycbcrConversion" type="VkSamplerYcbcrConversion" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateDescriptorUpdateTemplate">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorUpdateTemplateCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pDescriptorUpdateTemplate" type="VkDescriptorUpdateTemplate *" />
    </method>
    <method name="vkDestroyDescriptorUpdateTemplate">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkUpdateDescriptorSetWithTemplate">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorSet" type="VkDescriptorSet" />
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
      <argument name="pData" type="const void *" />
    </method>
    <method name="vkGetPhysicalDeviceExternalBufferProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalBufferInfo" type="const VkPhysicalDeviceExternalBufferInfo *" />
      <argument name="pExternalBufferProperties" type="VkExternalBufferProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceExternalFenceProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalFenceInfo" type="const VkPhysicalDeviceExternalFenceInfo *" />
      <argument name="pExternalFenceProperties" type="VkExternalFenceProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceExternalSemaphoreProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalSemaphoreInfo" type="const VkPhysicalDeviceExternalSemaphoreInfo *" />
      <argument name="pExternalSemaphoreProperties" type="VkExternalSemaphoreProperties *" />
    </method>
    <method name="vkGetDescriptorSetLayoutSupport">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorSetLayoutCreateInfo *" />
      <argument name="pSupport" type="VkDescriptorSetLayoutSupport *" />
    </method>
    <method name="vkCmdDrawIndirectCount">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndexedIndirectCount">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCreateRenderPass2">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkRenderPassCreateInfo2 *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pRenderPass" type="VkRenderPass *" />
    </method>
    <method name="vkCmdBeginRenderPass2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRenderPassBegin" type="const VkRenderPassBeginInfo *" />
      <argument name="pSubpassBeginInfo" type="const VkSubpassBeginInfo *" />
    </method>
    <method name="vkCmdNextSubpass2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSubpassBeginInfo" type="const VkSubpassBeginInfo *" />
      <argument name="pSubpassEndInfo" type="const VkSubpassEndInfo *" />
    </method>
    <method name="vkCmdEndRenderPass2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSubpassEndInfo" type="const VkSubpassEndInfo *" />
    </method>
    <method name="vkResetQueryPool">
      <argument name="device" type="VkDevice" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
    </method>
    <method name="vkGetSemaphoreCounterValue">
      <argument name="device" type="VkDevice" />
      <argument name="semaphore" type="VkSemaphore" />
      <argument name="pValue" type="uint64_t *" />
    </method>
    <method name="vkWaitSemaphores">
      <argument name="device" type="VkDevice" />
      <argument name="pWaitInfo" type="const VkSemaphoreWaitInfo *" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="vkSignalSemaphore">
      <argument name="device" type="VkDevice" />
      <argument name="pSignalInfo" type="const VkSemaphoreSignalInfo *" />
    </method>
    <method name="vkGetBufferDeviceAddress">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferDeviceAddressInfo *" />
    </method>
    <method name="vkGetBufferOpaqueCaptureAddress">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferDeviceAddressInfo *" />
    </method>
    <method name="vkGetDeviceMemoryOpaqueCaptureAddress">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceMemoryOpaqueCaptureAddressInfo *" />
    </method>
    <method name="vkGetPhysicalDeviceToolProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pToolCount" type="uint32_t *" />
      <argument name="pToolProperties" type="VkPhysicalDeviceToolProperties *" />
    </method>
    <method name="vkCreatePrivateDataSlot">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkPrivateDataSlotCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPrivateDataSlot" type="VkPrivateDataSlot *" />
    </method>
    <method name="vkDestroyPrivateDataSlot">
      <argument name="device" type="VkDevice" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkSetPrivateData">
      <argument name="device" type="VkDevice" />
      <argument name="objectType" type="VkObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="data" type="uint64_t" />
    </method>
    <method name="vkGetPrivateData">
      <argument name="device" type="VkDevice" />
      <argument name="objectType" type="VkObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="pData" type="uint64_t *" />
    </method>
    <method name="vkCmdSetEvent2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="pDependencyInfo" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdResetEvent2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="stageMask" type="VkPipelineStageFlags2" />
    </method>
    <method name="vkCmdWaitEvents2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="eventCount" type="uint32_t" />
      <argument name="pEvents" type="const VkEvent *" />
      <argument name="pDependencyInfos" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdPipelineBarrier2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pDependencyInfo" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdWriteTimestamp2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stage" type="VkPipelineStageFlags2" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="vkQueueSubmit2">
      <argument name="queue" type="VkQueue" />
      <argument name="submitCount" type="uint32_t" />
      <argument name="pSubmits" type="const VkSubmitInfo2 *" />
      <argument name="fence" type="VkFence" />
    </method>
    <method name="vkCmdCopyBuffer2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyBufferInfo" type="const VkCopyBufferInfo2 *" />
    </method>
    <method name="vkCmdCopyImage2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyImageInfo" type="const VkCopyImageInfo2 *" />
    </method>
    <method name="vkCmdCopyBufferToImage2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyBufferToImageInfo" type="const VkCopyBufferToImageInfo2 *" />
    </method>
    <method name="vkCmdCopyImageToBuffer2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyImageToBufferInfo" type="const VkCopyImageToBufferInfo2 *" />
    </method>
    <method name="vkCmdBlitImage2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBlitImageInfo" type="const VkBlitImageInfo2 *" />
    </method>
    <method name="vkCmdResolveImage2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pResolveImageInfo" type="const VkResolveImageInfo2 *" />
    </method>
    <method name="vkCmdBeginRendering">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRenderingInfo" type="const VkRenderingInfo *" />
    </method>
    <method name="vkCmdEndRendering">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCmdSetCullMode">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="cullMode" type="VkCullModeFlags" />
    </method>
    <method name="vkCmdSetFrontFace">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="frontFace" type="VkFrontFace" />
    </method>
    <method name="vkCmdSetPrimitiveTopology">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="primitiveTopology" type="VkPrimitiveTopology" />
    </method>
    <method name="vkCmdSetViewportWithCount">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pViewports" type="const VkViewport *" />
    </method>
    <method name="vkCmdSetScissorWithCount">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="scissorCount" type="uint32_t" />
      <argument name="pScissors" type="const VkRect2D *" />
    </method>
    <method name="vkCmdBindVertexBuffers2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstBinding" type="uint32_t" />
      <argument name="bindingCount" type="uint32_t" />
      <argument name="pBuffers" type="const VkBuffer *" />
      <argument name="pOffsets" type="const VkDeviceSize *" />
      <argument name="pSizes" type="const VkDeviceSize *" />
      <argument name="pStrides" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdSetDepthTestEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthWriteEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthWriteEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthCompareOp">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthCompareOp" type="VkCompareOp" />
    </method>
    <method name="vkCmdSetDepthBoundsTestEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthBoundsTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetStencilTestEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stencilTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetStencilOp">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="faceMask" type="VkStencilFaceFlags" />
      <argument name="failOp" type="VkStencilOp" />
      <argument name="passOp" type="VkStencilOp" />
      <argument name="depthFailOp" type="VkStencilOp" />
      <argument name="compareOp" type="VkCompareOp" />
    </method>
    <method name="vkCmdSetRasterizerDiscardEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="rasterizerDiscardEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthBiasEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthBiasEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetPrimitiveRestartEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="primitiveRestartEnable" type="VkBool32" />
    </method>
    <method name="vkGetDeviceBufferMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceBufferMemoryRequirements *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetDeviceImageMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceImageMemoryRequirements *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetDeviceImageSparseMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceImageMemoryRequirements *" />
      <argument name="pSparseMemoryRequirementCount" type="uint32_t *" />
      <argument name="pSparseMemoryRequirements" type="VkSparseImageMemoryRequirements2 *" />
    </method>
    <method name="vkDestroySurfaceKHR">
      <argument name="instance" type="VkInstance" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceSupportKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="queueFamilyIndex" type="uint32_t" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pSupported" type="VkBool32 *" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceCapabilitiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pSurfaceCapabilities" type="VkSurfaceCapabilitiesKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceFormatsKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pSurfaceFormatCount" type="uint32_t *" />
      <argument name="pSurfaceFormats" type="VkSurfaceFormatKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceSurfacePresentModesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pPresentModeCount" type="uint32_t *" />
      <argument name="pPresentModes" type="VkPresentModeKHR *" />
    </method>
    <method name="vkCreateSwapchainKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkSwapchainCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSwapchain" type="VkSwapchainKHR *" />
    </method>
    <method name="vkDestroySwapchainKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetSwapchainImagesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pSwapchainImageCount" type="uint32_t *" />
      <argument name="pSwapchainImages" type="VkImage *" />
    </method>
    <method name="vkAcquireNextImageKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="timeout" type="uint64_t" />
      <argument name="semaphore" type="VkSemaphore" />
      <argument name="fence" type="VkFence" />
      <argument name="pImageIndex" type="uint32_t *" />
    </method>
    <method name="vkQueuePresentKHR">
      <argument name="queue" type="VkQueue" />
      <argument name="pPresentInfo" type="const VkPresentInfoKHR *" />
    </method>
    <method name="vkGetDeviceGroupPresentCapabilitiesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pDeviceGroupPresentCapabilities" type="VkDeviceGroupPresentCapabilitiesKHR *" />
    </method>
    <method name="vkGetDeviceGroupSurfacePresentModesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pModes" type="VkDeviceGroupPresentModeFlagsKHR *" />
    </method>
    <method name="vkGetPhysicalDevicePresentRectanglesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pRectCount" type="uint32_t *" />
      <argument name="pRects" type="VkRect2D *" />
    </method>
    <method name="vkAcquireNextImage2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pAcquireInfo" type="const VkAcquireNextImageInfoKHR *" />
      <argument name="pImageIndex" type="uint32_t *" />
    </method>
    <method name="vkGetPhysicalDeviceDisplayPropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayPropertiesKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceDisplayPlanePropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayPlanePropertiesKHR *" />
    </method>
    <method name="vkGetDisplayPlaneSupportedDisplaysKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="planeIndex" type="uint32_t" />
      <argument name="pDisplayCount" type="uint32_t *" />
      <argument name="pDisplays" type="VkDisplayKHR *" />
    </method>
    <method name="vkGetDisplayModePropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="display" type="VkDisplayKHR" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayModePropertiesKHR *" />
    </method>
    <method name="vkCreateDisplayModeKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="display" type="VkDisplayKHR" />
      <argument name="pCreateInfo" type="const VkDisplayModeCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pMode" type="VkDisplayModeKHR *" />
    </method>
    <method name="vkGetDisplayPlaneCapabilitiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="mode" type="VkDisplayModeKHR" />
      <argument name="planeIndex" type="uint32_t" />
      <argument name="pCapabilities" type="VkDisplayPlaneCapabilitiesKHR *" />
    </method>
    <method name="vkCreateDisplayPlaneSurfaceKHR">
      <argument name="instance" type="VkInstance" />
      <argument name="pCreateInfo" type="const VkDisplaySurfaceCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSurface" type="VkSurfaceKHR *" />
    </method>
    <method name="vkCreateSharedSwapchainsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchainCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkSwapchainCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSwapchains" type="VkSwapchainKHR *" />
    </method>
    <method name="vkCreateDebugReportCallbackEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="pCreateInfo" type="const VkDebugReportCallbackCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pCallback" type="VkDebugReportCallbackEXT *" />
    </method>
    <method name="vkDestroyDebugReportCallbackEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="callback" type="VkDebugReportCallbackEXT" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkDebugReportMessageEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="flags" type="VkDebugReportFlagsEXT" />
      <argument name="objectType" type="VkDebugReportObjectTypeEXT" />
      <argument name="object" type="uint64_t" />
      <argument name="location" type="size_t" />
      <argument name="messageCode" type="int32_t" />
      <argument name="pLayerPrefix" type="const char *" />
      <argument name="pMessage" type="const char *" />
    </method>
    <method name="vkDebugMarkerSetObjectTagEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pTagInfo" type="const VkDebugMarkerObjectTagInfoEXT *" />
    </method>
    <method name="vkDebugMarkerSetObjectNameEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pNameInfo" type="const VkDebugMarkerObjectNameInfoEXT *" />
    </method>
    <method name="vkCmdDebugMarkerBeginEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pMarkerInfo" type="const VkDebugMarkerMarkerInfoEXT *" />
    </method>
    <method name="vkCmdDebugMarkerEndEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCmdDebugMarkerInsertEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pMarkerInfo" type="const VkDebugMarkerMarkerInfoEXT *" />
    </method>
    <method name="vkGetPhysicalDeviceVideoCapabilitiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pVideoProfile" type="const VkVideoProfileInfoKHR *" />
      <argument name="pCapabilities" type="VkVideoCapabilitiesKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceVideoFormatPropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pVideoFormatInfo" type="const VkPhysicalDeviceVideoFormatInfoKHR *" />
      <argument name="pVideoFormatPropertyCount" type="uint32_t *" />
      <argument name="pVideoFormatProperties" type="VkVideoFormatPropertiesKHR *" />
    </method>
    <method name="vkCreateVideoSessionKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkVideoSessionCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pVideoSession" type="VkVideoSessionKHR *" />
    </method>
    <method name="vkDestroyVideoSessionKHR">
      <argument name="device" type="VkDevice" />
      <argument name="videoSession" type="VkVideoSessionKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetVideoSessionMemoryRequirementsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="videoSession" type="VkVideoSessionKHR" />
      <argument name="pMemoryRequirementsCount" type="uint32_t *" />
      <argument name="pMemoryRequirements" type="VkVideoSessionMemoryRequirementsKHR *" />
    </method>
    <method name="vkBindVideoSessionMemoryKHR">
      <argument name="device" type="VkDevice" />
      <argument name="videoSession" type="VkVideoSessionKHR" />
      <argument name="bindSessionMemoryInfoCount" type="uint32_t" />
      <argument name="pBindSessionMemoryInfos" type="const VkBindVideoSessionMemoryInfoKHR *" />
    </method>
    <method name="vkCreateVideoSessionParametersKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkVideoSessionParametersCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pVideoSessionParameters" type="VkVideoSessionParametersKHR *" />
    </method>
    <method name="vkUpdateVideoSessionParametersKHR">
      <argument name="device" type="VkDevice" />
      <argument name="videoSessionParameters" type="VkVideoSessionParametersKHR" />
      <argument name="pUpdateInfo" type="const VkVideoSessionParametersUpdateInfoKHR *" />
    </method>
    <method name="vkDestroyVideoSessionParametersKHR">
      <argument name="device" type="VkDevice" />
      <argument name="videoSessionParameters" type="VkVideoSessionParametersKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCmdBeginVideoCodingKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBeginInfo" type="const VkVideoBeginCodingInfoKHR *" />
    </method>
    <method name="vkCmdEndVideoCodingKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pEndCodingInfo" type="const VkVideoEndCodingInfoKHR *" />
    </method>
    <method name="vkCmdControlVideoCodingKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCodingControlInfo" type="const VkVideoCodingControlInfoKHR *" />
    </method>
    <method name="vkCmdDecodeVideoKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pDecodeInfo" type="const VkVideoDecodeInfoKHR *" />
    </method>
    <method name="vkCmdBindTransformFeedbackBuffersEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstBinding" type="uint32_t" />
      <argument name="bindingCount" type="uint32_t" />
      <argument name="pBuffers" type="const VkBuffer *" />
      <argument name="pOffsets" type="const VkDeviceSize *" />
      <argument name="pSizes" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdBeginTransformFeedbackEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstCounterBuffer" type="uint32_t" />
      <argument name="counterBufferCount" type="uint32_t" />
      <argument name="pCounterBuffers" type="const VkBuffer *" />
      <argument name="pCounterBufferOffsets" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdEndTransformFeedbackEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstCounterBuffer" type="uint32_t" />
      <argument name="counterBufferCount" type="uint32_t" />
      <argument name="pCounterBuffers" type="const VkBuffer *" />
      <argument name="pCounterBufferOffsets" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdBeginQueryIndexedEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
      <argument name="flags" type="VkQueryControlFlags" />
      <argument name="index" type="uint32_t" />
    </method>
    <method name="vkCmdEndQueryIndexedEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
      <argument name="index" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndirectByteCountEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
      <argument name="counterBuffer" type="VkBuffer" />
      <argument name="counterBufferOffset" type="VkDeviceSize" />
      <argument name="counterOffset" type="uint32_t" />
      <argument name="vertexStride" type="uint32_t" />
    </method>
    <method name="vkCreateCuModuleNVX">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkCuModuleCreateInfoNVX *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pModule" type="VkCuModuleNVX *" />
    </method>
    <method name="vkCreateCuFunctionNVX">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkCuFunctionCreateInfoNVX *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pFunction" type="VkCuFunctionNVX *" />
    </method>
    <method name="vkDestroyCuModuleNVX">
      <argument name="device" type="VkDevice" />
      <argument name="module" type="VkCuModuleNVX" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkDestroyCuFunctionNVX">
      <argument name="device" type="VkDevice" />
      <argument name="function" type="VkCuFunctionNVX" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCmdCuLaunchKernelNVX">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pLaunchInfo" type="const VkCuLaunchInfoNVX *" />
    </method>
    <method name="vkGetImageViewHandleNVX">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageViewHandleInfoNVX *" />
    </method>
    <method name="vkGetImageViewAddressNVX">
      <argument name="device" type="VkDevice" />
      <argument name="imageView" type="VkImageView" />
      <argument name="pProperties" type="VkImageViewAddressPropertiesNVX *" />
    </method>
    <method name="vkCmdDrawIndirectCountAMD">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndexedIndirectCountAMD">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkGetShaderInfoAMD">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="shaderStage" type="VkShaderStageFlagBits" />
      <argument name="infoType" type="VkShaderInfoTypeAMD" />
      <argument name="pInfoSize" type="size_t *" />
      <argument name="pInfo" type="void *" />
    </method>
    <method name="vkCmdBeginRenderingKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRenderingInfo" type="const VkRenderingInfo *" />
    </method>
    <method name="vkCmdEndRenderingKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkGetPhysicalDeviceExternalImageFormatPropertiesNV">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="type" type="VkImageType" />
      <argument name="tiling" type="VkImageTiling" />
      <argument name="usage" type="VkImageUsageFlags" />
      <argument name="flags" type="VkImageCreateFlags" />
      <argument name="externalHandleType" type="VkExternalMemoryHandleTypeFlagsNV" />
      <argument name="pExternalImageFormatProperties" type="VkExternalImageFormatPropertiesNV *" />
    </method>
    <method name="vkGetPhysicalDeviceFeatures2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFeatures" type="VkPhysicalDeviceFeatures2 *" />
    </method>
    <method name="vkGetPhysicalDeviceProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pProperties" type="VkPhysicalDeviceProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceFormatProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="pFormatProperties" type="VkFormatProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceImageFormatProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pImageFormatInfo" type="const VkPhysicalDeviceImageFormatInfo2 *" />
      <argument name="pImageFormatProperties" type="VkImageFormatProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceQueueFamilyProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pQueueFamilyPropertyCount" type="uint32_t *" />
      <argument name="pQueueFamilyProperties" type="VkQueueFamilyProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceMemoryProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pMemoryProperties" type="VkPhysicalDeviceMemoryProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceSparseImageFormatProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFormatInfo" type="const VkPhysicalDeviceSparseImageFormatInfo2 *" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkSparseImageFormatProperties2 *" />
    </method>
    <method name="vkGetDeviceGroupPeerMemoryFeaturesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="heapIndex" type="uint32_t" />
      <argument name="localDeviceIndex" type="uint32_t" />
      <argument name="remoteDeviceIndex" type="uint32_t" />
      <argument name="pPeerMemoryFeatures" type="VkPeerMemoryFeatureFlags *" />
    </method>
    <method name="vkCmdSetDeviceMaskKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="deviceMask" type="uint32_t" />
    </method>
    <method name="vkCmdDispatchBaseKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="baseGroupX" type="uint32_t" />
      <argument name="baseGroupY" type="uint32_t" />
      <argument name="baseGroupZ" type="uint32_t" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="vkTrimCommandPoolKHR">
      <argument name="device" type="VkDevice" />
      <argument name="commandPool" type="VkCommandPool" />
      <argument name="flags" type="VkCommandPoolTrimFlags" />
    </method>
    <method name="vkEnumeratePhysicalDeviceGroupsKHR">
      <argument name="instance" type="VkInstance" />
      <argument name="pPhysicalDeviceGroupCount" type="uint32_t *" />
      <argument name="pPhysicalDeviceGroupProperties" type="VkPhysicalDeviceGroupProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceExternalBufferPropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalBufferInfo" type="const VkPhysicalDeviceExternalBufferInfo *" />
      <argument name="pExternalBufferProperties" type="VkExternalBufferProperties *" />
    </method>
    <method name="vkGetMemoryFdKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pGetFdInfo" type="const VkMemoryGetFdInfoKHR *" />
      <argument name="pFd" type="int *" />
    </method>
    <method name="vkGetMemoryFdPropertiesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="handleType" type="VkExternalMemoryHandleTypeFlagBits" />
      <argument name="fd" type="int" />
      <argument name="pMemoryFdProperties" type="VkMemoryFdPropertiesKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceExternalSemaphorePropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalSemaphoreInfo" type="const VkPhysicalDeviceExternalSemaphoreInfo *" />
      <argument name="pExternalSemaphoreProperties" type="VkExternalSemaphoreProperties *" />
    </method>
    <method name="vkImportSemaphoreFdKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pImportSemaphoreFdInfo" type="const VkImportSemaphoreFdInfoKHR *" />
    </method>
    <method name="vkGetSemaphoreFdKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pGetFdInfo" type="const VkSemaphoreGetFdInfoKHR *" />
      <argument name="pFd" type="int *" />
    </method>
    <method name="vkCmdPushDescriptorSetKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="set" type="uint32_t" />
      <argument name="descriptorWriteCount" type="uint32_t" />
      <argument name="pDescriptorWrites" type="const VkWriteDescriptorSet *" />
    </method>
    <method name="vkCmdPushDescriptorSetWithTemplateKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="set" type="uint32_t" />
      <argument name="pData" type="const void *" />
    </method>
    <method name="vkCmdBeginConditionalRenderingEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pConditionalRenderingBegin" type="const VkConditionalRenderingBeginInfoEXT *" />
    </method>
    <method name="vkCmdEndConditionalRenderingEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCreateDescriptorUpdateTemplateKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorUpdateTemplateCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pDescriptorUpdateTemplate" type="VkDescriptorUpdateTemplate *" />
    </method>
    <method name="vkDestroyDescriptorUpdateTemplateKHR">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkUpdateDescriptorSetWithTemplateKHR">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorSet" type="VkDescriptorSet" />
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
      <argument name="pData" type="const void *" />
    </method>
    <method name="vkCmdSetViewportWScalingNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstViewport" type="uint32_t" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pViewportWScalings" type="const VkViewportWScalingNV *" />
    </method>
    <method name="vkReleaseDisplayEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="display" type="VkDisplayKHR" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceCapabilities2EXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pSurfaceCapabilities" type="VkSurfaceCapabilities2EXT *" />
    </method>
    <method name="vkDisplayPowerControlEXT">
      <argument name="device" type="VkDevice" />
      <argument name="display" type="VkDisplayKHR" />
      <argument name="pDisplayPowerInfo" type="const VkDisplayPowerInfoEXT *" />
    </method>
    <method name="vkRegisterDeviceEventEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pDeviceEventInfo" type="const VkDeviceEventInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pFence" type="VkFence *" />
    </method>
    <method name="vkRegisterDisplayEventEXT">
      <argument name="device" type="VkDevice" />
      <argument name="display" type="VkDisplayKHR" />
      <argument name="pDisplayEventInfo" type="const VkDisplayEventInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pFence" type="VkFence *" />
    </method>
    <method name="vkGetSwapchainCounterEXT">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="counter" type="VkSurfaceCounterFlagBitsEXT" />
      <argument name="pCounterValue" type="uint64_t *" />
    </method>
    <method name="vkGetRefreshCycleDurationGOOGLE">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pDisplayTimingProperties" type="VkRefreshCycleDurationGOOGLE *" />
    </method>
    <method name="vkGetPastPresentationTimingGOOGLE">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pPresentationTimingCount" type="uint32_t *" />
      <argument name="pPresentationTimings" type="VkPastPresentationTimingGOOGLE *" />
    </method>
    <method name="vkCmdSetDiscardRectangleEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstDiscardRectangle" type="uint32_t" />
      <argument name="discardRectangleCount" type="uint32_t" />
      <argument name="pDiscardRectangles" type="const VkRect2D *" />
    </method>
    <method name="vkCmdSetDiscardRectangleEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="discardRectangleEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDiscardRectangleModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="discardRectangleMode" type="VkDiscardRectangleModeEXT" />
    </method>
    <method name="vkSetHdrMetadataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="swapchainCount" type="uint32_t" />
      <argument name="pSwapchains" type="const VkSwapchainKHR *" />
      <argument name="pMetadata" type="const VkHdrMetadataEXT *" />
    </method>
    <method name="vkCreateRenderPass2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkRenderPassCreateInfo2 *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pRenderPass" type="VkRenderPass *" />
    </method>
    <method name="vkCmdBeginRenderPass2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRenderPassBegin" type="const VkRenderPassBeginInfo *" />
      <argument name="pSubpassBeginInfo" type="const VkSubpassBeginInfo *" />
    </method>
    <method name="vkCmdNextSubpass2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSubpassBeginInfo" type="const VkSubpassBeginInfo *" />
      <argument name="pSubpassEndInfo" type="const VkSubpassEndInfo *" />
    </method>
    <method name="vkCmdEndRenderPass2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSubpassEndInfo" type="const VkSubpassEndInfo *" />
    </method>
    <method name="vkGetSwapchainStatusKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
    </method>
    <method name="vkGetPhysicalDeviceExternalFencePropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalFenceInfo" type="const VkPhysicalDeviceExternalFenceInfo *" />
      <argument name="pExternalFenceProperties" type="VkExternalFenceProperties *" />
    </method>
    <method name="vkImportFenceFdKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pImportFenceFdInfo" type="const VkImportFenceFdInfoKHR *" />
    </method>
    <method name="vkGetFenceFdKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pGetFdInfo" type="const VkFenceGetFdInfoKHR *" />
      <argument name="pFd" type="int *" />
    </method>
    <method name="vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="queueFamilyIndex" type="uint32_t" />
      <argument name="pCounterCount" type="uint32_t *" />
      <argument name="pCounters" type="VkPerformanceCounterKHR *" />
      <argument name="pCounterDescriptions" type="VkPerformanceCounterDescriptionKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPerformanceQueryCreateInfo" type="const VkQueryPoolPerformanceCreateInfoKHR *" />
      <argument name="pNumPasses" type="uint32_t *" />
    </method>
    <method name="vkAcquireProfilingLockKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkAcquireProfilingLockInfoKHR *" />
    </method>
    <method name="vkReleaseProfilingLockKHR">
      <argument name="device" type="VkDevice" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceCapabilities2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pSurfaceInfo" type="const VkPhysicalDeviceSurfaceInfo2KHR *" />
      <argument name="pSurfaceCapabilities" type="VkSurfaceCapabilities2KHR *" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceFormats2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pSurfaceInfo" type="const VkPhysicalDeviceSurfaceInfo2KHR *" />
      <argument name="pSurfaceFormatCount" type="uint32_t *" />
      <argument name="pSurfaceFormats" type="VkSurfaceFormat2KHR *" />
    </method>
    <method name="vkGetPhysicalDeviceDisplayProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayProperties2KHR *" />
    </method>
    <method name="vkGetPhysicalDeviceDisplayPlaneProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayPlaneProperties2KHR *" />
    </method>
    <method name="vkGetDisplayModeProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="display" type="VkDisplayKHR" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayModeProperties2KHR *" />
    </method>
    <method name="vkGetDisplayPlaneCapabilities2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pDisplayPlaneInfo" type="const VkDisplayPlaneInfo2KHR *" />
      <argument name="pCapabilities" type="VkDisplayPlaneCapabilities2KHR *" />
    </method>
    <method name="vkSetDebugUtilsObjectNameEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pNameInfo" type="const VkDebugUtilsObjectNameInfoEXT *" />
    </method>
    <method name="vkSetDebugUtilsObjectTagEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pTagInfo" type="const VkDebugUtilsObjectTagInfoEXT *" />
    </method>
    <method name="vkQueueBeginDebugUtilsLabelEXT">
      <argument name="queue" type="VkQueue" />
      <argument name="pLabelInfo" type="const VkDebugUtilsLabelEXT *" />
    </method>
    <method name="vkQueueEndDebugUtilsLabelEXT">
      <argument name="queue" type="VkQueue" />
    </method>
    <method name="vkQueueInsertDebugUtilsLabelEXT">
      <argument name="queue" type="VkQueue" />
      <argument name="pLabelInfo" type="const VkDebugUtilsLabelEXT *" />
    </method>
    <method name="vkCmdBeginDebugUtilsLabelEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pLabelInfo" type="const VkDebugUtilsLabelEXT *" />
    </method>
    <method name="vkCmdEndDebugUtilsLabelEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCmdInsertDebugUtilsLabelEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pLabelInfo" type="const VkDebugUtilsLabelEXT *" />
    </method>
    <method name="vkCreateDebugUtilsMessengerEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="pCreateInfo" type="const VkDebugUtilsMessengerCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pMessenger" type="VkDebugUtilsMessengerEXT *" />
    </method>
    <method name="vkDestroyDebugUtilsMessengerEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="messenger" type="VkDebugUtilsMessengerEXT" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkSubmitDebugUtilsMessageEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="messageSeverity" type="VkDebugUtilsMessageSeverityFlagBitsEXT" />
      <argument name="messageTypes" type="VkDebugUtilsMessageTypeFlagsEXT" />
      <argument name="pCallbackData" type="const VkDebugUtilsMessengerCallbackDataEXT *" />
    </method>
    <method name="vkCmdSetSampleLocationsEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSampleLocationsInfo" type="const VkSampleLocationsInfoEXT *" />
    </method>
    <method name="vkGetPhysicalDeviceMultisamplePropertiesEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="samples" type="VkSampleCountFlagBits" />
      <argument name="pMultisampleProperties" type="VkMultisamplePropertiesEXT *" />
    </method>
    <method name="vkGetImageMemoryRequirements2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageMemoryRequirementsInfo2 *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetBufferMemoryRequirements2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferMemoryRequirementsInfo2 *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetImageSparseMemoryRequirements2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageSparseMemoryRequirementsInfo2 *" />
      <argument name="pSparseMemoryRequirementCount" type="uint32_t *" />
      <argument name="pSparseMemoryRequirements" type="VkSparseImageMemoryRequirements2 *" />
    </method>
    <method name="vkCreateAccelerationStructureKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkAccelerationStructureCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pAccelerationStructure" type="VkAccelerationStructureKHR *" />
    </method>
    <method name="vkDestroyAccelerationStructureKHR">
      <argument name="device" type="VkDevice" />
      <argument name="accelerationStructure" type="VkAccelerationStructureKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCmdBuildAccelerationStructuresKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="infoCount" type="uint32_t" />
      <argument name="pInfos" type="const VkAccelerationStructureBuildGeometryInfoKHR *" />
      <argument name="ppBuildRangeInfos" type="const VkAccelerationStructureBuildRangeInfoKHR *const *" />
    </method>
    <method name="vkCmdBuildAccelerationStructuresIndirectKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="infoCount" type="uint32_t" />
      <argument name="pInfos" type="const VkAccelerationStructureBuildGeometryInfoKHR *" />
      <argument name="pIndirectDeviceAddresses" type="const VkDeviceAddress *" />
      <argument name="pIndirectStrides" type="const uint32_t *" />
      <argument name="ppMaxPrimitiveCounts" type="const uint32_t *const *" />
    </method>
    <method name="vkBuildAccelerationStructuresKHR">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="infoCount" type="uint32_t" />
      <argument name="pInfos" type="const VkAccelerationStructureBuildGeometryInfoKHR *" />
      <argument name="ppBuildRangeInfos" type="const VkAccelerationStructureBuildRangeInfoKHR *const *" />
    </method>
    <method name="vkCopyAccelerationStructureKHR">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyAccelerationStructureInfoKHR *" />
    </method>
    <method name="vkCopyAccelerationStructureToMemoryKHR">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyAccelerationStructureToMemoryInfoKHR *" />
    </method>
    <method name="vkCopyMemoryToAccelerationStructureKHR">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyMemoryToAccelerationStructureInfoKHR *" />
    </method>
    <method name="vkWriteAccelerationStructuresPropertiesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="accelerationStructureCount" type="uint32_t" />
      <argument name="pAccelerationStructures" type="const VkAccelerationStructureKHR *" />
      <argument name="queryType" type="VkQueryType" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
      <argument name="stride" type="size_t" />
    </method>
    <method name="vkCmdCopyAccelerationStructureKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyAccelerationStructureInfoKHR *" />
    </method>
    <method name="vkCmdCopyAccelerationStructureToMemoryKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyAccelerationStructureToMemoryInfoKHR *" />
    </method>
    <method name="vkCmdCopyMemoryToAccelerationStructureKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyMemoryToAccelerationStructureInfoKHR *" />
    </method>
    <method name="vkGetAccelerationStructureDeviceAddressKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkAccelerationStructureDeviceAddressInfoKHR *" />
    </method>
    <method name="vkCmdWriteAccelerationStructuresPropertiesKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="accelerationStructureCount" type="uint32_t" />
      <argument name="pAccelerationStructures" type="const VkAccelerationStructureKHR *" />
      <argument name="queryType" type="VkQueryType" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
    </method>
    <method name="vkGetDeviceAccelerationStructureCompatibilityKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pVersionInfo" type="const VkAccelerationStructureVersionInfoKHR *" />
      <argument name="pCompatibility" type="VkAccelerationStructureCompatibilityKHR *" />
    </method>
    <method name="vkGetAccelerationStructureBuildSizesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="buildType" type="VkAccelerationStructureBuildTypeKHR" />
      <argument name="pBuildInfo" type="const VkAccelerationStructureBuildGeometryInfoKHR *" />
      <argument name="pMaxPrimitiveCounts" type="const uint32_t *" />
      <argument name="pSizeInfo" type="VkAccelerationStructureBuildSizesInfoKHR *" />
    </method>
    <method name="vkCmdTraceRaysKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRaygenShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pMissShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pHitShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pCallableShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="width" type="uint32_t" />
      <argument name="height" type="uint32_t" />
      <argument name="depth" type="uint32_t" />
    </method>
    <method name="vkCreateRayTracingPipelinesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="createInfoCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkRayTracingPipelineCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelines" type="VkPipeline *" />
    </method>
    <method name="vkGetRayTracingShaderGroupHandlesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="firstGroup" type="uint32_t" />
      <argument name="groupCount" type="uint32_t" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetRayTracingCaptureReplayShaderGroupHandlesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="firstGroup" type="uint32_t" />
      <argument name="groupCount" type="uint32_t" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdTraceRaysIndirectKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRaygenShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pMissShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pHitShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pCallableShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="indirectDeviceAddress" type="VkDeviceAddress" />
    </method>
    <method name="vkGetRayTracingShaderGroupStackSizeKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="group" type="uint32_t" />
      <argument name="groupShader" type="VkShaderGroupShaderKHR" />
    </method>
    <method name="vkCmdSetRayTracingPipelineStackSizeKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineStackSize" type="uint32_t" />
    </method>
    <method name="vkCreateSamplerYcbcrConversionKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkSamplerYcbcrConversionCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pYcbcrConversion" type="VkSamplerYcbcrConversion *" />
    </method>
    <method name="vkDestroySamplerYcbcrConversionKHR">
      <argument name="device" type="VkDevice" />
      <argument name="ycbcrConversion" type="VkSamplerYcbcrConversion" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkBindBufferMemory2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfos" type="const VkBindBufferMemoryInfo *" />
    </method>
    <method name="vkBindImageMemory2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfos" type="const VkBindImageMemoryInfo *" />
    </method>
    <method name="vkGetImageDrmFormatModifierPropertiesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pProperties" type="VkImageDrmFormatModifierPropertiesEXT *" />
    </method>
    <method name="vkCreateValidationCacheEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkValidationCacheCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pValidationCache" type="VkValidationCacheEXT *" />
    </method>
    <method name="vkDestroyValidationCacheEXT">
      <argument name="device" type="VkDevice" />
      <argument name="validationCache" type="VkValidationCacheEXT" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkMergeValidationCachesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="dstCache" type="VkValidationCacheEXT" />
      <argument name="srcCacheCount" type="uint32_t" />
      <argument name="pSrcCaches" type="const VkValidationCacheEXT *" />
    </method>
    <method name="vkGetValidationCacheDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="validationCache" type="VkValidationCacheEXT" />
      <argument name="pDataSize" type="size_t *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdBindShadingRateImageNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="imageView" type="VkImageView" />
      <argument name="imageLayout" type="VkImageLayout" />
    </method>
    <method name="vkCmdSetViewportShadingRatePaletteNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstViewport" type="uint32_t" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pShadingRatePalettes" type="const VkShadingRatePaletteNV *" />
    </method>
    <method name="vkCmdSetCoarseSampleOrderNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="sampleOrderType" type="VkCoarseSampleOrderTypeNV" />
      <argument name="customSampleOrderCount" type="uint32_t" />
      <argument name="pCustomSampleOrders" type="const VkCoarseSampleOrderCustomNV *" />
    </method>
    <method name="vkCreateAccelerationStructureNV">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkAccelerationStructureCreateInfoNV *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pAccelerationStructure" type="VkAccelerationStructureNV *" />
    </method>
    <method name="vkDestroyAccelerationStructureNV">
      <argument name="device" type="VkDevice" />
      <argument name="accelerationStructure" type="VkAccelerationStructureNV" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetAccelerationStructureMemoryRequirementsNV">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkAccelerationStructureMemoryRequirementsInfoNV *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2KHR *" />
    </method>
    <method name="vkBindAccelerationStructureMemoryNV">
      <argument name="device" type="VkDevice" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfos" type="const VkBindAccelerationStructureMemoryInfoNV *" />
    </method>
    <method name="vkCmdBuildAccelerationStructureNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkAccelerationStructureInfoNV *" />
      <argument name="instanceData" type="VkBuffer" />
      <argument name="instanceOffset" type="VkDeviceSize" />
      <argument name="update" type="VkBool32" />
      <argument name="dst" type="VkAccelerationStructureNV" />
      <argument name="src" type="VkAccelerationStructureNV" />
      <argument name="scratch" type="VkBuffer" />
      <argument name="scratchOffset" type="VkDeviceSize" />
    </method>
    <method name="vkCmdCopyAccelerationStructureNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="dst" type="VkAccelerationStructureNV" />
      <argument name="src" type="VkAccelerationStructureNV" />
      <argument name="mode" type="VkCopyAccelerationStructureModeKHR" />
    </method>
    <method name="vkCmdTraceRaysNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="raygenShaderBindingTableBuffer" type="VkBuffer" />
      <argument name="raygenShaderBindingOffset" type="VkDeviceSize" />
      <argument name="missShaderBindingTableBuffer" type="VkBuffer" />
      <argument name="missShaderBindingOffset" type="VkDeviceSize" />
      <argument name="missShaderBindingStride" type="VkDeviceSize" />
      <argument name="hitShaderBindingTableBuffer" type="VkBuffer" />
      <argument name="hitShaderBindingOffset" type="VkDeviceSize" />
      <argument name="hitShaderBindingStride" type="VkDeviceSize" />
      <argument name="callableShaderBindingTableBuffer" type="VkBuffer" />
      <argument name="callableShaderBindingOffset" type="VkDeviceSize" />
      <argument name="callableShaderBindingStride" type="VkDeviceSize" />
      <argument name="width" type="uint32_t" />
      <argument name="height" type="uint32_t" />
      <argument name="depth" type="uint32_t" />
    </method>
    <method name="vkCreateRayTracingPipelinesNV">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="createInfoCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkRayTracingPipelineCreateInfoNV *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelines" type="VkPipeline *" />
    </method>
    <method name="vkGetRayTracingShaderGroupHandlesNV">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="firstGroup" type="uint32_t" />
      <argument name="groupCount" type="uint32_t" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetAccelerationStructureHandleNV">
      <argument name="device" type="VkDevice" />
      <argument name="accelerationStructure" type="VkAccelerationStructureNV" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdWriteAccelerationStructuresPropertiesNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="accelerationStructureCount" type="uint32_t" />
      <argument name="pAccelerationStructures" type="const VkAccelerationStructureNV *" />
      <argument name="queryType" type="VkQueryType" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
    </method>
    <method name="vkCompileDeferredNV">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="shader" type="uint32_t" />
    </method>
    <method name="vkGetDescriptorSetLayoutSupportKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorSetLayoutCreateInfo *" />
      <argument name="pSupport" type="VkDescriptorSetLayoutSupport *" />
    </method>
    <method name="vkCmdDrawIndirectCountKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndexedIndirectCountKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkGetMemoryHostPointerPropertiesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="handleType" type="VkExternalMemoryHandleTypeFlagBits" />
      <argument name="pHostPointer" type="const void *" />
      <argument name="pMemoryHostPointerProperties" type="VkMemoryHostPointerPropertiesEXT *" />
    </method>
    <method name="vkCmdWriteBufferMarkerAMD">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineStage" type="VkPipelineStageFlagBits" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="dstOffset" type="VkDeviceSize" />
      <argument name="marker" type="uint32_t" />
    </method>
    <method name="vkGetPhysicalDeviceCalibrateableTimeDomainsEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pTimeDomainCount" type="uint32_t *" />
      <argument name="pTimeDomains" type="VkTimeDomainKHR *" />
    </method>
    <method name="vkGetCalibratedTimestampsEXT">
      <argument name="device" type="VkDevice" />
      <argument name="timestampCount" type="uint32_t" />
      <argument name="pTimestampInfos" type="const VkCalibratedTimestampInfoKHR *" />
      <argument name="pTimestamps" type="uint64_t *" />
      <argument name="pMaxDeviation" type="uint64_t *" />
    </method>
    <method name="vkCmdDrawMeshTasksNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="taskCount" type="uint32_t" />
      <argument name="firstTask" type="uint32_t" />
    </method>
    <method name="vkCmdDrawMeshTasksIndirectNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawMeshTasksIndirectCountNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdSetExclusiveScissorEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstExclusiveScissor" type="uint32_t" />
      <argument name="exclusiveScissorCount" type="uint32_t" />
      <argument name="pExclusiveScissorEnables" type="const VkBool32 *" />
    </method>
    <method name="vkCmdSetExclusiveScissorNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstExclusiveScissor" type="uint32_t" />
      <argument name="exclusiveScissorCount" type="uint32_t" />
      <argument name="pExclusiveScissors" type="const VkRect2D *" />
    </method>
    <method name="vkCmdSetCheckpointNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCheckpointMarker" type="const void *" />
    </method>
    <method name="vkGetQueueCheckpointDataNV">
      <argument name="queue" type="VkQueue" />
      <argument name="pCheckpointDataCount" type="uint32_t *" />
      <argument name="pCheckpointData" type="VkCheckpointDataNV *" />
    </method>
    <method name="vkGetSemaphoreCounterValueKHR">
      <argument name="device" type="VkDevice" />
      <argument name="semaphore" type="VkSemaphore" />
      <argument name="pValue" type="uint64_t *" />
    </method>
    <method name="vkWaitSemaphoresKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pWaitInfo" type="const VkSemaphoreWaitInfo *" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="vkSignalSemaphoreKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pSignalInfo" type="const VkSemaphoreSignalInfo *" />
    </method>
    <method name="vkInitializePerformanceApiINTEL">
      <argument name="device" type="VkDevice" />
      <argument name="pInitializeInfo" type="const VkInitializePerformanceApiInfoINTEL *" />
    </method>
    <method name="vkUninitializePerformanceApiINTEL">
      <argument name="device" type="VkDevice" />
    </method>
    <method name="vkCmdSetPerformanceMarkerINTEL">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pMarkerInfo" type="const VkPerformanceMarkerInfoINTEL *" />
    </method>
    <method name="vkCmdSetPerformanceStreamMarkerINTEL">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pMarkerInfo" type="const VkPerformanceStreamMarkerInfoINTEL *" />
    </method>
    <method name="vkCmdSetPerformanceOverrideINTEL">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pOverrideInfo" type="const VkPerformanceOverrideInfoINTEL *" />
    </method>
    <method name="vkAcquirePerformanceConfigurationINTEL">
      <argument name="device" type="VkDevice" />
      <argument name="pAcquireInfo" type="const VkPerformanceConfigurationAcquireInfoINTEL *" />
      <argument name="pConfiguration" type="VkPerformanceConfigurationINTEL *" />
    </method>
    <method name="vkReleasePerformanceConfigurationINTEL">
      <argument name="device" type="VkDevice" />
      <argument name="configuration" type="VkPerformanceConfigurationINTEL" />
    </method>
    <method name="vkQueueSetPerformanceConfigurationINTEL">
      <argument name="queue" type="VkQueue" />
      <argument name="configuration" type="VkPerformanceConfigurationINTEL" />
    </method>
    <method name="vkGetPerformanceParameterINTEL">
      <argument name="device" type="VkDevice" />
      <argument name="parameter" type="VkPerformanceParameterTypeINTEL" />
      <argument name="pValue" type="VkPerformanceValueINTEL *" />
    </method>
    <method name="vkSetLocalDimmingAMD">
      <argument name="device" type="VkDevice" />
      <argument name="swapChain" type="VkSwapchainKHR" />
      <argument name="localDimmingEnable" type="VkBool32" />
    </method>
    <method name="vkGetPhysicalDeviceFragmentShadingRatesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFragmentShadingRateCount" type="uint32_t *" />
      <argument name="pFragmentShadingRates" type="VkPhysicalDeviceFragmentShadingRateKHR *" />
    </method>
    <method name="vkCmdSetFragmentShadingRateKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pFragmentSize" type="const VkExtent2D *" />
      <argument name="combinerOps" type="const VkFragmentShadingRateCombinerOpKHR[2]" />
    </method>
    <method name="vkGetBufferDeviceAddressEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferDeviceAddressInfo *" />
    </method>
    <method name="vkGetPhysicalDeviceToolPropertiesEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pToolCount" type="uint32_t *" />
      <argument name="pToolProperties" type="VkPhysicalDeviceToolProperties *" />
    </method>
    <method name="vkWaitForPresentKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="presentId" type="uint64_t" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="vkGetPhysicalDeviceCooperativeMatrixPropertiesNV">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkCooperativeMatrixPropertiesNV *" />
    </method>
    <method name="vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pCombinationCount" type="uint32_t *" />
      <argument name="pCombinations" type="VkFramebufferMixedSamplesCombinationNV *" />
    </method>
    <method name="vkCreateHeadlessSurfaceEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="pCreateInfo" type="const VkHeadlessSurfaceCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSurface" type="VkSurfaceKHR *" />
    </method>
    <method name="vkGetBufferDeviceAddressKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferDeviceAddressInfo *" />
    </method>
    <method name="vkGetBufferOpaqueCaptureAddressKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferDeviceAddressInfo *" />
    </method>
    <method name="vkGetDeviceMemoryOpaqueCaptureAddressKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceMemoryOpaqueCaptureAddressInfo *" />
    </method>
    <method name="vkCmdSetLineStippleEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="lineStippleFactor" type="uint32_t" />
      <argument name="lineStipplePattern" type="uint16_t" />
    </method>
    <method name="vkResetQueryPoolEXT">
      <argument name="device" type="VkDevice" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
    </method>
    <method name="vkCmdSetCullModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="cullMode" type="VkCullModeFlags" />
    </method>
    <method name="vkCmdSetFrontFaceEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="frontFace" type="VkFrontFace" />
    </method>
    <method name="vkCmdSetPrimitiveTopologyEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="primitiveTopology" type="VkPrimitiveTopology" />
    </method>
    <method name="vkCmdSetViewportWithCountEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pViewports" type="const VkViewport *" />
    </method>
    <method name="vkCmdSetScissorWithCountEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="scissorCount" type="uint32_t" />
      <argument name="pScissors" type="const VkRect2D *" />
    </method>
    <method name="vkCmdBindVertexBuffers2EXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstBinding" type="uint32_t" />
      <argument name="bindingCount" type="uint32_t" />
      <argument name="pBuffers" type="const VkBuffer *" />
      <argument name="pOffsets" type="const VkDeviceSize *" />
      <argument name="pSizes" type="const VkDeviceSize *" />
      <argument name="pStrides" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdSetDepthTestEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthWriteEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthWriteEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthCompareOpEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthCompareOp" type="VkCompareOp" />
    </method>
    <method name="vkCmdSetDepthBoundsTestEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthBoundsTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetStencilTestEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stencilTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetStencilOpEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="faceMask" type="VkStencilFaceFlags" />
      <argument name="failOp" type="VkStencilOp" />
      <argument name="passOp" type="VkStencilOp" />
      <argument name="depthFailOp" type="VkStencilOp" />
      <argument name="compareOp" type="VkCompareOp" />
    </method>
    <method name="vkCreateDeferredOperationKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pDeferredOperation" type="VkDeferredOperationKHR *" />
    </method>
    <method name="vkDestroyDeferredOperationKHR">
      <argument name="device" type="VkDevice" />
      <argument name="operation" type="VkDeferredOperationKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetDeferredOperationMaxConcurrencyKHR">
      <argument name="device" type="VkDevice" />
      <argument name="operation" type="VkDeferredOperationKHR" />
    </method>
    <method name="vkGetDeferredOperationResultKHR">
      <argument name="device" type="VkDevice" />
      <argument name="operation" type="VkDeferredOperationKHR" />
    </method>
    <method name="vkDeferredOperationJoinKHR">
      <argument name="device" type="VkDevice" />
      <argument name="operation" type="VkDeferredOperationKHR" />
    </method>
    <method name="vkGetPipelineExecutablePropertiesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pPipelineInfo" type="const VkPipelineInfoKHR *" />
      <argument name="pExecutableCount" type="uint32_t *" />
      <argument name="pProperties" type="VkPipelineExecutablePropertiesKHR *" />
    </method>
    <method name="vkGetPipelineExecutableStatisticsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pExecutableInfo" type="const VkPipelineExecutableInfoKHR *" />
      <argument name="pStatisticCount" type="uint32_t *" />
      <argument name="pStatistics" type="VkPipelineExecutableStatisticKHR *" />
    </method>
    <method name="vkGetPipelineExecutableInternalRepresentationsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pExecutableInfo" type="const VkPipelineExecutableInfoKHR *" />
      <argument name="pInternalRepresentationCount" type="uint32_t *" />
      <argument name="pInternalRepresentations" type="VkPipelineExecutableInternalRepresentationKHR *" />
    </method>
    <method name="vkCopyMemoryToImageEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCopyMemoryToImageInfo" type="const VkCopyMemoryToImageInfoEXT *" />
    </method>
    <method name="vkCopyImageToMemoryEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCopyImageToMemoryInfo" type="const VkCopyImageToMemoryInfoEXT *" />
    </method>
    <method name="vkCopyImageToImageEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCopyImageToImageInfo" type="const VkCopyImageToImageInfoEXT *" />
    </method>
    <method name="vkTransitionImageLayoutEXT">
      <argument name="device" type="VkDevice" />
      <argument name="transitionCount" type="uint32_t" />
      <argument name="pTransitions" type="const VkHostImageLayoutTransitionInfoEXT *" />
    </method>
    <method name="vkGetImageSubresourceLayout2EXT">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pSubresource" type="const VkImageSubresource2KHR *" />
      <argument name="pLayout" type="VkSubresourceLayout2KHR *" />
    </method>
    <method name="vkMapMemory2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pMemoryMapInfo" type="const VkMemoryMapInfoKHR *" />
      <argument name="ppData" type="void **" />
    </method>
    <method name="vkUnmapMemory2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pMemoryUnmapInfo" type="const VkMemoryUnmapInfoKHR *" />
    </method>
    <method name="vkReleaseSwapchainImagesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pReleaseInfo" type="const VkReleaseSwapchainImagesInfoEXT *" />
    </method>
    <method name="vkGetGeneratedCommandsMemoryRequirementsNV">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkGeneratedCommandsMemoryRequirementsInfoNV *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkCmdPreprocessGeneratedCommandsNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pGeneratedCommandsInfo" type="const VkGeneratedCommandsInfoNV *" />
    </method>
    <method name="vkCmdExecuteGeneratedCommandsNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="isPreprocessed" type="VkBool32" />
      <argument name="pGeneratedCommandsInfo" type="const VkGeneratedCommandsInfoNV *" />
    </method>
    <method name="vkCmdBindPipelineShaderGroupNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="groupIndex" type="uint32_t" />
    </method>
    <method name="vkCreateIndirectCommandsLayoutNV">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkIndirectCommandsLayoutCreateInfoNV *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pIndirectCommandsLayout" type="VkIndirectCommandsLayoutNV *" />
    </method>
    <method name="vkDestroyIndirectCommandsLayoutNV">
      <argument name="device" type="VkDevice" />
      <argument name="indirectCommandsLayout" type="VkIndirectCommandsLayoutNV" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCmdSetDepthBias2EXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pDepthBiasInfo" type="const VkDepthBiasInfoEXT *" />
    </method>
    <method name="vkAcquireDrmDisplayEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="drmFd" type="int32_t" />
      <argument name="display" type="VkDisplayKHR" />
    </method>
    <method name="vkGetDrmDisplayEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="drmFd" type="int32_t" />
      <argument name="connectorId" type="uint32_t" />
      <argument name="display" type="VkDisplayKHR *" />
    </method>
    <method name="vkCreatePrivateDataSlotEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkPrivateDataSlotCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPrivateDataSlot" type="VkPrivateDataSlot *" />
    </method>
    <method name="vkDestroyPrivateDataSlotEXT">
      <argument name="device" type="VkDevice" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkSetPrivateDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="objectType" type="VkObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="data" type="uint64_t" />
    </method>
    <method name="vkGetPrivateDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="objectType" type="VkObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="pData" type="uint64_t *" />
    </method>
    <method name="vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pQualityLevelInfo" type="const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *" />
      <argument name="pQualityLevelProperties" type="VkVideoEncodeQualityLevelPropertiesKHR *" />
    </method>
    <method name="vkGetEncodedVideoSessionParametersKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pVideoSessionParametersInfo" type="const VkVideoEncodeSessionParametersGetInfoKHR *" />
      <argument name="pFeedbackInfo" type="VkVideoEncodeSessionParametersFeedbackInfoKHR *" />
      <argument name="pDataSize" type="size_t *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdEncodeVideoKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pEncodeInfo" type="const VkVideoEncodeInfoKHR *" />
    </method>
    <method name="vkCmdSetEvent2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="pDependencyInfo" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdResetEvent2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="stageMask" type="VkPipelineStageFlags2" />
    </method>
    <method name="vkCmdWaitEvents2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="eventCount" type="uint32_t" />
      <argument name="pEvents" type="const VkEvent *" />
      <argument name="pDependencyInfos" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdPipelineBarrier2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pDependencyInfo" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdWriteTimestamp2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stage" type="VkPipelineStageFlags2" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="vkQueueSubmit2KHR">
      <argument name="queue" type="VkQueue" />
      <argument name="submitCount" type="uint32_t" />
      <argument name="pSubmits" type="const VkSubmitInfo2 *" />
      <argument name="fence" type="VkFence" />
    </method>
    <method name="vkCmdWriteBufferMarker2AMD">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stage" type="VkPipelineStageFlags2" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="dstOffset" type="VkDeviceSize" />
      <argument name="marker" type="uint32_t" />
    </method>
    <method name="vkGetQueueCheckpointData2NV">
      <argument name="queue" type="VkQueue" />
      <argument name="pCheckpointDataCount" type="uint32_t *" />
      <argument name="pCheckpointData" type="VkCheckpointData2NV *" />
    </method>
    <method name="vkGetDescriptorSetLayoutSizeEXT">
      <argument name="device" type="VkDevice" />
      <argument name="layout" type="VkDescriptorSetLayout" />
      <argument name="pLayoutSizeInBytes" type="VkDeviceSize *" />
    </method>
    <method name="vkGetDescriptorSetLayoutBindingOffsetEXT">
      <argument name="device" type="VkDevice" />
      <argument name="layout" type="VkDescriptorSetLayout" />
      <argument name="binding" type="uint32_t" />
      <argument name="pOffset" type="VkDeviceSize *" />
    </method>
    <method name="vkGetDescriptorEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pDescriptorInfo" type="const VkDescriptorGetInfoEXT *" />
      <argument name="dataSize" type="size_t" />
      <argument name="pDescriptor" type="void *" />
    </method>
    <method name="vkCmdBindDescriptorBuffersEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="bufferCount" type="uint32_t" />
      <argument name="pBindingInfos" type="const VkDescriptorBufferBindingInfoEXT *" />
    </method>
    <method name="vkCmdSetDescriptorBufferOffsetsEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="firstSet" type="uint32_t" />
      <argument name="setCount" type="uint32_t" />
      <argument name="pBufferIndices" type="const uint32_t *" />
      <argument name="pOffsets" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdBindDescriptorBufferEmbeddedSamplersEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="set" type="uint32_t" />
    </method>
    <method name="vkGetBufferOpaqueCaptureDescriptorDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferCaptureDescriptorDataInfoEXT *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetImageOpaqueCaptureDescriptorDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageCaptureDescriptorDataInfoEXT *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetImageViewOpaqueCaptureDescriptorDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageViewCaptureDescriptorDataInfoEXT *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetSamplerOpaqueCaptureDescriptorDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkSamplerCaptureDescriptorDataInfoEXT *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkAccelerationStructureCaptureDescriptorDataInfoEXT *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdSetFragmentShadingRateEnumNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="shadingRate" type="VkFragmentShadingRateNV" />
      <argument name="combinerOps" type="const VkFragmentShadingRateCombinerOpKHR[2]" />
    </method>
    <method name="vkCmdDrawMeshTasksEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="vkCmdDrawMeshTasksIndirectEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawMeshTasksIndirectCountEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdCopyBuffer2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyBufferInfo" type="const VkCopyBufferInfo2 *" />
    </method>
    <method name="vkCmdCopyImage2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyImageInfo" type="const VkCopyImageInfo2 *" />
    </method>
    <method name="vkCmdCopyBufferToImage2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyBufferToImageInfo" type="const VkCopyBufferToImageInfo2 *" />
    </method>
    <method name="vkCmdCopyImageToBuffer2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyImageToBufferInfo" type="const VkCopyImageToBufferInfo2 *" />
    </method>
    <method name="vkCmdBlitImage2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBlitImageInfo" type="const VkBlitImageInfo2 *" />
    </method>
    <method name="vkCmdResolveImage2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pResolveImageInfo" type="const VkResolveImageInfo2 *" />
    </method>
    <method name="vkGetDeviceFaultInfoEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pFaultCounts" type="VkDeviceFaultCountsEXT *" />
      <argument name="pFaultInfo" type="VkDeviceFaultInfoEXT *" />
    </method>
    <method name="vkCmdSetVertexInputEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="vertexBindingDescriptionCount" type="uint32_t" />
      <argument name="pVertexBindingDescriptions" type="const VkVertexInputBindingDescription2EXT *" />
      <argument name="vertexAttributeDescriptionCount" type="uint32_t" />
      <argument name="pVertexAttributeDescriptions" type="const VkVertexInputAttributeDescription2EXT *" />
    </method>
    <method name="vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI">
      <argument name="device" type="VkDevice" />
      <argument name="renderpass" type="VkRenderPass" />
      <argument name="pMaxWorkgroupSize" type="VkExtent2D *" />
    </method>
    <method name="vkCmdSubpassShadingHUAWEI">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCmdBindInvocationMaskHUAWEI">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="imageView" type="VkImageView" />
      <argument name="imageLayout" type="VkImageLayout" />
    </method>
    <method name="vkGetMemoryRemoteAddressNV">
      <argument name="device" type="VkDevice" />
      <argument name="pMemoryGetRemoteAddressInfo" type="const VkMemoryGetRemoteAddressInfoNV *" />
      <argument name="pAddress" type="VkRemoteAddressNV *" />
    </method>
    <method name="vkGetPipelinePropertiesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pPipelineInfo" type="const VkPipelineInfoEXT *" />
      <argument name="pPipelineProperties" type="VkBaseOutStructure *" />
    </method>
    <method name="vkCmdSetPatchControlPointsEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="patchControlPoints" type="uint32_t" />
    </method>
    <method name="vkCmdSetRasterizerDiscardEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="rasterizerDiscardEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthBiasEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthBiasEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetLogicOpEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="logicOp" type="VkLogicOp" />
    </method>
    <method name="vkCmdSetPrimitiveRestartEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="primitiveRestartEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetColorWriteEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pColorWriteEnables" type="const VkBool32 *" />
    </method>
    <method name="vkCmdTraceRaysIndirect2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="indirectDeviceAddress" type="VkDeviceAddress" />
    </method>
    <method name="vkCmdDrawMultiEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="pVertexInfo" type="const VkMultiDrawInfoEXT *" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawMultiIndexedEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="pIndexInfo" type="const VkMultiDrawIndexedInfoEXT *" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
      <argument name="pVertexOffset" type="const int32_t *" />
    </method>
    <method name="vkCreateMicromapEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkMicromapCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pMicromap" type="VkMicromapEXT *" />
    </method>
    <method name="vkDestroyMicromapEXT">
      <argument name="device" type="VkDevice" />
      <argument name="micromap" type="VkMicromapEXT" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCmdBuildMicromapsEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="infoCount" type="uint32_t" />
      <argument name="pInfos" type="const VkMicromapBuildInfoEXT *" />
    </method>
    <method name="vkBuildMicromapsEXT">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="infoCount" type="uint32_t" />
      <argument name="pInfos" type="const VkMicromapBuildInfoEXT *" />
    </method>
    <method name="vkCopyMicromapEXT">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyMicromapInfoEXT *" />
    </method>
    <method name="vkCopyMicromapToMemoryEXT">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyMicromapToMemoryInfoEXT *" />
    </method>
    <method name="vkCopyMemoryToMicromapEXT">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyMemoryToMicromapInfoEXT *" />
    </method>
    <method name="vkWriteMicromapsPropertiesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="micromapCount" type="uint32_t" />
      <argument name="pMicromaps" type="const VkMicromapEXT *" />
      <argument name="queryType" type="VkQueryType" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
      <argument name="stride" type="size_t" />
    </method>
    <method name="vkCmdCopyMicromapEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyMicromapInfoEXT *" />
    </method>
    <method name="vkCmdCopyMicromapToMemoryEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyMicromapToMemoryInfoEXT *" />
    </method>
    <method name="vkCmdCopyMemoryToMicromapEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyMemoryToMicromapInfoEXT *" />
    </method>
    <method name="vkCmdWriteMicromapsPropertiesEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="micromapCount" type="uint32_t" />
      <argument name="pMicromaps" type="const VkMicromapEXT *" />
      <argument name="queryType" type="VkQueryType" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
    </method>
    <method name="vkGetDeviceMicromapCompatibilityEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pVersionInfo" type="const VkMicromapVersionInfoEXT *" />
      <argument name="pCompatibility" type="VkAccelerationStructureCompatibilityKHR *" />
    </method>
    <method name="vkGetMicromapBuildSizesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="buildType" type="VkAccelerationStructureBuildTypeKHR" />
      <argument name="pBuildInfo" type="const VkMicromapBuildInfoEXT *" />
      <argument name="pSizeInfo" type="VkMicromapBuildSizesInfoEXT *" />
    </method>
    <method name="vkCmdDrawClusterHUAWEI">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="vkCmdDrawClusterIndirectHUAWEI">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
    </method>
    <method name="vkSetDeviceMemoryPriorityEXT">
      <argument name="device" type="VkDevice" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="priority" type="float" />
    </method>
    <method name="vkGetDeviceBufferMemoryRequirementsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceBufferMemoryRequirements *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetDeviceImageMemoryRequirementsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceImageMemoryRequirements *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetDeviceImageSparseMemoryRequirementsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceImageMemoryRequirements *" />
      <argument name="pSparseMemoryRequirementCount" type="uint32_t *" />
      <argument name="pSparseMemoryRequirements" type="VkSparseImageMemoryRequirements2 *" />
    </method>
    <method name="vkGetDescriptorSetLayoutHostMappingInfoVALVE">
      <argument name="device" type="VkDevice" />
      <argument name="pBindingReference" type="const VkDescriptorSetBindingReferenceVALVE *" />
      <argument name="pHostMapping" type="VkDescriptorSetLayoutHostMappingInfoVALVE *" />
    </method>
    <method name="vkGetDescriptorSetHostMappingVALVE">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorSet" type="VkDescriptorSet" />
      <argument name="ppData" type="void **" />
    </method>
    <method name="vkCmdCopyMemoryIndirectNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="copyBufferAddress" type="VkDeviceAddress" />
      <argument name="copyCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdCopyMemoryToImageIndirectNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="copyBufferAddress" type="VkDeviceAddress" />
      <argument name="copyCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
      <argument name="dstImage" type="VkImage" />
      <argument name="dstImageLayout" type="VkImageLayout" />
      <argument name="pImageSubresources" type="const VkImageSubresourceLayers *" />
    </method>
    <method name="vkCmdDecompressMemoryNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="decompressRegionCount" type="uint32_t" />
      <argument name="pDecompressMemoryRegions" type="const VkDecompressMemoryRegionNV *" />
    </method>
    <method name="vkCmdDecompressMemoryIndirectCountNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="indirectCommandsAddress" type="VkDeviceAddress" />
      <argument name="indirectCommandsCountAddress" type="VkDeviceAddress" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkGetPipelineIndirectMemoryRequirementsNV">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkComputePipelineCreateInfo *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkCmdUpdatePipelineIndirectBufferNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="pipeline" type="VkPipeline" />
    </method>
    <method name="vkGetPipelineIndirectDeviceAddressNV">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkPipelineIndirectDeviceAddressInfoNV *" />
    </method>
    <method name="vkCmdSetTessellationDomainOriginEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="domainOrigin" type="VkTessellationDomainOrigin" />
    </method>
    <method name="vkCmdSetDepthClampEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthClampEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetPolygonModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="polygonMode" type="VkPolygonMode" />
    </method>
    <method name="vkCmdSetRasterizationSamplesEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="rasterizationSamples" type="VkSampleCountFlagBits" />
    </method>
    <method name="vkCmdSetSampleMaskEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="samples" type="VkSampleCountFlagBits" />
      <argument name="pSampleMask" type="const VkSampleMask *" />
    </method>
    <method name="vkCmdSetAlphaToCoverageEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="alphaToCoverageEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetAlphaToOneEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="alphaToOneEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetLogicOpEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="logicOpEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetColorBlendEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pColorBlendEnables" type="const VkBool32 *" />
    </method>
    <method name="vkCmdSetColorBlendEquationEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pColorBlendEquations" type="const VkColorBlendEquationEXT *" />
    </method>
    <method name="vkCmdSetColorWriteMaskEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pColorWriteMasks" type="const VkColorComponentFlags *" />
    </method>
    <method name="vkCmdSetRasterizationStreamEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="rasterizationStream" type="uint32_t" />
    </method>
    <method name="vkCmdSetConservativeRasterizationModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="conservativeRasterizationMode" type="VkConservativeRasterizationModeEXT" />
    </method>
    <method name="vkCmdSetExtraPrimitiveOverestimationSizeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="extraPrimitiveOverestimationSize" type="float" />
    </method>
    <method name="vkCmdSetDepthClipEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthClipEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetSampleLocationsEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="sampleLocationsEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetColorBlendAdvancedEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pColorBlendAdvanced" type="const VkColorBlendAdvancedEXT *" />
    </method>
    <method name="vkCmdSetProvokingVertexModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="provokingVertexMode" type="VkProvokingVertexModeEXT" />
    </method>
    <method name="vkCmdSetLineRasterizationModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="lineRasterizationMode" type="VkLineRasterizationModeEXT" />
    </method>
    <method name="vkCmdSetLineStippleEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stippledLineEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthClipNegativeOneToOneEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="negativeOneToOne" type="VkBool32" />
    </method>
    <method name="vkCmdSetViewportWScalingEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="viewportWScalingEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetViewportSwizzleNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstViewport" type="uint32_t" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pViewportSwizzles" type="const VkViewportSwizzleNV *" />
    </method>
    <method name="vkCmdSetCoverageToColorEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageToColorEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetCoverageToColorLocationNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageToColorLocation" type="uint32_t" />
    </method>
    <method name="vkCmdSetCoverageModulationModeNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageModulationMode" type="VkCoverageModulationModeNV" />
    </method>
    <method name="vkCmdSetCoverageModulationTableEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageModulationTableEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetCoverageModulationTableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageModulationTableCount" type="uint32_t" />
      <argument name="pCoverageModulationTable" type="const float *" />
    </method>
    <method name="vkCmdSetShadingRateImageEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="shadingRateImageEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetRepresentativeFragmentTestEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="representativeFragmentTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetCoverageReductionModeNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageReductionMode" type="VkCoverageReductionModeNV" />
    </method>
    <method name="vkGetShaderModuleIdentifierEXT">
      <argument name="device" type="VkDevice" />
      <argument name="shaderModule" type="VkShaderModule" />
      <argument name="pIdentifier" type="VkShaderModuleIdentifierEXT *" />
    </method>
    <method name="vkGetShaderModuleCreateInfoIdentifierEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkShaderModuleCreateInfo *" />
      <argument name="pIdentifier" type="VkShaderModuleIdentifierEXT *" />
    </method>
    <method name="vkGetPhysicalDeviceOpticalFlowImageFormatsNV">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pOpticalFlowImageFormatInfo" type="const VkOpticalFlowImageFormatInfoNV *" />
      <argument name="pFormatCount" type="uint32_t *" />
      <argument name="pImageFormatProperties" type="VkOpticalFlowImageFormatPropertiesNV *" />
    </method>
    <method name="vkCreateOpticalFlowSessionNV">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkOpticalFlowSessionCreateInfoNV *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSession" type="VkOpticalFlowSessionNV *" />
    </method>
    <method name="vkDestroyOpticalFlowSessionNV">
      <argument name="device" type="VkDevice" />
      <argument name="session" type="VkOpticalFlowSessionNV" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkBindOpticalFlowSessionImageNV">
      <argument name="device" type="VkDevice" />
      <argument name="session" type="VkOpticalFlowSessionNV" />
      <argument name="bindingPoint" type="VkOpticalFlowSessionBindingPointNV" />
      <argument name="view" type="VkImageView" />
      <argument name="layout" type="VkImageLayout" />
    </method>
    <method name="vkCmdOpticalFlowExecuteNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="session" type="VkOpticalFlowSessionNV" />
      <argument name="pExecuteInfo" type="const VkOpticalFlowExecuteInfoNV *" />
    </method>
    <method name="vkCmdBindIndexBuffer2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="size" type="VkDeviceSize" />
      <argument name="indexType" type="VkIndexType" />
    </method>
    <method name="vkGetRenderingAreaGranularityKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pRenderingAreaInfo" type="const VkRenderingAreaInfoKHR *" />
      <argument name="pGranularity" type="VkExtent2D *" />
    </method>
    <method name="vkGetDeviceImageSubresourceLayoutKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceImageSubresourceInfoKHR *" />
      <argument name="pLayout" type="VkSubresourceLayout2KHR *" />
    </method>
    <method name="vkGetImageSubresourceLayout2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pSubresource" type="const VkImageSubresource2KHR *" />
      <argument name="pLayout" type="VkSubresourceLayout2KHR *" />
    </method>
    <method name="vkCreateShadersEXT">
      <argument name="device" type="VkDevice" />
      <argument name="createInfoCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkShaderCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pShaders" type="VkShaderEXT *" />
    </method>
    <method name="vkDestroyShaderEXT">
      <argument name="device" type="VkDevice" />
      <argument name="shader" type="VkShaderEXT" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetShaderBinaryDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="shader" type="VkShaderEXT" />
      <argument name="pDataSize" type="size_t *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdBindShadersEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stageCount" type="uint32_t" />
      <argument name="pStages" type="const VkShaderStageFlagBits *" />
      <argument name="pShaders" type="const VkShaderEXT *" />
    </method>
    <method name="vkGetFramebufferTilePropertiesQCOM">
      <argument name="device" type="VkDevice" />
      <argument name="framebuffer" type="VkFramebuffer" />
      <argument name="pPropertiesCount" type="uint32_t *" />
      <argument name="pProperties" type="VkTilePropertiesQCOM *" />
    </method>
    <method name="vkGetDynamicRenderingTilePropertiesQCOM">
      <argument name="device" type="VkDevice" />
      <argument name="pRenderingInfo" type="const VkRenderingInfo *" />
      <argument name="pProperties" type="VkTilePropertiesQCOM *" />
    </method>
    <method name="vkSetLatencySleepModeNV">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pSleepModeInfo" type="const VkLatencySleepModeInfoNV *" />
    </method>
    <method name="vkLatencySleepNV">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pSleepInfo" type="const VkLatencySleepInfoNV *" />
    </method>
    <method name="vkSetLatencyMarkerNV">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pLatencyMarkerInfo" type="const VkSetLatencyMarkerInfoNV *" />
    </method>
    <method name="vkGetLatencyTimingsNV">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pLatencyMarkerInfo" type="VkGetLatencyMarkerInfoNV *" />
    </method>
    <method name="vkQueueNotifyOutOfBandNV">
      <argument name="queue" type="VkQueue" />
      <argument name="pQueueTypeInfo" type="const VkOutOfBandQueueTypeInfoNV *" />
    </method>
    <method name="vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkCooperativeMatrixPropertiesKHR *" />
    </method>
    <method name="vkCmdSetAttachmentFeedbackLoopEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="aspectMask" type="VkImageAspectFlags" />
    </method>
    <method name="vkGetPhysicalDeviceCalibrateableTimeDomainsKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pTimeDomainCount" type="uint32_t *" />
      <argument name="pTimeDomains" type="VkTimeDomainKHR *" />
    </method>
    <method name="vkGetCalibratedTimestampsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="timestampCount" type="uint32_t" />
      <argument name="pTimestampInfos" type="const VkCalibratedTimestampInfoKHR *" />
      <argument name="pTimestamps" type="uint64_t *" />
      <argument name="pMaxDeviation" type="uint64_t *" />
    </method>
    <method name="vkCmdBindDescriptorSets2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBindDescriptorSetsInfo" type="const VkBindDescriptorSetsInfoKHR *" />
    </method>
    <method name="vkCmdPushConstants2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pPushConstantsInfo" type="const VkPushConstantsInfoKHR *" />
    </method>
    <method name="vkCmdPushDescriptorSet2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pPushDescriptorSetInfo" type="const VkPushDescriptorSetInfoKHR *" />
    </method>
    <method name="vkCmdPushDescriptorSetWithTemplate2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pPushDescriptorSetWithTemplateInfo" type="const VkPushDescriptorSetWithTemplateInfoKHR *" />
    </method>
    <method name="vkCmdSetDescriptorBufferOffsets2EXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSetDescriptorBufferOffsetsInfo" type="const VkSetDescriptorBufferOffsetsInfoEXT *" />
    </method>
    <method name="vkCmdBindDescriptorBufferEmbeddedSamplers2EXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBindDescriptorBufferEmbeddedSamplersInfo" type="const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *" />
    </method>
  </class>
  <function name="operator&amp;" namespace="vk" filename="vulkan/vulkan_enums.hpp" template_raw="template &lt;typename BitType, typename std::enable_if&lt;FlagTraits&lt;BitType&gt;" />
  <function name="operator&amp;" namespace="vk" filename="vulkan/vulkan_enums.hpp" template_raw="template &lt;typename BitType&gt;" />
  <function name="operator|" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <function name="operator|" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <function name="operator^" namespace="vk" filename="vulkan/vulkan_enums.hpp" template_raw="template &lt;typename BitType, typename std::enable_if&lt;FlagTraits&lt;BitType&gt;" />
  <function name="operator^" namespace="vk" filename="vulkan/vulkan_enums.hpp" template_raw="template &lt;typename BitType&gt;" />
  <function name="operator~" namespace="vk" filename="vulkan/vulkan_enums.hpp" template_raw="template &lt;typename BitType, typename std::enable_if&lt;FlagTraits&lt;BitType&gt;" />
  <class name="DispatchLoaderStatic" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="DispatchLoaderBase" />
    <method name="vkCreateInstance">
      <argument name="pCreateInfo" type="const VkInstanceCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pInstance" type="VkInstance *" />
    </method>
    <method name="vkDestroyInstance">
      <argument name="instance" type="VkInstance" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkEnumeratePhysicalDevices">
      <argument name="instance" type="VkInstance" />
      <argument name="pPhysicalDeviceCount" type="uint32_t *" />
      <argument name="pPhysicalDevices" type="VkPhysicalDevice *" />
    </method>
    <method name="vkGetPhysicalDeviceFeatures">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFeatures" type="VkPhysicalDeviceFeatures *" />
    </method>
    <method name="vkGetPhysicalDeviceFormatProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="pFormatProperties" type="VkFormatProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceImageFormatProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="type" type="VkImageType" />
      <argument name="tiling" type="VkImageTiling" />
      <argument name="usage" type="VkImageUsageFlags" />
      <argument name="flags" type="VkImageCreateFlags" />
      <argument name="pImageFormatProperties" type="VkImageFormatProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pProperties" type="VkPhysicalDeviceProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceQueueFamilyProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pQueueFamilyPropertyCount" type="uint32_t *" />
      <argument name="pQueueFamilyProperties" type="VkQueueFamilyProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceMemoryProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pMemoryProperties" type="VkPhysicalDeviceMemoryProperties *" />
    </method>
    <method name="vkGetInstanceProcAddr">
      <argument name="instance" type="VkInstance" />
      <argument name="pName" type="const char *" />
    </method>
    <method name="vkGetDeviceProcAddr">
      <argument name="device" type="VkDevice" />
      <argument name="pName" type="const char *" />
    </method>
    <method name="vkCreateDevice">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pCreateInfo" type="const VkDeviceCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pDevice" type="VkDevice *" />
    </method>
    <method name="vkDestroyDevice">
      <argument name="device" type="VkDevice" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkEnumerateInstanceExtensionProperties">
      <argument name="pLayerName" type="const char *" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkExtensionProperties *" />
    </method>
    <method name="vkEnumerateDeviceExtensionProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pLayerName" type="const char *" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkExtensionProperties *" />
    </method>
    <method name="vkEnumerateInstanceLayerProperties">
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkLayerProperties *" />
    </method>
    <method name="vkEnumerateDeviceLayerProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkLayerProperties *" />
    </method>
    <method name="vkGetDeviceQueue">
      <argument name="device" type="VkDevice" />
      <argument name="queueFamilyIndex" type="uint32_t" />
      <argument name="queueIndex" type="uint32_t" />
      <argument name="pQueue" type="VkQueue *" />
    </method>
    <method name="vkQueueSubmit">
      <argument name="queue" type="VkQueue" />
      <argument name="submitCount" type="uint32_t" />
      <argument name="pSubmits" type="const VkSubmitInfo *" />
      <argument name="fence" type="VkFence" />
    </method>
    <method name="vkQueueWaitIdle">
      <argument name="queue" type="VkQueue" />
    </method>
    <method name="vkDeviceWaitIdle">
      <argument name="device" type="VkDevice" />
    </method>
    <method name="vkAllocateMemory">
      <argument name="device" type="VkDevice" />
      <argument name="pAllocateInfo" type="const VkMemoryAllocateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pMemory" type="VkDeviceMemory *" />
    </method>
    <method name="vkFreeMemory">
      <argument name="device" type="VkDevice" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkMapMemory">
      <argument name="device" type="VkDevice" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="size" type="VkDeviceSize" />
      <argument name="flags" type="VkMemoryMapFlags" />
      <argument name="ppData" type="void **" />
    </method>
    <method name="vkUnmapMemory">
      <argument name="device" type="VkDevice" />
      <argument name="memory" type="VkDeviceMemory" />
    </method>
    <method name="vkFlushMappedMemoryRanges">
      <argument name="device" type="VkDevice" />
      <argument name="memoryRangeCount" type="uint32_t" />
      <argument name="pMemoryRanges" type="const VkMappedMemoryRange *" />
    </method>
    <method name="vkInvalidateMappedMemoryRanges">
      <argument name="device" type="VkDevice" />
      <argument name="memoryRangeCount" type="uint32_t" />
      <argument name="pMemoryRanges" type="const VkMappedMemoryRange *" />
    </method>
    <method name="vkGetDeviceMemoryCommitment">
      <argument name="device" type="VkDevice" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="pCommittedMemoryInBytes" type="VkDeviceSize *" />
    </method>
    <method name="vkBindBufferMemory">
      <argument name="device" type="VkDevice" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="memoryOffset" type="VkDeviceSize" />
    </method>
    <method name="vkBindImageMemory">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="memoryOffset" type="VkDeviceSize" />
    </method>
    <method name="vkGetBufferMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements *" />
    </method>
    <method name="vkGetImageMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements *" />
    </method>
    <method name="vkGetImageSparseMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pSparseMemoryRequirementCount" type="uint32_t *" />
      <argument name="pSparseMemoryRequirements" type="VkSparseImageMemoryRequirements *" />
    </method>
    <method name="vkGetPhysicalDeviceSparseImageFormatProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="type" type="VkImageType" />
      <argument name="samples" type="VkSampleCountFlagBits" />
      <argument name="usage" type="VkImageUsageFlags" />
      <argument name="tiling" type="VkImageTiling" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkSparseImageFormatProperties *" />
    </method>
    <method name="vkQueueBindSparse">
      <argument name="queue" type="VkQueue" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfo" type="const VkBindSparseInfo *" />
      <argument name="fence" type="VkFence" />
    </method>
    <method name="vkCreateFence">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkFenceCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pFence" type="VkFence *" />
    </method>
    <method name="vkDestroyFence">
      <argument name="device" type="VkDevice" />
      <argument name="fence" type="VkFence" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkResetFences">
      <argument name="device" type="VkDevice" />
      <argument name="fenceCount" type="uint32_t" />
      <argument name="pFences" type="const VkFence *" />
    </method>
    <method name="vkGetFenceStatus">
      <argument name="device" type="VkDevice" />
      <argument name="fence" type="VkFence" />
    </method>
    <method name="vkWaitForFences">
      <argument name="device" type="VkDevice" />
      <argument name="fenceCount" type="uint32_t" />
      <argument name="pFences" type="const VkFence *" />
      <argument name="waitAll" type="VkBool32" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="vkCreateSemaphore">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkSemaphoreCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSemaphore" type="VkSemaphore *" />
    </method>
    <method name="vkDestroySemaphore">
      <argument name="device" type="VkDevice" />
      <argument name="semaphore" type="VkSemaphore" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateEvent">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkEventCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pEvent" type="VkEvent *" />
    </method>
    <method name="vkDestroyEvent">
      <argument name="device" type="VkDevice" />
      <argument name="event" type="VkEvent" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetEventStatus">
      <argument name="device" type="VkDevice" />
      <argument name="event" type="VkEvent" />
    </method>
    <method name="vkSetEvent">
      <argument name="device" type="VkDevice" />
      <argument name="event" type="VkEvent" />
    </method>
    <method name="vkResetEvent">
      <argument name="device" type="VkDevice" />
      <argument name="event" type="VkEvent" />
    </method>
    <method name="vkCreateQueryPool">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkQueryPoolCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pQueryPool" type="VkQueryPool *" />
    </method>
    <method name="vkDestroyQueryPool">
      <argument name="device" type="VkDevice" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetQueryPoolResults">
      <argument name="device" type="VkDevice" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
      <argument name="stride" type="VkDeviceSize" />
      <argument name="flags" type="VkQueryResultFlags" />
    </method>
    <method name="vkCreateBuffer">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkBufferCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pBuffer" type="VkBuffer *" />
    </method>
    <method name="vkDestroyBuffer">
      <argument name="device" type="VkDevice" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateBufferView">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkBufferViewCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pView" type="VkBufferView *" />
    </method>
    <method name="vkDestroyBufferView">
      <argument name="device" type="VkDevice" />
      <argument name="bufferView" type="VkBufferView" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateImage">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkImageCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pImage" type="VkImage *" />
    </method>
    <method name="vkDestroyImage">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetImageSubresourceLayout">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pSubresource" type="const VkImageSubresource *" />
      <argument name="pLayout" type="VkSubresourceLayout *" />
    </method>
    <method name="vkCreateImageView">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkImageViewCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pView" type="VkImageView *" />
    </method>
    <method name="vkDestroyImageView">
      <argument name="device" type="VkDevice" />
      <argument name="imageView" type="VkImageView" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateShaderModule">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkShaderModuleCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pShaderModule" type="VkShaderModule *" />
    </method>
    <method name="vkDestroyShaderModule">
      <argument name="device" type="VkDevice" />
      <argument name="shaderModule" type="VkShaderModule" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreatePipelineCache">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkPipelineCacheCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelineCache" type="VkPipelineCache *" />
    </method>
    <method name="vkDestroyPipelineCache">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetPipelineCacheData">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="pDataSize" type="size_t *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkMergePipelineCaches">
      <argument name="device" type="VkDevice" />
      <argument name="dstCache" type="VkPipelineCache" />
      <argument name="srcCacheCount" type="uint32_t" />
      <argument name="pSrcCaches" type="const VkPipelineCache *" />
    </method>
    <method name="vkCreateGraphicsPipelines">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="createInfoCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkGraphicsPipelineCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelines" type="VkPipeline *" />
    </method>
    <method name="vkCreateComputePipelines">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="createInfoCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkComputePipelineCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelines" type="VkPipeline *" />
    </method>
    <method name="vkDestroyPipeline">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreatePipelineLayout">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkPipelineLayoutCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelineLayout" type="VkPipelineLayout *" />
    </method>
    <method name="vkDestroyPipelineLayout">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineLayout" type="VkPipelineLayout" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateSampler">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkSamplerCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSampler" type="VkSampler *" />
    </method>
    <method name="vkDestroySampler">
      <argument name="device" type="VkDevice" />
      <argument name="sampler" type="VkSampler" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateDescriptorSetLayout">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorSetLayoutCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSetLayout" type="VkDescriptorSetLayout *" />
    </method>
    <method name="vkDestroyDescriptorSetLayout">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorSetLayout" type="VkDescriptorSetLayout" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateDescriptorPool">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorPoolCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pDescriptorPool" type="VkDescriptorPool *" />
    </method>
    <method name="vkDestroyDescriptorPool">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorPool" type="VkDescriptorPool" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkResetDescriptorPool">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorPool" type="VkDescriptorPool" />
      <argument name="flags" type="VkDescriptorPoolResetFlags" />
    </method>
    <method name="vkAllocateDescriptorSets">
      <argument name="device" type="VkDevice" />
      <argument name="pAllocateInfo" type="const VkDescriptorSetAllocateInfo *" />
      <argument name="pDescriptorSets" type="VkDescriptorSet *" />
    </method>
    <method name="vkFreeDescriptorSets">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorPool" type="VkDescriptorPool" />
      <argument name="descriptorSetCount" type="uint32_t" />
      <argument name="pDescriptorSets" type="const VkDescriptorSet *" />
    </method>
    <method name="vkUpdateDescriptorSets">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorWriteCount" type="uint32_t" />
      <argument name="pDescriptorWrites" type="const VkWriteDescriptorSet *" />
      <argument name="descriptorCopyCount" type="uint32_t" />
      <argument name="pDescriptorCopies" type="const VkCopyDescriptorSet *" />
    </method>
    <method name="vkCreateFramebuffer">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkFramebufferCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pFramebuffer" type="VkFramebuffer *" />
    </method>
    <method name="vkDestroyFramebuffer">
      <argument name="device" type="VkDevice" />
      <argument name="framebuffer" type="VkFramebuffer" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateRenderPass">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkRenderPassCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pRenderPass" type="VkRenderPass *" />
    </method>
    <method name="vkDestroyRenderPass">
      <argument name="device" type="VkDevice" />
      <argument name="renderPass" type="VkRenderPass" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetRenderAreaGranularity">
      <argument name="device" type="VkDevice" />
      <argument name="renderPass" type="VkRenderPass" />
      <argument name="pGranularity" type="VkExtent2D *" />
    </method>
    <method name="vkCreateCommandPool">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkCommandPoolCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pCommandPool" type="VkCommandPool *" />
    </method>
    <method name="vkDestroyCommandPool">
      <argument name="device" type="VkDevice" />
      <argument name="commandPool" type="VkCommandPool" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkResetCommandPool">
      <argument name="device" type="VkDevice" />
      <argument name="commandPool" type="VkCommandPool" />
      <argument name="flags" type="VkCommandPoolResetFlags" />
    </method>
    <method name="vkAllocateCommandBuffers">
      <argument name="device" type="VkDevice" />
      <argument name="pAllocateInfo" type="const VkCommandBufferAllocateInfo *" />
      <argument name="pCommandBuffers" type="VkCommandBuffer *" />
    </method>
    <method name="vkFreeCommandBuffers">
      <argument name="device" type="VkDevice" />
      <argument name="commandPool" type="VkCommandPool" />
      <argument name="commandBufferCount" type="uint32_t" />
      <argument name="pCommandBuffers" type="const VkCommandBuffer *" />
    </method>
    <method name="vkBeginCommandBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBeginInfo" type="const VkCommandBufferBeginInfo *" />
    </method>
    <method name="vkEndCommandBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkResetCommandBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="flags" type="VkCommandBufferResetFlags" />
    </method>
    <method name="vkCmdBindPipeline">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="pipeline" type="VkPipeline" />
    </method>
    <method name="vkCmdSetViewport">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstViewport" type="uint32_t" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pViewports" type="const VkViewport *" />
    </method>
    <method name="vkCmdSetScissor">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstScissor" type="uint32_t" />
      <argument name="scissorCount" type="uint32_t" />
      <argument name="pScissors" type="const VkRect2D *" />
    </method>
    <method name="vkCmdSetLineWidth">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="lineWidth" type="float" />
    </method>
    <method name="vkCmdSetDepthBias">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthBiasConstantFactor" type="float" />
      <argument name="depthBiasClamp" type="float" />
      <argument name="depthBiasSlopeFactor" type="float" />
    </method>
    <method name="vkCmdSetBlendConstants">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="blendConstants" type="const float[4]" />
    </method>
    <method name="vkCmdSetDepthBounds">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="minDepthBounds" type="float" />
      <argument name="maxDepthBounds" type="float" />
    </method>
    <method name="vkCmdSetStencilCompareMask">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="faceMask" type="VkStencilFaceFlags" />
      <argument name="compareMask" type="uint32_t" />
    </method>
    <method name="vkCmdSetStencilWriteMask">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="faceMask" type="VkStencilFaceFlags" />
      <argument name="writeMask" type="uint32_t" />
    </method>
    <method name="vkCmdSetStencilReference">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="faceMask" type="VkStencilFaceFlags" />
      <argument name="reference" type="uint32_t" />
    </method>
    <method name="vkCmdBindDescriptorSets">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="firstSet" type="uint32_t" />
      <argument name="descriptorSetCount" type="uint32_t" />
      <argument name="pDescriptorSets" type="const VkDescriptorSet *" />
      <argument name="dynamicOffsetCount" type="uint32_t" />
      <argument name="pDynamicOffsets" type="const uint32_t *" />
    </method>
    <method name="vkCmdBindIndexBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="indexType" type="VkIndexType" />
    </method>
    <method name="vkCmdBindVertexBuffers">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstBinding" type="uint32_t" />
      <argument name="bindingCount" type="uint32_t" />
      <argument name="pBuffers" type="const VkBuffer *" />
      <argument name="pOffsets" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdDraw">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="vertexCount" type="uint32_t" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstVertex" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndexed">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="indexCount" type="uint32_t" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstIndex" type="uint32_t" />
      <argument name="vertexOffset" type="int32_t" />
      <argument name="firstInstance" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndirect">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndexedIndirect">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDispatch">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="vkCmdDispatchIndirect">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
    </method>
    <method name="vkCmdCopyBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcBuffer" type="VkBuffer" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkBufferCopy *" />
    </method>
    <method name="vkCmdCopyImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcImage" type="VkImage" />
      <argument name="srcImageLayout" type="VkImageLayout" />
      <argument name="dstImage" type="VkImage" />
      <argument name="dstImageLayout" type="VkImageLayout" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkImageCopy *" />
    </method>
    <method name="vkCmdBlitImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcImage" type="VkImage" />
      <argument name="srcImageLayout" type="VkImageLayout" />
      <argument name="dstImage" type="VkImage" />
      <argument name="dstImageLayout" type="VkImageLayout" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkImageBlit *" />
      <argument name="filter" type="VkFilter" />
    </method>
    <method name="vkCmdCopyBufferToImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcBuffer" type="VkBuffer" />
      <argument name="dstImage" type="VkImage" />
      <argument name="dstImageLayout" type="VkImageLayout" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkBufferImageCopy *" />
    </method>
    <method name="vkCmdCopyImageToBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcImage" type="VkImage" />
      <argument name="srcImageLayout" type="VkImageLayout" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkBufferImageCopy *" />
    </method>
    <method name="vkCmdUpdateBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="dstOffset" type="VkDeviceSize" />
      <argument name="dataSize" type="VkDeviceSize" />
      <argument name="pData" type="const void *" />
    </method>
    <method name="vkCmdFillBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="dstOffset" type="VkDeviceSize" />
      <argument name="size" type="VkDeviceSize" />
      <argument name="data" type="uint32_t" />
    </method>
    <method name="vkCmdClearColorImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="image" type="VkImage" />
      <argument name="imageLayout" type="VkImageLayout" />
      <argument name="pColor" type="const VkClearColorValue *" />
      <argument name="rangeCount" type="uint32_t" />
      <argument name="pRanges" type="const VkImageSubresourceRange *" />
    </method>
    <method name="vkCmdClearDepthStencilImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="image" type="VkImage" />
      <argument name="imageLayout" type="VkImageLayout" />
      <argument name="pDepthStencil" type="const VkClearDepthStencilValue *" />
      <argument name="rangeCount" type="uint32_t" />
      <argument name="pRanges" type="const VkImageSubresourceRange *" />
    </method>
    <method name="vkCmdClearAttachments">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pAttachments" type="const VkClearAttachment *" />
      <argument name="rectCount" type="uint32_t" />
      <argument name="pRects" type="const VkClearRect *" />
    </method>
    <method name="vkCmdResolveImage">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcImage" type="VkImage" />
      <argument name="srcImageLayout" type="VkImageLayout" />
      <argument name="dstImage" type="VkImage" />
      <argument name="dstImageLayout" type="VkImageLayout" />
      <argument name="regionCount" type="uint32_t" />
      <argument name="pRegions" type="const VkImageResolve *" />
    </method>
    <method name="vkCmdSetEvent">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="stageMask" type="VkPipelineStageFlags" />
    </method>
    <method name="vkCmdResetEvent">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="stageMask" type="VkPipelineStageFlags" />
    </method>
    <method name="vkCmdWaitEvents">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="eventCount" type="uint32_t" />
      <argument name="pEvents" type="const VkEvent *" />
      <argument name="srcStageMask" type="VkPipelineStageFlags" />
      <argument name="dstStageMask" type="VkPipelineStageFlags" />
      <argument name="memoryBarrierCount" type="uint32_t" />
      <argument name="pMemoryBarriers" type="const VkMemoryBarrier *" />
      <argument name="bufferMemoryBarrierCount" type="uint32_t" />
      <argument name="pBufferMemoryBarriers" type="const VkBufferMemoryBarrier *" />
      <argument name="imageMemoryBarrierCount" type="uint32_t" />
      <argument name="pImageMemoryBarriers" type="const VkImageMemoryBarrier *" />
    </method>
    <method name="vkCmdPipelineBarrier">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="srcStageMask" type="VkPipelineStageFlags" />
      <argument name="dstStageMask" type="VkPipelineStageFlags" />
      <argument name="dependencyFlags" type="VkDependencyFlags" />
      <argument name="memoryBarrierCount" type="uint32_t" />
      <argument name="pMemoryBarriers" type="const VkMemoryBarrier *" />
      <argument name="bufferMemoryBarrierCount" type="uint32_t" />
      <argument name="pBufferMemoryBarriers" type="const VkBufferMemoryBarrier *" />
      <argument name="imageMemoryBarrierCount" type="uint32_t" />
      <argument name="pImageMemoryBarriers" type="const VkImageMemoryBarrier *" />
    </method>
    <method name="vkCmdBeginQuery">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
      <argument name="flags" type="VkQueryControlFlags" />
    </method>
    <method name="vkCmdEndQuery">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="vkCmdResetQueryPool">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
    </method>
    <method name="vkCmdWriteTimestamp">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineStage" type="VkPipelineStageFlagBits" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="vkCmdCopyQueryPoolResults">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="dstOffset" type="VkDeviceSize" />
      <argument name="stride" type="VkDeviceSize" />
      <argument name="flags" type="VkQueryResultFlags" />
    </method>
    <method name="vkCmdPushConstants">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="stageFlags" type="VkShaderStageFlags" />
      <argument name="offset" type="uint32_t" />
      <argument name="size" type="uint32_t" />
      <argument name="pValues" type="const void *" />
    </method>
    <method name="vkCmdBeginRenderPass">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRenderPassBegin" type="const VkRenderPassBeginInfo *" />
      <argument name="contents" type="VkSubpassContents" />
    </method>
    <method name="vkCmdNextSubpass">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="contents" type="VkSubpassContents" />
    </method>
    <method name="vkCmdEndRenderPass">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCmdExecuteCommands">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="commandBufferCount" type="uint32_t" />
      <argument name="pCommandBuffers" type="const VkCommandBuffer *" />
    </method>
    <method name="vkEnumerateInstanceVersion">
      <argument name="pApiVersion" type="uint32_t *" />
    </method>
    <method name="vkBindBufferMemory2">
      <argument name="device" type="VkDevice" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfos" type="const VkBindBufferMemoryInfo *" />
    </method>
    <method name="vkBindImageMemory2">
      <argument name="device" type="VkDevice" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfos" type="const VkBindImageMemoryInfo *" />
    </method>
    <method name="vkGetDeviceGroupPeerMemoryFeatures">
      <argument name="device" type="VkDevice" />
      <argument name="heapIndex" type="uint32_t" />
      <argument name="localDeviceIndex" type="uint32_t" />
      <argument name="remoteDeviceIndex" type="uint32_t" />
      <argument name="pPeerMemoryFeatures" type="VkPeerMemoryFeatureFlags *" />
    </method>
    <method name="vkCmdSetDeviceMask">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="deviceMask" type="uint32_t" />
    </method>
    <method name="vkCmdDispatchBase">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="baseGroupX" type="uint32_t" />
      <argument name="baseGroupY" type="uint32_t" />
      <argument name="baseGroupZ" type="uint32_t" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="vkEnumeratePhysicalDeviceGroups">
      <argument name="instance" type="VkInstance" />
      <argument name="pPhysicalDeviceGroupCount" type="uint32_t *" />
      <argument name="pPhysicalDeviceGroupProperties" type="VkPhysicalDeviceGroupProperties *" />
    </method>
    <method name="vkGetImageMemoryRequirements2">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageMemoryRequirementsInfo2 *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetBufferMemoryRequirements2">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferMemoryRequirementsInfo2 *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetImageSparseMemoryRequirements2">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageSparseMemoryRequirementsInfo2 *" />
      <argument name="pSparseMemoryRequirementCount" type="uint32_t *" />
      <argument name="pSparseMemoryRequirements" type="VkSparseImageMemoryRequirements2 *" />
    </method>
    <method name="vkGetPhysicalDeviceFeatures2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFeatures" type="VkPhysicalDeviceFeatures2 *" />
    </method>
    <method name="vkGetPhysicalDeviceProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pProperties" type="VkPhysicalDeviceProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceFormatProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="pFormatProperties" type="VkFormatProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceImageFormatProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pImageFormatInfo" type="const VkPhysicalDeviceImageFormatInfo2 *" />
      <argument name="pImageFormatProperties" type="VkImageFormatProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceQueueFamilyProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pQueueFamilyPropertyCount" type="uint32_t *" />
      <argument name="pQueueFamilyProperties" type="VkQueueFamilyProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceMemoryProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pMemoryProperties" type="VkPhysicalDeviceMemoryProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceSparseImageFormatProperties2">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFormatInfo" type="const VkPhysicalDeviceSparseImageFormatInfo2 *" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkSparseImageFormatProperties2 *" />
    </method>
    <method name="vkTrimCommandPool">
      <argument name="device" type="VkDevice" />
      <argument name="commandPool" type="VkCommandPool" />
      <argument name="flags" type="VkCommandPoolTrimFlags" />
    </method>
    <method name="vkGetDeviceQueue2">
      <argument name="device" type="VkDevice" />
      <argument name="pQueueInfo" type="const VkDeviceQueueInfo2 *" />
      <argument name="pQueue" type="VkQueue *" />
    </method>
    <method name="vkCreateSamplerYcbcrConversion">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkSamplerYcbcrConversionCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pYcbcrConversion" type="VkSamplerYcbcrConversion *" />
    </method>
    <method name="vkDestroySamplerYcbcrConversion">
      <argument name="device" type="VkDevice" />
      <argument name="ycbcrConversion" type="VkSamplerYcbcrConversion" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCreateDescriptorUpdateTemplate">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorUpdateTemplateCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pDescriptorUpdateTemplate" type="VkDescriptorUpdateTemplate *" />
    </method>
    <method name="vkDestroyDescriptorUpdateTemplate">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkUpdateDescriptorSetWithTemplate">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorSet" type="VkDescriptorSet" />
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
      <argument name="pData" type="const void *" />
    </method>
    <method name="vkGetPhysicalDeviceExternalBufferProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalBufferInfo" type="const VkPhysicalDeviceExternalBufferInfo *" />
      <argument name="pExternalBufferProperties" type="VkExternalBufferProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceExternalFenceProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalFenceInfo" type="const VkPhysicalDeviceExternalFenceInfo *" />
      <argument name="pExternalFenceProperties" type="VkExternalFenceProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceExternalSemaphoreProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalSemaphoreInfo" type="const VkPhysicalDeviceExternalSemaphoreInfo *" />
      <argument name="pExternalSemaphoreProperties" type="VkExternalSemaphoreProperties *" />
    </method>
    <method name="vkGetDescriptorSetLayoutSupport">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorSetLayoutCreateInfo *" />
      <argument name="pSupport" type="VkDescriptorSetLayoutSupport *" />
    </method>
    <method name="vkCmdDrawIndirectCount">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndexedIndirectCount">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCreateRenderPass2">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkRenderPassCreateInfo2 *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pRenderPass" type="VkRenderPass *" />
    </method>
    <method name="vkCmdBeginRenderPass2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRenderPassBegin" type="const VkRenderPassBeginInfo *" />
      <argument name="pSubpassBeginInfo" type="const VkSubpassBeginInfo *" />
    </method>
    <method name="vkCmdNextSubpass2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSubpassBeginInfo" type="const VkSubpassBeginInfo *" />
      <argument name="pSubpassEndInfo" type="const VkSubpassEndInfo *" />
    </method>
    <method name="vkCmdEndRenderPass2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSubpassEndInfo" type="const VkSubpassEndInfo *" />
    </method>
    <method name="vkResetQueryPool">
      <argument name="device" type="VkDevice" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
    </method>
    <method name="vkGetSemaphoreCounterValue">
      <argument name="device" type="VkDevice" />
      <argument name="semaphore" type="VkSemaphore" />
      <argument name="pValue" type="uint64_t *" />
    </method>
    <method name="vkWaitSemaphores">
      <argument name="device" type="VkDevice" />
      <argument name="pWaitInfo" type="const VkSemaphoreWaitInfo *" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="vkSignalSemaphore">
      <argument name="device" type="VkDevice" />
      <argument name="pSignalInfo" type="const VkSemaphoreSignalInfo *" />
    </method>
    <method name="vkGetBufferDeviceAddress">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferDeviceAddressInfo *" />
    </method>
    <method name="vkGetBufferOpaqueCaptureAddress">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferDeviceAddressInfo *" />
    </method>
    <method name="vkGetDeviceMemoryOpaqueCaptureAddress">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceMemoryOpaqueCaptureAddressInfo *" />
    </method>
    <method name="vkGetPhysicalDeviceToolProperties">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pToolCount" type="uint32_t *" />
      <argument name="pToolProperties" type="VkPhysicalDeviceToolProperties *" />
    </method>
    <method name="vkCreatePrivateDataSlot">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkPrivateDataSlotCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPrivateDataSlot" type="VkPrivateDataSlot *" />
    </method>
    <method name="vkDestroyPrivateDataSlot">
      <argument name="device" type="VkDevice" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkSetPrivateData">
      <argument name="device" type="VkDevice" />
      <argument name="objectType" type="VkObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="data" type="uint64_t" />
    </method>
    <method name="vkGetPrivateData">
      <argument name="device" type="VkDevice" />
      <argument name="objectType" type="VkObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="pData" type="uint64_t *" />
    </method>
    <method name="vkCmdSetEvent2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="pDependencyInfo" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdResetEvent2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="stageMask" type="VkPipelineStageFlags2" />
    </method>
    <method name="vkCmdWaitEvents2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="eventCount" type="uint32_t" />
      <argument name="pEvents" type="const VkEvent *" />
      <argument name="pDependencyInfos" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdPipelineBarrier2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pDependencyInfo" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdWriteTimestamp2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stage" type="VkPipelineStageFlags2" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="vkQueueSubmit2">
      <argument name="queue" type="VkQueue" />
      <argument name="submitCount" type="uint32_t" />
      <argument name="pSubmits" type="const VkSubmitInfo2 *" />
      <argument name="fence" type="VkFence" />
    </method>
    <method name="vkCmdCopyBuffer2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyBufferInfo" type="const VkCopyBufferInfo2 *" />
    </method>
    <method name="vkCmdCopyImage2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyImageInfo" type="const VkCopyImageInfo2 *" />
    </method>
    <method name="vkCmdCopyBufferToImage2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyBufferToImageInfo" type="const VkCopyBufferToImageInfo2 *" />
    </method>
    <method name="vkCmdCopyImageToBuffer2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyImageToBufferInfo" type="const VkCopyImageToBufferInfo2 *" />
    </method>
    <method name="vkCmdBlitImage2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBlitImageInfo" type="const VkBlitImageInfo2 *" />
    </method>
    <method name="vkCmdResolveImage2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pResolveImageInfo" type="const VkResolveImageInfo2 *" />
    </method>
    <method name="vkCmdBeginRendering">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRenderingInfo" type="const VkRenderingInfo *" />
    </method>
    <method name="vkCmdEndRendering">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCmdSetCullMode">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="cullMode" type="VkCullModeFlags" />
    </method>
    <method name="vkCmdSetFrontFace">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="frontFace" type="VkFrontFace" />
    </method>
    <method name="vkCmdSetPrimitiveTopology">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="primitiveTopology" type="VkPrimitiveTopology" />
    </method>
    <method name="vkCmdSetViewportWithCount">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pViewports" type="const VkViewport *" />
    </method>
    <method name="vkCmdSetScissorWithCount">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="scissorCount" type="uint32_t" />
      <argument name="pScissors" type="const VkRect2D *" />
    </method>
    <method name="vkCmdBindVertexBuffers2">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstBinding" type="uint32_t" />
      <argument name="bindingCount" type="uint32_t" />
      <argument name="pBuffers" type="const VkBuffer *" />
      <argument name="pOffsets" type="const VkDeviceSize *" />
      <argument name="pSizes" type="const VkDeviceSize *" />
      <argument name="pStrides" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdSetDepthTestEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthWriteEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthWriteEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthCompareOp">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthCompareOp" type="VkCompareOp" />
    </method>
    <method name="vkCmdSetDepthBoundsTestEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthBoundsTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetStencilTestEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stencilTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetStencilOp">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="faceMask" type="VkStencilFaceFlags" />
      <argument name="failOp" type="VkStencilOp" />
      <argument name="passOp" type="VkStencilOp" />
      <argument name="depthFailOp" type="VkStencilOp" />
      <argument name="compareOp" type="VkCompareOp" />
    </method>
    <method name="vkCmdSetRasterizerDiscardEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="rasterizerDiscardEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthBiasEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthBiasEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetPrimitiveRestartEnable">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="primitiveRestartEnable" type="VkBool32" />
    </method>
    <method name="vkGetDeviceBufferMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceBufferMemoryRequirements *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetDeviceImageMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceImageMemoryRequirements *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetDeviceImageSparseMemoryRequirements">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceImageMemoryRequirements *" />
      <argument name="pSparseMemoryRequirementCount" type="uint32_t *" />
      <argument name="pSparseMemoryRequirements" type="VkSparseImageMemoryRequirements2 *" />
    </method>
    <method name="vkDestroySurfaceKHR">
      <argument name="instance" type="VkInstance" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceSupportKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="queueFamilyIndex" type="uint32_t" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pSupported" type="VkBool32 *" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceCapabilitiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pSurfaceCapabilities" type="VkSurfaceCapabilitiesKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceFormatsKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pSurfaceFormatCount" type="uint32_t *" />
      <argument name="pSurfaceFormats" type="VkSurfaceFormatKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceSurfacePresentModesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pPresentModeCount" type="uint32_t *" />
      <argument name="pPresentModes" type="VkPresentModeKHR *" />
    </method>
    <method name="vkCreateSwapchainKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkSwapchainCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSwapchain" type="VkSwapchainKHR *" />
    </method>
    <method name="vkDestroySwapchainKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetSwapchainImagesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pSwapchainImageCount" type="uint32_t *" />
      <argument name="pSwapchainImages" type="VkImage *" />
    </method>
    <method name="vkAcquireNextImageKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="timeout" type="uint64_t" />
      <argument name="semaphore" type="VkSemaphore" />
      <argument name="fence" type="VkFence" />
      <argument name="pImageIndex" type="uint32_t *" />
    </method>
    <method name="vkQueuePresentKHR">
      <argument name="queue" type="VkQueue" />
      <argument name="pPresentInfo" type="const VkPresentInfoKHR *" />
    </method>
    <method name="vkGetDeviceGroupPresentCapabilitiesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pDeviceGroupPresentCapabilities" type="VkDeviceGroupPresentCapabilitiesKHR *" />
    </method>
    <method name="vkGetDeviceGroupSurfacePresentModesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pModes" type="VkDeviceGroupPresentModeFlagsKHR *" />
    </method>
    <method name="vkGetPhysicalDevicePresentRectanglesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pRectCount" type="uint32_t *" />
      <argument name="pRects" type="VkRect2D *" />
    </method>
    <method name="vkAcquireNextImage2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pAcquireInfo" type="const VkAcquireNextImageInfoKHR *" />
      <argument name="pImageIndex" type="uint32_t *" />
    </method>
    <method name="vkGetPhysicalDeviceDisplayPropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayPropertiesKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceDisplayPlanePropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayPlanePropertiesKHR *" />
    </method>
    <method name="vkGetDisplayPlaneSupportedDisplaysKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="planeIndex" type="uint32_t" />
      <argument name="pDisplayCount" type="uint32_t *" />
      <argument name="pDisplays" type="VkDisplayKHR *" />
    </method>
    <method name="vkGetDisplayModePropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="display" type="VkDisplayKHR" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayModePropertiesKHR *" />
    </method>
    <method name="vkCreateDisplayModeKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="display" type="VkDisplayKHR" />
      <argument name="pCreateInfo" type="const VkDisplayModeCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pMode" type="VkDisplayModeKHR *" />
    </method>
    <method name="vkGetDisplayPlaneCapabilitiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="mode" type="VkDisplayModeKHR" />
      <argument name="planeIndex" type="uint32_t" />
      <argument name="pCapabilities" type="VkDisplayPlaneCapabilitiesKHR *" />
    </method>
    <method name="vkCreateDisplayPlaneSurfaceKHR">
      <argument name="instance" type="VkInstance" />
      <argument name="pCreateInfo" type="const VkDisplaySurfaceCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSurface" type="VkSurfaceKHR *" />
    </method>
    <method name="vkCreateSharedSwapchainsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchainCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkSwapchainCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSwapchains" type="VkSwapchainKHR *" />
    </method>
    <method name="vkCreateDebugReportCallbackEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="pCreateInfo" type="const VkDebugReportCallbackCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pCallback" type="VkDebugReportCallbackEXT *" />
    </method>
    <method name="vkDestroyDebugReportCallbackEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="callback" type="VkDebugReportCallbackEXT" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkDebugReportMessageEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="flags" type="VkDebugReportFlagsEXT" />
      <argument name="objectType" type="VkDebugReportObjectTypeEXT" />
      <argument name="object" type="uint64_t" />
      <argument name="location" type="size_t" />
      <argument name="messageCode" type="int32_t" />
      <argument name="pLayerPrefix" type="const char *" />
      <argument name="pMessage" type="const char *" />
    </method>
    <method name="vkDebugMarkerSetObjectTagEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pTagInfo" type="const VkDebugMarkerObjectTagInfoEXT *" />
    </method>
    <method name="vkDebugMarkerSetObjectNameEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pNameInfo" type="const VkDebugMarkerObjectNameInfoEXT *" />
    </method>
    <method name="vkCmdDebugMarkerBeginEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pMarkerInfo" type="const VkDebugMarkerMarkerInfoEXT *" />
    </method>
    <method name="vkCmdDebugMarkerEndEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCmdDebugMarkerInsertEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pMarkerInfo" type="const VkDebugMarkerMarkerInfoEXT *" />
    </method>
    <method name="vkGetPhysicalDeviceVideoCapabilitiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pVideoProfile" type="const VkVideoProfileInfoKHR *" />
      <argument name="pCapabilities" type="VkVideoCapabilitiesKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceVideoFormatPropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pVideoFormatInfo" type="const VkPhysicalDeviceVideoFormatInfoKHR *" />
      <argument name="pVideoFormatPropertyCount" type="uint32_t *" />
      <argument name="pVideoFormatProperties" type="VkVideoFormatPropertiesKHR *" />
    </method>
    <method name="vkCreateVideoSessionKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkVideoSessionCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pVideoSession" type="VkVideoSessionKHR *" />
    </method>
    <method name="vkDestroyVideoSessionKHR">
      <argument name="device" type="VkDevice" />
      <argument name="videoSession" type="VkVideoSessionKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetVideoSessionMemoryRequirementsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="videoSession" type="VkVideoSessionKHR" />
      <argument name="pMemoryRequirementsCount" type="uint32_t *" />
      <argument name="pMemoryRequirements" type="VkVideoSessionMemoryRequirementsKHR *" />
    </method>
    <method name="vkBindVideoSessionMemoryKHR">
      <argument name="device" type="VkDevice" />
      <argument name="videoSession" type="VkVideoSessionKHR" />
      <argument name="bindSessionMemoryInfoCount" type="uint32_t" />
      <argument name="pBindSessionMemoryInfos" type="const VkBindVideoSessionMemoryInfoKHR *" />
    </method>
    <method name="vkCreateVideoSessionParametersKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkVideoSessionParametersCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pVideoSessionParameters" type="VkVideoSessionParametersKHR *" />
    </method>
    <method name="vkUpdateVideoSessionParametersKHR">
      <argument name="device" type="VkDevice" />
      <argument name="videoSessionParameters" type="VkVideoSessionParametersKHR" />
      <argument name="pUpdateInfo" type="const VkVideoSessionParametersUpdateInfoKHR *" />
    </method>
    <method name="vkDestroyVideoSessionParametersKHR">
      <argument name="device" type="VkDevice" />
      <argument name="videoSessionParameters" type="VkVideoSessionParametersKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCmdBeginVideoCodingKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBeginInfo" type="const VkVideoBeginCodingInfoKHR *" />
    </method>
    <method name="vkCmdEndVideoCodingKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pEndCodingInfo" type="const VkVideoEndCodingInfoKHR *" />
    </method>
    <method name="vkCmdControlVideoCodingKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCodingControlInfo" type="const VkVideoCodingControlInfoKHR *" />
    </method>
    <method name="vkCmdDecodeVideoKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pDecodeInfo" type="const VkVideoDecodeInfoKHR *" />
    </method>
    <method name="vkCmdBindTransformFeedbackBuffersEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstBinding" type="uint32_t" />
      <argument name="bindingCount" type="uint32_t" />
      <argument name="pBuffers" type="const VkBuffer *" />
      <argument name="pOffsets" type="const VkDeviceSize *" />
      <argument name="pSizes" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdBeginTransformFeedbackEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstCounterBuffer" type="uint32_t" />
      <argument name="counterBufferCount" type="uint32_t" />
      <argument name="pCounterBuffers" type="const VkBuffer *" />
      <argument name="pCounterBufferOffsets" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdEndTransformFeedbackEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstCounterBuffer" type="uint32_t" />
      <argument name="counterBufferCount" type="uint32_t" />
      <argument name="pCounterBuffers" type="const VkBuffer *" />
      <argument name="pCounterBufferOffsets" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdBeginQueryIndexedEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
      <argument name="flags" type="VkQueryControlFlags" />
      <argument name="index" type="uint32_t" />
    </method>
    <method name="vkCmdEndQueryIndexedEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
      <argument name="index" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndirectByteCountEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
      <argument name="counterBuffer" type="VkBuffer" />
      <argument name="counterBufferOffset" type="VkDeviceSize" />
      <argument name="counterOffset" type="uint32_t" />
      <argument name="vertexStride" type="uint32_t" />
    </method>
    <method name="vkCreateCuModuleNVX">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkCuModuleCreateInfoNVX *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pModule" type="VkCuModuleNVX *" />
    </method>
    <method name="vkCreateCuFunctionNVX">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkCuFunctionCreateInfoNVX *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pFunction" type="VkCuFunctionNVX *" />
    </method>
    <method name="vkDestroyCuModuleNVX">
      <argument name="device" type="VkDevice" />
      <argument name="module" type="VkCuModuleNVX" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkDestroyCuFunctionNVX">
      <argument name="device" type="VkDevice" />
      <argument name="function" type="VkCuFunctionNVX" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCmdCuLaunchKernelNVX">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pLaunchInfo" type="const VkCuLaunchInfoNVX *" />
    </method>
    <method name="vkGetImageViewHandleNVX">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageViewHandleInfoNVX *" />
    </method>
    <method name="vkGetImageViewAddressNVX">
      <argument name="device" type="VkDevice" />
      <argument name="imageView" type="VkImageView" />
      <argument name="pProperties" type="VkImageViewAddressPropertiesNVX *" />
    </method>
    <method name="vkCmdDrawIndirectCountAMD">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndexedIndirectCountAMD">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkGetShaderInfoAMD">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="shaderStage" type="VkShaderStageFlagBits" />
      <argument name="infoType" type="VkShaderInfoTypeAMD" />
      <argument name="pInfoSize" type="size_t *" />
      <argument name="pInfo" type="void *" />
    </method>
    <method name="vkCmdBeginRenderingKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRenderingInfo" type="const VkRenderingInfo *" />
    </method>
    <method name="vkCmdEndRenderingKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkGetPhysicalDeviceExternalImageFormatPropertiesNV">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="type" type="VkImageType" />
      <argument name="tiling" type="VkImageTiling" />
      <argument name="usage" type="VkImageUsageFlags" />
      <argument name="flags" type="VkImageCreateFlags" />
      <argument name="externalHandleType" type="VkExternalMemoryHandleTypeFlagsNV" />
      <argument name="pExternalImageFormatProperties" type="VkExternalImageFormatPropertiesNV *" />
    </method>
    <method name="vkGetPhysicalDeviceFeatures2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFeatures" type="VkPhysicalDeviceFeatures2 *" />
    </method>
    <method name="vkGetPhysicalDeviceProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pProperties" type="VkPhysicalDeviceProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceFormatProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="format" type="VkFormat" />
      <argument name="pFormatProperties" type="VkFormatProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceImageFormatProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pImageFormatInfo" type="const VkPhysicalDeviceImageFormatInfo2 *" />
      <argument name="pImageFormatProperties" type="VkImageFormatProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceQueueFamilyProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pQueueFamilyPropertyCount" type="uint32_t *" />
      <argument name="pQueueFamilyProperties" type="VkQueueFamilyProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceMemoryProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pMemoryProperties" type="VkPhysicalDeviceMemoryProperties2 *" />
    </method>
    <method name="vkGetPhysicalDeviceSparseImageFormatProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFormatInfo" type="const VkPhysicalDeviceSparseImageFormatInfo2 *" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkSparseImageFormatProperties2 *" />
    </method>
    <method name="vkGetDeviceGroupPeerMemoryFeaturesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="heapIndex" type="uint32_t" />
      <argument name="localDeviceIndex" type="uint32_t" />
      <argument name="remoteDeviceIndex" type="uint32_t" />
      <argument name="pPeerMemoryFeatures" type="VkPeerMemoryFeatureFlags *" />
    </method>
    <method name="vkCmdSetDeviceMaskKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="deviceMask" type="uint32_t" />
    </method>
    <method name="vkCmdDispatchBaseKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="baseGroupX" type="uint32_t" />
      <argument name="baseGroupY" type="uint32_t" />
      <argument name="baseGroupZ" type="uint32_t" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="vkTrimCommandPoolKHR">
      <argument name="device" type="VkDevice" />
      <argument name="commandPool" type="VkCommandPool" />
      <argument name="flags" type="VkCommandPoolTrimFlags" />
    </method>
    <method name="vkEnumeratePhysicalDeviceGroupsKHR">
      <argument name="instance" type="VkInstance" />
      <argument name="pPhysicalDeviceGroupCount" type="uint32_t *" />
      <argument name="pPhysicalDeviceGroupProperties" type="VkPhysicalDeviceGroupProperties *" />
    </method>
    <method name="vkGetPhysicalDeviceExternalBufferPropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalBufferInfo" type="const VkPhysicalDeviceExternalBufferInfo *" />
      <argument name="pExternalBufferProperties" type="VkExternalBufferProperties *" />
    </method>
    <method name="vkGetMemoryFdKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pGetFdInfo" type="const VkMemoryGetFdInfoKHR *" />
      <argument name="pFd" type="int *" />
    </method>
    <method name="vkGetMemoryFdPropertiesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="handleType" type="VkExternalMemoryHandleTypeFlagBits" />
      <argument name="fd" type="int" />
      <argument name="pMemoryFdProperties" type="VkMemoryFdPropertiesKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceExternalSemaphorePropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalSemaphoreInfo" type="const VkPhysicalDeviceExternalSemaphoreInfo *" />
      <argument name="pExternalSemaphoreProperties" type="VkExternalSemaphoreProperties *" />
    </method>
    <method name="vkImportSemaphoreFdKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pImportSemaphoreFdInfo" type="const VkImportSemaphoreFdInfoKHR *" />
    </method>
    <method name="vkGetSemaphoreFdKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pGetFdInfo" type="const VkSemaphoreGetFdInfoKHR *" />
      <argument name="pFd" type="int *" />
    </method>
    <method name="vkCmdPushDescriptorSetKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="set" type="uint32_t" />
      <argument name="descriptorWriteCount" type="uint32_t" />
      <argument name="pDescriptorWrites" type="const VkWriteDescriptorSet *" />
    </method>
    <method name="vkCmdPushDescriptorSetWithTemplateKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="set" type="uint32_t" />
      <argument name="pData" type="const void *" />
    </method>
    <method name="vkCmdBeginConditionalRenderingEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pConditionalRenderingBegin" type="const VkConditionalRenderingBeginInfoEXT *" />
    </method>
    <method name="vkCmdEndConditionalRenderingEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCreateDescriptorUpdateTemplateKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorUpdateTemplateCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pDescriptorUpdateTemplate" type="VkDescriptorUpdateTemplate *" />
    </method>
    <method name="vkDestroyDescriptorUpdateTemplateKHR">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkUpdateDescriptorSetWithTemplateKHR">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorSet" type="VkDescriptorSet" />
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
      <argument name="pData" type="const void *" />
    </method>
    <method name="vkCmdSetViewportWScalingNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstViewport" type="uint32_t" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pViewportWScalings" type="const VkViewportWScalingNV *" />
    </method>
    <method name="vkReleaseDisplayEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="display" type="VkDisplayKHR" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceCapabilities2EXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="pSurfaceCapabilities" type="VkSurfaceCapabilities2EXT *" />
    </method>
    <method name="vkDisplayPowerControlEXT">
      <argument name="device" type="VkDevice" />
      <argument name="display" type="VkDisplayKHR" />
      <argument name="pDisplayPowerInfo" type="const VkDisplayPowerInfoEXT *" />
    </method>
    <method name="vkRegisterDeviceEventEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pDeviceEventInfo" type="const VkDeviceEventInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pFence" type="VkFence *" />
    </method>
    <method name="vkRegisterDisplayEventEXT">
      <argument name="device" type="VkDevice" />
      <argument name="display" type="VkDisplayKHR" />
      <argument name="pDisplayEventInfo" type="const VkDisplayEventInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pFence" type="VkFence *" />
    </method>
    <method name="vkGetSwapchainCounterEXT">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="counter" type="VkSurfaceCounterFlagBitsEXT" />
      <argument name="pCounterValue" type="uint64_t *" />
    </method>
    <method name="vkGetRefreshCycleDurationGOOGLE">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pDisplayTimingProperties" type="VkRefreshCycleDurationGOOGLE *" />
    </method>
    <method name="vkGetPastPresentationTimingGOOGLE">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pPresentationTimingCount" type="uint32_t *" />
      <argument name="pPresentationTimings" type="VkPastPresentationTimingGOOGLE *" />
    </method>
    <method name="vkCmdSetDiscardRectangleEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstDiscardRectangle" type="uint32_t" />
      <argument name="discardRectangleCount" type="uint32_t" />
      <argument name="pDiscardRectangles" type="const VkRect2D *" />
    </method>
    <method name="vkCmdSetDiscardRectangleEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="discardRectangleEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDiscardRectangleModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="discardRectangleMode" type="VkDiscardRectangleModeEXT" />
    </method>
    <method name="vkSetHdrMetadataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="swapchainCount" type="uint32_t" />
      <argument name="pSwapchains" type="const VkSwapchainKHR *" />
      <argument name="pMetadata" type="const VkHdrMetadataEXT *" />
    </method>
    <method name="vkCreateRenderPass2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkRenderPassCreateInfo2 *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pRenderPass" type="VkRenderPass *" />
    </method>
    <method name="vkCmdBeginRenderPass2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRenderPassBegin" type="const VkRenderPassBeginInfo *" />
      <argument name="pSubpassBeginInfo" type="const VkSubpassBeginInfo *" />
    </method>
    <method name="vkCmdNextSubpass2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSubpassBeginInfo" type="const VkSubpassBeginInfo *" />
      <argument name="pSubpassEndInfo" type="const VkSubpassEndInfo *" />
    </method>
    <method name="vkCmdEndRenderPass2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSubpassEndInfo" type="const VkSubpassEndInfo *" />
    </method>
    <method name="vkGetSwapchainStatusKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
    </method>
    <method name="vkGetPhysicalDeviceExternalFencePropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pExternalFenceInfo" type="const VkPhysicalDeviceExternalFenceInfo *" />
      <argument name="pExternalFenceProperties" type="VkExternalFenceProperties *" />
    </method>
    <method name="vkImportFenceFdKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pImportFenceFdInfo" type="const VkImportFenceFdInfoKHR *" />
    </method>
    <method name="vkGetFenceFdKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pGetFdInfo" type="const VkFenceGetFdInfoKHR *" />
      <argument name="pFd" type="int *" />
    </method>
    <method name="vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="queueFamilyIndex" type="uint32_t" />
      <argument name="pCounterCount" type="uint32_t *" />
      <argument name="pCounters" type="VkPerformanceCounterKHR *" />
      <argument name="pCounterDescriptions" type="VkPerformanceCounterDescriptionKHR *" />
    </method>
    <method name="vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPerformanceQueryCreateInfo" type="const VkQueryPoolPerformanceCreateInfoKHR *" />
      <argument name="pNumPasses" type="uint32_t *" />
    </method>
    <method name="vkAcquireProfilingLockKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkAcquireProfilingLockInfoKHR *" />
    </method>
    <method name="vkReleaseProfilingLockKHR">
      <argument name="device" type="VkDevice" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceCapabilities2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pSurfaceInfo" type="const VkPhysicalDeviceSurfaceInfo2KHR *" />
      <argument name="pSurfaceCapabilities" type="VkSurfaceCapabilities2KHR *" />
    </method>
    <method name="vkGetPhysicalDeviceSurfaceFormats2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pSurfaceInfo" type="const VkPhysicalDeviceSurfaceInfo2KHR *" />
      <argument name="pSurfaceFormatCount" type="uint32_t *" />
      <argument name="pSurfaceFormats" type="VkSurfaceFormat2KHR *" />
    </method>
    <method name="vkGetPhysicalDeviceDisplayProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayProperties2KHR *" />
    </method>
    <method name="vkGetPhysicalDeviceDisplayPlaneProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayPlaneProperties2KHR *" />
    </method>
    <method name="vkGetDisplayModeProperties2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="display" type="VkDisplayKHR" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkDisplayModeProperties2KHR *" />
    </method>
    <method name="vkGetDisplayPlaneCapabilities2KHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pDisplayPlaneInfo" type="const VkDisplayPlaneInfo2KHR *" />
      <argument name="pCapabilities" type="VkDisplayPlaneCapabilities2KHR *" />
    </method>
    <method name="vkSetDebugUtilsObjectNameEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pNameInfo" type="const VkDebugUtilsObjectNameInfoEXT *" />
    </method>
    <method name="vkSetDebugUtilsObjectTagEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pTagInfo" type="const VkDebugUtilsObjectTagInfoEXT *" />
    </method>
    <method name="vkQueueBeginDebugUtilsLabelEXT">
      <argument name="queue" type="VkQueue" />
      <argument name="pLabelInfo" type="const VkDebugUtilsLabelEXT *" />
    </method>
    <method name="vkQueueEndDebugUtilsLabelEXT">
      <argument name="queue" type="VkQueue" />
    </method>
    <method name="vkQueueInsertDebugUtilsLabelEXT">
      <argument name="queue" type="VkQueue" />
      <argument name="pLabelInfo" type="const VkDebugUtilsLabelEXT *" />
    </method>
    <method name="vkCmdBeginDebugUtilsLabelEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pLabelInfo" type="const VkDebugUtilsLabelEXT *" />
    </method>
    <method name="vkCmdEndDebugUtilsLabelEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCmdInsertDebugUtilsLabelEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pLabelInfo" type="const VkDebugUtilsLabelEXT *" />
    </method>
    <method name="vkCreateDebugUtilsMessengerEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="pCreateInfo" type="const VkDebugUtilsMessengerCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pMessenger" type="VkDebugUtilsMessengerEXT *" />
    </method>
    <method name="vkDestroyDebugUtilsMessengerEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="messenger" type="VkDebugUtilsMessengerEXT" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkSubmitDebugUtilsMessageEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="messageSeverity" type="VkDebugUtilsMessageSeverityFlagBitsEXT" />
      <argument name="messageTypes" type="VkDebugUtilsMessageTypeFlagsEXT" />
      <argument name="pCallbackData" type="const VkDebugUtilsMessengerCallbackDataEXT *" />
    </method>
    <method name="vkCmdSetSampleLocationsEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSampleLocationsInfo" type="const VkSampleLocationsInfoEXT *" />
    </method>
    <method name="vkGetPhysicalDeviceMultisamplePropertiesEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="samples" type="VkSampleCountFlagBits" />
      <argument name="pMultisampleProperties" type="VkMultisamplePropertiesEXT *" />
    </method>
    <method name="vkGetImageMemoryRequirements2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageMemoryRequirementsInfo2 *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetBufferMemoryRequirements2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferMemoryRequirementsInfo2 *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetImageSparseMemoryRequirements2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageSparseMemoryRequirementsInfo2 *" />
      <argument name="pSparseMemoryRequirementCount" type="uint32_t *" />
      <argument name="pSparseMemoryRequirements" type="VkSparseImageMemoryRequirements2 *" />
    </method>
    <method name="vkCreateAccelerationStructureKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkAccelerationStructureCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pAccelerationStructure" type="VkAccelerationStructureKHR *" />
    </method>
    <method name="vkDestroyAccelerationStructureKHR">
      <argument name="device" type="VkDevice" />
      <argument name="accelerationStructure" type="VkAccelerationStructureKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCmdBuildAccelerationStructuresKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="infoCount" type="uint32_t" />
      <argument name="pInfos" type="const VkAccelerationStructureBuildGeometryInfoKHR *" />
      <argument name="ppBuildRangeInfos" type="const VkAccelerationStructureBuildRangeInfoKHR *const *" />
    </method>
    <method name="vkCmdBuildAccelerationStructuresIndirectKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="infoCount" type="uint32_t" />
      <argument name="pInfos" type="const VkAccelerationStructureBuildGeometryInfoKHR *" />
      <argument name="pIndirectDeviceAddresses" type="const VkDeviceAddress *" />
      <argument name="pIndirectStrides" type="const uint32_t *" />
      <argument name="ppMaxPrimitiveCounts" type="const uint32_t *const *" />
    </method>
    <method name="vkBuildAccelerationStructuresKHR">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="infoCount" type="uint32_t" />
      <argument name="pInfos" type="const VkAccelerationStructureBuildGeometryInfoKHR *" />
      <argument name="ppBuildRangeInfos" type="const VkAccelerationStructureBuildRangeInfoKHR *const *" />
    </method>
    <method name="vkCopyAccelerationStructureKHR">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyAccelerationStructureInfoKHR *" />
    </method>
    <method name="vkCopyAccelerationStructureToMemoryKHR">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyAccelerationStructureToMemoryInfoKHR *" />
    </method>
    <method name="vkCopyMemoryToAccelerationStructureKHR">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyMemoryToAccelerationStructureInfoKHR *" />
    </method>
    <method name="vkWriteAccelerationStructuresPropertiesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="accelerationStructureCount" type="uint32_t" />
      <argument name="pAccelerationStructures" type="const VkAccelerationStructureKHR *" />
      <argument name="queryType" type="VkQueryType" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
      <argument name="stride" type="size_t" />
    </method>
    <method name="vkCmdCopyAccelerationStructureKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyAccelerationStructureInfoKHR *" />
    </method>
    <method name="vkCmdCopyAccelerationStructureToMemoryKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyAccelerationStructureToMemoryInfoKHR *" />
    </method>
    <method name="vkCmdCopyMemoryToAccelerationStructureKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyMemoryToAccelerationStructureInfoKHR *" />
    </method>
    <method name="vkGetAccelerationStructureDeviceAddressKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkAccelerationStructureDeviceAddressInfoKHR *" />
    </method>
    <method name="vkCmdWriteAccelerationStructuresPropertiesKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="accelerationStructureCount" type="uint32_t" />
      <argument name="pAccelerationStructures" type="const VkAccelerationStructureKHR *" />
      <argument name="queryType" type="VkQueryType" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
    </method>
    <method name="vkGetDeviceAccelerationStructureCompatibilityKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pVersionInfo" type="const VkAccelerationStructureVersionInfoKHR *" />
      <argument name="pCompatibility" type="VkAccelerationStructureCompatibilityKHR *" />
    </method>
    <method name="vkGetAccelerationStructureBuildSizesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="buildType" type="VkAccelerationStructureBuildTypeKHR" />
      <argument name="pBuildInfo" type="const VkAccelerationStructureBuildGeometryInfoKHR *" />
      <argument name="pMaxPrimitiveCounts" type="const uint32_t *" />
      <argument name="pSizeInfo" type="VkAccelerationStructureBuildSizesInfoKHR *" />
    </method>
    <method name="vkCmdTraceRaysKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRaygenShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pMissShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pHitShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pCallableShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="width" type="uint32_t" />
      <argument name="height" type="uint32_t" />
      <argument name="depth" type="uint32_t" />
    </method>
    <method name="vkCreateRayTracingPipelinesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="createInfoCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkRayTracingPipelineCreateInfoKHR *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelines" type="VkPipeline *" />
    </method>
    <method name="vkGetRayTracingShaderGroupHandlesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="firstGroup" type="uint32_t" />
      <argument name="groupCount" type="uint32_t" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetRayTracingCaptureReplayShaderGroupHandlesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="firstGroup" type="uint32_t" />
      <argument name="groupCount" type="uint32_t" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdTraceRaysIndirectKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pRaygenShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pMissShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pHitShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="pCallableShaderBindingTable" type="const VkStridedDeviceAddressRegionKHR *" />
      <argument name="indirectDeviceAddress" type="VkDeviceAddress" />
    </method>
    <method name="vkGetRayTracingShaderGroupStackSizeKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="group" type="uint32_t" />
      <argument name="groupShader" type="VkShaderGroupShaderKHR" />
    </method>
    <method name="vkCmdSetRayTracingPipelineStackSizeKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineStackSize" type="uint32_t" />
    </method>
    <method name="vkCreateSamplerYcbcrConversionKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkSamplerYcbcrConversionCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pYcbcrConversion" type="VkSamplerYcbcrConversion *" />
    </method>
    <method name="vkDestroySamplerYcbcrConversionKHR">
      <argument name="device" type="VkDevice" />
      <argument name="ycbcrConversion" type="VkSamplerYcbcrConversion" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkBindBufferMemory2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfos" type="const VkBindBufferMemoryInfo *" />
    </method>
    <method name="vkBindImageMemory2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfos" type="const VkBindImageMemoryInfo *" />
    </method>
    <method name="vkGetImageDrmFormatModifierPropertiesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pProperties" type="VkImageDrmFormatModifierPropertiesEXT *" />
    </method>
    <method name="vkCreateValidationCacheEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkValidationCacheCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pValidationCache" type="VkValidationCacheEXT *" />
    </method>
    <method name="vkDestroyValidationCacheEXT">
      <argument name="device" type="VkDevice" />
      <argument name="validationCache" type="VkValidationCacheEXT" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkMergeValidationCachesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="dstCache" type="VkValidationCacheEXT" />
      <argument name="srcCacheCount" type="uint32_t" />
      <argument name="pSrcCaches" type="const VkValidationCacheEXT *" />
    </method>
    <method name="vkGetValidationCacheDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="validationCache" type="VkValidationCacheEXT" />
      <argument name="pDataSize" type="size_t *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdBindShadingRateImageNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="imageView" type="VkImageView" />
      <argument name="imageLayout" type="VkImageLayout" />
    </method>
    <method name="vkCmdSetViewportShadingRatePaletteNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstViewport" type="uint32_t" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pShadingRatePalettes" type="const VkShadingRatePaletteNV *" />
    </method>
    <method name="vkCmdSetCoarseSampleOrderNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="sampleOrderType" type="VkCoarseSampleOrderTypeNV" />
      <argument name="customSampleOrderCount" type="uint32_t" />
      <argument name="pCustomSampleOrders" type="const VkCoarseSampleOrderCustomNV *" />
    </method>
    <method name="vkCreateAccelerationStructureNV">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkAccelerationStructureCreateInfoNV *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pAccelerationStructure" type="VkAccelerationStructureNV *" />
    </method>
    <method name="vkDestroyAccelerationStructureNV">
      <argument name="device" type="VkDevice" />
      <argument name="accelerationStructure" type="VkAccelerationStructureNV" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetAccelerationStructureMemoryRequirementsNV">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkAccelerationStructureMemoryRequirementsInfoNV *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2KHR *" />
    </method>
    <method name="vkBindAccelerationStructureMemoryNV">
      <argument name="device" type="VkDevice" />
      <argument name="bindInfoCount" type="uint32_t" />
      <argument name="pBindInfos" type="const VkBindAccelerationStructureMemoryInfoNV *" />
    </method>
    <method name="vkCmdBuildAccelerationStructureNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkAccelerationStructureInfoNV *" />
      <argument name="instanceData" type="VkBuffer" />
      <argument name="instanceOffset" type="VkDeviceSize" />
      <argument name="update" type="VkBool32" />
      <argument name="dst" type="VkAccelerationStructureNV" />
      <argument name="src" type="VkAccelerationStructureNV" />
      <argument name="scratch" type="VkBuffer" />
      <argument name="scratchOffset" type="VkDeviceSize" />
    </method>
    <method name="vkCmdCopyAccelerationStructureNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="dst" type="VkAccelerationStructureNV" />
      <argument name="src" type="VkAccelerationStructureNV" />
      <argument name="mode" type="VkCopyAccelerationStructureModeKHR" />
    </method>
    <method name="vkCmdTraceRaysNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="raygenShaderBindingTableBuffer" type="VkBuffer" />
      <argument name="raygenShaderBindingOffset" type="VkDeviceSize" />
      <argument name="missShaderBindingTableBuffer" type="VkBuffer" />
      <argument name="missShaderBindingOffset" type="VkDeviceSize" />
      <argument name="missShaderBindingStride" type="VkDeviceSize" />
      <argument name="hitShaderBindingTableBuffer" type="VkBuffer" />
      <argument name="hitShaderBindingOffset" type="VkDeviceSize" />
      <argument name="hitShaderBindingStride" type="VkDeviceSize" />
      <argument name="callableShaderBindingTableBuffer" type="VkBuffer" />
      <argument name="callableShaderBindingOffset" type="VkDeviceSize" />
      <argument name="callableShaderBindingStride" type="VkDeviceSize" />
      <argument name="width" type="uint32_t" />
      <argument name="height" type="uint32_t" />
      <argument name="depth" type="uint32_t" />
    </method>
    <method name="vkCreateRayTracingPipelinesNV">
      <argument name="device" type="VkDevice" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="createInfoCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkRayTracingPipelineCreateInfoNV *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPipelines" type="VkPipeline *" />
    </method>
    <method name="vkGetRayTracingShaderGroupHandlesNV">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="firstGroup" type="uint32_t" />
      <argument name="groupCount" type="uint32_t" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetAccelerationStructureHandleNV">
      <argument name="device" type="VkDevice" />
      <argument name="accelerationStructure" type="VkAccelerationStructureNV" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdWriteAccelerationStructuresPropertiesNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="accelerationStructureCount" type="uint32_t" />
      <argument name="pAccelerationStructures" type="const VkAccelerationStructureNV *" />
      <argument name="queryType" type="VkQueryType" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
    </method>
    <method name="vkCompileDeferredNV">
      <argument name="device" type="VkDevice" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="shader" type="uint32_t" />
    </method>
    <method name="vkGetDescriptorSetLayoutSupportKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkDescriptorSetLayoutCreateInfo *" />
      <argument name="pSupport" type="VkDescriptorSetLayoutSupport *" />
    </method>
    <method name="vkCmdDrawIndirectCountKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawIndexedIndirectCountKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkGetMemoryHostPointerPropertiesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="handleType" type="VkExternalMemoryHandleTypeFlagBits" />
      <argument name="pHostPointer" type="const void *" />
      <argument name="pMemoryHostPointerProperties" type="VkMemoryHostPointerPropertiesEXT *" />
    </method>
    <method name="vkCmdWriteBufferMarkerAMD">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineStage" type="VkPipelineStageFlagBits" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="dstOffset" type="VkDeviceSize" />
      <argument name="marker" type="uint32_t" />
    </method>
    <method name="vkGetPhysicalDeviceCalibrateableTimeDomainsEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pTimeDomainCount" type="uint32_t *" />
      <argument name="pTimeDomains" type="VkTimeDomainKHR *" />
    </method>
    <method name="vkGetCalibratedTimestampsEXT">
      <argument name="device" type="VkDevice" />
      <argument name="timestampCount" type="uint32_t" />
      <argument name="pTimestampInfos" type="const VkCalibratedTimestampInfoKHR *" />
      <argument name="pTimestamps" type="uint64_t *" />
      <argument name="pMaxDeviation" type="uint64_t *" />
    </method>
    <method name="vkCmdDrawMeshTasksNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="taskCount" type="uint32_t" />
      <argument name="firstTask" type="uint32_t" />
    </method>
    <method name="vkCmdDrawMeshTasksIndirectNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawMeshTasksIndirectCountNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdSetExclusiveScissorEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstExclusiveScissor" type="uint32_t" />
      <argument name="exclusiveScissorCount" type="uint32_t" />
      <argument name="pExclusiveScissorEnables" type="const VkBool32 *" />
    </method>
    <method name="vkCmdSetExclusiveScissorNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstExclusiveScissor" type="uint32_t" />
      <argument name="exclusiveScissorCount" type="uint32_t" />
      <argument name="pExclusiveScissors" type="const VkRect2D *" />
    </method>
    <method name="vkCmdSetCheckpointNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCheckpointMarker" type="const void *" />
    </method>
    <method name="vkGetQueueCheckpointDataNV">
      <argument name="queue" type="VkQueue" />
      <argument name="pCheckpointDataCount" type="uint32_t *" />
      <argument name="pCheckpointData" type="VkCheckpointDataNV *" />
    </method>
    <method name="vkGetSemaphoreCounterValueKHR">
      <argument name="device" type="VkDevice" />
      <argument name="semaphore" type="VkSemaphore" />
      <argument name="pValue" type="uint64_t *" />
    </method>
    <method name="vkWaitSemaphoresKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pWaitInfo" type="const VkSemaphoreWaitInfo *" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="vkSignalSemaphoreKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pSignalInfo" type="const VkSemaphoreSignalInfo *" />
    </method>
    <method name="vkInitializePerformanceApiINTEL">
      <argument name="device" type="VkDevice" />
      <argument name="pInitializeInfo" type="const VkInitializePerformanceApiInfoINTEL *" />
    </method>
    <method name="vkUninitializePerformanceApiINTEL">
      <argument name="device" type="VkDevice" />
    </method>
    <method name="vkCmdSetPerformanceMarkerINTEL">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pMarkerInfo" type="const VkPerformanceMarkerInfoINTEL *" />
    </method>
    <method name="vkCmdSetPerformanceStreamMarkerINTEL">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pMarkerInfo" type="const VkPerformanceStreamMarkerInfoINTEL *" />
    </method>
    <method name="vkCmdSetPerformanceOverrideINTEL">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pOverrideInfo" type="const VkPerformanceOverrideInfoINTEL *" />
    </method>
    <method name="vkAcquirePerformanceConfigurationINTEL">
      <argument name="device" type="VkDevice" />
      <argument name="pAcquireInfo" type="const VkPerformanceConfigurationAcquireInfoINTEL *" />
      <argument name="pConfiguration" type="VkPerformanceConfigurationINTEL *" />
    </method>
    <method name="vkReleasePerformanceConfigurationINTEL">
      <argument name="device" type="VkDevice" />
      <argument name="configuration" type="VkPerformanceConfigurationINTEL" />
    </method>
    <method name="vkQueueSetPerformanceConfigurationINTEL">
      <argument name="queue" type="VkQueue" />
      <argument name="configuration" type="VkPerformanceConfigurationINTEL" />
    </method>
    <method name="vkGetPerformanceParameterINTEL">
      <argument name="device" type="VkDevice" />
      <argument name="parameter" type="VkPerformanceParameterTypeINTEL" />
      <argument name="pValue" type="VkPerformanceValueINTEL *" />
    </method>
    <method name="vkSetLocalDimmingAMD">
      <argument name="device" type="VkDevice" />
      <argument name="swapChain" type="VkSwapchainKHR" />
      <argument name="localDimmingEnable" type="VkBool32" />
    </method>
    <method name="vkGetPhysicalDeviceFragmentShadingRatesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pFragmentShadingRateCount" type="uint32_t *" />
      <argument name="pFragmentShadingRates" type="VkPhysicalDeviceFragmentShadingRateKHR *" />
    </method>
    <method name="vkCmdSetFragmentShadingRateKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pFragmentSize" type="const VkExtent2D *" />
      <argument name="combinerOps" type="const VkFragmentShadingRateCombinerOpKHR[2]" />
    </method>
    <method name="vkGetBufferDeviceAddressEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferDeviceAddressInfo *" />
    </method>
    <method name="vkGetPhysicalDeviceToolPropertiesEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pToolCount" type="uint32_t *" />
      <argument name="pToolProperties" type="VkPhysicalDeviceToolProperties *" />
    </method>
    <method name="vkWaitForPresentKHR">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="presentId" type="uint64_t" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="vkGetPhysicalDeviceCooperativeMatrixPropertiesNV">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkCooperativeMatrixPropertiesNV *" />
    </method>
    <method name="vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pCombinationCount" type="uint32_t *" />
      <argument name="pCombinations" type="VkFramebufferMixedSamplesCombinationNV *" />
    </method>
    <method name="vkCreateHeadlessSurfaceEXT">
      <argument name="instance" type="VkInstance" />
      <argument name="pCreateInfo" type="const VkHeadlessSurfaceCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSurface" type="VkSurfaceKHR *" />
    </method>
    <method name="vkGetBufferDeviceAddressKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferDeviceAddressInfo *" />
    </method>
    <method name="vkGetBufferOpaqueCaptureAddressKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferDeviceAddressInfo *" />
    </method>
    <method name="vkGetDeviceMemoryOpaqueCaptureAddressKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceMemoryOpaqueCaptureAddressInfo *" />
    </method>
    <method name="vkCmdSetLineStippleEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="lineStippleFactor" type="uint32_t" />
      <argument name="lineStipplePattern" type="uint16_t" />
    </method>
    <method name="vkResetQueryPoolEXT">
      <argument name="device" type="VkDevice" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
    </method>
    <method name="vkCmdSetCullModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="cullMode" type="VkCullModeFlags" />
    </method>
    <method name="vkCmdSetFrontFaceEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="frontFace" type="VkFrontFace" />
    </method>
    <method name="vkCmdSetPrimitiveTopologyEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="primitiveTopology" type="VkPrimitiveTopology" />
    </method>
    <method name="vkCmdSetViewportWithCountEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pViewports" type="const VkViewport *" />
    </method>
    <method name="vkCmdSetScissorWithCountEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="scissorCount" type="uint32_t" />
      <argument name="pScissors" type="const VkRect2D *" />
    </method>
    <method name="vkCmdBindVertexBuffers2EXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstBinding" type="uint32_t" />
      <argument name="bindingCount" type="uint32_t" />
      <argument name="pBuffers" type="const VkBuffer *" />
      <argument name="pOffsets" type="const VkDeviceSize *" />
      <argument name="pSizes" type="const VkDeviceSize *" />
      <argument name="pStrides" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdSetDepthTestEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthWriteEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthWriteEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthCompareOpEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthCompareOp" type="VkCompareOp" />
    </method>
    <method name="vkCmdSetDepthBoundsTestEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthBoundsTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetStencilTestEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stencilTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetStencilOpEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="faceMask" type="VkStencilFaceFlags" />
      <argument name="failOp" type="VkStencilOp" />
      <argument name="passOp" type="VkStencilOp" />
      <argument name="depthFailOp" type="VkStencilOp" />
      <argument name="compareOp" type="VkCompareOp" />
    </method>
    <method name="vkCreateDeferredOperationKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pDeferredOperation" type="VkDeferredOperationKHR *" />
    </method>
    <method name="vkDestroyDeferredOperationKHR">
      <argument name="device" type="VkDevice" />
      <argument name="operation" type="VkDeferredOperationKHR" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetDeferredOperationMaxConcurrencyKHR">
      <argument name="device" type="VkDevice" />
      <argument name="operation" type="VkDeferredOperationKHR" />
    </method>
    <method name="vkGetDeferredOperationResultKHR">
      <argument name="device" type="VkDevice" />
      <argument name="operation" type="VkDeferredOperationKHR" />
    </method>
    <method name="vkDeferredOperationJoinKHR">
      <argument name="device" type="VkDevice" />
      <argument name="operation" type="VkDeferredOperationKHR" />
    </method>
    <method name="vkGetPipelineExecutablePropertiesKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pPipelineInfo" type="const VkPipelineInfoKHR *" />
      <argument name="pExecutableCount" type="uint32_t *" />
      <argument name="pProperties" type="VkPipelineExecutablePropertiesKHR *" />
    </method>
    <method name="vkGetPipelineExecutableStatisticsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pExecutableInfo" type="const VkPipelineExecutableInfoKHR *" />
      <argument name="pStatisticCount" type="uint32_t *" />
      <argument name="pStatistics" type="VkPipelineExecutableStatisticKHR *" />
    </method>
    <method name="vkGetPipelineExecutableInternalRepresentationsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pExecutableInfo" type="const VkPipelineExecutableInfoKHR *" />
      <argument name="pInternalRepresentationCount" type="uint32_t *" />
      <argument name="pInternalRepresentations" type="VkPipelineExecutableInternalRepresentationKHR *" />
    </method>
    <method name="vkCopyMemoryToImageEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCopyMemoryToImageInfo" type="const VkCopyMemoryToImageInfoEXT *" />
    </method>
    <method name="vkCopyImageToMemoryEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCopyImageToMemoryInfo" type="const VkCopyImageToMemoryInfoEXT *" />
    </method>
    <method name="vkCopyImageToImageEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCopyImageToImageInfo" type="const VkCopyImageToImageInfoEXT *" />
    </method>
    <method name="vkTransitionImageLayoutEXT">
      <argument name="device" type="VkDevice" />
      <argument name="transitionCount" type="uint32_t" />
      <argument name="pTransitions" type="const VkHostImageLayoutTransitionInfoEXT *" />
    </method>
    <method name="vkGetImageSubresourceLayout2EXT">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pSubresource" type="const VkImageSubresource2KHR *" />
      <argument name="pLayout" type="VkSubresourceLayout2KHR *" />
    </method>
    <method name="vkMapMemory2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pMemoryMapInfo" type="const VkMemoryMapInfoKHR *" />
      <argument name="ppData" type="void **" />
    </method>
    <method name="vkUnmapMemory2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="pMemoryUnmapInfo" type="const VkMemoryUnmapInfoKHR *" />
    </method>
    <method name="vkReleaseSwapchainImagesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pReleaseInfo" type="const VkReleaseSwapchainImagesInfoEXT *" />
    </method>
    <method name="vkGetGeneratedCommandsMemoryRequirementsNV">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkGeneratedCommandsMemoryRequirementsInfoNV *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkCmdPreprocessGeneratedCommandsNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pGeneratedCommandsInfo" type="const VkGeneratedCommandsInfoNV *" />
    </method>
    <method name="vkCmdExecuteGeneratedCommandsNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="isPreprocessed" type="VkBool32" />
      <argument name="pGeneratedCommandsInfo" type="const VkGeneratedCommandsInfoNV *" />
    </method>
    <method name="vkCmdBindPipelineShaderGroupNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="groupIndex" type="uint32_t" />
    </method>
    <method name="vkCreateIndirectCommandsLayoutNV">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkIndirectCommandsLayoutCreateInfoNV *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pIndirectCommandsLayout" type="VkIndirectCommandsLayoutNV *" />
    </method>
    <method name="vkDestroyIndirectCommandsLayoutNV">
      <argument name="device" type="VkDevice" />
      <argument name="indirectCommandsLayout" type="VkIndirectCommandsLayoutNV" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCmdSetDepthBias2EXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pDepthBiasInfo" type="const VkDepthBiasInfoEXT *" />
    </method>
    <method name="vkAcquireDrmDisplayEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="drmFd" type="int32_t" />
      <argument name="display" type="VkDisplayKHR" />
    </method>
    <method name="vkGetDrmDisplayEXT">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="drmFd" type="int32_t" />
      <argument name="connectorId" type="uint32_t" />
      <argument name="display" type="VkDisplayKHR *" />
    </method>
    <method name="vkCreatePrivateDataSlotEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkPrivateDataSlotCreateInfo *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pPrivateDataSlot" type="VkPrivateDataSlot *" />
    </method>
    <method name="vkDestroyPrivateDataSlotEXT">
      <argument name="device" type="VkDevice" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkSetPrivateDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="objectType" type="VkObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="data" type="uint64_t" />
    </method>
    <method name="vkGetPrivateDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="objectType" type="VkObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="pData" type="uint64_t *" />
    </method>
    <method name="vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pQualityLevelInfo" type="const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *" />
      <argument name="pQualityLevelProperties" type="VkVideoEncodeQualityLevelPropertiesKHR *" />
    </method>
    <method name="vkGetEncodedVideoSessionParametersKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pVideoSessionParametersInfo" type="const VkVideoEncodeSessionParametersGetInfoKHR *" />
      <argument name="pFeedbackInfo" type="VkVideoEncodeSessionParametersFeedbackInfoKHR *" />
      <argument name="pDataSize" type="size_t *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdEncodeVideoKHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pEncodeInfo" type="const VkVideoEncodeInfoKHR *" />
    </method>
    <method name="vkCmdSetEvent2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="pDependencyInfo" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdResetEvent2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="event" type="VkEvent" />
      <argument name="stageMask" type="VkPipelineStageFlags2" />
    </method>
    <method name="vkCmdWaitEvents2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="eventCount" type="uint32_t" />
      <argument name="pEvents" type="const VkEvent *" />
      <argument name="pDependencyInfos" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdPipelineBarrier2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pDependencyInfo" type="const VkDependencyInfo *" />
    </method>
    <method name="vkCmdWriteTimestamp2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stage" type="VkPipelineStageFlags2" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="vkQueueSubmit2KHR">
      <argument name="queue" type="VkQueue" />
      <argument name="submitCount" type="uint32_t" />
      <argument name="pSubmits" type="const VkSubmitInfo2 *" />
      <argument name="fence" type="VkFence" />
    </method>
    <method name="vkCmdWriteBufferMarker2AMD">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stage" type="VkPipelineStageFlags2" />
      <argument name="dstBuffer" type="VkBuffer" />
      <argument name="dstOffset" type="VkDeviceSize" />
      <argument name="marker" type="uint32_t" />
    </method>
    <method name="vkGetQueueCheckpointData2NV">
      <argument name="queue" type="VkQueue" />
      <argument name="pCheckpointDataCount" type="uint32_t *" />
      <argument name="pCheckpointData" type="VkCheckpointData2NV *" />
    </method>
    <method name="vkGetDescriptorSetLayoutSizeEXT">
      <argument name="device" type="VkDevice" />
      <argument name="layout" type="VkDescriptorSetLayout" />
      <argument name="pLayoutSizeInBytes" type="VkDeviceSize *" />
    </method>
    <method name="vkGetDescriptorSetLayoutBindingOffsetEXT">
      <argument name="device" type="VkDevice" />
      <argument name="layout" type="VkDescriptorSetLayout" />
      <argument name="binding" type="uint32_t" />
      <argument name="pOffset" type="VkDeviceSize *" />
    </method>
    <method name="vkGetDescriptorEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pDescriptorInfo" type="const VkDescriptorGetInfoEXT *" />
      <argument name="dataSize" type="size_t" />
      <argument name="pDescriptor" type="void *" />
    </method>
    <method name="vkCmdBindDescriptorBuffersEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="bufferCount" type="uint32_t" />
      <argument name="pBindingInfos" type="const VkDescriptorBufferBindingInfoEXT *" />
    </method>
    <method name="vkCmdSetDescriptorBufferOffsetsEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="firstSet" type="uint32_t" />
      <argument name="setCount" type="uint32_t" />
      <argument name="pBufferIndices" type="const uint32_t *" />
      <argument name="pOffsets" type="const VkDeviceSize *" />
    </method>
    <method name="vkCmdBindDescriptorBufferEmbeddedSamplersEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="layout" type="VkPipelineLayout" />
      <argument name="set" type="uint32_t" />
    </method>
    <method name="vkGetBufferOpaqueCaptureDescriptorDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkBufferCaptureDescriptorDataInfoEXT *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetImageOpaqueCaptureDescriptorDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageCaptureDescriptorDataInfoEXT *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetImageViewOpaqueCaptureDescriptorDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkImageViewCaptureDescriptorDataInfoEXT *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetSamplerOpaqueCaptureDescriptorDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkSamplerCaptureDescriptorDataInfoEXT *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkAccelerationStructureCaptureDescriptorDataInfoEXT *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdSetFragmentShadingRateEnumNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="shadingRate" type="VkFragmentShadingRateNV" />
      <argument name="combinerOps" type="const VkFragmentShadingRateCombinerOpKHR[2]" />
    </method>
    <method name="vkCmdDrawMeshTasksEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="vkCmdDrawMeshTasksIndirectEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawMeshTasksIndirectCountEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="countBuffer" type="VkBuffer" />
      <argument name="countBufferOffset" type="VkDeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdCopyBuffer2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyBufferInfo" type="const VkCopyBufferInfo2 *" />
    </method>
    <method name="vkCmdCopyImage2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyImageInfo" type="const VkCopyImageInfo2 *" />
    </method>
    <method name="vkCmdCopyBufferToImage2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyBufferToImageInfo" type="const VkCopyBufferToImageInfo2 *" />
    </method>
    <method name="vkCmdCopyImageToBuffer2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pCopyImageToBufferInfo" type="const VkCopyImageToBufferInfo2 *" />
    </method>
    <method name="vkCmdBlitImage2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBlitImageInfo" type="const VkBlitImageInfo2 *" />
    </method>
    <method name="vkCmdResolveImage2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pResolveImageInfo" type="const VkResolveImageInfo2 *" />
    </method>
    <method name="vkGetDeviceFaultInfoEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pFaultCounts" type="VkDeviceFaultCountsEXT *" />
      <argument name="pFaultInfo" type="VkDeviceFaultInfoEXT *" />
    </method>
    <method name="vkCmdSetVertexInputEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="vertexBindingDescriptionCount" type="uint32_t" />
      <argument name="pVertexBindingDescriptions" type="const VkVertexInputBindingDescription2EXT *" />
      <argument name="vertexAttributeDescriptionCount" type="uint32_t" />
      <argument name="pVertexAttributeDescriptions" type="const VkVertexInputAttributeDescription2EXT *" />
    </method>
    <method name="vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI">
      <argument name="device" type="VkDevice" />
      <argument name="renderpass" type="VkRenderPass" />
      <argument name="pMaxWorkgroupSize" type="VkExtent2D *" />
    </method>
    <method name="vkCmdSubpassShadingHUAWEI">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="vkCmdBindInvocationMaskHUAWEI">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="imageView" type="VkImageView" />
      <argument name="imageLayout" type="VkImageLayout" />
    </method>
    <method name="vkGetMemoryRemoteAddressNV">
      <argument name="device" type="VkDevice" />
      <argument name="pMemoryGetRemoteAddressInfo" type="const VkMemoryGetRemoteAddressInfoNV *" />
      <argument name="pAddress" type="VkRemoteAddressNV *" />
    </method>
    <method name="vkGetPipelinePropertiesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pPipelineInfo" type="const VkPipelineInfoEXT *" />
      <argument name="pPipelineProperties" type="VkBaseOutStructure *" />
    </method>
    <method name="vkCmdSetPatchControlPointsEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="patchControlPoints" type="uint32_t" />
    </method>
    <method name="vkCmdSetRasterizerDiscardEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="rasterizerDiscardEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthBiasEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthBiasEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetLogicOpEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="logicOp" type="VkLogicOp" />
    </method>
    <method name="vkCmdSetPrimitiveRestartEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="primitiveRestartEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetColorWriteEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pColorWriteEnables" type="const VkBool32 *" />
    </method>
    <method name="vkCmdTraceRaysIndirect2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="indirectDeviceAddress" type="VkDeviceAddress" />
    </method>
    <method name="vkCmdDrawMultiEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="pVertexInfo" type="const VkMultiDrawInfoEXT *" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdDrawMultiIndexedEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="pIndexInfo" type="const VkMultiDrawIndexedInfoEXT *" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
      <argument name="pVertexOffset" type="const int32_t *" />
    </method>
    <method name="vkCreateMicromapEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkMicromapCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pMicromap" type="VkMicromapEXT *" />
    </method>
    <method name="vkDestroyMicromapEXT">
      <argument name="device" type="VkDevice" />
      <argument name="micromap" type="VkMicromapEXT" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkCmdBuildMicromapsEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="infoCount" type="uint32_t" />
      <argument name="pInfos" type="const VkMicromapBuildInfoEXT *" />
    </method>
    <method name="vkBuildMicromapsEXT">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="infoCount" type="uint32_t" />
      <argument name="pInfos" type="const VkMicromapBuildInfoEXT *" />
    </method>
    <method name="vkCopyMicromapEXT">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyMicromapInfoEXT *" />
    </method>
    <method name="vkCopyMicromapToMemoryEXT">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyMicromapToMemoryInfoEXT *" />
    </method>
    <method name="vkCopyMemoryToMicromapEXT">
      <argument name="device" type="VkDevice" />
      <argument name="deferredOperation" type="VkDeferredOperationKHR" />
      <argument name="pInfo" type="const VkCopyMemoryToMicromapInfoEXT *" />
    </method>
    <method name="vkWriteMicromapsPropertiesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="micromapCount" type="uint32_t" />
      <argument name="pMicromaps" type="const VkMicromapEXT *" />
      <argument name="queryType" type="VkQueryType" />
      <argument name="dataSize" type="size_t" />
      <argument name="pData" type="void *" />
      <argument name="stride" type="size_t" />
    </method>
    <method name="vkCmdCopyMicromapEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyMicromapInfoEXT *" />
    </method>
    <method name="vkCmdCopyMicromapToMemoryEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyMicromapToMemoryInfoEXT *" />
    </method>
    <method name="vkCmdCopyMemoryToMicromapEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pInfo" type="const VkCopyMemoryToMicromapInfoEXT *" />
    </method>
    <method name="vkCmdWriteMicromapsPropertiesEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="micromapCount" type="uint32_t" />
      <argument name="pMicromaps" type="const VkMicromapEXT *" />
      <argument name="queryType" type="VkQueryType" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="firstQuery" type="uint32_t" />
    </method>
    <method name="vkGetDeviceMicromapCompatibilityEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pVersionInfo" type="const VkMicromapVersionInfoEXT *" />
      <argument name="pCompatibility" type="VkAccelerationStructureCompatibilityKHR *" />
    </method>
    <method name="vkGetMicromapBuildSizesEXT">
      <argument name="device" type="VkDevice" />
      <argument name="buildType" type="VkAccelerationStructureBuildTypeKHR" />
      <argument name="pBuildInfo" type="const VkMicromapBuildInfoEXT *" />
      <argument name="pSizeInfo" type="VkMicromapBuildSizesInfoEXT *" />
    </method>
    <method name="vkCmdDrawClusterHUAWEI">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="vkCmdDrawClusterIndirectHUAWEI">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
    </method>
    <method name="vkSetDeviceMemoryPriorityEXT">
      <argument name="device" type="VkDevice" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="priority" type="float" />
    </method>
    <method name="vkGetDeviceBufferMemoryRequirementsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceBufferMemoryRequirements *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetDeviceImageMemoryRequirementsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceImageMemoryRequirements *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkGetDeviceImageSparseMemoryRequirementsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceImageMemoryRequirements *" />
      <argument name="pSparseMemoryRequirementCount" type="uint32_t *" />
      <argument name="pSparseMemoryRequirements" type="VkSparseImageMemoryRequirements2 *" />
    </method>
    <method name="vkGetDescriptorSetLayoutHostMappingInfoVALVE">
      <argument name="device" type="VkDevice" />
      <argument name="pBindingReference" type="const VkDescriptorSetBindingReferenceVALVE *" />
      <argument name="pHostMapping" type="VkDescriptorSetLayoutHostMappingInfoVALVE *" />
    </method>
    <method name="vkGetDescriptorSetHostMappingVALVE">
      <argument name="device" type="VkDevice" />
      <argument name="descriptorSet" type="VkDescriptorSet" />
      <argument name="ppData" type="void **" />
    </method>
    <method name="vkCmdCopyMemoryIndirectNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="copyBufferAddress" type="VkDeviceAddress" />
      <argument name="copyCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkCmdCopyMemoryToImageIndirectNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="copyBufferAddress" type="VkDeviceAddress" />
      <argument name="copyCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
      <argument name="dstImage" type="VkImage" />
      <argument name="dstImageLayout" type="VkImageLayout" />
      <argument name="pImageSubresources" type="const VkImageSubresourceLayers *" />
    </method>
    <method name="vkCmdDecompressMemoryNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="decompressRegionCount" type="uint32_t" />
      <argument name="pDecompressMemoryRegions" type="const VkDecompressMemoryRegionNV *" />
    </method>
    <method name="vkCmdDecompressMemoryIndirectCountNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="indirectCommandsAddress" type="VkDeviceAddress" />
      <argument name="indirectCommandsCountAddress" type="VkDeviceAddress" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="vkGetPipelineIndirectMemoryRequirementsNV">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkComputePipelineCreateInfo *" />
      <argument name="pMemoryRequirements" type="VkMemoryRequirements2 *" />
    </method>
    <method name="vkCmdUpdatePipelineIndirectBufferNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pipelineBindPoint" type="VkPipelineBindPoint" />
      <argument name="pipeline" type="VkPipeline" />
    </method>
    <method name="vkGetPipelineIndirectDeviceAddressNV">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkPipelineIndirectDeviceAddressInfoNV *" />
    </method>
    <method name="vkCmdSetTessellationDomainOriginEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="domainOrigin" type="VkTessellationDomainOrigin" />
    </method>
    <method name="vkCmdSetDepthClampEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthClampEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetPolygonModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="polygonMode" type="VkPolygonMode" />
    </method>
    <method name="vkCmdSetRasterizationSamplesEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="rasterizationSamples" type="VkSampleCountFlagBits" />
    </method>
    <method name="vkCmdSetSampleMaskEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="samples" type="VkSampleCountFlagBits" />
      <argument name="pSampleMask" type="const VkSampleMask *" />
    </method>
    <method name="vkCmdSetAlphaToCoverageEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="alphaToCoverageEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetAlphaToOneEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="alphaToOneEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetLogicOpEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="logicOpEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetColorBlendEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pColorBlendEnables" type="const VkBool32 *" />
    </method>
    <method name="vkCmdSetColorBlendEquationEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pColorBlendEquations" type="const VkColorBlendEquationEXT *" />
    </method>
    <method name="vkCmdSetColorWriteMaskEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pColorWriteMasks" type="const VkColorComponentFlags *" />
    </method>
    <method name="vkCmdSetRasterizationStreamEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="rasterizationStream" type="uint32_t" />
    </method>
    <method name="vkCmdSetConservativeRasterizationModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="conservativeRasterizationMode" type="VkConservativeRasterizationModeEXT" />
    </method>
    <method name="vkCmdSetExtraPrimitiveOverestimationSizeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="extraPrimitiveOverestimationSize" type="float" />
    </method>
    <method name="vkCmdSetDepthClipEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="depthClipEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetSampleLocationsEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="sampleLocationsEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetColorBlendAdvancedEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="attachmentCount" type="uint32_t" />
      <argument name="pColorBlendAdvanced" type="const VkColorBlendAdvancedEXT *" />
    </method>
    <method name="vkCmdSetProvokingVertexModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="provokingVertexMode" type="VkProvokingVertexModeEXT" />
    </method>
    <method name="vkCmdSetLineRasterizationModeEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="lineRasterizationMode" type="VkLineRasterizationModeEXT" />
    </method>
    <method name="vkCmdSetLineStippleEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stippledLineEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetDepthClipNegativeOneToOneEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="negativeOneToOne" type="VkBool32" />
    </method>
    <method name="vkCmdSetViewportWScalingEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="viewportWScalingEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetViewportSwizzleNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="firstViewport" type="uint32_t" />
      <argument name="viewportCount" type="uint32_t" />
      <argument name="pViewportSwizzles" type="const VkViewportSwizzleNV *" />
    </method>
    <method name="vkCmdSetCoverageToColorEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageToColorEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetCoverageToColorLocationNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageToColorLocation" type="uint32_t" />
    </method>
    <method name="vkCmdSetCoverageModulationModeNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageModulationMode" type="VkCoverageModulationModeNV" />
    </method>
    <method name="vkCmdSetCoverageModulationTableEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageModulationTableEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetCoverageModulationTableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageModulationTableCount" type="uint32_t" />
      <argument name="pCoverageModulationTable" type="const float *" />
    </method>
    <method name="vkCmdSetShadingRateImageEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="shadingRateImageEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetRepresentativeFragmentTestEnableNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="representativeFragmentTestEnable" type="VkBool32" />
    </method>
    <method name="vkCmdSetCoverageReductionModeNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="coverageReductionMode" type="VkCoverageReductionModeNV" />
    </method>
    <method name="vkGetShaderModuleIdentifierEXT">
      <argument name="device" type="VkDevice" />
      <argument name="shaderModule" type="VkShaderModule" />
      <argument name="pIdentifier" type="VkShaderModuleIdentifierEXT *" />
    </method>
    <method name="vkGetShaderModuleCreateInfoIdentifierEXT">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkShaderModuleCreateInfo *" />
      <argument name="pIdentifier" type="VkShaderModuleIdentifierEXT *" />
    </method>
    <method name="vkGetPhysicalDeviceOpticalFlowImageFormatsNV">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pOpticalFlowImageFormatInfo" type="const VkOpticalFlowImageFormatInfoNV *" />
      <argument name="pFormatCount" type="uint32_t *" />
      <argument name="pImageFormatProperties" type="VkOpticalFlowImageFormatPropertiesNV *" />
    </method>
    <method name="vkCreateOpticalFlowSessionNV">
      <argument name="device" type="VkDevice" />
      <argument name="pCreateInfo" type="const VkOpticalFlowSessionCreateInfoNV *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pSession" type="VkOpticalFlowSessionNV *" />
    </method>
    <method name="vkDestroyOpticalFlowSessionNV">
      <argument name="device" type="VkDevice" />
      <argument name="session" type="VkOpticalFlowSessionNV" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkBindOpticalFlowSessionImageNV">
      <argument name="device" type="VkDevice" />
      <argument name="session" type="VkOpticalFlowSessionNV" />
      <argument name="bindingPoint" type="VkOpticalFlowSessionBindingPointNV" />
      <argument name="view" type="VkImageView" />
      <argument name="layout" type="VkImageLayout" />
    </method>
    <method name="vkCmdOpticalFlowExecuteNV">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="session" type="VkOpticalFlowSessionNV" />
      <argument name="pExecuteInfo" type="const VkOpticalFlowExecuteInfoNV *" />
    </method>
    <method name="vkCmdBindIndexBuffer2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="offset" type="VkDeviceSize" />
      <argument name="size" type="VkDeviceSize" />
      <argument name="indexType" type="VkIndexType" />
    </method>
    <method name="vkGetRenderingAreaGranularityKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pRenderingAreaInfo" type="const VkRenderingAreaInfoKHR *" />
      <argument name="pGranularity" type="VkExtent2D *" />
    </method>
    <method name="vkGetDeviceImageSubresourceLayoutKHR">
      <argument name="device" type="VkDevice" />
      <argument name="pInfo" type="const VkDeviceImageSubresourceInfoKHR *" />
      <argument name="pLayout" type="VkSubresourceLayout2KHR *" />
    </method>
    <method name="vkGetImageSubresourceLayout2KHR">
      <argument name="device" type="VkDevice" />
      <argument name="image" type="VkImage" />
      <argument name="pSubresource" type="const VkImageSubresource2KHR *" />
      <argument name="pLayout" type="VkSubresourceLayout2KHR *" />
    </method>
    <method name="vkCreateShadersEXT">
      <argument name="device" type="VkDevice" />
      <argument name="createInfoCount" type="uint32_t" />
      <argument name="pCreateInfos" type="const VkShaderCreateInfoEXT *" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
      <argument name="pShaders" type="VkShaderEXT *" />
    </method>
    <method name="vkDestroyShaderEXT">
      <argument name="device" type="VkDevice" />
      <argument name="shader" type="VkShaderEXT" />
      <argument name="pAllocator" type="const VkAllocationCallbacks *" />
    </method>
    <method name="vkGetShaderBinaryDataEXT">
      <argument name="device" type="VkDevice" />
      <argument name="shader" type="VkShaderEXT" />
      <argument name="pDataSize" type="size_t *" />
      <argument name="pData" type="void *" />
    </method>
    <method name="vkCmdBindShadersEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="stageCount" type="uint32_t" />
      <argument name="pStages" type="const VkShaderStageFlagBits *" />
      <argument name="pShaders" type="const VkShaderEXT *" />
    </method>
    <method name="vkGetFramebufferTilePropertiesQCOM">
      <argument name="device" type="VkDevice" />
      <argument name="framebuffer" type="VkFramebuffer" />
      <argument name="pPropertiesCount" type="uint32_t *" />
      <argument name="pProperties" type="VkTilePropertiesQCOM *" />
    </method>
    <method name="vkGetDynamicRenderingTilePropertiesQCOM">
      <argument name="device" type="VkDevice" />
      <argument name="pRenderingInfo" type="const VkRenderingInfo *" />
      <argument name="pProperties" type="VkTilePropertiesQCOM *" />
    </method>
    <method name="vkSetLatencySleepModeNV">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pSleepModeInfo" type="const VkLatencySleepModeInfoNV *" />
    </method>
    <method name="vkLatencySleepNV">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pSleepInfo" type="const VkLatencySleepInfoNV *" />
    </method>
    <method name="vkSetLatencyMarkerNV">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pLatencyMarkerInfo" type="const VkSetLatencyMarkerInfoNV *" />
    </method>
    <method name="vkGetLatencyTimingsNV">
      <argument name="device" type="VkDevice" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="pLatencyMarkerInfo" type="VkGetLatencyMarkerInfoNV *" />
    </method>
    <method name="vkQueueNotifyOutOfBandNV">
      <argument name="queue" type="VkQueue" />
      <argument name="pQueueTypeInfo" type="const VkOutOfBandQueueTypeInfoNV *" />
    </method>
    <method name="vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pPropertyCount" type="uint32_t *" />
      <argument name="pProperties" type="VkCooperativeMatrixPropertiesKHR *" />
    </method>
    <method name="vkCmdSetAttachmentFeedbackLoopEnableEXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="aspectMask" type="VkImageAspectFlags" />
    </method>
    <method name="vkGetPhysicalDeviceCalibrateableTimeDomainsKHR">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
      <argument name="pTimeDomainCount" type="uint32_t *" />
      <argument name="pTimeDomains" type="VkTimeDomainKHR *" />
    </method>
    <method name="vkGetCalibratedTimestampsKHR">
      <argument name="device" type="VkDevice" />
      <argument name="timestampCount" type="uint32_t" />
      <argument name="pTimestampInfos" type="const VkCalibratedTimestampInfoKHR *" />
      <argument name="pTimestamps" type="uint64_t *" />
      <argument name="pMaxDeviation" type="uint64_t *" />
    </method>
    <method name="vkCmdBindDescriptorSets2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBindDescriptorSetsInfo" type="const VkBindDescriptorSetsInfoKHR *" />
    </method>
    <method name="vkCmdPushConstants2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pPushConstantsInfo" type="const VkPushConstantsInfoKHR *" />
    </method>
    <method name="vkCmdPushDescriptorSet2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pPushDescriptorSetInfo" type="const VkPushDescriptorSetInfoKHR *" />
    </method>
    <method name="vkCmdPushDescriptorSetWithTemplate2KHR">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pPushDescriptorSetWithTemplateInfo" type="const VkPushDescriptorSetWithTemplateInfoKHR *" />
    </method>
    <method name="vkCmdSetDescriptorBufferOffsets2EXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pSetDescriptorBufferOffsetsInfo" type="const VkSetDescriptorBufferOffsetsInfoEXT *" />
    </method>
    <method name="vkCmdBindDescriptorBufferEmbeddedSamplers2EXT">
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="pBindDescriptorBufferEmbeddedSamplersInfo" type="const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *" />
    </method>
  </class>
  <class name="ArrayProxy" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T&gt;">
    <constructor name="ArrayProxy&lt;T&gt;" />
    <constructor name="ArrayProxy&lt;T&gt;">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="ArrayProxy&lt;T&gt;">
      <argument name="value" type="const T &amp;" />
    </constructor>
    <constructor name="ArrayProxy&lt;T&gt;">
      <argument name="count" type="uint32_t" />
      <argument name="ptr" type="const T *" />
    </constructor>
    <method name="ArrayProxy&lt;T&gt;" template_raw="template &lt;std::size_t C&gt;" />
    <constructor name="ArrayProxy&lt;T&gt;">
      <argument name="list" type="const std::initializer_list&lt;T&gt; &amp;" />
    </constructor>
    <method name="ArrayProxy&lt;T&gt;" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_const&lt;B&gt;" />
    <method name="ArrayProxy&lt;T&gt;" template_raw="template &lt;typename V, typename std::enable_if&lt;std::is_convertible&lt;decltype( std::declval&lt;V&gt;" />
    <method name="begin" />
    <method name="end" />
    <method name="front" />
    <method name="back" />
    <method name="empty" />
    <method name="size" />
    <method name="data" />
  </class>
  <class name="ArrayProxyNoTemporaries" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T&gt;">
    <constructor name="ArrayProxyNoTemporaries&lt;T&gt;" />
    <constructor name="ArrayProxyNoTemporaries&lt;T&gt;">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="ArrayProxyNoTemporaries&lt;T&gt;">
      <argument name="value" type="T &amp;" />
    </constructor>
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;typename V&gt;" />
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_const&lt;B&gt;" />
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_const&lt;B&gt;" />
    <constructor name="ArrayProxyNoTemporaries&lt;T&gt;">
      <argument name="count" type="uint32_t" />
      <argument name="ptr" type="T *" />
    </constructor>
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_const&lt;B&gt;" />
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;std::size_t C&gt;" />
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;std::size_t C&gt;" />
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;std::size_t C, typename B = T, typename std::enable_if&lt;std::is_const&lt;B&gt;" />
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;std::size_t C, typename B = T, typename std::enable_if&lt;std::is_const&lt;B&gt;" />
    <constructor name="ArrayProxyNoTemporaries&lt;T&gt;">
      <argument name="list" type="const std::initializer_list&lt;T&gt; &amp;" />
    </constructor>
    <constructor name="ArrayProxyNoTemporaries&lt;T&gt;">
      <argument name="list" type="const std::initializer_list&lt;T&gt; &amp;&amp;" />
    </constructor>
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_const&lt;B&gt;" />
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_const&lt;B&gt;" />
    <constructor name="ArrayProxyNoTemporaries&lt;T&gt;">
      <argument name="list" type="std::initializer_list&lt;T&gt; &amp;" />
    </constructor>
    <constructor name="ArrayProxyNoTemporaries&lt;T&gt;">
      <argument name="list" type="std::initializer_list&lt;T&gt; &amp;&amp;" />
    </constructor>
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_const&lt;B&gt;" />
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;typename B = T, typename std::enable_if&lt;std::is_const&lt;B&gt;" />
    <method name="ArrayProxyNoTemporaries&lt;T&gt;" template_raw="template &lt;typename V, typename std::enable_if&lt;std::is_convertible&lt;decltype( std::declval&lt;V&gt;" />
    <method name="begin" />
    <method name="end" />
    <method name="front" />
    <method name="back" />
    <method name="empty" />
    <method name="size" />
    <method name="data" />
  </class>
  <class name="Optional" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename RefType&gt;">
    <constructor name="Optional&lt;RefType&gt;">
      <argument name="reference" type="RefType &amp;" />
    </constructor>
    <constructor name="Optional&lt;RefType&gt;">
      <argument name="ptr" type="RefType *" />
    </constructor>
    <constructor name="Optional&lt;RefType&gt;">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <conversion_function name="operator type-parameter-0-0 *" />
    <method name="operator-&gt;" />
    <conversion_function name="operator bool" />
  </class>
  <class name="StridedArrayProxy" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T&gt;">
    <constructor name="StridedArrayProxy&lt;T&gt;">
      <argument name="count" type="uint32_t" />
      <argument name="ptr" type="const T *" />
      <argument name="stride" type="uint32_t" />
    </constructor>
    <method name="end" />
    <method name="back" />
    <method name="stride" />
  </class>
  <class name="StructureChain" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename... ChainElements&gt;">
    <base name="std::tuple&lt;ChainElements...&gt;" />
    <constructor name="StructureChain&lt;ChainElements...&gt;" />
    <constructor name="StructureChain&lt;ChainElements...&gt;">
      <argument name="rhs" type="const StructureChain&lt;ChainElements...&gt; &amp;" />
    </constructor>
    <constructor name="StructureChain&lt;ChainElements...&gt;">
      <argument name="rhs" type="StructureChain&lt;ChainElements...&gt; &amp;&amp;" />
    </constructor>
    <constructor name="StructureChain&lt;ChainElements...&gt;">
      <argument name="elems" type="const ChainElements &amp;..." />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const StructureChain&lt;ChainElements...&gt; &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="StructureChain&lt;ChainElements...&gt; &amp;&amp;" />
    </method>
    <method name="get" template_raw="template &lt;typename T = typename std::tuple_element&lt;0, std::tuple&lt;ChainElements...&gt;" />
    <method name="get" template_raw="template &lt;typename T = typename std::tuple_element&lt;0, std::tuple&lt;ChainElements...&gt;" />
    <method name="get" template_raw="template &lt;typename T0, typename T1, typename... Ts&gt;" />
    <method name="get" template_raw="template &lt;typename T0, typename T1, typename... Ts&gt;" />
    <method name="assign" template_raw="template &lt;typename T = typename std::tuple_element&lt;0, std::tuple&lt;ChainElements...&gt;" />
    <method name="isLinked" template_raw="template &lt;typename ClassType, size_t Which = 0&gt;" />
    <method name="isLinked" template_raw="template &lt;typename ClassType, size_t Which = 0&gt;" />
    <method name="relink" template_raw="template &lt;typename ClassType, size_t Which = 0&gt;" />
    <method name="unlink" template_raw="template &lt;typename ClassType, size_t Which = 0&gt;" />
  </class>
  <class name="ObjectDestroy" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename OwnerType, typename Dispatch&gt;">
    <constructor name="ObjectDestroy&lt;OwnerType, Dispatch&gt;" />
    <constructor name="ObjectDestroy&lt;OwnerType, Dispatch&gt;">
      <argument name="owner" type="OwnerType" />
      <argument name="allocationCallbacks" type="Optional&lt;const AllocationCallbacks&gt;" />
      <argument name="dispatch" type="const Dispatch &amp;" />
    </constructor>
    <method name="getOwner" />
    <method name="getAllocator" />
    <method name="getDispatch" />
  </class>
  <class name="ObjectDestroyShared" namespace="vk" filename="vulkan/vulkan_shared.hpp" template_raw="template &lt;typename HandleType&gt;">
    <method name="ObjectDestroyShared&lt;HandleType&gt;" template_raw="template &lt;typename Dispatcher = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename T = HandleType&gt;" />
    <method name="destroy" template_raw="template &lt;typename T = HandleType&gt;" />
  </class>
  <class name="ObjectFree" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename OwnerType, typename Dispatch&gt;">
    <constructor name="ObjectFree&lt;OwnerType, Dispatch&gt;" />
    <constructor name="ObjectFree&lt;OwnerType, Dispatch&gt;">
      <argument name="owner" type="OwnerType" />
      <argument name="allocationCallbacks" type="Optional&lt;const AllocationCallbacks&gt;" />
      <argument name="dispatch" type="const Dispatch &amp;" />
    </constructor>
    <method name="getOwner" />
    <method name="getAllocator" />
    <method name="getDispatch" />
  </class>
  <class name="ObjectFreeShared" namespace="vk" filename="vulkan/vulkan_shared.hpp" template_raw="template &lt;typename HandleType&gt;">
    <method name="ObjectFreeShared&lt;HandleType&gt;" template_raw="template &lt;class Dispatcher = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy">
      <argument name="parent" type="DestructorType" />
      <argument name="handle" type="HandleType" />
    </method>
  </class>
  <class name="ObjectRelease" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename OwnerType, typename Dispatch&gt;">
    <constructor name="ObjectRelease&lt;OwnerType, Dispatch&gt;" />
    <constructor name="ObjectRelease&lt;OwnerType, Dispatch&gt;">
      <argument name="owner" type="OwnerType" />
      <argument name="dispatch" type="const Dispatch &amp;" />
    </constructor>
    <method name="getOwner" />
    <method name="getDispatch" />
  </class>
  <class name="ObjectReleaseShared" namespace="vk" filename="vulkan/vulkan_shared.hpp" template_raw="template &lt;typename HandleType&gt;">
    <method name="ObjectReleaseShared&lt;HandleType&gt;" template_raw="template &lt;class Dispatcher = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy">
      <argument name="parent" type="DestructorType" />
      <argument name="handle" type="HandleType" />
    </method>
  </class>
  <class name="PoolFree" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename OwnerType, typename PoolType, typename Dispatch&gt;">
    <constructor name="PoolFree&lt;OwnerType, PoolType, Dispatch&gt;" />
    <constructor name="PoolFree&lt;OwnerType, PoolType, Dispatch&gt;">
      <argument name="owner" type="OwnerType" />
      <argument name="pool" type="PoolType" />
      <argument name="dispatch" type="const Dispatch &amp;" />
    </constructor>
    <method name="getOwner" />
    <method name="getPool" />
    <method name="getDispatch" />
  </class>
  <class name="PoolFreeShared" namespace="vk" filename="vulkan/vulkan_shared.hpp" template_raw="template &lt;typename HandleType, typename PoolType&gt;">
    <constructor name="PoolFreeShared&lt;HandleType, PoolType&gt;" />
    <method name="PoolFreeShared&lt;HandleType, PoolType&gt;" template_raw="template &lt;class Dispatcher = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy">
      <argument name="parent" type="DestructorType" />
      <argument name="handle" type="HandleType" />
    </method>
  </class>
  <class name="SharedHandle" namespace="vk" filename="vulkan/vulkan_shared.hpp" template_raw="template &lt;typename HandleType&gt;">
    <constructor name="SharedHandle&lt;HandleType&gt;" />
    <method name="SharedHandle&lt;HandleType&gt;" template_raw="template &lt;typename T = HandleType, typename = typename std::enable_if&lt;HasDestructor&lt;T&gt;" />
    <method name="SharedHandle&lt;HandleType&gt;" template_raw="template &lt;typename T = HandleType, typename = typename std::enable_if&lt;!HasDestructor&lt;T&gt;" />
  </class>
  <class name="UniqueHandle" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename Type, typename Dispatch&gt;">
    <base name="UniqueHandleTraits&lt;Type, Dispatch&gt;::deleter" />
    <constructor name="UniqueHandle&lt;Type, Dispatch&gt;" />
    <constructor name="UniqueHandle&lt;Type, Dispatch&gt;">
      <argument name="value" type="const Type &amp;" />
      <argument name="deleter" type="const Deleter &amp;" default_raw="Deleter()" />
    </constructor>
    <constructor name="UniqueHandle&lt;Type, Dispatch&gt;">
      <argument name="" type="const UniqueHandle&lt;Type, Dispatch&gt; &amp;" />
    </constructor>
    <constructor name="UniqueHandle&lt;Type, Dispatch&gt;">
      <argument name="other" type="UniqueHandle&lt;Type, Dispatch&gt; &amp;&amp;" />
    </constructor>
    <destructor name="~UniqueHandle&lt;Type, Dispatch&gt;" />
    <method name="operator=">
      <argument name="" type="const UniqueHandle&lt;Type, Dispatch&gt; &amp;" />
    </method>
    <method name="operator=">
      <argument name="other" type="UniqueHandle&lt;Type, Dispatch&gt; &amp;&amp;" />
    </method>
    <conversion_function name="operator bool" />
    <method name="operator-&gt;" />
    <method name="operator-&gt;" />
    <method name="operator*" />
    <method name="operator*" />
    <method name="get" />
    <method name="get" />
    <method name="reset">
      <argument name="value" type="const Type &amp;" default_raw="Type()" />
    </method>
    <method name="release" />
    <method name="swap">
      <argument name="rhs" type="UniqueHandle&lt;Type, Dispatch&gt; &amp;" />
    </method>
  </class>
  <type_alias name="Bool32" namespace="vk" filename="vulkan/vulkan.hpp" alias_raw="uint32_t" />
  <type_alias name="DeviceAddress" namespace="vk" filename="vulkan/vulkan.hpp" alias_raw="uint64_t" />
  <type_alias name="DeviceSize" namespace="vk" filename="vulkan/vulkan.hpp" alias_raw="uint64_t" />
  <type_alias name="RemoteAddressNV" namespace="vk" filename="vulkan/vulkan.hpp" alias_raw="void *" />
  <type_alias name="SampleMask" namespace="vk" filename="vulkan/vulkan.hpp" alias_raw="uint32_t" />
  <class name="CppType" namespace="vk" filename="vulkan/vulkan_enums.hpp" template_raw="template &lt;typename EnumType, EnumType value&gt;" />
  <enum name="AccessFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eIndirectCommandRead" />
    <member name="eIndexRead" />
    <member name="eVertexAttributeRead" />
    <member name="eUniformRead" />
    <member name="eInputAttachmentRead" />
    <member name="eShaderRead" />
    <member name="eShaderWrite" />
    <member name="eColorAttachmentRead" />
    <member name="eColorAttachmentWrite" />
    <member name="eDepthStencilAttachmentRead" />
    <member name="eDepthStencilAttachmentWrite" />
    <member name="eTransferRead" />
    <member name="eTransferWrite" />
    <member name="eHostRead" />
    <member name="eHostWrite" />
    <member name="eMemoryRead" />
    <member name="eMemoryWrite" />
    <member name="eNone" />
    <member name="eTransformFeedbackWriteEXT" />
    <member name="eTransformFeedbackCounterReadEXT" />
    <member name="eTransformFeedbackCounterWriteEXT" />
    <member name="eConditionalRenderingReadEXT" />
    <member name="eColorAttachmentReadNoncoherentEXT" />
    <member name="eAccelerationStructureReadKHR" />
    <member name="eAccelerationStructureWriteKHR" />
    <member name="eShadingRateImageReadNV" />
    <member name="eAccelerationStructureReadNV" />
    <member name="eAccelerationStructureWriteNV" />
    <member name="eFragmentDensityMapReadEXT" />
    <member name="eFragmentShadingRateAttachmentReadKHR" />
    <member name="eCommandPreprocessReadNV" />
    <member name="eCommandPreprocessWriteNV" />
    <member name="eNoneKHR" />
  </enum>
  <type_alias name="AccessFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;AccessFlagBits&gt;" />
  <enum name="AttachmentDescriptionFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eMayAlias" />
  </enum>
  <type_alias name="AttachmentDescriptionFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;AttachmentDescriptionFlagBits&gt;" />
  <enum name="AttachmentLoadOp" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eLoad" />
    <member name="eClear" />
    <member name="eDontCare" />
    <member name="eNoneEXT" />
  </enum>
  <enum name="AttachmentStoreOp" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eStore" />
    <member name="eDontCare" />
    <member name="eNone" />
    <member name="eNoneKHR" />
    <member name="eNoneQCOM" />
    <member name="eNoneEXT" />
  </enum>
  <enum name="BlendFactor" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eZero" />
    <member name="eOne" />
    <member name="eSrcColor" />
    <member name="eOneMinusSrcColor" />
    <member name="eDstColor" />
    <member name="eOneMinusDstColor" />
    <member name="eSrcAlpha" />
    <member name="eOneMinusSrcAlpha" />
    <member name="eDstAlpha" />
    <member name="eOneMinusDstAlpha" />
    <member name="eConstantColor" />
    <member name="eOneMinusConstantColor" />
    <member name="eConstantAlpha" />
    <member name="eOneMinusConstantAlpha" />
    <member name="eSrcAlphaSaturate" />
    <member name="eSrc1Color" />
    <member name="eOneMinusSrc1Color" />
    <member name="eSrc1Alpha" />
    <member name="eOneMinusSrc1Alpha" />
  </enum>
  <enum name="BlendOp" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eAdd" />
    <member name="eSubtract" />
    <member name="eReverseSubtract" />
    <member name="eMin" />
    <member name="eMax" />
    <member name="eZeroEXT" />
    <member name="eSrcEXT" />
    <member name="eDstEXT" />
    <member name="eSrcOverEXT" />
    <member name="eDstOverEXT" />
    <member name="eSrcInEXT" />
    <member name="eDstInEXT" />
    <member name="eSrcOutEXT" />
    <member name="eDstOutEXT" />
    <member name="eSrcAtopEXT" />
    <member name="eDstAtopEXT" />
    <member name="eXorEXT" />
    <member name="eMultiplyEXT" />
    <member name="eScreenEXT" />
    <member name="eOverlayEXT" />
    <member name="eDarkenEXT" />
    <member name="eLightenEXT" />
    <member name="eColordodgeEXT" />
    <member name="eColorburnEXT" />
    <member name="eHardlightEXT" />
    <member name="eSoftlightEXT" />
    <member name="eDifferenceEXT" />
    <member name="eExclusionEXT" />
    <member name="eInvertEXT" />
    <member name="eInvertRgbEXT" />
    <member name="eLineardodgeEXT" />
    <member name="eLinearburnEXT" />
    <member name="eVividlightEXT" />
    <member name="eLinearlightEXT" />
    <member name="ePinlightEXT" />
    <member name="eHardmixEXT" />
    <member name="eHslHueEXT" />
    <member name="eHslSaturationEXT" />
    <member name="eHslColorEXT" />
    <member name="eHslLuminosityEXT" />
    <member name="ePlusEXT" />
    <member name="ePlusClampedEXT" />
    <member name="ePlusClampedAlphaEXT" />
    <member name="ePlusDarkerEXT" />
    <member name="eMinusEXT" />
    <member name="eMinusClampedEXT" />
    <member name="eContrastEXT" />
    <member name="eInvertOvgEXT" />
    <member name="eRedEXT" />
    <member name="eGreenEXT" />
    <member name="eBlueEXT" />
  </enum>
  <enum name="BorderColor" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFloatTransparentBlack" />
    <member name="eIntTransparentBlack" />
    <member name="eFloatOpaqueBlack" />
    <member name="eIntOpaqueBlack" />
    <member name="eFloatOpaqueWhite" />
    <member name="eIntOpaqueWhite" />
    <member name="eFloatCustomEXT" />
    <member name="eIntCustomEXT" />
  </enum>
  <enum name="BufferCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSparseBinding" />
    <member name="eSparseResidency" />
    <member name="eSparseAliased" />
    <member name="eProtected" />
    <member name="eDeviceAddressCaptureReplay" />
    <member name="eDeviceAddressCaptureReplayEXT" />
    <member name="eDeviceAddressCaptureReplayKHR" />
    <member name="eDescriptorBufferCaptureReplayEXT" />
    <member name="eVideoProfileIndependentKHR" />
  </enum>
  <type_alias name="BufferCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;BufferCreateFlagBits&gt;" />
  <enum name="BufferUsageFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eTransferSrc" />
    <member name="eTransferDst" />
    <member name="eUniformTexelBuffer" />
    <member name="eStorageTexelBuffer" />
    <member name="eUniformBuffer" />
    <member name="eStorageBuffer" />
    <member name="eIndexBuffer" />
    <member name="eVertexBuffer" />
    <member name="eIndirectBuffer" />
    <member name="eShaderDeviceAddress" />
    <member name="eVideoDecodeSrcKHR" />
    <member name="eVideoDecodeDstKHR" />
    <member name="eTransformFeedbackBufferEXT" />
    <member name="eTransformFeedbackCounterBufferEXT" />
    <member name="eConditionalRenderingEXT" />
    <member name="eAccelerationStructureBuildInputReadOnlyKHR" />
    <member name="eAccelerationStructureStorageKHR" />
    <member name="eShaderBindingTableKHR" />
    <member name="eRayTracingNV" />
    <member name="eShaderDeviceAddressEXT" />
    <member name="eShaderDeviceAddressKHR" />
    <member name="eVideoEncodeDstKHR" />
    <member name="eVideoEncodeSrcKHR" />
    <member name="eSamplerDescriptorBufferEXT" />
    <member name="eResourceDescriptorBufferEXT" />
    <member name="ePushDescriptorsDescriptorBufferEXT" />
    <member name="eMicromapBuildInputReadOnlyEXT" />
    <member name="eMicromapStorageEXT" />
  </enum>
  <type_alias name="BufferUsageFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;BufferUsageFlagBits&gt;" />
  <enum name="BufferViewCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="BufferViewCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;BufferViewCreateFlagBits&gt;" />
  <enum name="ColorComponentFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eR" />
    <member name="eG" />
    <member name="eB" />
    <member name="eA" />
  </enum>
  <type_alias name="ColorComponentFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ColorComponentFlagBits&gt;" />
  <enum name="CommandBufferLevel" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="ePrimary" />
    <member name="eSecondary" />
  </enum>
  <enum name="CommandBufferResetFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eReleaseResources" />
  </enum>
  <type_alias name="CommandBufferResetFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;CommandBufferResetFlagBits&gt;" />
  <enum name="CommandBufferUsageFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOneTimeSubmit" />
    <member name="eRenderPassContinue" />
    <member name="eSimultaneousUse" />
  </enum>
  <type_alias name="CommandBufferUsageFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;CommandBufferUsageFlagBits&gt;" />
  <enum name="CommandPoolCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eTransient" />
    <member name="eResetCommandBuffer" />
    <member name="eProtected" />
  </enum>
  <type_alias name="CommandPoolCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;CommandPoolCreateFlagBits&gt;" />
  <enum name="CommandPoolResetFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eReleaseResources" />
  </enum>
  <type_alias name="CommandPoolResetFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;CommandPoolResetFlagBits&gt;" />
  <enum name="CompareOp" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNever" />
    <member name="eLess" />
    <member name="eEqual" />
    <member name="eLessOrEqual" />
    <member name="eGreater" />
    <member name="eNotEqual" />
    <member name="eGreaterOrEqual" />
    <member name="eAlways" />
  </enum>
  <enum name="ComponentSwizzle" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eIdentity" />
    <member name="eZero" />
    <member name="eOne" />
    <member name="eR" />
    <member name="eG" />
    <member name="eB" />
    <member name="eA" />
  </enum>
  <enum name="CullModeFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNone" />
    <member name="eFront" />
    <member name="eBack" />
    <member name="eFrontAndBack" />
  </enum>
  <type_alias name="CullModeFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;CullModeFlagBits&gt;" />
  <enum name="DependencyFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eByRegion" />
    <member name="eDeviceGroup" />
    <member name="eViewLocal" />
    <member name="eViewLocalKHR" />
    <member name="eDeviceGroupKHR" />
    <member name="eFeedbackLoopEXT" />
  </enum>
  <type_alias name="DependencyFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DependencyFlagBits&gt;" />
  <enum name="DescriptorPoolCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFreeDescriptorSet" />
    <member name="eUpdateAfterBind" />
    <member name="eUpdateAfterBindEXT" />
    <member name="eHostOnlyVALVE" />
    <member name="eHostOnlyEXT" />
    <member name="eAllowOverallocationSetsNV" />
    <member name="eAllowOverallocationPoolsNV" />
  </enum>
  <type_alias name="DescriptorPoolCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DescriptorPoolCreateFlagBits&gt;" />
  <enum name="DescriptorPoolResetFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="DescriptorPoolResetFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DescriptorPoolResetFlagBits&gt;" />
  <enum name="DescriptorSetLayoutCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUpdateAfterBindPool" />
    <member name="ePushDescriptorKHR" />
    <member name="eUpdateAfterBindPoolEXT" />
    <member name="eDescriptorBufferEXT" />
    <member name="eEmbeddedImmutableSamplersEXT" />
    <member name="eHostOnlyPoolVALVE" />
    <member name="eIndirectBindableNV" />
    <member name="eHostOnlyPoolEXT" />
    <member name="ePerStageNV" />
  </enum>
  <type_alias name="DescriptorSetLayoutCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DescriptorSetLayoutCreateFlagBits&gt;" />
  <enum name="DescriptorType" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSampler" />
    <member name="eCombinedImageSampler" />
    <member name="eSampledImage" />
    <member name="eStorageImage" />
    <member name="eUniformTexelBuffer" />
    <member name="eStorageTexelBuffer" />
    <member name="eUniformBuffer" />
    <member name="eStorageBuffer" />
    <member name="eUniformBufferDynamic" />
    <member name="eStorageBufferDynamic" />
    <member name="eInputAttachment" />
    <member name="eInlineUniformBlock" />
    <member name="eInlineUniformBlockEXT" />
    <member name="eAccelerationStructureKHR" />
    <member name="eAccelerationStructureNV" />
    <member name="eMutableVALVE" />
    <member name="eSampleWeightImageQCOM" />
    <member name="eBlockMatchImageQCOM" />
    <member name="eMutableEXT" />
  </enum>
  <enum name="DeviceCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="DeviceCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DeviceCreateFlagBits&gt;" />
  <enum name="DeviceQueueCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eProtected" />
  </enum>
  <type_alias name="DeviceQueueCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DeviceQueueCreateFlagBits&gt;" />
  <enum name="DynamicState" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eViewport" />
    <member name="eScissor" />
    <member name="eLineWidth" />
    <member name="eDepthBias" />
    <member name="eBlendConstants" />
    <member name="eDepthBounds" />
    <member name="eStencilCompareMask" />
    <member name="eStencilWriteMask" />
    <member name="eStencilReference" />
    <member name="eCullMode" />
    <member name="eFrontFace" />
    <member name="ePrimitiveTopology" />
    <member name="eViewportWithCount" />
    <member name="eScissorWithCount" />
    <member name="eVertexInputBindingStride" />
    <member name="eDepthTestEnable" />
    <member name="eDepthWriteEnable" />
    <member name="eDepthCompareOp" />
    <member name="eDepthBoundsTestEnable" />
    <member name="eStencilTestEnable" />
    <member name="eStencilOp" />
    <member name="eRasterizerDiscardEnable" />
    <member name="eDepthBiasEnable" />
    <member name="ePrimitiveRestartEnable" />
    <member name="eViewportWScalingNV" />
    <member name="eDiscardRectangleEXT" />
    <member name="eDiscardRectangleEnableEXT" />
    <member name="eDiscardRectangleModeEXT" />
    <member name="eSampleLocationsEXT" />
    <member name="eRayTracingPipelineStackSizeKHR" />
    <member name="eViewportShadingRatePaletteNV" />
    <member name="eViewportCoarseSampleOrderNV" />
    <member name="eExclusiveScissorEnableNV" />
    <member name="eExclusiveScissorNV" />
    <member name="eFragmentShadingRateKHR" />
    <member name="eLineStippleEXT" />
    <member name="eCullModeEXT" />
    <member name="eFrontFaceEXT" />
    <member name="ePrimitiveTopologyEXT" />
    <member name="eViewportWithCountEXT" />
    <member name="eScissorWithCountEXT" />
    <member name="eVertexInputBindingStrideEXT" />
    <member name="eDepthTestEnableEXT" />
    <member name="eDepthWriteEnableEXT" />
    <member name="eDepthCompareOpEXT" />
    <member name="eDepthBoundsTestEnableEXT" />
    <member name="eStencilTestEnableEXT" />
    <member name="eStencilOpEXT" />
    <member name="eVertexInputEXT" />
    <member name="ePatchControlPointsEXT" />
    <member name="eRasterizerDiscardEnableEXT" />
    <member name="eDepthBiasEnableEXT" />
    <member name="eLogicOpEXT" />
    <member name="ePrimitiveRestartEnableEXT" />
    <member name="eColorWriteEnableEXT" />
    <member name="eTessellationDomainOriginEXT" />
    <member name="eDepthClampEnableEXT" />
    <member name="ePolygonModeEXT" />
    <member name="eRasterizationSamplesEXT" />
    <member name="eSampleMaskEXT" />
    <member name="eAlphaToCoverageEnableEXT" />
    <member name="eAlphaToOneEnableEXT" />
    <member name="eLogicOpEnableEXT" />
    <member name="eColorBlendEnableEXT" />
    <member name="eColorBlendEquationEXT" />
    <member name="eColorWriteMaskEXT" />
    <member name="eRasterizationStreamEXT" />
    <member name="eConservativeRasterizationModeEXT" />
    <member name="eExtraPrimitiveOverestimationSizeEXT" />
    <member name="eDepthClipEnableEXT" />
    <member name="eSampleLocationsEnableEXT" />
    <member name="eColorBlendAdvancedEXT" />
    <member name="eProvokingVertexModeEXT" />
    <member name="eLineRasterizationModeEXT" />
    <member name="eLineStippleEnableEXT" />
    <member name="eDepthClipNegativeOneToOneEXT" />
    <member name="eViewportWScalingEnableNV" />
    <member name="eViewportSwizzleNV" />
    <member name="eCoverageToColorEnableNV" />
    <member name="eCoverageToColorLocationNV" />
    <member name="eCoverageModulationModeNV" />
    <member name="eCoverageModulationTableEnableNV" />
    <member name="eCoverageModulationTableNV" />
    <member name="eShadingRateImageEnableNV" />
    <member name="eRepresentativeFragmentTestEnableNV" />
    <member name="eCoverageReductionModeNV" />
    <member name="eAttachmentFeedbackLoopEnableEXT" />
  </enum>
  <enum name="EventCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDeviceOnly" />
    <member name="eDeviceOnlyKHR" />
  </enum>
  <type_alias name="EventCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;EventCreateFlagBits&gt;" />
  <enum name="FenceCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSignaled" />
  </enum>
  <type_alias name="FenceCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;FenceCreateFlagBits&gt;" />
  <enum name="Filter" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNearest" />
    <member name="eLinear" />
    <member name="eCubicIMG" />
    <member name="eCubicEXT" />
  </enum>
  <enum name="Format" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUndefined" />
    <member name="eR4G4UnormPack8" />
    <member name="eR4G4B4A4UnormPack16" />
    <member name="eB4G4R4A4UnormPack16" />
    <member name="eR5G6B5UnormPack16" />
    <member name="eB5G6R5UnormPack16" />
    <member name="eR5G5B5A1UnormPack16" />
    <member name="eB5G5R5A1UnormPack16" />
    <member name="eA1R5G5B5UnormPack16" />
    <member name="eR8Unorm" />
    <member name="eR8Snorm" />
    <member name="eR8Uscaled" />
    <member name="eR8Sscaled" />
    <member name="eR8Uint" />
    <member name="eR8Sint" />
    <member name="eR8Srgb" />
    <member name="eR8G8Unorm" />
    <member name="eR8G8Snorm" />
    <member name="eR8G8Uscaled" />
    <member name="eR8G8Sscaled" />
    <member name="eR8G8Uint" />
    <member name="eR8G8Sint" />
    <member name="eR8G8Srgb" />
    <member name="eR8G8B8Unorm" />
    <member name="eR8G8B8Snorm" />
    <member name="eR8G8B8Uscaled" />
    <member name="eR8G8B8Sscaled" />
    <member name="eR8G8B8Uint" />
    <member name="eR8G8B8Sint" />
    <member name="eR8G8B8Srgb" />
    <member name="eB8G8R8Unorm" />
    <member name="eB8G8R8Snorm" />
    <member name="eB8G8R8Uscaled" />
    <member name="eB8G8R8Sscaled" />
    <member name="eB8G8R8Uint" />
    <member name="eB8G8R8Sint" />
    <member name="eB8G8R8Srgb" />
    <member name="eR8G8B8A8Unorm" />
    <member name="eR8G8B8A8Snorm" />
    <member name="eR8G8B8A8Uscaled" />
    <member name="eR8G8B8A8Sscaled" />
    <member name="eR8G8B8A8Uint" />
    <member name="eR8G8B8A8Sint" />
    <member name="eR8G8B8A8Srgb" />
    <member name="eB8G8R8A8Unorm" />
    <member name="eB8G8R8A8Snorm" />
    <member name="eB8G8R8A8Uscaled" />
    <member name="eB8G8R8A8Sscaled" />
    <member name="eB8G8R8A8Uint" />
    <member name="eB8G8R8A8Sint" />
    <member name="eB8G8R8A8Srgb" />
    <member name="eA8B8G8R8UnormPack32" />
    <member name="eA8B8G8R8SnormPack32" />
    <member name="eA8B8G8R8UscaledPack32" />
    <member name="eA8B8G8R8SscaledPack32" />
    <member name="eA8B8G8R8UintPack32" />
    <member name="eA8B8G8R8SintPack32" />
    <member name="eA8B8G8R8SrgbPack32" />
    <member name="eA2R10G10B10UnormPack32" />
    <member name="eA2R10G10B10SnormPack32" />
    <member name="eA2R10G10B10UscaledPack32" />
    <member name="eA2R10G10B10SscaledPack32" />
    <member name="eA2R10G10B10UintPack32" />
    <member name="eA2R10G10B10SintPack32" />
    <member name="eA2B10G10R10UnormPack32" />
    <member name="eA2B10G10R10SnormPack32" />
    <member name="eA2B10G10R10UscaledPack32" />
    <member name="eA2B10G10R10SscaledPack32" />
    <member name="eA2B10G10R10UintPack32" />
    <member name="eA2B10G10R10SintPack32" />
    <member name="eR16Unorm" />
    <member name="eR16Snorm" />
    <member name="eR16Uscaled" />
    <member name="eR16Sscaled" />
    <member name="eR16Uint" />
    <member name="eR16Sint" />
    <member name="eR16Sfloat" />
    <member name="eR16G16Unorm" />
    <member name="eR16G16Snorm" />
    <member name="eR16G16Uscaled" />
    <member name="eR16G16Sscaled" />
    <member name="eR16G16Uint" />
    <member name="eR16G16Sint" />
    <member name="eR16G16Sfloat" />
    <member name="eR16G16B16Unorm" />
    <member name="eR16G16B16Snorm" />
    <member name="eR16G16B16Uscaled" />
    <member name="eR16G16B16Sscaled" />
    <member name="eR16G16B16Uint" />
    <member name="eR16G16B16Sint" />
    <member name="eR16G16B16Sfloat" />
    <member name="eR16G16B16A16Unorm" />
    <member name="eR16G16B16A16Snorm" />
    <member name="eR16G16B16A16Uscaled" />
    <member name="eR16G16B16A16Sscaled" />
    <member name="eR16G16B16A16Uint" />
    <member name="eR16G16B16A16Sint" />
    <member name="eR16G16B16A16Sfloat" />
    <member name="eR32Uint" />
    <member name="eR32Sint" />
    <member name="eR32Sfloat" />
    <member name="eR32G32Uint" />
    <member name="eR32G32Sint" />
    <member name="eR32G32Sfloat" />
    <member name="eR32G32B32Uint" />
    <member name="eR32G32B32Sint" />
    <member name="eR32G32B32Sfloat" />
    <member name="eR32G32B32A32Uint" />
    <member name="eR32G32B32A32Sint" />
    <member name="eR32G32B32A32Sfloat" />
    <member name="eR64Uint" />
    <member name="eR64Sint" />
    <member name="eR64Sfloat" />
    <member name="eR64G64Uint" />
    <member name="eR64G64Sint" />
    <member name="eR64G64Sfloat" />
    <member name="eR64G64B64Uint" />
    <member name="eR64G64B64Sint" />
    <member name="eR64G64B64Sfloat" />
    <member name="eR64G64B64A64Uint" />
    <member name="eR64G64B64A64Sint" />
    <member name="eR64G64B64A64Sfloat" />
    <member name="eB10G11R11UfloatPack32" />
    <member name="eE5B9G9R9UfloatPack32" />
    <member name="eD16Unorm" />
    <member name="eX8D24UnormPack32" />
    <member name="eD32Sfloat" />
    <member name="eS8Uint" />
    <member name="eD16UnormS8Uint" />
    <member name="eD24UnormS8Uint" />
    <member name="eD32SfloatS8Uint" />
    <member name="eBc1RgbUnormBlock" />
    <member name="eBc1RgbSrgbBlock" />
    <member name="eBc1RgbaUnormBlock" />
    <member name="eBc1RgbaSrgbBlock" />
    <member name="eBc2UnormBlock" />
    <member name="eBc2SrgbBlock" />
    <member name="eBc3UnormBlock" />
    <member name="eBc3SrgbBlock" />
    <member name="eBc4UnormBlock" />
    <member name="eBc4SnormBlock" />
    <member name="eBc5UnormBlock" />
    <member name="eBc5SnormBlock" />
    <member name="eBc6HUfloatBlock" />
    <member name="eBc6HSfloatBlock" />
    <member name="eBc7UnormBlock" />
    <member name="eBc7SrgbBlock" />
    <member name="eEtc2R8G8B8UnormBlock" />
    <member name="eEtc2R8G8B8SrgbBlock" />
    <member name="eEtc2R8G8B8A1UnormBlock" />
    <member name="eEtc2R8G8B8A1SrgbBlock" />
    <member name="eEtc2R8G8B8A8UnormBlock" />
    <member name="eEtc2R8G8B8A8SrgbBlock" />
    <member name="eEacR11UnormBlock" />
    <member name="eEacR11SnormBlock" />
    <member name="eEacR11G11UnormBlock" />
    <member name="eEacR11G11SnormBlock" />
    <member name="eAstc4x4UnormBlock" />
    <member name="eAstc4x4SrgbBlock" />
    <member name="eAstc5x4UnormBlock" />
    <member name="eAstc5x4SrgbBlock" />
    <member name="eAstc5x5UnormBlock" />
    <member name="eAstc5x5SrgbBlock" />
    <member name="eAstc6x5UnormBlock" />
    <member name="eAstc6x5SrgbBlock" />
    <member name="eAstc6x6UnormBlock" />
    <member name="eAstc6x6SrgbBlock" />
    <member name="eAstc8x5UnormBlock" />
    <member name="eAstc8x5SrgbBlock" />
    <member name="eAstc8x6UnormBlock" />
    <member name="eAstc8x6SrgbBlock" />
    <member name="eAstc8x8UnormBlock" />
    <member name="eAstc8x8SrgbBlock" />
    <member name="eAstc10x5UnormBlock" />
    <member name="eAstc10x5SrgbBlock" />
    <member name="eAstc10x6UnormBlock" />
    <member name="eAstc10x6SrgbBlock" />
    <member name="eAstc10x8UnormBlock" />
    <member name="eAstc10x8SrgbBlock" />
    <member name="eAstc10x10UnormBlock" />
    <member name="eAstc10x10SrgbBlock" />
    <member name="eAstc12x10UnormBlock" />
    <member name="eAstc12x10SrgbBlock" />
    <member name="eAstc12x12UnormBlock" />
    <member name="eAstc12x12SrgbBlock" />
    <member name="eG8B8G8R8422Unorm" />
    <member name="eB8G8R8G8422Unorm" />
    <member name="eG8B8R83Plane420Unorm" />
    <member name="eG8B8R82Plane420Unorm" />
    <member name="eG8B8R83Plane422Unorm" />
    <member name="eG8B8R82Plane422Unorm" />
    <member name="eG8B8R83Plane444Unorm" />
    <member name="eR10X6UnormPack16" />
    <member name="eR10X6G10X6Unorm2Pack16" />
    <member name="eR10X6G10X6B10X6A10X6Unorm4Pack16" />
    <member name="eG10X6B10X6G10X6R10X6422Unorm4Pack16" />
    <member name="eB10X6G10X6R10X6G10X6422Unorm4Pack16" />
    <member name="eG10X6B10X6R10X63Plane420Unorm3Pack16" />
    <member name="eG10X6B10X6R10X62Plane420Unorm3Pack16" />
    <member name="eG10X6B10X6R10X63Plane422Unorm3Pack16" />
    <member name="eG10X6B10X6R10X62Plane422Unorm3Pack16" />
    <member name="eG10X6B10X6R10X63Plane444Unorm3Pack16" />
    <member name="eR12X4UnormPack16" />
    <member name="eR12X4G12X4Unorm2Pack16" />
    <member name="eR12X4G12X4B12X4A12X4Unorm4Pack16" />
    <member name="eG12X4B12X4G12X4R12X4422Unorm4Pack16" />
    <member name="eB12X4G12X4R12X4G12X4422Unorm4Pack16" />
    <member name="eG12X4B12X4R12X43Plane420Unorm3Pack16" />
    <member name="eG12X4B12X4R12X42Plane420Unorm3Pack16" />
    <member name="eG12X4B12X4R12X43Plane422Unorm3Pack16" />
    <member name="eG12X4B12X4R12X42Plane422Unorm3Pack16" />
    <member name="eG12X4B12X4R12X43Plane444Unorm3Pack16" />
    <member name="eG16B16G16R16422Unorm" />
    <member name="eB16G16R16G16422Unorm" />
    <member name="eG16B16R163Plane420Unorm" />
    <member name="eG16B16R162Plane420Unorm" />
    <member name="eG16B16R163Plane422Unorm" />
    <member name="eG16B16R162Plane422Unorm" />
    <member name="eG16B16R163Plane444Unorm" />
    <member name="eG8B8R82Plane444Unorm" />
    <member name="eG10X6B10X6R10X62Plane444Unorm3Pack16" />
    <member name="eG12X4B12X4R12X42Plane444Unorm3Pack16" />
    <member name="eG16B16R162Plane444Unorm" />
    <member name="eA4R4G4B4UnormPack16" />
    <member name="eA4B4G4R4UnormPack16" />
    <member name="eAstc4x4SfloatBlock" />
    <member name="eAstc5x4SfloatBlock" />
    <member name="eAstc5x5SfloatBlock" />
    <member name="eAstc6x5SfloatBlock" />
    <member name="eAstc6x6SfloatBlock" />
    <member name="eAstc8x5SfloatBlock" />
    <member name="eAstc8x6SfloatBlock" />
    <member name="eAstc8x8SfloatBlock" />
    <member name="eAstc10x5SfloatBlock" />
    <member name="eAstc10x6SfloatBlock" />
    <member name="eAstc10x8SfloatBlock" />
    <member name="eAstc10x10SfloatBlock" />
    <member name="eAstc12x10SfloatBlock" />
    <member name="eAstc12x12SfloatBlock" />
    <member name="ePvrtc12BppUnormBlockIMG" />
    <member name="ePvrtc14BppUnormBlockIMG" />
    <member name="ePvrtc22BppUnormBlockIMG" />
    <member name="ePvrtc24BppUnormBlockIMG" />
    <member name="ePvrtc12BppSrgbBlockIMG" />
    <member name="ePvrtc14BppSrgbBlockIMG" />
    <member name="ePvrtc22BppSrgbBlockIMG" />
    <member name="ePvrtc24BppSrgbBlockIMG" />
    <member name="eAstc4x4SfloatBlockEXT" />
    <member name="eAstc5x4SfloatBlockEXT" />
    <member name="eAstc5x5SfloatBlockEXT" />
    <member name="eAstc6x5SfloatBlockEXT" />
    <member name="eAstc6x6SfloatBlockEXT" />
    <member name="eAstc8x5SfloatBlockEXT" />
    <member name="eAstc8x6SfloatBlockEXT" />
    <member name="eAstc8x8SfloatBlockEXT" />
    <member name="eAstc10x5SfloatBlockEXT" />
    <member name="eAstc10x6SfloatBlockEXT" />
    <member name="eAstc10x8SfloatBlockEXT" />
    <member name="eAstc10x10SfloatBlockEXT" />
    <member name="eAstc12x10SfloatBlockEXT" />
    <member name="eAstc12x12SfloatBlockEXT" />
    <member name="eG8B8G8R8422UnormKHR" />
    <member name="eB8G8R8G8422UnormKHR" />
    <member name="eG8B8R83Plane420UnormKHR" />
    <member name="eG8B8R82Plane420UnormKHR" />
    <member name="eG8B8R83Plane422UnormKHR" />
    <member name="eG8B8R82Plane422UnormKHR" />
    <member name="eG8B8R83Plane444UnormKHR" />
    <member name="eR10X6UnormPack16KHR" />
    <member name="eR10X6G10X6Unorm2Pack16KHR" />
    <member name="eR10X6G10X6B10X6A10X6Unorm4Pack16KHR" />
    <member name="eG10X6B10X6G10X6R10X6422Unorm4Pack16KHR" />
    <member name="eB10X6G10X6R10X6G10X6422Unorm4Pack16KHR" />
    <member name="eG10X6B10X6R10X63Plane420Unorm3Pack16KHR" />
    <member name="eG10X6B10X6R10X62Plane420Unorm3Pack16KHR" />
    <member name="eG10X6B10X6R10X63Plane422Unorm3Pack16KHR" />
    <member name="eG10X6B10X6R10X62Plane422Unorm3Pack16KHR" />
    <member name="eG10X6B10X6R10X63Plane444Unorm3Pack16KHR" />
    <member name="eR12X4UnormPack16KHR" />
    <member name="eR12X4G12X4Unorm2Pack16KHR" />
    <member name="eR12X4G12X4B12X4A12X4Unorm4Pack16KHR" />
    <member name="eG12X4B12X4G12X4R12X4422Unorm4Pack16KHR" />
    <member name="eB12X4G12X4R12X4G12X4422Unorm4Pack16KHR" />
    <member name="eG12X4B12X4R12X43Plane420Unorm3Pack16KHR" />
    <member name="eG12X4B12X4R12X42Plane420Unorm3Pack16KHR" />
    <member name="eG12X4B12X4R12X43Plane422Unorm3Pack16KHR" />
    <member name="eG12X4B12X4R12X42Plane422Unorm3Pack16KHR" />
    <member name="eG12X4B12X4R12X43Plane444Unorm3Pack16KHR" />
    <member name="eG16B16G16R16422UnormKHR" />
    <member name="eB16G16R16G16422UnormKHR" />
    <member name="eG16B16R163Plane420UnormKHR" />
    <member name="eG16B16R162Plane420UnormKHR" />
    <member name="eG16B16R163Plane422UnormKHR" />
    <member name="eG16B16R162Plane422UnormKHR" />
    <member name="eG16B16R163Plane444UnormKHR" />
    <member name="eG8B8R82Plane444UnormEXT" />
    <member name="eG10X6B10X6R10X62Plane444Unorm3Pack16EXT" />
    <member name="eG12X4B12X4R12X42Plane444Unorm3Pack16EXT" />
    <member name="eG16B16R162Plane444UnormEXT" />
    <member name="eA4R4G4B4UnormPack16EXT" />
    <member name="eA4B4G4R4UnormPack16EXT" />
    <member name="eR16G16S105NV" />
    <member name="eA1B5G5R5UnormPack16KHR" />
    <member name="eA8UnormKHR" />
  </enum>
  <enum name="FormatFeatureFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSampledImage" />
    <member name="eStorageImage" />
    <member name="eStorageImageAtomic" />
    <member name="eUniformTexelBuffer" />
    <member name="eStorageTexelBuffer" />
    <member name="eStorageTexelBufferAtomic" />
    <member name="eVertexBuffer" />
    <member name="eColorAttachment" />
    <member name="eColorAttachmentBlend" />
    <member name="eDepthStencilAttachment" />
    <member name="eBlitSrc" />
    <member name="eBlitDst" />
    <member name="eSampledImageFilterLinear" />
    <member name="eTransferSrc" />
    <member name="eTransferDst" />
    <member name="eMidpointChromaSamples" />
    <member name="eSampledImageYcbcrConversionLinearFilter" />
    <member name="eSampledImageYcbcrConversionSeparateReconstructionFilter" />
    <member name="eSampledImageYcbcrConversionChromaReconstructionExplicit" />
    <member name="eSampledImageYcbcrConversionChromaReconstructionExplicitForceable" />
    <member name="eDisjoint" />
    <member name="eCositedChromaSamples" />
    <member name="eSampledImageFilterMinmax" />
    <member name="eSampledImageFilterCubicIMG" />
    <member name="eVideoDecodeOutputKHR" />
    <member name="eVideoDecodeDpbKHR" />
    <member name="eTransferSrcKHR" />
    <member name="eTransferDstKHR" />
    <member name="eSampledImageFilterMinmaxEXT" />
    <member name="eAccelerationStructureVertexBufferKHR" />
    <member name="eMidpointChromaSamplesKHR" />
    <member name="eSampledImageYcbcrConversionLinearFilterKHR" />
    <member name="eSampledImageYcbcrConversionSeparateReconstructionFilterKHR" />
    <member name="eSampledImageYcbcrConversionChromaReconstructionExplicitKHR" />
    <member name="eSampledImageYcbcrConversionChromaReconstructionExplicitForceableKHR" />
    <member name="eDisjointKHR" />
    <member name="eCositedChromaSamplesKHR" />
    <member name="eSampledImageFilterCubicEXT" />
    <member name="eFragmentDensityMapEXT" />
    <member name="eFragmentShadingRateAttachmentKHR" />
    <member name="eVideoEncodeInputKHR" />
    <member name="eVideoEncodeDpbKHR" />
  </enum>
  <type_alias name="FormatFeatureFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;FormatFeatureFlagBits&gt;" />
  <enum name="FramebufferCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eImageless" />
    <member name="eImagelessKHR" />
  </enum>
  <type_alias name="FramebufferCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;FramebufferCreateFlagBits&gt;" />
  <enum name="FrontFace" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eCounterClockwise" />
    <member name="eClockwise" />
  </enum>
  <enum name="ImageAspectFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eColor" />
    <member name="eDepth" />
    <member name="eStencil" />
    <member name="eMetadata" />
    <member name="ePlane0" />
    <member name="ePlane1" />
    <member name="ePlane2" />
    <member name="eNone" />
    <member name="ePlane0KHR" />
    <member name="ePlane1KHR" />
    <member name="ePlane2KHR" />
    <member name="eMemoryPlane0EXT" />
    <member name="eMemoryPlane1EXT" />
    <member name="eMemoryPlane2EXT" />
    <member name="eMemoryPlane3EXT" />
    <member name="eNoneKHR" />
  </enum>
  <type_alias name="ImageAspectFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ImageAspectFlagBits&gt;" />
  <enum name="ImageCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSparseBinding" />
    <member name="eSparseResidency" />
    <member name="eSparseAliased" />
    <member name="eMutableFormat" />
    <member name="eCubeCompatible" />
    <member name="eAlias" />
    <member name="eSplitInstanceBindRegions" />
    <member name="e2DArrayCompatible" />
    <member name="eBlockTexelViewCompatible" />
    <member name="eExtendedUsage" />
    <member name="eProtected" />
    <member name="eDisjoint" />
    <member name="eCornerSampledNV" />
    <member name="eSplitInstanceBindRegionsKHR" />
    <member name="e2DArrayCompatibleKHR" />
    <member name="eBlockTexelViewCompatibleKHR" />
    <member name="eExtendedUsageKHR" />
    <member name="eSampleLocationsCompatibleDepthEXT" />
    <member name="eDisjointKHR" />
    <member name="eAliasKHR" />
    <member name="eSubsampledEXT" />
    <member name="eDescriptorBufferCaptureReplayEXT" />
    <member name="eMultisampledRenderToSingleSampledEXT" />
    <member name="e2DViewCompatibleEXT" />
    <member name="eFragmentDensityMapOffsetQCOM" />
    <member name="eVideoProfileIndependentKHR" />
  </enum>
  <type_alias name="ImageCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ImageCreateFlagBits&gt;" />
  <enum name="ImageLayout" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUndefined" />
    <member name="eGeneral" />
    <member name="eColorAttachmentOptimal" />
    <member name="eDepthStencilAttachmentOptimal" />
    <member name="eDepthStencilReadOnlyOptimal" />
    <member name="eShaderReadOnlyOptimal" />
    <member name="eTransferSrcOptimal" />
    <member name="eTransferDstOptimal" />
    <member name="ePreinitialized" />
    <member name="eDepthReadOnlyStencilAttachmentOptimal" />
    <member name="eDepthAttachmentStencilReadOnlyOptimal" />
    <member name="eDepthAttachmentOptimal" />
    <member name="eDepthReadOnlyOptimal" />
    <member name="eStencilAttachmentOptimal" />
    <member name="eStencilReadOnlyOptimal" />
    <member name="eReadOnlyOptimal" />
    <member name="eAttachmentOptimal" />
    <member name="ePresentSrcKHR" />
    <member name="eVideoDecodeDstKHR" />
    <member name="eVideoDecodeSrcKHR" />
    <member name="eVideoDecodeDpbKHR" />
    <member name="eSharedPresentKHR" />
    <member name="eDepthReadOnlyStencilAttachmentOptimalKHR" />
    <member name="eDepthAttachmentStencilReadOnlyOptimalKHR" />
    <member name="eShadingRateOptimalNV" />
    <member name="eFragmentDensityMapOptimalEXT" />
    <member name="eFragmentShadingRateAttachmentOptimalKHR" />
    <member name="eDepthAttachmentOptimalKHR" />
    <member name="eDepthReadOnlyOptimalKHR" />
    <member name="eStencilAttachmentOptimalKHR" />
    <member name="eStencilReadOnlyOptimalKHR" />
    <member name="eVideoEncodeDstKHR" />
    <member name="eVideoEncodeSrcKHR" />
    <member name="eVideoEncodeDpbKHR" />
    <member name="eReadOnlyOptimalKHR" />
    <member name="eAttachmentOptimalKHR" />
    <member name="eAttachmentFeedbackLoopOptimalEXT" />
  </enum>
  <enum name="ImageTiling" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOptimal" />
    <member name="eLinear" />
    <member name="eDrmFormatModifierEXT" />
  </enum>
  <enum name="ImageType" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="e1D" />
    <member name="e2D" />
    <member name="e3D" />
  </enum>
  <enum name="ImageUsageFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eTransferSrc" />
    <member name="eTransferDst" />
    <member name="eSampled" />
    <member name="eStorage" />
    <member name="eColorAttachment" />
    <member name="eDepthStencilAttachment" />
    <member name="eTransientAttachment" />
    <member name="eInputAttachment" />
    <member name="eVideoDecodeDstKHR" />
    <member name="eVideoDecodeSrcKHR" />
    <member name="eVideoDecodeDpbKHR" />
    <member name="eShadingRateImageNV" />
    <member name="eFragmentDensityMapEXT" />
    <member name="eFragmentShadingRateAttachmentKHR" />
    <member name="eHostTransferEXT" />
    <member name="eVideoEncodeDstKHR" />
    <member name="eVideoEncodeSrcKHR" />
    <member name="eVideoEncodeDpbKHR" />
    <member name="eAttachmentFeedbackLoopEXT" />
    <member name="eInvocationMaskHUAWEI" />
    <member name="eSampleWeightQCOM" />
    <member name="eSampleBlockMatchQCOM" />
  </enum>
  <type_alias name="ImageUsageFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ImageUsageFlagBits&gt;" />
  <enum name="ImageViewCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFragmentDensityMapDynamicEXT" />
    <member name="eDescriptorBufferCaptureReplayEXT" />
    <member name="eFragmentDensityMapDeferredEXT" />
  </enum>
  <type_alias name="ImageViewCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ImageViewCreateFlagBits&gt;" />
  <enum name="ImageViewType" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="e1D" />
    <member name="e2D" />
    <member name="e3D" />
    <member name="eCube" />
    <member name="e1DArray" />
    <member name="e2DArray" />
    <member name="eCubeArray" />
  </enum>
  <enum name="IndexType" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUint16" />
    <member name="eUint32" />
    <member name="eNoneKHR" />
    <member name="eNoneNV" />
    <member name="eUint8EXT" />
  </enum>
  <enum name="InstanceCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eEnumeratePortabilityKHR" />
  </enum>
  <type_alias name="InstanceCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;InstanceCreateFlagBits&gt;" />
  <enum name="InternalAllocationType" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eExecutable" />
  </enum>
  <enum name="LogicOp" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eClear" />
    <member name="eAnd" />
    <member name="eAndReverse" />
    <member name="eCopy" />
    <member name="eAndInverted" />
    <member name="eNoOp" />
    <member name="eXor" />
    <member name="eOr" />
    <member name="eNor" />
    <member name="eEquivalent" />
    <member name="eInvert" />
    <member name="eOrReverse" />
    <member name="eCopyInverted" />
    <member name="eOrInverted" />
    <member name="eNand" />
    <member name="eSet" />
  </enum>
  <enum name="MemoryHeapFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDeviceLocal" />
    <member name="eMultiInstance" />
    <member name="eMultiInstanceKHR" />
  </enum>
  <type_alias name="MemoryHeapFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;MemoryHeapFlagBits&gt;" />
  <enum name="MemoryMapFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="MemoryMapFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;MemoryMapFlagBits&gt;" />
  <enum name="MemoryPropertyFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDeviceLocal" />
    <member name="eHostVisible" />
    <member name="eHostCoherent" />
    <member name="eHostCached" />
    <member name="eLazilyAllocated" />
    <member name="eProtected" />
    <member name="eDeviceCoherentAMD" />
    <member name="eDeviceUncachedAMD" />
    <member name="eRdmaCapableNV" />
  </enum>
  <type_alias name="MemoryPropertyFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;MemoryPropertyFlagBits&gt;" />
  <enum name="ObjectType" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUnknown" />
    <member name="eInstance" />
    <member name="ePhysicalDevice" />
    <member name="eDevice" />
    <member name="eQueue" />
    <member name="eSemaphore" />
    <member name="eCommandBuffer" />
    <member name="eFence" />
    <member name="eDeviceMemory" />
    <member name="eBuffer" />
    <member name="eImage" />
    <member name="eEvent" />
    <member name="eQueryPool" />
    <member name="eBufferView" />
    <member name="eImageView" />
    <member name="eShaderModule" />
    <member name="ePipelineCache" />
    <member name="ePipelineLayout" />
    <member name="eRenderPass" />
    <member name="ePipeline" />
    <member name="eDescriptorSetLayout" />
    <member name="eSampler" />
    <member name="eDescriptorPool" />
    <member name="eDescriptorSet" />
    <member name="eFramebuffer" />
    <member name="eCommandPool" />
    <member name="eSamplerYcbcrConversion" />
    <member name="eDescriptorUpdateTemplate" />
    <member name="ePrivateDataSlot" />
    <member name="eSurfaceKHR" />
    <member name="eSwapchainKHR" />
    <member name="eDisplayKHR" />
    <member name="eDisplayModeKHR" />
    <member name="eDebugReportCallbackEXT" />
    <member name="eVideoSessionKHR" />
    <member name="eVideoSessionParametersKHR" />
    <member name="eCuModuleNVX" />
    <member name="eCuFunctionNVX" />
    <member name="eDescriptorUpdateTemplateKHR" />
    <member name="eDebugUtilsMessengerEXT" />
    <member name="eAccelerationStructureKHR" />
    <member name="eSamplerYcbcrConversionKHR" />
    <member name="eValidationCacheEXT" />
    <member name="eAccelerationStructureNV" />
    <member name="ePerformanceConfigurationINTEL" />
    <member name="eDeferredOperationKHR" />
    <member name="eIndirectCommandsLayoutNV" />
    <member name="ePrivateDataSlotEXT" />
    <member name="eMicromapEXT" />
    <member name="eOpticalFlowSessionNV" />
    <member name="eShaderEXT" />
  </enum>
  <enum name="PhysicalDeviceType" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOther" />
    <member name="eIntegratedGpu" />
    <member name="eDiscreteGpu" />
    <member name="eVirtualGpu" />
    <member name="eCpu" />
  </enum>
  <enum name="PipelineBindPoint" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eGraphics" />
    <member name="eCompute" />
    <member name="eRayTracingKHR" />
    <member name="eRayTracingNV" />
    <member name="eSubpassShadingHUAWEI" />
  </enum>
  <enum name="PipelineCacheCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eExternallySynchronized" />
    <member name="eExternallySynchronizedEXT" />
  </enum>
  <type_alias name="PipelineCacheCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineCacheCreateFlagBits&gt;" />
  <enum name="PipelineCacheHeaderVersion" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOne" />
  </enum>
  <enum name="PipelineColorBlendStateCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eRasterizationOrderAttachmentAccessARM" />
    <member name="eRasterizationOrderAttachmentAccessEXT" />
  </enum>
  <type_alias name="PipelineColorBlendStateCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineColorBlendStateCreateFlagBits&gt;" />
  <enum name="PipelineCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDisableOptimization" />
    <member name="eAllowDerivatives" />
    <member name="eDerivative" />
    <member name="eViewIndexFromDeviceIndex" />
    <member name="eDispatchBase" />
    <member name="eFailOnPipelineCompileRequired" />
    <member name="eEarlyReturnOnFailure" />
    <member name="eRenderingFragmentShadingRateAttachmentKHR" />
    <member name="eVkPipelineRasterizationStateCreateFragmentShadingRateAttachmentKHR" />
    <member name="eRenderingFragmentDensityMapAttachmentEXT" />
    <member name="eVkPipelineRasterizationStateCreateFragmentDensityMapAttachmentEXT" />
    <member name="eViewIndexFromDeviceIndexKHR" />
    <member name="eDispatchBaseKHR" />
    <member name="eRayTracingNoNullAnyHitShadersKHR" />
    <member name="eRayTracingNoNullClosestHitShadersKHR" />
    <member name="eRayTracingNoNullMissShadersKHR" />
    <member name="eRayTracingNoNullIntersectionShadersKHR" />
    <member name="eRayTracingSkipTrianglesKHR" />
    <member name="eRayTracingSkipAabbsKHR" />
    <member name="eRayTracingShaderGroupHandleCaptureReplayKHR" />
    <member name="eDeferCompileNV" />
    <member name="eCaptureStatisticsKHR" />
    <member name="eCaptureInternalRepresentationsKHR" />
    <member name="eIndirectBindableNV" />
    <member name="eLibraryKHR" />
    <member name="eFailOnPipelineCompileRequiredEXT" />
    <member name="eEarlyReturnOnFailureEXT" />
    <member name="eDescriptorBufferEXT" />
    <member name="eRetainLinkTimeOptimizationInfoEXT" />
    <member name="eLinkTimeOptimizationEXT" />
    <member name="eRayTracingAllowMotionNV" />
    <member name="eColorAttachmentFeedbackLoopEXT" />
    <member name="eDepthStencilAttachmentFeedbackLoopEXT" />
    <member name="eRayTracingOpacityMicromapEXT" />
    <member name="eNoProtectedAccessEXT" />
    <member name="eProtectedAccessOnlyEXT" />
  </enum>
  <type_alias name="PipelineCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineCreateFlagBits&gt;" />
  <enum name="PipelineDepthStencilStateCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eRasterizationOrderAttachmentDepthAccessARM" />
    <member name="eRasterizationOrderAttachmentStencilAccessARM" />
    <member name="eRasterizationOrderAttachmentDepthAccessEXT" />
    <member name="eRasterizationOrderAttachmentStencilAccessEXT" />
  </enum>
  <type_alias name="PipelineDepthStencilStateCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineDepthStencilStateCreateFlagBits&gt;" />
  <enum name="PipelineDynamicStateCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineDynamicStateCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineDynamicStateCreateFlagBits&gt;" />
  <enum name="PipelineInputAssemblyStateCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineInputAssemblyStateCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineInputAssemblyStateCreateFlagBits&gt;" />
  <enum name="PipelineLayoutCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eIndependentSetsEXT" />
  </enum>
  <type_alias name="PipelineLayoutCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineLayoutCreateFlagBits&gt;" />
  <enum name="PipelineMultisampleStateCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineMultisampleStateCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineMultisampleStateCreateFlagBits&gt;" />
  <enum name="PipelineRasterizationStateCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineRasterizationStateCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineRasterizationStateCreateFlagBits&gt;" />
  <enum name="PipelineShaderStageCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eAllowVaryingSubgroupSize" />
    <member name="eRequireFullSubgroups" />
    <member name="eAllowVaryingSubgroupSizeEXT" />
    <member name="eRequireFullSubgroupsEXT" />
  </enum>
  <type_alias name="PipelineShaderStageCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineShaderStageCreateFlagBits&gt;" />
  <enum name="PipelineStageFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eTopOfPipe" />
    <member name="eDrawIndirect" />
    <member name="eVertexInput" />
    <member name="eVertexShader" />
    <member name="eTessellationControlShader" />
    <member name="eTessellationEvaluationShader" />
    <member name="eGeometryShader" />
    <member name="eFragmentShader" />
    <member name="eEarlyFragmentTests" />
    <member name="eLateFragmentTests" />
    <member name="eColorAttachmentOutput" />
    <member name="eComputeShader" />
    <member name="eTransfer" />
    <member name="eBottomOfPipe" />
    <member name="eHost" />
    <member name="eAllGraphics" />
    <member name="eAllCommands" />
    <member name="eNone" />
    <member name="eTransformFeedbackEXT" />
    <member name="eConditionalRenderingEXT" />
    <member name="eAccelerationStructureBuildKHR" />
    <member name="eRayTracingShaderKHR" />
    <member name="eShadingRateImageNV" />
    <member name="eRayTracingShaderNV" />
    <member name="eAccelerationStructureBuildNV" />
    <member name="eTaskShaderNV" />
    <member name="eMeshShaderNV" />
    <member name="eFragmentDensityProcessEXT" />
    <member name="eFragmentShadingRateAttachmentKHR" />
    <member name="eCommandPreprocessNV" />
    <member name="eNoneKHR" />
    <member name="eTaskShaderEXT" />
    <member name="eMeshShaderEXT" />
  </enum>
  <type_alias name="PipelineStageFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineStageFlagBits&gt;" />
  <enum name="PipelineTessellationStateCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineTessellationStateCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineTessellationStateCreateFlagBits&gt;" />
  <enum name="PipelineVertexInputStateCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineVertexInputStateCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineVertexInputStateCreateFlagBits&gt;" />
  <enum name="PipelineViewportStateCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineViewportStateCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineViewportStateCreateFlagBits&gt;" />
  <enum name="PolygonMode" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFill" />
    <member name="eLine" />
    <member name="ePoint" />
    <member name="eFillRectangleNV" />
  </enum>
  <enum name="PrimitiveTopology" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="ePointList" />
    <member name="eLineList" />
    <member name="eLineStrip" />
    <member name="eTriangleList" />
    <member name="eTriangleStrip" />
    <member name="eTriangleFan" />
    <member name="eLineListWithAdjacency" />
    <member name="eLineStripWithAdjacency" />
    <member name="eTriangleListWithAdjacency" />
    <member name="eTriangleStripWithAdjacency" />
    <member name="ePatchList" />
  </enum>
  <enum name="QueryControlFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="ePrecise" />
  </enum>
  <type_alias name="QueryControlFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;QueryControlFlagBits&gt;" />
  <enum name="QueryPipelineStatisticFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eInputAssemblyVertices" />
    <member name="eInputAssemblyPrimitives" />
    <member name="eVertexShaderInvocations" />
    <member name="eGeometryShaderInvocations" />
    <member name="eGeometryShaderPrimitives" />
    <member name="eClippingInvocations" />
    <member name="eClippingPrimitives" />
    <member name="eFragmentShaderInvocations" />
    <member name="eTessellationControlShaderPatches" />
    <member name="eTessellationEvaluationShaderInvocations" />
    <member name="eComputeShaderInvocations" />
    <member name="eTaskShaderInvocationsEXT" />
    <member name="eMeshShaderInvocationsEXT" />
    <member name="eClusterCullingShaderInvocationsHUAWEI" />
  </enum>
  <type_alias name="QueryPipelineStatisticFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;QueryPipelineStatisticFlagBits&gt;" />
  <enum name="QueryPoolCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="QueryPoolCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;QueryPoolCreateFlagBits&gt;" />
  <enum name="QueryResultFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="e64" />
    <member name="eWait" />
    <member name="eWithAvailability" />
    <member name="ePartial" />
    <member name="eWithStatusKHR" />
  </enum>
  <type_alias name="QueryResultFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;QueryResultFlagBits&gt;" />
  <enum name="QueryType" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOcclusion" />
    <member name="ePipelineStatistics" />
    <member name="eTimestamp" />
    <member name="eResultStatusOnlyKHR" />
    <member name="eTransformFeedbackStreamEXT" />
    <member name="ePerformanceQueryKHR" />
    <member name="eAccelerationStructureCompactedSizeKHR" />
    <member name="eAccelerationStructureSerializationSizeKHR" />
    <member name="eAccelerationStructureCompactedSizeNV" />
    <member name="ePerformanceQueryINTEL" />
    <member name="eVideoEncodeFeedbackKHR" />
    <member name="eMeshPrimitivesGeneratedEXT" />
    <member name="ePrimitivesGeneratedEXT" />
    <member name="eAccelerationStructureSerializationBottomLevelPointersKHR" />
    <member name="eAccelerationStructureSizeKHR" />
    <member name="eMicromapSerializationSizeEXT" />
    <member name="eMicromapCompactedSizeEXT" />
  </enum>
  <enum name="QueueFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eGraphics" />
    <member name="eCompute" />
    <member name="eTransfer" />
    <member name="eSparseBinding" />
    <member name="eProtected" />
    <member name="eVideoDecodeKHR" />
    <member name="eVideoEncodeKHR" />
    <member name="eOpticalFlowNV" />
  </enum>
  <type_alias name="QueueFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;QueueFlagBits&gt;" />
  <enum name="RenderPassCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eTransformQCOM" />
  </enum>
  <type_alias name="RenderPassCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;RenderPassCreateFlagBits&gt;" />
  <enum name="Result" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSuccess" />
    <member name="eNotReady" />
    <member name="eTimeout" />
    <member name="eEventSet" />
    <member name="eEventReset" />
    <member name="eIncomplete" />
    <member name="eErrorOutOfHostMemory" />
    <member name="eErrorOutOfDeviceMemory" />
    <member name="eErrorInitializationFailed" />
    <member name="eErrorDeviceLost" />
    <member name="eErrorMemoryMapFailed" />
    <member name="eErrorLayerNotPresent" />
    <member name="eErrorExtensionNotPresent" />
    <member name="eErrorFeatureNotPresent" />
    <member name="eErrorIncompatibleDriver" />
    <member name="eErrorTooManyObjects" />
    <member name="eErrorFormatNotSupported" />
    <member name="eErrorFragmentedPool" />
    <member name="eErrorUnknown" />
    <member name="eErrorOutOfPoolMemory" />
    <member name="eErrorInvalidExternalHandle" />
    <member name="eErrorFragmentation" />
    <member name="eErrorInvalidOpaqueCaptureAddress" />
    <member name="ePipelineCompileRequired" />
    <member name="eErrorSurfaceLostKHR" />
    <member name="eErrorNativeWindowInUseKHR" />
    <member name="eSuboptimalKHR" />
    <member name="eErrorOutOfDateKHR" />
    <member name="eErrorIncompatibleDisplayKHR" />
    <member name="eErrorValidationFailedEXT" />
    <member name="eErrorInvalidShaderNV" />
    <member name="eErrorImageUsageNotSupportedKHR" />
    <member name="eErrorVideoPictureLayoutNotSupportedKHR" />
    <member name="eErrorVideoProfileOperationNotSupportedKHR" />
    <member name="eErrorVideoProfileFormatNotSupportedKHR" />
    <member name="eErrorVideoProfileCodecNotSupportedKHR" />
    <member name="eErrorVideoStdVersionNotSupportedKHR" />
    <member name="eErrorOutOfPoolMemoryKHR" />
    <member name="eErrorInvalidExternalHandleKHR" />
    <member name="eErrorInvalidDrmFormatModifierPlaneLayoutEXT" />
    <member name="eErrorFragmentationEXT" />
    <member name="eErrorNotPermittedEXT" />
    <member name="eErrorNotPermittedKHR" />
    <member name="eErrorInvalidDeviceAddressEXT" />
    <member name="eErrorInvalidOpaqueCaptureAddressKHR" />
    <member name="eThreadIdleKHR" />
    <member name="eThreadDoneKHR" />
    <member name="eOperationDeferredKHR" />
    <member name="eOperationNotDeferredKHR" />
    <member name="ePipelineCompileRequiredEXT" />
    <member name="eErrorPipelineCompileRequiredEXT" />
    <member name="eErrorInvalidVideoStdParametersKHR" />
    <member name="eErrorCompressionExhaustedEXT" />
    <member name="eErrorIncompatibleShaderBinaryEXT" />
  </enum>
  <enum name="SampleCountFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="e1" />
    <member name="e2" />
    <member name="e4" />
    <member name="e8" />
    <member name="e16" />
    <member name="e32" />
    <member name="e64" />
  </enum>
  <type_alias name="SampleCountFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SampleCountFlagBits&gt;" />
  <enum name="SamplerAddressMode" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eRepeat" />
    <member name="eMirroredRepeat" />
    <member name="eClampToEdge" />
    <member name="eClampToBorder" />
    <member name="eMirrorClampToEdge" />
    <member name="eMirrorClampToEdgeKHR" />
  </enum>
  <enum name="SamplerCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSubsampledEXT" />
    <member name="eSubsampledCoarseReconstructionEXT" />
    <member name="eDescriptorBufferCaptureReplayEXT" />
    <member name="eNonSeamlessCubeMapEXT" />
    <member name="eImageProcessingQCOM" />
  </enum>
  <type_alias name="SamplerCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SamplerCreateFlagBits&gt;" />
  <enum name="SamplerMipmapMode" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNearest" />
    <member name="eLinear" />
  </enum>
  <enum name="SemaphoreCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="SemaphoreCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SemaphoreCreateFlagBits&gt;" />
  <enum name="ShaderModuleCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="ShaderModuleCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ShaderModuleCreateFlagBits&gt;" />
  <enum name="ShaderStageFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eVertex" />
    <member name="eTessellationControl" />
    <member name="eTessellationEvaluation" />
    <member name="eGeometry" />
    <member name="eFragment" />
    <member name="eCompute" />
    <member name="eAllGraphics" />
    <member name="eAll" />
    <member name="eRaygenKHR" />
    <member name="eAnyHitKHR" />
    <member name="eClosestHitKHR" />
    <member name="eMissKHR" />
    <member name="eIntersectionKHR" />
    <member name="eCallableKHR" />
    <member name="eRaygenNV" />
    <member name="eAnyHitNV" />
    <member name="eClosestHitNV" />
    <member name="eMissNV" />
    <member name="eIntersectionNV" />
    <member name="eCallableNV" />
    <member name="eTaskNV" />
    <member name="eMeshNV" />
    <member name="eTaskEXT" />
    <member name="eMeshEXT" />
    <member name="eSubpassShadingHUAWEI" />
    <member name="eClusterCullingHUAWEI" />
  </enum>
  <type_alias name="ShaderStageFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ShaderStageFlagBits&gt;" />
  <enum name="SharingMode" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eExclusive" />
    <member name="eConcurrent" />
  </enum>
  <enum name="SparseImageFormatFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSingleMiptail" />
    <member name="eAlignedMipSize" />
    <member name="eNonstandardBlockSize" />
  </enum>
  <type_alias name="SparseImageFormatFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SparseImageFormatFlagBits&gt;" />
  <enum name="SparseMemoryBindFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eMetadata" />
  </enum>
  <type_alias name="SparseMemoryBindFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SparseMemoryBindFlagBits&gt;" />
  <enum name="StencilFaceFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFront" />
    <member name="eBack" />
    <member name="eFrontAndBack" />
    <member name="eVkStencilFrontAndBack" />
  </enum>
  <type_alias name="StencilFaceFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;StencilFaceFlagBits&gt;" />
  <enum name="StencilOp" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eKeep" />
    <member name="eZero" />
    <member name="eReplace" />
    <member name="eIncrementAndClamp" />
    <member name="eDecrementAndClamp" />
    <member name="eInvert" />
    <member name="eIncrementAndWrap" />
    <member name="eDecrementAndWrap" />
  </enum>
  <enum name="StructureType" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eApplicationInfo" />
    <member name="eInstanceCreateInfo" />
    <member name="eDeviceQueueCreateInfo" />
    <member name="eDeviceCreateInfo" />
    <member name="eSubmitInfo" />
    <member name="eMemoryAllocateInfo" />
    <member name="eMappedMemoryRange" />
    <member name="eBindSparseInfo" />
    <member name="eFenceCreateInfo" />
    <member name="eSemaphoreCreateInfo" />
    <member name="eEventCreateInfo" />
    <member name="eQueryPoolCreateInfo" />
    <member name="eBufferCreateInfo" />
    <member name="eBufferViewCreateInfo" />
    <member name="eImageCreateInfo" />
    <member name="eImageViewCreateInfo" />
    <member name="eShaderModuleCreateInfo" />
    <member name="ePipelineCacheCreateInfo" />
    <member name="ePipelineShaderStageCreateInfo" />
    <member name="ePipelineVertexInputStateCreateInfo" />
    <member name="ePipelineInputAssemblyStateCreateInfo" />
    <member name="ePipelineTessellationStateCreateInfo" />
    <member name="ePipelineViewportStateCreateInfo" />
    <member name="ePipelineRasterizationStateCreateInfo" />
    <member name="ePipelineMultisampleStateCreateInfo" />
    <member name="ePipelineDepthStencilStateCreateInfo" />
    <member name="ePipelineColorBlendStateCreateInfo" />
    <member name="ePipelineDynamicStateCreateInfo" />
    <member name="eGraphicsPipelineCreateInfo" />
    <member name="eComputePipelineCreateInfo" />
    <member name="ePipelineLayoutCreateInfo" />
    <member name="eSamplerCreateInfo" />
    <member name="eDescriptorSetLayoutCreateInfo" />
    <member name="eDescriptorPoolCreateInfo" />
    <member name="eDescriptorSetAllocateInfo" />
    <member name="eWriteDescriptorSet" />
    <member name="eCopyDescriptorSet" />
    <member name="eFramebufferCreateInfo" />
    <member name="eRenderPassCreateInfo" />
    <member name="eCommandPoolCreateInfo" />
    <member name="eCommandBufferAllocateInfo" />
    <member name="eCommandBufferInheritanceInfo" />
    <member name="eCommandBufferBeginInfo" />
    <member name="eRenderPassBeginInfo" />
    <member name="eBufferMemoryBarrier" />
    <member name="eImageMemoryBarrier" />
    <member name="eMemoryBarrier" />
    <member name="eLoaderInstanceCreateInfo" />
    <member name="eLoaderDeviceCreateInfo" />
    <member name="ePhysicalDeviceSubgroupProperties" />
    <member name="eBindBufferMemoryInfo" />
    <member name="eBindImageMemoryInfo" />
    <member name="ePhysicalDevice16BitStorageFeatures" />
    <member name="eMemoryDedicatedRequirements" />
    <member name="eMemoryDedicatedAllocateInfo" />
    <member name="eMemoryAllocateFlagsInfo" />
    <member name="eDeviceGroupRenderPassBeginInfo" />
    <member name="eDeviceGroupCommandBufferBeginInfo" />
    <member name="eDeviceGroupSubmitInfo" />
    <member name="eDeviceGroupBindSparseInfo" />
    <member name="eBindBufferMemoryDeviceGroupInfo" />
    <member name="eBindImageMemoryDeviceGroupInfo" />
    <member name="ePhysicalDeviceGroupProperties" />
    <member name="eDeviceGroupDeviceCreateInfo" />
    <member name="eBufferMemoryRequirementsInfo2" />
    <member name="eImageMemoryRequirementsInfo2" />
    <member name="eImageSparseMemoryRequirementsInfo2" />
    <member name="eMemoryRequirements2" />
    <member name="eSparseImageMemoryRequirements2" />
    <member name="ePhysicalDeviceFeatures2" />
    <member name="ePhysicalDeviceProperties2" />
    <member name="eFormatProperties2" />
    <member name="eImageFormatProperties2" />
    <member name="ePhysicalDeviceImageFormatInfo2" />
    <member name="eQueueFamilyProperties2" />
    <member name="ePhysicalDeviceMemoryProperties2" />
    <member name="eSparseImageFormatProperties2" />
    <member name="ePhysicalDeviceSparseImageFormatInfo2" />
    <member name="ePhysicalDevicePointClippingProperties" />
    <member name="eRenderPassInputAttachmentAspectCreateInfo" />
    <member name="eImageViewUsageCreateInfo" />
    <member name="ePipelineTessellationDomainOriginStateCreateInfo" />
    <member name="eRenderPassMultiviewCreateInfo" />
    <member name="ePhysicalDeviceMultiviewFeatures" />
    <member name="ePhysicalDeviceMultiviewProperties" />
    <member name="ePhysicalDeviceVariablePointersFeatures" />
    <member name="ePhysicalDeviceVariablePointerFeatures" />
    <member name="eProtectedSubmitInfo" />
    <member name="ePhysicalDeviceProtectedMemoryFeatures" />
    <member name="ePhysicalDeviceProtectedMemoryProperties" />
    <member name="eDeviceQueueInfo2" />
    <member name="eSamplerYcbcrConversionCreateInfo" />
    <member name="eSamplerYcbcrConversionInfo" />
    <member name="eBindImagePlaneMemoryInfo" />
    <member name="eImagePlaneMemoryRequirementsInfo" />
    <member name="ePhysicalDeviceSamplerYcbcrConversionFeatures" />
    <member name="eSamplerYcbcrConversionImageFormatProperties" />
    <member name="eDescriptorUpdateTemplateCreateInfo" />
    <member name="ePhysicalDeviceExternalImageFormatInfo" />
    <member name="eExternalImageFormatProperties" />
    <member name="ePhysicalDeviceExternalBufferInfo" />
    <member name="eExternalBufferProperties" />
    <member name="ePhysicalDeviceIdProperties" />
    <member name="eExternalMemoryBufferCreateInfo" />
    <member name="eExternalMemoryImageCreateInfo" />
    <member name="eExportMemoryAllocateInfo" />
    <member name="ePhysicalDeviceExternalFenceInfo" />
    <member name="eExternalFenceProperties" />
    <member name="eExportFenceCreateInfo" />
    <member name="eExportSemaphoreCreateInfo" />
    <member name="ePhysicalDeviceExternalSemaphoreInfo" />
    <member name="eExternalSemaphoreProperties" />
    <member name="ePhysicalDeviceMaintenance3Properties" />
    <member name="eDescriptorSetLayoutSupport" />
    <member name="ePhysicalDeviceShaderDrawParametersFeatures" />
    <member name="ePhysicalDeviceShaderDrawParameterFeatures" />
    <member name="ePhysicalDeviceVulkan11Features" />
    <member name="ePhysicalDeviceVulkan11Properties" />
    <member name="ePhysicalDeviceVulkan12Features" />
    <member name="ePhysicalDeviceVulkan12Properties" />
    <member name="eImageFormatListCreateInfo" />
    <member name="eAttachmentDescription2" />
    <member name="eAttachmentReference2" />
    <member name="eSubpassDescription2" />
    <member name="eSubpassDependency2" />
    <member name="eRenderPassCreateInfo2" />
    <member name="eSubpassBeginInfo" />
    <member name="eSubpassEndInfo" />
    <member name="ePhysicalDevice8BitStorageFeatures" />
    <member name="ePhysicalDeviceDriverProperties" />
    <member name="ePhysicalDeviceShaderAtomicInt64Features" />
    <member name="ePhysicalDeviceShaderFloat16Int8Features" />
    <member name="ePhysicalDeviceFloatControlsProperties" />
    <member name="eDescriptorSetLayoutBindingFlagsCreateInfo" />
    <member name="ePhysicalDeviceDescriptorIndexingFeatures" />
    <member name="ePhysicalDeviceDescriptorIndexingProperties" />
    <member name="eDescriptorSetVariableDescriptorCountAllocateInfo" />
    <member name="eDescriptorSetVariableDescriptorCountLayoutSupport" />
    <member name="ePhysicalDeviceDepthStencilResolveProperties" />
    <member name="eSubpassDescriptionDepthStencilResolve" />
    <member name="ePhysicalDeviceScalarBlockLayoutFeatures" />
    <member name="eImageStencilUsageCreateInfo" />
    <member name="ePhysicalDeviceSamplerFilterMinmaxProperties" />
    <member name="eSamplerReductionModeCreateInfo" />
    <member name="ePhysicalDeviceVulkanMemoryModelFeatures" />
    <member name="ePhysicalDeviceImagelessFramebufferFeatures" />
    <member name="eFramebufferAttachmentsCreateInfo" />
    <member name="eFramebufferAttachmentImageInfo" />
    <member name="eRenderPassAttachmentBeginInfo" />
    <member name="ePhysicalDeviceUniformBufferStandardLayoutFeatures" />
    <member name="ePhysicalDeviceShaderSubgroupExtendedTypesFeatures" />
    <member name="ePhysicalDeviceSeparateDepthStencilLayoutsFeatures" />
    <member name="eAttachmentReferenceStencilLayout" />
    <member name="eAttachmentDescriptionStencilLayout" />
    <member name="ePhysicalDeviceHostQueryResetFeatures" />
    <member name="ePhysicalDeviceTimelineSemaphoreFeatures" />
    <member name="ePhysicalDeviceTimelineSemaphoreProperties" />
    <member name="eSemaphoreTypeCreateInfo" />
    <member name="eTimelineSemaphoreSubmitInfo" />
    <member name="eSemaphoreWaitInfo" />
    <member name="eSemaphoreSignalInfo" />
    <member name="ePhysicalDeviceBufferDeviceAddressFeatures" />
    <member name="eBufferDeviceAddressInfo" />
    <member name="eBufferOpaqueCaptureAddressCreateInfo" />
    <member name="eMemoryOpaqueCaptureAddressAllocateInfo" />
    <member name="eDeviceMemoryOpaqueCaptureAddressInfo" />
    <member name="ePhysicalDeviceVulkan13Features" />
    <member name="ePhysicalDeviceVulkan13Properties" />
    <member name="ePipelineCreationFeedbackCreateInfo" />
    <member name="ePhysicalDeviceShaderTerminateInvocationFeatures" />
    <member name="ePhysicalDeviceToolProperties" />
    <member name="ePhysicalDeviceShaderDemoteToHelperInvocationFeatures" />
    <member name="ePhysicalDevicePrivateDataFeatures" />
    <member name="eDevicePrivateDataCreateInfo" />
    <member name="ePrivateDataSlotCreateInfo" />
    <member name="ePhysicalDevicePipelineCreationCacheControlFeatures" />
    <member name="eMemoryBarrier2" />
    <member name="eBufferMemoryBarrier2" />
    <member name="eImageMemoryBarrier2" />
    <member name="eDependencyInfo" />
    <member name="eSubmitInfo2" />
    <member name="eSemaphoreSubmitInfo" />
    <member name="eCommandBufferSubmitInfo" />
    <member name="ePhysicalDeviceSynchronization2Features" />
    <member name="ePhysicalDeviceZeroInitializeWorkgroupMemoryFeatures" />
    <member name="ePhysicalDeviceImageRobustnessFeatures" />
    <member name="eCopyBufferInfo2" />
    <member name="eCopyImageInfo2" />
    <member name="eCopyBufferToImageInfo2" />
    <member name="eCopyImageToBufferInfo2" />
    <member name="eBlitImageInfo2" />
    <member name="eResolveImageInfo2" />
    <member name="eBufferCopy2" />
    <member name="eImageCopy2" />
    <member name="eImageBlit2" />
    <member name="eBufferImageCopy2" />
    <member name="eImageResolve2" />
    <member name="ePhysicalDeviceSubgroupSizeControlProperties" />
    <member name="ePipelineShaderStageRequiredSubgroupSizeCreateInfo" />
    <member name="ePhysicalDeviceSubgroupSizeControlFeatures" />
    <member name="ePhysicalDeviceInlineUniformBlockFeatures" />
    <member name="ePhysicalDeviceInlineUniformBlockProperties" />
    <member name="eWriteDescriptorSetInlineUniformBlock" />
    <member name="eDescriptorPoolInlineUniformBlockCreateInfo" />
    <member name="ePhysicalDeviceTextureCompressionAstcHdrFeatures" />
    <member name="eRenderingInfo" />
    <member name="eRenderingAttachmentInfo" />
    <member name="ePipelineRenderingCreateInfo" />
    <member name="ePhysicalDeviceDynamicRenderingFeatures" />
    <member name="eCommandBufferInheritanceRenderingInfo" />
    <member name="ePhysicalDeviceShaderIntegerDotProductFeatures" />
    <member name="ePhysicalDeviceShaderIntegerDotProductProperties" />
    <member name="ePhysicalDeviceTexelBufferAlignmentProperties" />
    <member name="eFormatProperties3" />
    <member name="ePhysicalDeviceMaintenance4Features" />
    <member name="ePhysicalDeviceMaintenance4Properties" />
    <member name="eDeviceBufferMemoryRequirements" />
    <member name="eDeviceImageMemoryRequirements" />
    <member name="eSwapchainCreateInfoKHR" />
    <member name="ePresentInfoKHR" />
    <member name="eDeviceGroupPresentCapabilitiesKHR" />
    <member name="eImageSwapchainCreateInfoKHR" />
    <member name="eBindImageMemorySwapchainInfoKHR" />
    <member name="eAcquireNextImageInfoKHR" />
    <member name="eDeviceGroupPresentInfoKHR" />
    <member name="eDeviceGroupSwapchainCreateInfoKHR" />
    <member name="eDisplayModeCreateInfoKHR" />
    <member name="eDisplaySurfaceCreateInfoKHR" />
    <member name="eDisplayPresentInfoKHR" />
    <member name="eDebugReportCallbackCreateInfoEXT" />
    <member name="eDebugReportCreateInfoEXT" />
    <member name="ePipelineRasterizationStateRasterizationOrderAMD" />
    <member name="eDebugMarkerObjectNameInfoEXT" />
    <member name="eDebugMarkerObjectTagInfoEXT" />
    <member name="eDebugMarkerMarkerInfoEXT" />
    <member name="eVideoProfileInfoKHR" />
    <member name="eVideoCapabilitiesKHR" />
    <member name="eVideoPictureResourceInfoKHR" />
    <member name="eVideoSessionMemoryRequirementsKHR" />
    <member name="eBindVideoSessionMemoryInfoKHR" />
    <member name="eVideoSessionCreateInfoKHR" />
    <member name="eVideoSessionParametersCreateInfoKHR" />
    <member name="eVideoSessionParametersUpdateInfoKHR" />
    <member name="eVideoBeginCodingInfoKHR" />
    <member name="eVideoEndCodingInfoKHR" />
    <member name="eVideoCodingControlInfoKHR" />
    <member name="eVideoReferenceSlotInfoKHR" />
    <member name="eQueueFamilyVideoPropertiesKHR" />
    <member name="eVideoProfileListInfoKHR" />
    <member name="ePhysicalDeviceVideoFormatInfoKHR" />
    <member name="eVideoFormatPropertiesKHR" />
    <member name="eQueueFamilyQueryResultStatusPropertiesKHR" />
    <member name="eVideoDecodeInfoKHR" />
    <member name="eVideoDecodeCapabilitiesKHR" />
    <member name="eVideoDecodeUsageInfoKHR" />
    <member name="eDedicatedAllocationImageCreateInfoNV" />
    <member name="eDedicatedAllocationBufferCreateInfoNV" />
    <member name="eDedicatedAllocationMemoryAllocateInfoNV" />
    <member name="ePhysicalDeviceTransformFeedbackFeaturesEXT" />
    <member name="ePhysicalDeviceTransformFeedbackPropertiesEXT" />
    <member name="ePipelineRasterizationStateStreamCreateInfoEXT" />
    <member name="eCuModuleCreateInfoNVX" />
    <member name="eCuFunctionCreateInfoNVX" />
    <member name="eCuLaunchInfoNVX" />
    <member name="eImageViewHandleInfoNVX" />
    <member name="eImageViewAddressPropertiesNVX" />
    <member name="eVideoEncodeH264CapabilitiesKHR" />
    <member name="eVideoEncodeH264SessionParametersCreateInfoKHR" />
    <member name="eVideoEncodeH264SessionParametersAddInfoKHR" />
    <member name="eVideoEncodeH264PictureInfoKHR" />
    <member name="eVideoEncodeH264DpbSlotInfoKHR" />
    <member name="eVideoEncodeH264NaluSliceInfoKHR" />
    <member name="eVideoEncodeH264GopRemainingFrameInfoKHR" />
    <member name="eVideoEncodeH264ProfileInfoKHR" />
    <member name="eVideoEncodeH264RateControlInfoKHR" />
    <member name="eVideoEncodeH264RateControlLayerInfoKHR" />
    <member name="eVideoEncodeH264SessionCreateInfoKHR" />
    <member name="eVideoEncodeH264QualityLevelPropertiesKHR" />
    <member name="eVideoEncodeH264SessionParametersGetInfoKHR" />
    <member name="eVideoEncodeH264SessionParametersFeedbackInfoKHR" />
    <member name="eVideoEncodeH265CapabilitiesKHR" />
    <member name="eVideoEncodeH265SessionParametersCreateInfoKHR" />
    <member name="eVideoEncodeH265SessionParametersAddInfoKHR" />
    <member name="eVideoEncodeH265PictureInfoKHR" />
    <member name="eVideoEncodeH265DpbSlotInfoKHR" />
    <member name="eVideoEncodeH265NaluSliceSegmentInfoKHR" />
    <member name="eVideoEncodeH265GopRemainingFrameInfoKHR" />
    <member name="eVideoEncodeH265ProfileInfoKHR" />
    <member name="eVideoEncodeH265RateControlInfoKHR" />
    <member name="eVideoEncodeH265RateControlLayerInfoKHR" />
    <member name="eVideoEncodeH265SessionCreateInfoKHR" />
    <member name="eVideoEncodeH265QualityLevelPropertiesKHR" />
    <member name="eVideoEncodeH265SessionParametersGetInfoKHR" />
    <member name="eVideoEncodeH265SessionParametersFeedbackInfoKHR" />
    <member name="eVideoDecodeH264CapabilitiesKHR" />
    <member name="eVideoDecodeH264PictureInfoKHR" />
    <member name="eVideoDecodeH264ProfileInfoKHR" />
    <member name="eVideoDecodeH264SessionParametersCreateInfoKHR" />
    <member name="eVideoDecodeH264SessionParametersAddInfoKHR" />
    <member name="eVideoDecodeH264DpbSlotInfoKHR" />
    <member name="eTextureLodGatherFormatPropertiesAMD" />
    <member name="eRenderingInfoKHR" />
    <member name="eRenderingAttachmentInfoKHR" />
    <member name="ePipelineRenderingCreateInfoKHR" />
    <member name="ePhysicalDeviceDynamicRenderingFeaturesKHR" />
    <member name="eCommandBufferInheritanceRenderingInfoKHR" />
    <member name="eRenderingFragmentShadingRateAttachmentInfoKHR" />
    <member name="eRenderingFragmentDensityMapAttachmentInfoEXT" />
    <member name="eAttachmentSampleCountInfoAMD" />
    <member name="eAttachmentSampleCountInfoNV" />
    <member name="eMultiviewPerViewAttributesInfoNVX" />
    <member name="ePhysicalDeviceCornerSampledImageFeaturesNV" />
    <member name="eRenderPassMultiviewCreateInfoKHR" />
    <member name="ePhysicalDeviceMultiviewFeaturesKHR" />
    <member name="ePhysicalDeviceMultiviewPropertiesKHR" />
    <member name="eExternalMemoryImageCreateInfoNV" />
    <member name="eExportMemoryAllocateInfoNV" />
    <member name="ePhysicalDeviceFeatures2KHR" />
    <member name="ePhysicalDeviceProperties2KHR" />
    <member name="eFormatProperties2KHR" />
    <member name="eImageFormatProperties2KHR" />
    <member name="ePhysicalDeviceImageFormatInfo2KHR" />
    <member name="eQueueFamilyProperties2KHR" />
    <member name="ePhysicalDeviceMemoryProperties2KHR" />
    <member name="eSparseImageFormatProperties2KHR" />
    <member name="ePhysicalDeviceSparseImageFormatInfo2KHR" />
    <member name="eMemoryAllocateFlagsInfoKHR" />
    <member name="eDeviceGroupRenderPassBeginInfoKHR" />
    <member name="eDeviceGroupCommandBufferBeginInfoKHR" />
    <member name="eDeviceGroupSubmitInfoKHR" />
    <member name="eDeviceGroupBindSparseInfoKHR" />
    <member name="eBindBufferMemoryDeviceGroupInfoKHR" />
    <member name="eBindImageMemoryDeviceGroupInfoKHR" />
    <member name="eValidationFlagsEXT" />
    <member name="ePhysicalDeviceTextureCompressionAstcHdrFeaturesEXT" />
    <member name="eImageViewAstcDecodeModeEXT" />
    <member name="ePhysicalDeviceAstcDecodeFeaturesEXT" />
    <member name="ePipelineRobustnessCreateInfoEXT" />
    <member name="ePhysicalDevicePipelineRobustnessFeaturesEXT" />
    <member name="ePhysicalDevicePipelineRobustnessPropertiesEXT" />
    <member name="ePhysicalDeviceGroupPropertiesKHR" />
    <member name="eDeviceGroupDeviceCreateInfoKHR" />
    <member name="ePhysicalDeviceExternalImageFormatInfoKHR" />
    <member name="eExternalImageFormatPropertiesKHR" />
    <member name="ePhysicalDeviceExternalBufferInfoKHR" />
    <member name="eExternalBufferPropertiesKHR" />
    <member name="ePhysicalDeviceIdPropertiesKHR" />
    <member name="eExternalMemoryBufferCreateInfoKHR" />
    <member name="eExternalMemoryImageCreateInfoKHR" />
    <member name="eExportMemoryAllocateInfoKHR" />
    <member name="eImportMemoryFdInfoKHR" />
    <member name="eMemoryFdPropertiesKHR" />
    <member name="eMemoryGetFdInfoKHR" />
    <member name="ePhysicalDeviceExternalSemaphoreInfoKHR" />
    <member name="eExternalSemaphorePropertiesKHR" />
    <member name="eExportSemaphoreCreateInfoKHR" />
    <member name="eImportSemaphoreFdInfoKHR" />
    <member name="eSemaphoreGetFdInfoKHR" />
    <member name="ePhysicalDevicePushDescriptorPropertiesKHR" />
    <member name="eCommandBufferInheritanceConditionalRenderingInfoEXT" />
    <member name="ePhysicalDeviceConditionalRenderingFeaturesEXT" />
    <member name="eConditionalRenderingBeginInfoEXT" />
    <member name="ePhysicalDeviceShaderFloat16Int8FeaturesKHR" />
    <member name="ePhysicalDeviceFloat16Int8FeaturesKHR" />
    <member name="ePhysicalDevice16BitStorageFeaturesKHR" />
    <member name="ePresentRegionsKHR" />
    <member name="eDescriptorUpdateTemplateCreateInfoKHR" />
    <member name="ePipelineViewportWScalingStateCreateInfoNV" />
    <member name="eSurfaceCapabilities2EXT" />
    <member name="eDisplayPowerInfoEXT" />
    <member name="eDeviceEventInfoEXT" />
    <member name="eDisplayEventInfoEXT" />
    <member name="eSwapchainCounterCreateInfoEXT" />
    <member name="ePresentTimesInfoGOOGLE" />
    <member name="ePhysicalDeviceMultiviewPerViewAttributesPropertiesNVX" />
    <member name="ePipelineViewportSwizzleStateCreateInfoNV" />
    <member name="ePhysicalDeviceDiscardRectanglePropertiesEXT" />
    <member name="ePipelineDiscardRectangleStateCreateInfoEXT" />
    <member name="ePhysicalDeviceConservativeRasterizationPropertiesEXT" />
    <member name="ePipelineRasterizationConservativeStateCreateInfoEXT" />
    <member name="ePhysicalDeviceDepthClipEnableFeaturesEXT" />
    <member name="ePipelineRasterizationDepthClipStateCreateInfoEXT" />
    <member name="eHdrMetadataEXT" />
    <member name="ePhysicalDeviceImagelessFramebufferFeaturesKHR" />
    <member name="eFramebufferAttachmentsCreateInfoKHR" />
    <member name="eFramebufferAttachmentImageInfoKHR" />
    <member name="eRenderPassAttachmentBeginInfoKHR" />
    <member name="eAttachmentDescription2KHR" />
    <member name="eAttachmentReference2KHR" />
    <member name="eSubpassDescription2KHR" />
    <member name="eSubpassDependency2KHR" />
    <member name="eRenderPassCreateInfo2KHR" />
    <member name="eSubpassBeginInfoKHR" />
    <member name="eSubpassEndInfoKHR" />
    <member name="ePhysicalDeviceRelaxedLineRasterizationFeaturesIMG" />
    <member name="eSharedPresentSurfaceCapabilitiesKHR" />
    <member name="ePhysicalDeviceExternalFenceInfoKHR" />
    <member name="eExternalFencePropertiesKHR" />
    <member name="eExportFenceCreateInfoKHR" />
    <member name="eImportFenceFdInfoKHR" />
    <member name="eFenceGetFdInfoKHR" />
    <member name="ePhysicalDevicePerformanceQueryFeaturesKHR" />
    <member name="ePhysicalDevicePerformanceQueryPropertiesKHR" />
    <member name="eQueryPoolPerformanceCreateInfoKHR" />
    <member name="ePerformanceQuerySubmitInfoKHR" />
    <member name="eAcquireProfilingLockInfoKHR" />
    <member name="ePerformanceCounterKHR" />
    <member name="ePerformanceCounterDescriptionKHR" />
    <member name="ePhysicalDevicePointClippingPropertiesKHR" />
    <member name="eRenderPassInputAttachmentAspectCreateInfoKHR" />
    <member name="eImageViewUsageCreateInfoKHR" />
    <member name="ePipelineTessellationDomainOriginStateCreateInfoKHR" />
    <member name="ePhysicalDeviceSurfaceInfo2KHR" />
    <member name="eSurfaceCapabilities2KHR" />
    <member name="eSurfaceFormat2KHR" />
    <member name="ePhysicalDeviceVariablePointersFeaturesKHR" />
    <member name="ePhysicalDeviceVariablePointerFeaturesKHR" />
    <member name="eDisplayProperties2KHR" />
    <member name="eDisplayPlaneProperties2KHR" />
    <member name="eDisplayModeProperties2KHR" />
    <member name="eDisplayPlaneInfo2KHR" />
    <member name="eDisplayPlaneCapabilities2KHR" />
    <member name="eMemoryDedicatedRequirementsKHR" />
    <member name="eMemoryDedicatedAllocateInfoKHR" />
    <member name="eDebugUtilsObjectNameInfoEXT" />
    <member name="eDebugUtilsObjectTagInfoEXT" />
    <member name="eDebugUtilsLabelEXT" />
    <member name="eDebugUtilsMessengerCallbackDataEXT" />
    <member name="eDebugUtilsMessengerCreateInfoEXT" />
    <member name="ePhysicalDeviceSamplerFilterMinmaxPropertiesEXT" />
    <member name="eSamplerReductionModeCreateInfoEXT" />
    <member name="ePhysicalDeviceInlineUniformBlockFeaturesEXT" />
    <member name="ePhysicalDeviceInlineUniformBlockPropertiesEXT" />
    <member name="eWriteDescriptorSetInlineUniformBlockEXT" />
    <member name="eDescriptorPoolInlineUniformBlockCreateInfoEXT" />
    <member name="eSampleLocationsInfoEXT" />
    <member name="eRenderPassSampleLocationsBeginInfoEXT" />
    <member name="ePipelineSampleLocationsStateCreateInfoEXT" />
    <member name="ePhysicalDeviceSampleLocationsPropertiesEXT" />
    <member name="eMultisamplePropertiesEXT" />
    <member name="eBufferMemoryRequirementsInfo2KHR" />
    <member name="eImageMemoryRequirementsInfo2KHR" />
    <member name="eImageSparseMemoryRequirementsInfo2KHR" />
    <member name="eMemoryRequirements2KHR" />
    <member name="eSparseImageMemoryRequirements2KHR" />
    <member name="eImageFormatListCreateInfoKHR" />
    <member name="ePhysicalDeviceBlendOperationAdvancedFeaturesEXT" />
    <member name="ePhysicalDeviceBlendOperationAdvancedPropertiesEXT" />
    <member name="ePipelineColorBlendAdvancedStateCreateInfoEXT" />
    <member name="ePipelineCoverageToColorStateCreateInfoNV" />
    <member name="eWriteDescriptorSetAccelerationStructureKHR" />
    <member name="eAccelerationStructureBuildGeometryInfoKHR" />
    <member name="eAccelerationStructureDeviceAddressInfoKHR" />
    <member name="eAccelerationStructureGeometryAabbsDataKHR" />
    <member name="eAccelerationStructureGeometryInstancesDataKHR" />
    <member name="eAccelerationStructureGeometryTrianglesDataKHR" />
    <member name="eAccelerationStructureGeometryKHR" />
    <member name="eAccelerationStructureVersionInfoKHR" />
    <member name="eCopyAccelerationStructureInfoKHR" />
    <member name="eCopyAccelerationStructureToMemoryInfoKHR" />
    <member name="eCopyMemoryToAccelerationStructureInfoKHR" />
    <member name="ePhysicalDeviceAccelerationStructureFeaturesKHR" />
    <member name="ePhysicalDeviceAccelerationStructurePropertiesKHR" />
    <member name="eAccelerationStructureCreateInfoKHR" />
    <member name="eAccelerationStructureBuildSizesInfoKHR" />
    <member name="ePhysicalDeviceRayTracingPipelineFeaturesKHR" />
    <member name="ePhysicalDeviceRayTracingPipelinePropertiesKHR" />
    <member name="eRayTracingPipelineCreateInfoKHR" />
    <member name="eRayTracingShaderGroupCreateInfoKHR" />
    <member name="eRayTracingPipelineInterfaceCreateInfoKHR" />
    <member name="ePhysicalDeviceRayQueryFeaturesKHR" />
    <member name="ePipelineCoverageModulationStateCreateInfoNV" />
    <member name="ePhysicalDeviceShaderSmBuiltinsFeaturesNV" />
    <member name="ePhysicalDeviceShaderSmBuiltinsPropertiesNV" />
    <member name="eSamplerYcbcrConversionCreateInfoKHR" />
    <member name="eSamplerYcbcrConversionInfoKHR" />
    <member name="eBindImagePlaneMemoryInfoKHR" />
    <member name="eImagePlaneMemoryRequirementsInfoKHR" />
    <member name="ePhysicalDeviceSamplerYcbcrConversionFeaturesKHR" />
    <member name="eSamplerYcbcrConversionImageFormatPropertiesKHR" />
    <member name="eBindBufferMemoryInfoKHR" />
    <member name="eBindImageMemoryInfoKHR" />
    <member name="eDrmFormatModifierPropertiesListEXT" />
    <member name="ePhysicalDeviceImageDrmFormatModifierInfoEXT" />
    <member name="eImageDrmFormatModifierListCreateInfoEXT" />
    <member name="eImageDrmFormatModifierExplicitCreateInfoEXT" />
    <member name="eImageDrmFormatModifierPropertiesEXT" />
    <member name="eDrmFormatModifierPropertiesList2EXT" />
    <member name="eValidationCacheCreateInfoEXT" />
    <member name="eShaderModuleValidationCacheCreateInfoEXT" />
    <member name="eDescriptorSetLayoutBindingFlagsCreateInfoEXT" />
    <member name="ePhysicalDeviceDescriptorIndexingFeaturesEXT" />
    <member name="ePhysicalDeviceDescriptorIndexingPropertiesEXT" />
    <member name="eDescriptorSetVariableDescriptorCountAllocateInfoEXT" />
    <member name="eDescriptorSetVariableDescriptorCountLayoutSupportEXT" />
    <member name="ePipelineViewportShadingRateImageStateCreateInfoNV" />
    <member name="ePhysicalDeviceShadingRateImageFeaturesNV" />
    <member name="ePhysicalDeviceShadingRateImagePropertiesNV" />
    <member name="ePipelineViewportCoarseSampleOrderStateCreateInfoNV" />
    <member name="eRayTracingPipelineCreateInfoNV" />
    <member name="eAccelerationStructureCreateInfoNV" />
    <member name="eGeometryNV" />
    <member name="eGeometryTrianglesNV" />
    <member name="eGeometryAabbNV" />
    <member name="eBindAccelerationStructureMemoryInfoNV" />
    <member name="eWriteDescriptorSetAccelerationStructureNV" />
    <member name="eAccelerationStructureMemoryRequirementsInfoNV" />
    <member name="ePhysicalDeviceRayTracingPropertiesNV" />
    <member name="eRayTracingShaderGroupCreateInfoNV" />
    <member name="eAccelerationStructureInfoNV" />
    <member name="ePhysicalDeviceRepresentativeFragmentTestFeaturesNV" />
    <member name="ePipelineRepresentativeFragmentTestStateCreateInfoNV" />
    <member name="ePhysicalDeviceMaintenance3PropertiesKHR" />
    <member name="eDescriptorSetLayoutSupportKHR" />
    <member name="ePhysicalDeviceImageViewImageFormatInfoEXT" />
    <member name="eFilterCubicImageViewImageFormatPropertiesEXT" />
    <member name="eDeviceQueueGlobalPriorityCreateInfoEXT" />
    <member name="ePhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR" />
    <member name="ePhysicalDevice8BitStorageFeaturesKHR" />
    <member name="eImportMemoryHostPointerInfoEXT" />
    <member name="eMemoryHostPointerPropertiesEXT" />
    <member name="ePhysicalDeviceExternalMemoryHostPropertiesEXT" />
    <member name="ePhysicalDeviceShaderAtomicInt64FeaturesKHR" />
    <member name="ePhysicalDeviceShaderClockFeaturesKHR" />
    <member name="ePipelineCompilerControlCreateInfoAMD" />
    <member name="eCalibratedTimestampInfoEXT" />
    <member name="ePhysicalDeviceShaderCorePropertiesAMD" />
    <member name="eVideoDecodeH265CapabilitiesKHR" />
    <member name="eVideoDecodeH265SessionParametersCreateInfoKHR" />
    <member name="eVideoDecodeH265SessionParametersAddInfoKHR" />
    <member name="eVideoDecodeH265ProfileInfoKHR" />
    <member name="eVideoDecodeH265PictureInfoKHR" />
    <member name="eVideoDecodeH265DpbSlotInfoKHR" />
    <member name="eDeviceQueueGlobalPriorityCreateInfoKHR" />
    <member name="ePhysicalDeviceGlobalPriorityQueryFeaturesKHR" />
    <member name="eQueueFamilyGlobalPriorityPropertiesKHR" />
    <member name="eDeviceMemoryOverallocationCreateInfoAMD" />
    <member name="ePhysicalDeviceVertexAttributeDivisorPropertiesEXT" />
    <member name="ePipelineVertexInputDivisorStateCreateInfoEXT" />
    <member name="ePhysicalDeviceVertexAttributeDivisorFeaturesEXT" />
    <member name="ePipelineCreationFeedbackCreateInfoEXT" />
    <member name="ePhysicalDeviceDriverPropertiesKHR" />
    <member name="ePhysicalDeviceFloatControlsPropertiesKHR" />
    <member name="ePhysicalDeviceDepthStencilResolvePropertiesKHR" />
    <member name="eSubpassDescriptionDepthStencilResolveKHR" />
    <member name="ePhysicalDeviceComputeShaderDerivativesFeaturesNV" />
    <member name="ePhysicalDeviceMeshShaderFeaturesNV" />
    <member name="ePhysicalDeviceMeshShaderPropertiesNV" />
    <member name="ePhysicalDeviceFragmentShaderBarycentricFeaturesNV" />
    <member name="ePhysicalDeviceShaderImageFootprintFeaturesNV" />
    <member name="ePipelineViewportExclusiveScissorStateCreateInfoNV" />
    <member name="ePhysicalDeviceExclusiveScissorFeaturesNV" />
    <member name="eCheckpointDataNV" />
    <member name="eQueueFamilyCheckpointPropertiesNV" />
    <member name="ePhysicalDeviceTimelineSemaphoreFeaturesKHR" />
    <member name="ePhysicalDeviceTimelineSemaphorePropertiesKHR" />
    <member name="eSemaphoreTypeCreateInfoKHR" />
    <member name="eTimelineSemaphoreSubmitInfoKHR" />
    <member name="eSemaphoreWaitInfoKHR" />
    <member name="eSemaphoreSignalInfoKHR" />
    <member name="ePhysicalDeviceShaderIntegerFunctions2FeaturesINTEL" />
    <member name="eQueryPoolPerformanceQueryCreateInfoINTEL" />
    <member name="eQueryPoolCreateInfoINTEL" />
    <member name="eInitializePerformanceApiInfoINTEL" />
    <member name="ePerformanceMarkerInfoINTEL" />
    <member name="ePerformanceStreamMarkerInfoINTEL" />
    <member name="ePerformanceOverrideInfoINTEL" />
    <member name="ePerformanceConfigurationAcquireInfoINTEL" />
    <member name="ePhysicalDeviceVulkanMemoryModelFeaturesKHR" />
    <member name="ePhysicalDevicePciBusInfoPropertiesEXT" />
    <member name="eDisplayNativeHdrSurfaceCapabilitiesAMD" />
    <member name="eSwapchainDisplayNativeHdrCreateInfoAMD" />
    <member name="ePhysicalDeviceShaderTerminateInvocationFeaturesKHR" />
    <member name="ePhysicalDeviceFragmentDensityMapFeaturesEXT" />
    <member name="ePhysicalDeviceFragmentDensityMapPropertiesEXT" />
    <member name="eRenderPassFragmentDensityMapCreateInfoEXT" />
    <member name="ePhysicalDeviceScalarBlockLayoutFeaturesEXT" />
    <member name="ePhysicalDeviceSubgroupSizeControlPropertiesEXT" />
    <member name="ePipelineShaderStageRequiredSubgroupSizeCreateInfoEXT" />
    <member name="ePhysicalDeviceSubgroupSizeControlFeaturesEXT" />
    <member name="eFragmentShadingRateAttachmentInfoKHR" />
    <member name="ePipelineFragmentShadingRateStateCreateInfoKHR" />
    <member name="ePhysicalDeviceFragmentShadingRatePropertiesKHR" />
    <member name="ePhysicalDeviceFragmentShadingRateFeaturesKHR" />
    <member name="ePhysicalDeviceFragmentShadingRateKHR" />
    <member name="ePhysicalDeviceShaderCoreProperties2AMD" />
    <member name="ePhysicalDeviceCoherentMemoryFeaturesAMD" />
    <member name="ePhysicalDeviceShaderImageAtomicInt64FeaturesEXT" />
    <member name="ePhysicalDeviceMemoryBudgetPropertiesEXT" />
    <member name="ePhysicalDeviceMemoryPriorityFeaturesEXT" />
    <member name="eMemoryPriorityAllocateInfoEXT" />
    <member name="eSurfaceProtectedCapabilitiesKHR" />
    <member name="ePhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV" />
    <member name="ePhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR" />
    <member name="eAttachmentReferenceStencilLayoutKHR" />
    <member name="eAttachmentDescriptionStencilLayoutKHR" />
    <member name="ePhysicalDeviceBufferDeviceAddressFeaturesEXT" />
    <member name="ePhysicalDeviceBufferAddressFeaturesEXT" />
    <member name="eBufferDeviceAddressInfoEXT" />
    <member name="eBufferDeviceAddressCreateInfoEXT" />
    <member name="ePhysicalDeviceToolPropertiesEXT" />
    <member name="eImageStencilUsageCreateInfoEXT" />
    <member name="eValidationFeaturesEXT" />
    <member name="ePhysicalDevicePresentWaitFeaturesKHR" />
    <member name="ePhysicalDeviceCooperativeMatrixFeaturesNV" />
    <member name="eCooperativeMatrixPropertiesNV" />
    <member name="ePhysicalDeviceCooperativeMatrixPropertiesNV" />
    <member name="ePhysicalDeviceCoverageReductionModeFeaturesNV" />
    <member name="ePipelineCoverageReductionStateCreateInfoNV" />
    <member name="eFramebufferMixedSamplesCombinationNV" />
    <member name="ePhysicalDeviceFragmentShaderInterlockFeaturesEXT" />
    <member name="ePhysicalDeviceYcbcrImageArraysFeaturesEXT" />
    <member name="ePhysicalDeviceUniformBufferStandardLayoutFeaturesKHR" />
    <member name="ePhysicalDeviceProvokingVertexFeaturesEXT" />
    <member name="ePipelineRasterizationProvokingVertexStateCreateInfoEXT" />
    <member name="ePhysicalDeviceProvokingVertexPropertiesEXT" />
    <member name="eHeadlessSurfaceCreateInfoEXT" />
    <member name="ePhysicalDeviceBufferDeviceAddressFeaturesKHR" />
    <member name="eBufferDeviceAddressInfoKHR" />
    <member name="eBufferOpaqueCaptureAddressCreateInfoKHR" />
    <member name="eMemoryOpaqueCaptureAddressAllocateInfoKHR" />
    <member name="eDeviceMemoryOpaqueCaptureAddressInfoKHR" />
    <member name="ePhysicalDeviceLineRasterizationFeaturesEXT" />
    <member name="ePipelineRasterizationLineStateCreateInfoEXT" />
    <member name="ePhysicalDeviceLineRasterizationPropertiesEXT" />
    <member name="ePhysicalDeviceShaderAtomicFloatFeaturesEXT" />
    <member name="ePhysicalDeviceHostQueryResetFeaturesEXT" />
    <member name="ePhysicalDeviceIndexTypeUint8FeaturesEXT" />
    <member name="ePhysicalDeviceExtendedDynamicStateFeaturesEXT" />
    <member name="ePhysicalDevicePipelineExecutablePropertiesFeaturesKHR" />
    <member name="ePipelineInfoKHR" />
    <member name="ePipelineExecutablePropertiesKHR" />
    <member name="ePipelineExecutableInfoKHR" />
    <member name="ePipelineExecutableStatisticKHR" />
    <member name="ePipelineExecutableInternalRepresentationKHR" />
    <member name="ePhysicalDeviceHostImageCopyFeaturesEXT" />
    <member name="ePhysicalDeviceHostImageCopyPropertiesEXT" />
    <member name="eMemoryToImageCopyEXT" />
    <member name="eImageToMemoryCopyEXT" />
    <member name="eCopyImageToMemoryInfoEXT" />
    <member name="eCopyMemoryToImageInfoEXT" />
    <member name="eHostImageLayoutTransitionInfoEXT" />
    <member name="eCopyImageToImageInfoEXT" />
    <member name="eSubresourceHostMemcpySizeEXT" />
    <member name="eHostImageCopyDevicePerformanceQueryEXT" />
    <member name="eMemoryMapInfoKHR" />
    <member name="eMemoryUnmapInfoKHR" />
    <member name="ePhysicalDeviceShaderAtomicFloat2FeaturesEXT" />
    <member name="eSurfacePresentModeEXT" />
    <member name="eSurfacePresentScalingCapabilitiesEXT" />
    <member name="eSurfacePresentModeCompatibilityEXT" />
    <member name="ePhysicalDeviceSwapchainMaintenance1FeaturesEXT" />
    <member name="eSwapchainPresentFenceInfoEXT" />
    <member name="eSwapchainPresentModesCreateInfoEXT" />
    <member name="eSwapchainPresentModeInfoEXT" />
    <member name="eSwapchainPresentScalingCreateInfoEXT" />
    <member name="eReleaseSwapchainImagesInfoEXT" />
    <member name="ePhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT" />
    <member name="ePhysicalDeviceDeviceGeneratedCommandsPropertiesNV" />
    <member name="eGraphicsShaderGroupCreateInfoNV" />
    <member name="eGraphicsPipelineShaderGroupsCreateInfoNV" />
    <member name="eIndirectCommandsLayoutTokenNV" />
    <member name="eIndirectCommandsLayoutCreateInfoNV" />
    <member name="eGeneratedCommandsInfoNV" />
    <member name="eGeneratedCommandsMemoryRequirementsInfoNV" />
    <member name="ePhysicalDeviceDeviceGeneratedCommandsFeaturesNV" />
    <member name="ePhysicalDeviceInheritedViewportScissorFeaturesNV" />
    <member name="eCommandBufferInheritanceViewportScissorInfoNV" />
    <member name="ePhysicalDeviceShaderIntegerDotProductFeaturesKHR" />
    <member name="ePhysicalDeviceShaderIntegerDotProductPropertiesKHR" />
    <member name="ePhysicalDeviceTexelBufferAlignmentFeaturesEXT" />
    <member name="ePhysicalDeviceTexelBufferAlignmentPropertiesEXT" />
    <member name="eCommandBufferInheritanceRenderPassTransformInfoQCOM" />
    <member name="eRenderPassTransformBeginInfoQCOM" />
    <member name="ePhysicalDeviceDepthBiasControlFeaturesEXT" />
    <member name="eDepthBiasInfoEXT" />
    <member name="eDepthBiasRepresentationInfoEXT" />
    <member name="ePhysicalDeviceDeviceMemoryReportFeaturesEXT" />
    <member name="eDeviceDeviceMemoryReportCreateInfoEXT" />
    <member name="eDeviceMemoryReportCallbackDataEXT" />
    <member name="ePhysicalDeviceRobustness2FeaturesEXT" />
    <member name="ePhysicalDeviceRobustness2PropertiesEXT" />
    <member name="eSamplerCustomBorderColorCreateInfoEXT" />
    <member name="ePhysicalDeviceCustomBorderColorPropertiesEXT" />
    <member name="ePhysicalDeviceCustomBorderColorFeaturesEXT" />
    <member name="ePipelineLibraryCreateInfoKHR" />
    <member name="ePhysicalDevicePresentBarrierFeaturesNV" />
    <member name="eSurfaceCapabilitiesPresentBarrierNV" />
    <member name="eSwapchainPresentBarrierCreateInfoNV" />
    <member name="ePresentIdKHR" />
    <member name="ePhysicalDevicePresentIdFeaturesKHR" />
    <member name="ePhysicalDevicePrivateDataFeaturesEXT" />
    <member name="eDevicePrivateDataCreateInfoEXT" />
    <member name="ePrivateDataSlotCreateInfoEXT" />
    <member name="ePhysicalDevicePipelineCreationCacheControlFeaturesEXT" />
    <member name="eVideoEncodeInfoKHR" />
    <member name="eVideoEncodeRateControlInfoKHR" />
    <member name="eVideoEncodeRateControlLayerInfoKHR" />
    <member name="eVideoEncodeCapabilitiesKHR" />
    <member name="eVideoEncodeUsageInfoKHR" />
    <member name="eQueryPoolVideoEncodeFeedbackCreateInfoKHR" />
    <member name="ePhysicalDeviceVideoEncodeQualityLevelInfoKHR" />
    <member name="eVideoEncodeQualityLevelPropertiesKHR" />
    <member name="eVideoEncodeQualityLevelInfoKHR" />
    <member name="eVideoEncodeSessionParametersGetInfoKHR" />
    <member name="eVideoEncodeSessionParametersFeedbackInfoKHR" />
    <member name="ePhysicalDeviceDiagnosticsConfigFeaturesNV" />
    <member name="eDeviceDiagnosticsConfigCreateInfoNV" />
    <member name="eQueryLowLatencySupportNV" />
    <member name="eMemoryBarrier2KHR" />
    <member name="eBufferMemoryBarrier2KHR" />
    <member name="eImageMemoryBarrier2KHR" />
    <member name="eDependencyInfoKHR" />
    <member name="eSubmitInfo2KHR" />
    <member name="eSemaphoreSubmitInfoKHR" />
    <member name="eCommandBufferSubmitInfoKHR" />
    <member name="ePhysicalDeviceSynchronization2FeaturesKHR" />
    <member name="eQueueFamilyCheckpointProperties2NV" />
    <member name="eCheckpointData2NV" />
    <member name="ePhysicalDeviceDescriptorBufferPropertiesEXT" />
    <member name="ePhysicalDeviceDescriptorBufferDensityMapPropertiesEXT" />
    <member name="ePhysicalDeviceDescriptorBufferFeaturesEXT" />
    <member name="eDescriptorAddressInfoEXT" />
    <member name="eDescriptorGetInfoEXT" />
    <member name="eBufferCaptureDescriptorDataInfoEXT" />
    <member name="eImageCaptureDescriptorDataInfoEXT" />
    <member name="eImageViewCaptureDescriptorDataInfoEXT" />
    <member name="eSamplerCaptureDescriptorDataInfoEXT" />
    <member name="eOpaqueCaptureDescriptorDataCreateInfoEXT" />
    <member name="eDescriptorBufferBindingInfoEXT" />
    <member name="eDescriptorBufferBindingPushDescriptorBufferHandleEXT" />
    <member name="eAccelerationStructureCaptureDescriptorDataInfoEXT" />
    <member name="ePhysicalDeviceGraphicsPipelineLibraryFeaturesEXT" />
    <member name="ePhysicalDeviceGraphicsPipelineLibraryPropertiesEXT" />
    <member name="eGraphicsPipelineLibraryCreateInfoEXT" />
    <member name="ePhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD" />
    <member name="ePhysicalDeviceFragmentShaderBarycentricFeaturesKHR" />
    <member name="ePhysicalDeviceFragmentShaderBarycentricPropertiesKHR" />
    <member name="ePhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR" />
    <member name="ePhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR" />
    <member name="ePhysicalDeviceFragmentShadingRateEnumsPropertiesNV" />
    <member name="ePhysicalDeviceFragmentShadingRateEnumsFeaturesNV" />
    <member name="ePipelineFragmentShadingRateEnumStateCreateInfoNV" />
    <member name="eAccelerationStructureGeometryMotionTrianglesDataNV" />
    <member name="ePhysicalDeviceRayTracingMotionBlurFeaturesNV" />
    <member name="eAccelerationStructureMotionInfoNV" />
    <member name="ePhysicalDeviceMeshShaderFeaturesEXT" />
    <member name="ePhysicalDeviceMeshShaderPropertiesEXT" />
    <member name="ePhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT" />
    <member name="ePhysicalDeviceFragmentDensityMap2FeaturesEXT" />
    <member name="ePhysicalDeviceFragmentDensityMap2PropertiesEXT" />
    <member name="eCopyCommandTransformInfoQCOM" />
    <member name="ePhysicalDeviceImageRobustnessFeaturesEXT" />
    <member name="ePhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR" />
    <member name="eCopyBufferInfo2KHR" />
    <member name="eCopyImageInfo2KHR" />
    <member name="eCopyBufferToImageInfo2KHR" />
    <member name="eCopyImageToBufferInfo2KHR" />
    <member name="eBlitImageInfo2KHR" />
    <member name="eResolveImageInfo2KHR" />
    <member name="eBufferCopy2KHR" />
    <member name="eImageCopy2KHR" />
    <member name="eImageBlit2KHR" />
    <member name="eBufferImageCopy2KHR" />
    <member name="eImageResolve2KHR" />
    <member name="ePhysicalDeviceImageCompressionControlFeaturesEXT" />
    <member name="eImageCompressionControlEXT" />
    <member name="eSubresourceLayout2EXT" />
    <member name="eImageSubresource2EXT" />
    <member name="eImageCompressionPropertiesEXT" />
    <member name="ePhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT" />
    <member name="ePhysicalDevice4444FormatsFeaturesEXT" />
    <member name="ePhysicalDeviceFaultFeaturesEXT" />
    <member name="eDeviceFaultCountsEXT" />
    <member name="eDeviceFaultInfoEXT" />
    <member name="ePhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM" />
    <member name="ePhysicalDeviceRgba10X6FormatsFeaturesEXT" />
    <member name="ePhysicalDeviceMutableDescriptorTypeFeaturesVALVE" />
    <member name="eMutableDescriptorTypeCreateInfoVALVE" />
    <member name="ePhysicalDeviceVertexInputDynamicStateFeaturesEXT" />
    <member name="eVertexInputBindingDescription2EXT" />
    <member name="eVertexInputAttributeDescription2EXT" />
    <member name="ePhysicalDeviceDrmPropertiesEXT" />
    <member name="ePhysicalDeviceAddressBindingReportFeaturesEXT" />
    <member name="eDeviceAddressBindingCallbackDataEXT" />
    <member name="ePhysicalDeviceDepthClipControlFeaturesEXT" />
    <member name="ePipelineViewportDepthClipControlCreateInfoEXT" />
    <member name="ePhysicalDevicePrimitiveTopologyListRestartFeaturesEXT" />
    <member name="eFormatProperties3KHR" />
    <member name="eSubpassShadingPipelineCreateInfoHUAWEI" />
    <member name="ePhysicalDeviceSubpassShadingFeaturesHUAWEI" />
    <member name="ePhysicalDeviceSubpassShadingPropertiesHUAWEI" />
    <member name="ePhysicalDeviceInvocationMaskFeaturesHUAWEI" />
    <member name="eMemoryGetRemoteAddressInfoNV" />
    <member name="ePhysicalDeviceExternalMemoryRdmaFeaturesNV" />
    <member name="ePipelinePropertiesIdentifierEXT" />
    <member name="ePhysicalDevicePipelinePropertiesFeaturesEXT" />
    <member name="ePipelineInfoEXT" />
    <member name="ePhysicalDeviceFrameBoundaryFeaturesEXT" />
    <member name="eFrameBoundaryEXT" />
    <member name="ePhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT" />
    <member name="eSubpassResolvePerformanceQueryEXT" />
    <member name="eMultisampledRenderToSingleSampledInfoEXT" />
    <member name="ePhysicalDeviceExtendedDynamicState2FeaturesEXT" />
    <member name="ePhysicalDeviceColorWriteEnableFeaturesEXT" />
    <member name="ePipelineColorWriteCreateInfoEXT" />
    <member name="ePhysicalDevicePrimitivesGeneratedQueryFeaturesEXT" />
    <member name="ePhysicalDeviceRayTracingMaintenance1FeaturesKHR" />
    <member name="ePhysicalDeviceGlobalPriorityQueryFeaturesEXT" />
    <member name="eQueueFamilyGlobalPriorityPropertiesEXT" />
    <member name="ePhysicalDeviceImageViewMinLodFeaturesEXT" />
    <member name="eImageViewMinLodCreateInfoEXT" />
    <member name="ePhysicalDeviceMultiDrawFeaturesEXT" />
    <member name="ePhysicalDeviceMultiDrawPropertiesEXT" />
    <member name="ePhysicalDeviceImage2DViewOf3DFeaturesEXT" />
    <member name="ePhysicalDeviceShaderTileImageFeaturesEXT" />
    <member name="ePhysicalDeviceShaderTileImagePropertiesEXT" />
    <member name="eMicromapBuildInfoEXT" />
    <member name="eMicromapVersionInfoEXT" />
    <member name="eCopyMicromapInfoEXT" />
    <member name="eCopyMicromapToMemoryInfoEXT" />
    <member name="eCopyMemoryToMicromapInfoEXT" />
    <member name="ePhysicalDeviceOpacityMicromapFeaturesEXT" />
    <member name="ePhysicalDeviceOpacityMicromapPropertiesEXT" />
    <member name="eMicromapCreateInfoEXT" />
    <member name="eMicromapBuildSizesInfoEXT" />
    <member name="eAccelerationStructureTrianglesOpacityMicromapEXT" />
    <member name="ePhysicalDeviceClusterCullingShaderFeaturesHUAWEI" />
    <member name="ePhysicalDeviceClusterCullingShaderPropertiesHUAWEI" />
    <member name="ePhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI" />
    <member name="ePhysicalDeviceBorderColorSwizzleFeaturesEXT" />
    <member name="eSamplerBorderColorComponentMappingCreateInfoEXT" />
    <member name="ePhysicalDevicePageableDeviceLocalMemoryFeaturesEXT" />
    <member name="ePhysicalDeviceMaintenance4FeaturesKHR" />
    <member name="ePhysicalDeviceMaintenance4PropertiesKHR" />
    <member name="eDeviceBufferMemoryRequirementsKHR" />
    <member name="eDeviceImageMemoryRequirementsKHR" />
    <member name="ePhysicalDeviceShaderCorePropertiesARM" />
    <member name="eDeviceQueueShaderCoreControlCreateInfoARM" />
    <member name="ePhysicalDeviceSchedulingControlsFeaturesARM" />
    <member name="ePhysicalDeviceSchedulingControlsPropertiesARM" />
    <member name="ePhysicalDeviceImageSlicedViewOf3DFeaturesEXT" />
    <member name="eImageViewSlicedCreateInfoEXT" />
    <member name="ePhysicalDeviceDescriptorSetHostMappingFeaturesVALVE" />
    <member name="eDescriptorSetBindingReferenceVALVE" />
    <member name="eDescriptorSetLayoutHostMappingInfoVALVE" />
    <member name="ePhysicalDeviceDepthClampZeroOneFeaturesEXT" />
    <member name="ePhysicalDeviceNonSeamlessCubeMapFeaturesEXT" />
    <member name="ePhysicalDeviceRenderPassStripedFeaturesARM" />
    <member name="ePhysicalDeviceRenderPassStripedPropertiesARM" />
    <member name="eRenderPassStripeBeginInfoARM" />
    <member name="eRenderPassStripeInfoARM" />
    <member name="eRenderPassStripeSubmitInfoARM" />
    <member name="ePhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM" />
    <member name="ePhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM" />
    <member name="eSubpassFragmentDensityMapOffsetEndInfoQCOM" />
    <member name="ePhysicalDeviceCopyMemoryIndirectFeaturesNV" />
    <member name="ePhysicalDeviceCopyMemoryIndirectPropertiesNV" />
    <member name="ePhysicalDeviceMemoryDecompressionFeaturesNV" />
    <member name="ePhysicalDeviceMemoryDecompressionPropertiesNV" />
    <member name="ePhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV" />
    <member name="eComputePipelineIndirectBufferInfoNV" />
    <member name="ePipelineIndirectDeviceAddressInfoNV" />
    <member name="ePhysicalDeviceLinearColorAttachmentFeaturesNV" />
    <member name="ePhysicalDeviceImageCompressionControlSwapchainFeaturesEXT" />
    <member name="ePhysicalDeviceImageProcessingFeaturesQCOM" />
    <member name="ePhysicalDeviceImageProcessingPropertiesQCOM" />
    <member name="eImageViewSampleWeightCreateInfoQCOM" />
    <member name="ePhysicalDeviceNestedCommandBufferFeaturesEXT" />
    <member name="ePhysicalDeviceNestedCommandBufferPropertiesEXT" />
    <member name="eExternalMemoryAcquireUnmodifiedEXT" />
    <member name="ePhysicalDeviceExtendedDynamicState3FeaturesEXT" />
    <member name="ePhysicalDeviceExtendedDynamicState3PropertiesEXT" />
    <member name="ePhysicalDeviceSubpassMergeFeedbackFeaturesEXT" />
    <member name="eRenderPassCreationControlEXT" />
    <member name="eRenderPassCreationFeedbackCreateInfoEXT" />
    <member name="eRenderPassSubpassFeedbackCreateInfoEXT" />
    <member name="eDirectDriverLoadingInfoLUNARG" />
    <member name="eDirectDriverLoadingListLUNARG" />
    <member name="ePhysicalDeviceShaderModuleIdentifierFeaturesEXT" />
    <member name="ePhysicalDeviceShaderModuleIdentifierPropertiesEXT" />
    <member name="ePipelineShaderStageModuleIdentifierCreateInfoEXT" />
    <member name="eShaderModuleIdentifierEXT" />
    <member name="ePhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT" />
    <member name="ePhysicalDeviceOpticalFlowFeaturesNV" />
    <member name="ePhysicalDeviceOpticalFlowPropertiesNV" />
    <member name="eOpticalFlowImageFormatInfoNV" />
    <member name="eOpticalFlowImageFormatPropertiesNV" />
    <member name="eOpticalFlowSessionCreateInfoNV" />
    <member name="eOpticalFlowExecuteInfoNV" />
    <member name="eOpticalFlowSessionCreatePrivateDataInfoNV" />
    <member name="ePhysicalDeviceLegacyDitheringFeaturesEXT" />
    <member name="ePhysicalDevicePipelineProtectedAccessFeaturesEXT" />
    <member name="ePhysicalDeviceMaintenance5FeaturesKHR" />
    <member name="ePhysicalDeviceMaintenance5PropertiesKHR" />
    <member name="eRenderingAreaInfoKHR" />
    <member name="eDeviceImageSubresourceInfoKHR" />
    <member name="eSubresourceLayout2KHR" />
    <member name="eImageSubresource2KHR" />
    <member name="ePipelineCreateFlags2CreateInfoKHR" />
    <member name="eBufferUsageFlags2CreateInfoKHR" />
    <member name="ePhysicalDeviceRayTracingPositionFetchFeaturesKHR" />
    <member name="ePhysicalDeviceShaderObjectFeaturesEXT" />
    <member name="ePhysicalDeviceShaderObjectPropertiesEXT" />
    <member name="eShaderCreateInfoEXT" />
    <member name="eShaderRequiredSubgroupSizeCreateInfoEXT" />
    <member name="ePhysicalDeviceTilePropertiesFeaturesQCOM" />
    <member name="eTilePropertiesQCOM" />
    <member name="ePhysicalDeviceAmigoProfilingFeaturesSEC" />
    <member name="eAmigoProfilingSubmitInfoSEC" />
    <member name="ePhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM" />
    <member name="ePhysicalDeviceRayTracingInvocationReorderFeaturesNV" />
    <member name="ePhysicalDeviceRayTracingInvocationReorderPropertiesNV" />
    <member name="ePhysicalDeviceExtendedSparseAddressSpaceFeaturesNV" />
    <member name="ePhysicalDeviceExtendedSparseAddressSpacePropertiesNV" />
    <member name="ePhysicalDeviceMutableDescriptorTypeFeaturesEXT" />
    <member name="eMutableDescriptorTypeCreateInfoEXT" />
    <member name="eLayerSettingsCreateInfoEXT" />
    <member name="ePhysicalDeviceShaderCoreBuiltinsFeaturesARM" />
    <member name="ePhysicalDeviceShaderCoreBuiltinsPropertiesARM" />
    <member name="ePhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT" />
    <member name="ePhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT" />
    <member name="eLatencySleepModeInfoNV" />
    <member name="eLatencySleepInfoNV" />
    <member name="eSetLatencyMarkerInfoNV" />
    <member name="eGetLatencyMarkerInfoNV" />
    <member name="eLatencyTimingsFrameReportNV" />
    <member name="eLatencySubmissionPresentIdNV" />
    <member name="eOutOfBandQueueTypeInfoNV" />
    <member name="eSwapchainLatencyCreateInfoNV" />
    <member name="eLatencySurfaceCapabilitiesNV" />
    <member name="ePhysicalDeviceCooperativeMatrixFeaturesKHR" />
    <member name="eCooperativeMatrixPropertiesKHR" />
    <member name="ePhysicalDeviceCooperativeMatrixPropertiesKHR" />
    <member name="ePhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM" />
    <member name="eMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM" />
    <member name="ePhysicalDeviceVideoMaintenance1FeaturesKHR" />
    <member name="eVideoInlineQueryInfoKHR" />
    <member name="ePhysicalDevicePerStageDescriptorSetFeaturesNV" />
    <member name="ePhysicalDeviceImageProcessing2FeaturesQCOM" />
    <member name="ePhysicalDeviceImageProcessing2PropertiesQCOM" />
    <member name="eSamplerBlockMatchWindowCreateInfoQCOM" />
    <member name="eSamplerCubicWeightsCreateInfoQCOM" />
    <member name="ePhysicalDeviceCubicWeightsFeaturesQCOM" />
    <member name="eBlitImageCubicWeightsInfoQCOM" />
    <member name="ePhysicalDeviceYcbcrDegammaFeaturesQCOM" />
    <member name="eSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM" />
    <member name="ePhysicalDeviceCubicClampFeaturesQCOM" />
    <member name="ePhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT" />
    <member name="ePhysicalDeviceVertexAttributeDivisorPropertiesKHR" />
    <member name="ePipelineVertexInputDivisorStateCreateInfoKHR" />
    <member name="ePhysicalDeviceVertexAttributeDivisorFeaturesKHR" />
    <member name="ePhysicalDeviceLayeredDriverPropertiesMSFT" />
    <member name="eCalibratedTimestampInfoKHR" />
    <member name="ePhysicalDeviceMaintenance6FeaturesKHR" />
    <member name="ePhysicalDeviceMaintenance6PropertiesKHR" />
    <member name="eBindMemoryStatusKHR" />
    <member name="eBindDescriptorSetsInfoKHR" />
    <member name="ePushConstantsInfoKHR" />
    <member name="ePushDescriptorSetInfoKHR" />
    <member name="ePushDescriptorSetWithTemplateInfoKHR" />
    <member name="eSetDescriptorBufferOffsetsInfoEXT" />
    <member name="eBindDescriptorBufferEmbeddedSamplersInfoEXT" />
    <member name="ePhysicalDeviceDescriptorPoolOverallocationFeaturesNV" />
  </enum>
  <enum name="SubpassContents" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eInline" />
    <member name="eSecondaryCommandBuffers" />
    <member name="eInlineAndSecondaryCommandBuffersEXT" />
  </enum>
  <enum name="SubpassDescriptionFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="ePerViewAttributesNVX" />
    <member name="ePerViewPositionXOnlyNVX" />
    <member name="eFragmentRegionQCOM" />
    <member name="eShaderResolveQCOM" />
    <member name="eRasterizationOrderAttachmentColorAccessARM" />
    <member name="eRasterizationOrderAttachmentDepthAccessARM" />
    <member name="eRasterizationOrderAttachmentStencilAccessARM" />
    <member name="eRasterizationOrderAttachmentColorAccessEXT" />
    <member name="eRasterizationOrderAttachmentDepthAccessEXT" />
    <member name="eRasterizationOrderAttachmentStencilAccessEXT" />
    <member name="eEnableLegacyDitheringEXT" />
  </enum>
  <type_alias name="SubpassDescriptionFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SubpassDescriptionFlagBits&gt;" />
  <enum name="SystemAllocationScope" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eCommand" />
    <member name="eObject" />
    <member name="eCache" />
    <member name="eDevice" />
    <member name="eInstance" />
  </enum>
  <enum name="VendorId" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eVIV" />
    <member name="eVSI" />
    <member name="eKazan" />
    <member name="eCodeplay" />
    <member name="eMESA" />
    <member name="ePocl" />
    <member name="eMobileye" />
  </enum>
  <enum name="VertexInputRate" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eVertex" />
    <member name="eInstance" />
  </enum>
  <enum name="ChromaLocation" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eCositedEven" />
    <member name="eMidpoint" />
  </enum>
  <type_alias name="ChromaLocationKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ChromaLocation" />
  <enum name="CommandPoolTrimFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="CommandPoolTrimFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;CommandPoolTrimFlagBits&gt;" />
  <enum name="DescriptorUpdateTemplateCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="DescriptorUpdateTemplateCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DescriptorUpdateTemplateCreateFlagBits&gt;" />
  <enum name="DescriptorUpdateTemplateType" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDescriptorSet" />
    <member name="ePushDescriptorsKHR" />
  </enum>
  <type_alias name="DescriptorUpdateTemplateTypeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="DescriptorUpdateTemplateType" />
  <enum name="ExternalFenceFeatureFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eExportable" />
    <member name="eImportable" />
  </enum>
  <type_alias name="ExternalFenceFeatureFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ExternalFenceFeatureFlagBits" />
  <type_alias name="ExternalFenceFeatureFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ExternalFenceFeatureFlagBits&gt;" />
  <enum name="ExternalFenceHandleTypeFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOpaqueFd" />
    <member name="eOpaqueWin32" />
    <member name="eOpaqueWin32Kmt" />
    <member name="eSyncFd" />
  </enum>
  <type_alias name="ExternalFenceHandleTypeFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ExternalFenceHandleTypeFlagBits" />
  <type_alias name="ExternalFenceHandleTypeFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ExternalFenceHandleTypeFlagBits&gt;" />
  <enum name="ExternalMemoryFeatureFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDedicatedOnly" />
    <member name="eExportable" />
    <member name="eImportable" />
  </enum>
  <type_alias name="ExternalMemoryFeatureFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ExternalMemoryFeatureFlagBits" />
  <type_alias name="ExternalMemoryFeatureFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ExternalMemoryFeatureFlagBits&gt;" />
  <enum name="ExternalMemoryHandleTypeFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOpaqueFd" />
    <member name="eOpaqueWin32" />
    <member name="eOpaqueWin32Kmt" />
    <member name="eD3D11Texture" />
    <member name="eD3D11TextureKmt" />
    <member name="eD3D12Heap" />
    <member name="eD3D12Resource" />
    <member name="eDmaBufEXT" />
    <member name="eHostAllocationEXT" />
    <member name="eHostMappedForeignMemoryEXT" />
    <member name="eRdmaAddressNV" />
  </enum>
  <type_alias name="ExternalMemoryHandleTypeFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ExternalMemoryHandleTypeFlagBits" />
  <type_alias name="ExternalMemoryHandleTypeFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ExternalMemoryHandleTypeFlagBits&gt;" />
  <enum name="ExternalSemaphoreFeatureFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eExportable" />
    <member name="eImportable" />
  </enum>
  <type_alias name="ExternalSemaphoreFeatureFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ExternalSemaphoreFeatureFlagBits" />
  <type_alias name="ExternalSemaphoreFeatureFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ExternalSemaphoreFeatureFlagBits&gt;" />
  <enum name="ExternalSemaphoreHandleTypeFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOpaqueFd" />
    <member name="eOpaqueWin32" />
    <member name="eOpaqueWin32Kmt" />
    <member name="eD3D12Fence" />
    <member name="eD3D11Fence" />
    <member name="eSyncFd" />
  </enum>
  <type_alias name="ExternalSemaphoreHandleTypeFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ExternalSemaphoreHandleTypeFlagBits" />
  <type_alias name="ExternalSemaphoreHandleTypeFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ExternalSemaphoreHandleTypeFlagBits&gt;" />
  <enum name="FenceImportFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eTemporary" />
  </enum>
  <type_alias name="FenceImportFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="FenceImportFlagBits" />
  <type_alias name="FenceImportFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;FenceImportFlagBits&gt;" />
  <enum name="MemoryAllocateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDeviceMask" />
    <member name="eDeviceAddress" />
    <member name="eDeviceAddressCaptureReplay" />
  </enum>
  <type_alias name="MemoryAllocateFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="MemoryAllocateFlagBits" />
  <type_alias name="MemoryAllocateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;MemoryAllocateFlagBits&gt;" />
  <enum name="PeerMemoryFeatureFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eCopySrc" />
    <member name="eCopyDst" />
    <member name="eGenericSrc" />
    <member name="eGenericDst" />
  </enum>
  <type_alias name="PeerMemoryFeatureFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="PeerMemoryFeatureFlagBits" />
  <type_alias name="PeerMemoryFeatureFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PeerMemoryFeatureFlagBits&gt;" />
  <enum name="PointClippingBehavior" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eAllClipPlanes" />
    <member name="eUserClipPlanesOnly" />
  </enum>
  <type_alias name="PointClippingBehaviorKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="PointClippingBehavior" />
  <enum name="SamplerYcbcrModelConversion" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eRgbIdentity" />
    <member name="eYcbcrIdentity" />
    <member name="eYcbcr709" />
    <member name="eYcbcr601" />
    <member name="eYcbcr2020" />
  </enum>
  <type_alias name="SamplerYcbcrModelConversionKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="SamplerYcbcrModelConversion" />
  <enum name="SamplerYcbcrRange" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eItuFull" />
    <member name="eItuNarrow" />
  </enum>
  <type_alias name="SamplerYcbcrRangeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="SamplerYcbcrRange" />
  <enum name="SemaphoreImportFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eTemporary" />
  </enum>
  <type_alias name="SemaphoreImportFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="SemaphoreImportFlagBits" />
  <type_alias name="SemaphoreImportFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SemaphoreImportFlagBits&gt;" />
  <enum name="SubgroupFeatureFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eBasic" />
    <member name="eVote" />
    <member name="eArithmetic" />
    <member name="eBallot" />
    <member name="eShuffle" />
    <member name="eShuffleRelative" />
    <member name="eClustered" />
    <member name="eQuad" />
    <member name="ePartitionedNV" />
  </enum>
  <type_alias name="SubgroupFeatureFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SubgroupFeatureFlagBits&gt;" />
  <enum name="TessellationDomainOrigin" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUpperLeft" />
    <member name="eLowerLeft" />
  </enum>
  <type_alias name="TessellationDomainOriginKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="TessellationDomainOrigin" />
  <enum name="DescriptorBindingFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUpdateAfterBind" />
    <member name="eUpdateUnusedWhilePending" />
    <member name="ePartiallyBound" />
    <member name="eVariableDescriptorCount" />
  </enum>
  <type_alias name="DescriptorBindingFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="DescriptorBindingFlagBits" />
  <type_alias name="DescriptorBindingFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DescriptorBindingFlagBits&gt;" />
  <enum name="DriverId" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eAmdProprietary" />
    <member name="eAmdOpenSource" />
    <member name="eMesaRadv" />
    <member name="eNvidiaProprietary" />
    <member name="eIntelProprietaryWindows" />
    <member name="eIntelOpenSourceMESA" />
    <member name="eImaginationProprietary" />
    <member name="eQualcommProprietary" />
    <member name="eArmProprietary" />
    <member name="eGoogleSwiftshader" />
    <member name="eGgpProprietary" />
    <member name="eBroadcomProprietary" />
    <member name="eMesaLlvmpipe" />
    <member name="eMoltenvk" />
    <member name="eCoreaviProprietary" />
    <member name="eJuiceProprietary" />
    <member name="eVerisiliconProprietary" />
    <member name="eMesaTurnip" />
    <member name="eMesaV3Dv" />
    <member name="eMesaPanvk" />
    <member name="eSamsungProprietary" />
    <member name="eMesaVenus" />
    <member name="eMesaDozen" />
    <member name="eMesaNvk" />
    <member name="eImaginationOpenSourceMESA" />
    <member name="eMesaAgxv" />
  </enum>
  <type_alias name="DriverIdKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="DriverId" />
  <enum name="ResolveModeFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNone" />
    <member name="eSampleZero" />
    <member name="eAverage" />
    <member name="eMin" />
    <member name="eMax" />
  </enum>
  <type_alias name="ResolveModeFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ResolveModeFlagBits" />
  <type_alias name="ResolveModeFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ResolveModeFlagBits&gt;" />
  <enum name="SamplerReductionMode" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eWeightedAverage" />
    <member name="eMin" />
    <member name="eMax" />
    <member name="eWeightedAverageRangeclampQCOM" />
  </enum>
  <type_alias name="SamplerReductionModeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="SamplerReductionMode" />
  <enum name="SemaphoreType" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eBinary" />
    <member name="eTimeline" />
  </enum>
  <type_alias name="SemaphoreTypeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="SemaphoreType" />
  <enum name="SemaphoreWaitFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eAny" />
  </enum>
  <type_alias name="SemaphoreWaitFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="SemaphoreWaitFlagBits" />
  <type_alias name="SemaphoreWaitFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SemaphoreWaitFlagBits&gt;" />
  <enum name="ShaderFloatControlsIndependence" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="e32BitOnly" />
    <member name="eAll" />
    <member name="eNone" />
  </enum>
  <type_alias name="ShaderFloatControlsIndependenceKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ShaderFloatControlsIndependence" />
  <enum name="AccessFlagBits2" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNone" />
    <member name="eIndirectCommandRead" />
    <member name="eIndexRead" />
    <member name="eVertexAttributeRead" />
    <member name="eUniformRead" />
    <member name="eInputAttachmentRead" />
    <member name="eShaderRead" />
    <member name="eShaderWrite" />
    <member name="eColorAttachmentRead" />
    <member name="eColorAttachmentWrite" />
    <member name="eDepthStencilAttachmentRead" />
    <member name="eDepthStencilAttachmentWrite" />
    <member name="eTransferRead" />
    <member name="eTransferWrite" />
    <member name="eHostRead" />
    <member name="eHostWrite" />
    <member name="eMemoryRead" />
    <member name="eMemoryWrite" />
    <member name="eShaderSampledRead" />
    <member name="eShaderStorageRead" />
    <member name="eShaderStorageWrite" />
    <member name="eVideoDecodeReadKHR" />
    <member name="eVideoDecodeWriteKHR" />
    <member name="eVideoEncodeReadKHR" />
    <member name="eVideoEncodeWriteKHR" />
    <member name="eTransformFeedbackWriteEXT" />
    <member name="eTransformFeedbackCounterReadEXT" />
    <member name="eTransformFeedbackCounterWriteEXT" />
    <member name="eConditionalRenderingReadEXT" />
    <member name="eCommandPreprocessReadNV" />
    <member name="eCommandPreprocessWriteNV" />
    <member name="eFragmentShadingRateAttachmentReadKHR" />
    <member name="eShadingRateImageReadNV" />
    <member name="eAccelerationStructureReadKHR" />
    <member name="eAccelerationStructureWriteKHR" />
    <member name="eAccelerationStructureReadNV" />
    <member name="eAccelerationStructureWriteNV" />
    <member name="eFragmentDensityMapReadEXT" />
    <member name="eColorAttachmentReadNoncoherentEXT" />
    <member name="eDescriptorBufferReadEXT" />
    <member name="eInvocationMaskReadHUAWEI" />
    <member name="eShaderBindingTableReadKHR" />
    <member name="eMicromapReadEXT" />
    <member name="eMicromapWriteEXT" />
    <member name="eOpticalFlowReadNV" />
    <member name="eOpticalFlowWriteNV" />
  </enum>
  <type_alias name="AccessFlagBits2KHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="AccessFlagBits2" />
  <type_alias name="AccessFlags2" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;AccessFlagBits2&gt;" />
  <enum name="FormatFeatureFlagBits2" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSampledImage" />
    <member name="eStorageImage" />
    <member name="eStorageImageAtomic" />
    <member name="eUniformTexelBuffer" />
    <member name="eStorageTexelBuffer" />
    <member name="eStorageTexelBufferAtomic" />
    <member name="eVertexBuffer" />
    <member name="eColorAttachment" />
    <member name="eColorAttachmentBlend" />
    <member name="eDepthStencilAttachment" />
    <member name="eBlitSrc" />
    <member name="eBlitDst" />
    <member name="eSampledImageFilterLinear" />
    <member name="eSampledImageFilterCubic" />
    <member name="eSampledImageFilterCubicEXT" />
    <member name="eTransferSrc" />
    <member name="eTransferDst" />
    <member name="eSampledImageFilterMinmax" />
    <member name="eMidpointChromaSamples" />
    <member name="eSampledImageYcbcrConversionLinearFilter" />
    <member name="eSampledImageYcbcrConversionSeparateReconstructionFilter" />
    <member name="eSampledImageYcbcrConversionChromaReconstructionExplicit" />
    <member name="eSampledImageYcbcrConversionChromaReconstructionExplicitForceable" />
    <member name="eDisjoint" />
    <member name="eCositedChromaSamples" />
    <member name="eStorageReadWithoutFormat" />
    <member name="eStorageWriteWithoutFormat" />
    <member name="eSampledImageDepthComparison" />
    <member name="eVideoDecodeOutputKHR" />
    <member name="eVideoDecodeDpbKHR" />
    <member name="eAccelerationStructureVertexBufferKHR" />
    <member name="eFragmentDensityMapEXT" />
    <member name="eFragmentShadingRateAttachmentKHR" />
    <member name="eHostImageTransferEXT" />
    <member name="eVideoEncodeInputKHR" />
    <member name="eVideoEncodeDpbKHR" />
    <member name="eLinearColorAttachmentNV" />
    <member name="eWeightImageQCOM" />
    <member name="eWeightSampledImageQCOM" />
    <member name="eBlockMatchingQCOM" />
    <member name="eBoxFilterSampledQCOM" />
    <member name="eOpticalFlowImageNV" />
    <member name="eOpticalFlowVectorNV" />
    <member name="eOpticalFlowCostNV" />
  </enum>
  <type_alias name="FormatFeatureFlagBits2KHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="FormatFeatureFlagBits2" />
  <type_alias name="FormatFeatureFlags2" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;FormatFeatureFlagBits2&gt;" />
  <enum name="PipelineCreationFeedbackFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eValid" />
    <member name="eApplicationPipelineCacheHit" />
    <member name="eBasePipelineAcceleration" />
  </enum>
  <type_alias name="PipelineCreationFeedbackFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="PipelineCreationFeedbackFlagBits" />
  <type_alias name="PipelineCreationFeedbackFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineCreationFeedbackFlagBits&gt;" />
  <enum name="PipelineStageFlagBits2" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNone" />
    <member name="eTopOfPipe" />
    <member name="eDrawIndirect" />
    <member name="eVertexInput" />
    <member name="eVertexShader" />
    <member name="eTessellationControlShader" />
    <member name="eTessellationEvaluationShader" />
    <member name="eGeometryShader" />
    <member name="eFragmentShader" />
    <member name="eEarlyFragmentTests" />
    <member name="eLateFragmentTests" />
    <member name="eColorAttachmentOutput" />
    <member name="eComputeShader" />
    <member name="eAllTransfer" />
    <member name="eTransfer" />
    <member name="eBottomOfPipe" />
    <member name="eHost" />
    <member name="eAllGraphics" />
    <member name="eAllCommands" />
    <member name="eCopy" />
    <member name="eResolve" />
    <member name="eBlit" />
    <member name="eClear" />
    <member name="eIndexInput" />
    <member name="eVertexAttributeInput" />
    <member name="ePreRasterizationShaders" />
    <member name="eVideoDecodeKHR" />
    <member name="eVideoEncodeKHR" />
    <member name="eTransformFeedbackEXT" />
    <member name="eConditionalRenderingEXT" />
    <member name="eCommandPreprocessNV" />
    <member name="eFragmentShadingRateAttachmentKHR" />
    <member name="eShadingRateImageNV" />
    <member name="eAccelerationStructureBuildKHR" />
    <member name="eRayTracingShaderKHR" />
    <member name="eRayTracingShaderNV" />
    <member name="eAccelerationStructureBuildNV" />
    <member name="eFragmentDensityProcessEXT" />
    <member name="eTaskShaderNV" />
    <member name="eMeshShaderNV" />
    <member name="eTaskShaderEXT" />
    <member name="eMeshShaderEXT" />
    <member name="eSubpassShaderHUAWEI" />
    <member name="eSubpassShadingHUAWEI" />
    <member name="eInvocationMaskHUAWEI" />
    <member name="eAccelerationStructureCopyKHR" />
    <member name="eMicromapBuildEXT" />
    <member name="eClusterCullingShaderHUAWEI" />
    <member name="eOpticalFlowNV" />
  </enum>
  <type_alias name="PipelineStageFlagBits2KHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="PipelineStageFlagBits2" />
  <type_alias name="PipelineStageFlags2" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineStageFlagBits2&gt;" />
  <enum name="PrivateDataSlotCreateFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PrivateDataSlotCreateFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="PrivateDataSlotCreateFlagBits" />
  <type_alias name="PrivateDataSlotCreateFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PrivateDataSlotCreateFlagBits&gt;" />
  <enum name="RenderingFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eContentsSecondaryCommandBuffers" />
    <member name="eSuspending" />
    <member name="eResuming" />
    <member name="eContentsInlineEXT" />
    <member name="eEnableLegacyDitheringEXT" />
  </enum>
  <type_alias name="RenderingFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="RenderingFlagBits" />
  <type_alias name="RenderingFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;RenderingFlagBits&gt;" />
  <enum name="SubmitFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eProtected" />
  </enum>
  <type_alias name="SubmitFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="SubmitFlagBits" />
  <type_alias name="SubmitFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SubmitFlagBits&gt;" />
  <enum name="ToolPurposeFlagBits" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eValidation" />
    <member name="eProfiling" />
    <member name="eTracing" />
    <member name="eAdditionalFeatures" />
    <member name="eModifyingFeatures" />
    <member name="eDebugReportingEXT" />
    <member name="eDebugMarkersEXT" />
  </enum>
  <type_alias name="ToolPurposeFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ToolPurposeFlagBits" />
  <type_alias name="ToolPurposeFlags" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ToolPurposeFlagBits&gt;" />
  <enum name="ColorSpaceKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSrgbNonlinear" />
    <member name="eVkColorspaceSrgbNonlinear" />
    <member name="eDisplayP3NonlinearEXT" />
    <member name="eExtendedSrgbLinearEXT" />
    <member name="eDisplayP3LinearEXT" />
    <member name="eDciP3NonlinearEXT" />
    <member name="eBt709LinearEXT" />
    <member name="eBt709NonlinearEXT" />
    <member name="eBt2020LinearEXT" />
    <member name="eHdr10St2084EXT" />
    <member name="eDolbyvisionEXT" />
    <member name="eHdr10HlgEXT" />
    <member name="eAdobergbLinearEXT" />
    <member name="eAdobergbNonlinearEXT" />
    <member name="ePassThroughEXT" />
    <member name="eExtendedSrgbNonlinearEXT" />
    <member name="eDciP3LinearEXT" />
    <member name="eDisplayNativeAMD" />
  </enum>
  <enum name="CompositeAlphaFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOpaque" />
    <member name="ePreMultiplied" />
    <member name="ePostMultiplied" />
    <member name="eInherit" />
  </enum>
  <type_alias name="CompositeAlphaFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;CompositeAlphaFlagBitsKHR&gt;" />
  <enum name="PresentModeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eImmediate" />
    <member name="eMailbox" />
    <member name="eFifo" />
    <member name="eFifoRelaxed" />
    <member name="eSharedDemandRefresh" />
    <member name="eSharedContinuousRefresh" />
  </enum>
  <enum name="SurfaceTransformFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eIdentity" />
    <member name="eRotate90" />
    <member name="eRotate180" />
    <member name="eRotate270" />
    <member name="eHorizontalMirror" />
    <member name="eHorizontalMirrorRotate90" />
    <member name="eHorizontalMirrorRotate180" />
    <member name="eHorizontalMirrorRotate270" />
    <member name="eInherit" />
  </enum>
  <type_alias name="SurfaceTransformFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SurfaceTransformFlagBitsKHR&gt;" />
  <enum name="DeviceGroupPresentModeFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eLocal" />
    <member name="eRemote" />
    <member name="eSum" />
    <member name="eLocalMultiDevice" />
  </enum>
  <type_alias name="DeviceGroupPresentModeFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DeviceGroupPresentModeFlagBitsKHR&gt;" />
  <enum name="SwapchainCreateFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSplitInstanceBindRegions" />
    <member name="eProtected" />
    <member name="eMutableFormat" />
    <member name="eDeferredMemoryAllocationEXT" />
  </enum>
  <type_alias name="SwapchainCreateFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SwapchainCreateFlagBitsKHR&gt;" />
  <enum name="DisplayModeCreateFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="DisplayModeCreateFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DisplayModeCreateFlagBitsKHR&gt;" />
  <enum name="DisplayPlaneAlphaFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOpaque" />
    <member name="eGlobal" />
    <member name="ePerPixel" />
    <member name="ePerPixelPremultiplied" />
  </enum>
  <type_alias name="DisplayPlaneAlphaFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DisplayPlaneAlphaFlagBitsKHR&gt;" />
  <enum name="DisplaySurfaceCreateFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="DisplaySurfaceCreateFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DisplaySurfaceCreateFlagBitsKHR&gt;" />
  <enum name="DebugReportFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eInformation" />
    <member name="eWarning" />
    <member name="ePerformanceWarning" />
    <member name="eError" />
    <member name="eDebug" />
  </enum>
  <type_alias name="DebugReportFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DebugReportFlagBitsEXT&gt;" />
  <enum name="DebugReportObjectTypeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUnknown" />
    <member name="eInstance" />
    <member name="ePhysicalDevice" />
    <member name="eDevice" />
    <member name="eQueue" />
    <member name="eSemaphore" />
    <member name="eCommandBuffer" />
    <member name="eFence" />
    <member name="eDeviceMemory" />
    <member name="eBuffer" />
    <member name="eImage" />
    <member name="eEvent" />
    <member name="eQueryPool" />
    <member name="eBufferView" />
    <member name="eImageView" />
    <member name="eShaderModule" />
    <member name="ePipelineCache" />
    <member name="ePipelineLayout" />
    <member name="eRenderPass" />
    <member name="ePipeline" />
    <member name="eDescriptorSetLayout" />
    <member name="eSampler" />
    <member name="eDescriptorPool" />
    <member name="eDescriptorSet" />
    <member name="eFramebuffer" />
    <member name="eCommandPool" />
    <member name="eSurfaceKHR" />
    <member name="eSwapchainKHR" />
    <member name="eDebugReportCallbackEXT" />
    <member name="eDebugReport" />
    <member name="eDisplayKHR" />
    <member name="eDisplayModeKHR" />
    <member name="eValidationCacheEXT" />
    <member name="eValidationCache" />
    <member name="eSamplerYcbcrConversion" />
    <member name="eDescriptorUpdateTemplate" />
    <member name="eCuModuleNVX" />
    <member name="eCuFunctionNVX" />
    <member name="eDescriptorUpdateTemplateKHR" />
    <member name="eAccelerationStructureKHR" />
    <member name="eSamplerYcbcrConversionKHR" />
    <member name="eAccelerationStructureNV" />
  </enum>
  <enum name="RasterizationOrderAMD" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eStrict" />
    <member name="eRelaxed" />
  </enum>
  <enum name="QueryResultStatusKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eError" />
    <member name="eNotReady" />
    <member name="eComplete" />
    <member name="eInsufficientBitstreamBufferRange" />
  </enum>
  <enum name="VideoBeginCodingFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="VideoBeginCodingFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoBeginCodingFlagBitsKHR&gt;" />
  <enum name="VideoCapabilityFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eProtectedContent" />
    <member name="eSeparateReferenceImages" />
  </enum>
  <type_alias name="VideoCapabilityFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoCapabilityFlagBitsKHR&gt;" />
  <enum name="VideoChromaSubsamplingFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eInvalid" />
    <member name="eMonochrome" />
    <member name="e420" />
    <member name="e422" />
    <member name="e444" />
  </enum>
  <type_alias name="VideoChromaSubsamplingFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoChromaSubsamplingFlagBitsKHR&gt;" />
  <enum name="VideoCodecOperationFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNone" />
    <member name="eEncodeH264" />
    <member name="eEncodeH265" />
    <member name="eDecodeH264" />
    <member name="eDecodeH265" />
  </enum>
  <type_alias name="VideoCodecOperationFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoCodecOperationFlagBitsKHR&gt;" />
  <enum name="VideoCodingControlFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eReset" />
    <member name="eEncodeRateControl" />
    <member name="eEncodeQualityLevel" />
  </enum>
  <type_alias name="VideoCodingControlFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoCodingControlFlagBitsKHR&gt;" />
  <enum name="VideoComponentBitDepthFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eInvalid" />
    <member name="e8" />
    <member name="e10" />
    <member name="e12" />
  </enum>
  <type_alias name="VideoComponentBitDepthFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoComponentBitDepthFlagBitsKHR&gt;" />
  <enum name="VideoEndCodingFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="VideoEndCodingFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEndCodingFlagBitsKHR&gt;" />
  <enum name="VideoSessionCreateFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eProtectedContent" />
    <member name="eAllowEncodeParameterOptimizations" />
    <member name="eInlineQueries" />
  </enum>
  <type_alias name="VideoSessionCreateFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoSessionCreateFlagBitsKHR&gt;" />
  <enum name="VideoSessionParametersCreateFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="VideoSessionParametersCreateFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoSessionParametersCreateFlagBitsKHR&gt;" />
  <enum name="VideoDecodeCapabilityFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDpbAndOutputCoincide" />
    <member name="eDpbAndOutputDistinct" />
  </enum>
  <type_alias name="VideoDecodeCapabilityFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoDecodeCapabilityFlagBitsKHR&gt;" />
  <enum name="VideoDecodeFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="VideoDecodeFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoDecodeFlagBitsKHR&gt;" />
  <enum name="VideoDecodeUsageFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDefault" />
    <member name="eTranscoding" />
    <member name="eOffline" />
    <member name="eStreaming" />
  </enum>
  <type_alias name="VideoDecodeUsageFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoDecodeUsageFlagBitsKHR&gt;" />
  <enum name="PipelineRasterizationStateStreamCreateFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineRasterizationStateStreamCreateFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineRasterizationStateStreamCreateFlagBitsEXT&gt;" />
  <enum name="VideoEncodeH264CapabilityFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eHrdCompliance" />
    <member name="ePredictionWeightTableGenerated" />
    <member name="eRowUnalignedSlice" />
    <member name="eDifferentSliceType" />
    <member name="eBFrameInL0List" />
    <member name="eBFrameInL1List" />
    <member name="ePerPictureTypeMinMaxQp" />
    <member name="ePerSliceConstantQp" />
    <member name="eGeneratePrefixNalu" />
  </enum>
  <type_alias name="VideoEncodeH264CapabilityFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeH264CapabilityFlagBitsKHR&gt;" />
  <enum name="VideoEncodeH264RateControlFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eAttemptHrdCompliance" />
    <member name="eRegularGop" />
    <member name="eReferencePatternFlat" />
    <member name="eReferencePatternDyadic" />
    <member name="eTemporalLayerPatternDyadic" />
  </enum>
  <type_alias name="VideoEncodeH264RateControlFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeH264RateControlFlagBitsKHR&gt;" />
  <enum name="VideoEncodeH264StdFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSeparateColorPlaneFlagSet" />
    <member name="eQpprimeYZeroTransformBypassFlagSet" />
    <member name="eScalingMatrixPresentFlagSet" />
    <member name="eChromaQpIndexOffset" />
    <member name="eSecondChromaQpIndexOffset" />
    <member name="ePicInitQpMinus26" />
    <member name="eWeightedPredFlagSet" />
    <member name="eWeightedBipredIdcExplicit" />
    <member name="eWeightedBipredIdcImplicit" />
    <member name="eTransform8X8ModeFlagSet" />
    <member name="eDirectSpatialMvPredFlagUnset" />
    <member name="eEntropyCodingModeFlagUnset" />
    <member name="eEntropyCodingModeFlagSet" />
    <member name="eDirect8X8InferenceFlagUnset" />
    <member name="eConstrainedIntraPredFlagSet" />
    <member name="eDeblockingFilterDisabled" />
    <member name="eDeblockingFilterEnabled" />
    <member name="eDeblockingFilterPartial" />
    <member name="eSliceQpDelta" />
    <member name="eDifferentSliceQpDelta" />
  </enum>
  <type_alias name="VideoEncodeH264StdFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeH264StdFlagBitsKHR&gt;" />
  <enum name="VideoEncodeH265CapabilityFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eHrdCompliance" />
    <member name="ePredictionWeightTableGenerated" />
    <member name="eRowUnalignedSliceSegment" />
    <member name="eDifferentSliceSegmentType" />
    <member name="eBFrameInL0List" />
    <member name="eBFrameInL1List" />
    <member name="ePerPictureTypeMinMaxQp" />
    <member name="ePerSliceSegmentConstantQp" />
    <member name="eMultipleTilesPerSliceSegment" />
    <member name="eMultipleSliceSegmentsPerTile" />
  </enum>
  <type_alias name="VideoEncodeH265CapabilityFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeH265CapabilityFlagBitsKHR&gt;" />
  <enum name="VideoEncodeH265CtbSizeFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="e16" />
    <member name="e32" />
    <member name="e64" />
  </enum>
  <type_alias name="VideoEncodeH265CtbSizeFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeH265CtbSizeFlagBitsKHR&gt;" />
  <enum name="VideoEncodeH265RateControlFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eAttemptHrdCompliance" />
    <member name="eRegularGop" />
    <member name="eReferencePatternFlat" />
    <member name="eReferencePatternDyadic" />
    <member name="eTemporalSubLayerPatternDyadic" />
  </enum>
  <type_alias name="VideoEncodeH265RateControlFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeH265RateControlFlagBitsKHR&gt;" />
  <enum name="VideoEncodeH265StdFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSeparateColorPlaneFlagSet" />
    <member name="eSampleAdaptiveOffsetEnabledFlagSet" />
    <member name="eScalingListDataPresentFlagSet" />
    <member name="ePcmEnabledFlagSet" />
    <member name="eSpsTemporalMvpEnabledFlagSet" />
    <member name="eInitQpMinus26" />
    <member name="eWeightedPredFlagSet" />
    <member name="eWeightedBipredFlagSet" />
    <member name="eLog2ParallelMergeLevelMinus2" />
    <member name="eSignDataHidingEnabledFlagSet" />
    <member name="eTransformSkipEnabledFlagSet" />
    <member name="eTransformSkipEnabledFlagUnset" />
    <member name="ePpsSliceChromaQpOffsetsPresentFlagSet" />
    <member name="eTransquantBypassEnabledFlagSet" />
    <member name="eConstrainedIntraPredFlagSet" />
    <member name="eEntropyCodingSyncEnabledFlagSet" />
    <member name="eDeblockingFilterOverrideEnabledFlagSet" />
    <member name="eDependentSliceSegmentsEnabledFlagSet" />
    <member name="eDependentSliceSegmentFlagSet" />
    <member name="eSliceQpDelta" />
    <member name="eDifferentSliceQpDelta" />
  </enum>
  <type_alias name="VideoEncodeH265StdFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeH265StdFlagBitsKHR&gt;" />
  <enum name="VideoEncodeH265TransformBlockSizeFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="e4" />
    <member name="e8" />
    <member name="e16" />
    <member name="e32" />
  </enum>
  <type_alias name="VideoEncodeH265TransformBlockSizeFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeH265TransformBlockSizeFlagBitsKHR&gt;" />
  <enum name="VideoDecodeH264PictureLayoutFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eProgressive" />
    <member name="eInterlacedInterleavedLines" />
    <member name="eInterlacedSeparatePlanes" />
  </enum>
  <type_alias name="VideoDecodeH264PictureLayoutFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoDecodeH264PictureLayoutFlagBitsKHR&gt;" />
  <enum name="ShaderInfoTypeAMD" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eStatistics" />
    <member name="eBinary" />
    <member name="eDisassembly" />
  </enum>
  <enum name="ExternalMemoryFeatureFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDedicatedOnly" />
    <member name="eExportable" />
    <member name="eImportable" />
  </enum>
  <type_alias name="ExternalMemoryFeatureFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ExternalMemoryFeatureFlagBitsNV&gt;" />
  <enum name="ExternalMemoryHandleTypeFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOpaqueWin32" />
    <member name="eOpaqueWin32Kmt" />
    <member name="eD3D11Image" />
    <member name="eD3D11ImageKmt" />
  </enum>
  <type_alias name="ExternalMemoryHandleTypeFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ExternalMemoryHandleTypeFlagBitsNV&gt;" />
  <enum name="ValidationCheckEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eAll" />
    <member name="eShaders" />
  </enum>
  <enum name="PipelineRobustnessBufferBehaviorEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDeviceDefault" />
    <member name="eDisabled" />
    <member name="eRobustBufferAccess" />
    <member name="eRobustBufferAccess2" />
  </enum>
  <enum name="PipelineRobustnessImageBehaviorEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDeviceDefault" />
    <member name="eDisabled" />
    <member name="eRobustImageAccess" />
    <member name="eRobustImageAccess2" />
  </enum>
  <enum name="ConditionalRenderingFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eInverted" />
  </enum>
  <type_alias name="ConditionalRenderingFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ConditionalRenderingFlagBitsEXT&gt;" />
  <enum name="SurfaceCounterFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eVblank" />
  </enum>
  <type_alias name="SurfaceCounterFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;SurfaceCounterFlagBitsEXT&gt;" />
  <enum name="DeviceEventTypeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDisplayHotplug" />
  </enum>
  <enum name="DisplayEventTypeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFirstPixelOut" />
  </enum>
  <enum name="DisplayPowerStateEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOff" />
    <member name="eSuspend" />
    <member name="eOn" />
  </enum>
  <enum name="PipelineViewportSwizzleStateCreateFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineViewportSwizzleStateCreateFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineViewportSwizzleStateCreateFlagBitsNV&gt;" />
  <enum name="ViewportCoordinateSwizzleNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="ePositiveX" />
    <member name="eNegativeX" />
    <member name="ePositiveY" />
    <member name="eNegativeY" />
    <member name="ePositiveZ" />
    <member name="eNegativeZ" />
    <member name="ePositiveW" />
    <member name="eNegativeW" />
  </enum>
  <enum name="DiscardRectangleModeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eInclusive" />
    <member name="eExclusive" />
  </enum>
  <enum name="PipelineDiscardRectangleStateCreateFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineDiscardRectangleStateCreateFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineDiscardRectangleStateCreateFlagBitsEXT&gt;" />
  <enum name="ConservativeRasterizationModeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDisabled" />
    <member name="eOverestimate" />
    <member name="eUnderestimate" />
  </enum>
  <enum name="PipelineRasterizationConservativeStateCreateFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineRasterizationConservativeStateCreateFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineRasterizationConservativeStateCreateFlagBitsEXT&gt;" />
  <enum name="PipelineRasterizationDepthClipStateCreateFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineRasterizationDepthClipStateCreateFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineRasterizationDepthClipStateCreateFlagBitsEXT&gt;" />
  <enum name="AcquireProfilingLockFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="AcquireProfilingLockFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;AcquireProfilingLockFlagBitsKHR&gt;" />
  <enum name="PerformanceCounterDescriptionFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="ePerformanceImpacting" />
    <member name="eConcurrentlyImpacted" />
  </enum>
  <type_alias name="PerformanceCounterDescriptionFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PerformanceCounterDescriptionFlagBitsKHR&gt;" />
  <enum name="PerformanceCounterScopeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eCommandBuffer" />
    <member name="eRenderPass" />
    <member name="eCommand" />
    <member name="eVkQueryScopeCommandBuffer" />
    <member name="eVkQueryScopeRenderPass" />
    <member name="eVkQueryScopeCommand" />
  </enum>
  <enum name="PerformanceCounterStorageKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eInt32" />
    <member name="eInt64" />
    <member name="eUint32" />
    <member name="eUint64" />
    <member name="eFloat32" />
    <member name="eFloat64" />
  </enum>
  <enum name="PerformanceCounterUnitKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eGeneric" />
    <member name="ePercentage" />
    <member name="eNanoseconds" />
    <member name="eBytes" />
    <member name="eBytesPerSecond" />
    <member name="eKelvin" />
    <member name="eWatts" />
    <member name="eVolts" />
    <member name="eAmps" />
    <member name="eHertz" />
    <member name="eCycles" />
  </enum>
  <enum name="DebugUtilsMessageSeverityFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eVerbose" />
    <member name="eInfo" />
    <member name="eWarning" />
    <member name="eError" />
  </enum>
  <type_alias name="DebugUtilsMessageSeverityFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DebugUtilsMessageSeverityFlagBitsEXT&gt;" />
  <enum name="DebugUtilsMessageTypeFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eGeneral" />
    <member name="eValidation" />
    <member name="ePerformance" />
    <member name="eDeviceAddressBinding" />
  </enum>
  <type_alias name="DebugUtilsMessageTypeFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DebugUtilsMessageTypeFlagBitsEXT&gt;" />
  <enum name="DebugUtilsMessengerCallbackDataFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="DebugUtilsMessengerCallbackDataFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DebugUtilsMessengerCallbackDataFlagBitsEXT&gt;" />
  <enum name="DebugUtilsMessengerCreateFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="DebugUtilsMessengerCreateFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DebugUtilsMessengerCreateFlagBitsEXT&gt;" />
  <enum name="BlendOverlapEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUncorrelated" />
    <member name="eDisjoint" />
    <member name="eConjoint" />
  </enum>
  <enum name="PipelineCoverageToColorStateCreateFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineCoverageToColorStateCreateFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineCoverageToColorStateCreateFlagBitsNV&gt;" />
  <enum name="AccelerationStructureBuildTypeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eHost" />
    <member name="eDevice" />
    <member name="eHostOrDevice" />
  </enum>
  <enum name="AccelerationStructureCompatibilityKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eCompatible" />
    <member name="eIncompatible" />
  </enum>
  <enum name="AccelerationStructureCreateFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDeviceAddressCaptureReplay" />
    <member name="eDescriptorBufferCaptureReplayEXT" />
    <member name="eMotionNV" />
  </enum>
  <type_alias name="AccelerationStructureCreateFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;AccelerationStructureCreateFlagBitsKHR&gt;" />
  <enum name="AccelerationStructureTypeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eTopLevel" />
    <member name="eBottomLevel" />
    <member name="eGeneric" />
  </enum>
  <type_alias name="AccelerationStructureTypeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="AccelerationStructureTypeKHR" />
  <enum name="BuildAccelerationStructureFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eAllowUpdate" />
    <member name="eAllowCompaction" />
    <member name="ePreferFastTrace" />
    <member name="ePreferFastBuild" />
    <member name="eLowMemory" />
    <member name="eMotionNV" />
    <member name="eAllowOpacityMicromapUpdateEXT" />
    <member name="eAllowDisableOpacityMicromapsEXT" />
    <member name="eAllowOpacityMicromapDataUpdateEXT" />
    <member name="eAllowDataAccess" />
  </enum>
  <type_alias name="BuildAccelerationStructureFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="BuildAccelerationStructureFlagBitsKHR" />
  <type_alias name="BuildAccelerationStructureFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;BuildAccelerationStructureFlagBitsKHR&gt;" />
  <enum name="BuildAccelerationStructureModeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eBuild" />
    <member name="eUpdate" />
  </enum>
  <enum name="CopyAccelerationStructureModeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eClone" />
    <member name="eCompact" />
    <member name="eSerialize" />
    <member name="eDeserialize" />
  </enum>
  <type_alias name="CopyAccelerationStructureModeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="CopyAccelerationStructureModeKHR" />
  <enum name="GeometryFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOpaque" />
    <member name="eNoDuplicateAnyHitInvocation" />
  </enum>
  <type_alias name="GeometryFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="GeometryFlagBitsKHR" />
  <type_alias name="GeometryFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;GeometryFlagBitsKHR&gt;" />
  <enum name="GeometryInstanceFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eTriangleFacingCullDisable" />
    <member name="eTriangleFlipFacing" />
    <member name="eForceOpaque" />
    <member name="eForceNoOpaque" />
    <member name="eTriangleFrontCounterclockwiseKHR" />
    <member name="eTriangleCullDisable" />
    <member name="eTriangleFrontCounterclockwise" />
    <member name="eForceOpacityMicromap2StateEXT" />
    <member name="eDisableOpacityMicromapsEXT" />
  </enum>
  <type_alias name="GeometryInstanceFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="GeometryInstanceFlagBitsKHR" />
  <type_alias name="GeometryInstanceFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;GeometryInstanceFlagBitsKHR&gt;" />
  <enum name="GeometryTypeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eTriangles" />
    <member name="eAabbs" />
    <member name="eInstances" />
  </enum>
  <type_alias name="GeometryTypeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="GeometryTypeKHR" />
  <enum name="RayTracingShaderGroupTypeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eGeneral" />
    <member name="eTrianglesHitGroup" />
    <member name="eProceduralHitGroup" />
  </enum>
  <type_alias name="RayTracingShaderGroupTypeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="RayTracingShaderGroupTypeKHR" />
  <enum name="ShaderGroupShaderKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eGeneral" />
    <member name="eClosestHit" />
    <member name="eAnyHit" />
    <member name="eIntersection" />
  </enum>
  <enum name="CoverageModulationModeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNone" />
    <member name="eRgb" />
    <member name="eAlpha" />
    <member name="eRgba" />
  </enum>
  <enum name="PipelineCoverageModulationStateCreateFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineCoverageModulationStateCreateFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineCoverageModulationStateCreateFlagBitsNV&gt;" />
  <enum name="ValidationCacheCreateFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="ValidationCacheCreateFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ValidationCacheCreateFlagBitsEXT&gt;" />
  <enum name="ValidationCacheHeaderVersionEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOne" />
  </enum>
  <enum name="CoarseSampleOrderTypeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDefault" />
    <member name="eCustom" />
    <member name="ePixelMajor" />
    <member name="eSampleMajor" />
  </enum>
  <enum name="ShadingRatePaletteEntryNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNoInvocations" />
    <member name="e16InvocationsPerPixel" />
    <member name="e8InvocationsPerPixel" />
    <member name="e4InvocationsPerPixel" />
    <member name="e2InvocationsPerPixel" />
    <member name="e1InvocationPerPixel" />
    <member name="e1InvocationPer2X1Pixels" />
    <member name="e1InvocationPer1X2Pixels" />
    <member name="e1InvocationPer2X2Pixels" />
    <member name="e1InvocationPer4X2Pixels" />
    <member name="e1InvocationPer2X4Pixels" />
    <member name="e1InvocationPer4X4Pixels" />
  </enum>
  <enum name="AccelerationStructureMemoryRequirementsTypeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eObject" />
    <member name="eBuildScratch" />
    <member name="eUpdateScratch" />
  </enum>
  <enum name="PipelineCompilerControlFlagBitsAMD" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineCompilerControlFlagsAMD" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineCompilerControlFlagBitsAMD&gt;" />
  <type_alias name="QueueGlobalPriorityEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="QueueGlobalPriorityKHR" />
  <enum name="QueueGlobalPriorityKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eLow" />
    <member name="eMedium" />
    <member name="eHigh" />
    <member name="eRealtime" />
  </enum>
  <enum name="MemoryOverallocationBehaviorAMD" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDefault" />
    <member name="eAllowed" />
    <member name="eDisallowed" />
  </enum>
  <enum name="PerformanceConfigurationTypeINTEL" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eCommandQueueMetricsDiscoveryActivated" />
  </enum>
  <enum name="PerformanceOverrideTypeINTEL" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNullHardware" />
    <member name="eFlushGpuCaches" />
  </enum>
  <enum name="PerformanceParameterTypeINTEL" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eHwCountersSupported" />
    <member name="eStreamMarkerValidBits" />
  </enum>
  <enum name="PerformanceValueTypeINTEL" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUint32" />
    <member name="eUint64" />
    <member name="eFloat" />
    <member name="eBool" />
    <member name="eString" />
  </enum>
  <enum name="QueryPoolSamplingModeINTEL" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eManual" />
  </enum>
  <enum name="FragmentShadingRateCombinerOpKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eKeep" />
    <member name="eReplace" />
    <member name="eMin" />
    <member name="eMax" />
    <member name="eMul" />
  </enum>
  <enum name="ShaderCorePropertiesFlagBitsAMD" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="ShaderCorePropertiesFlagsAMD" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ShaderCorePropertiesFlagBitsAMD&gt;" />
  <enum name="ValidationFeatureDisableEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eAll" />
    <member name="eShaders" />
    <member name="eThreadSafety" />
    <member name="eApiParameters" />
    <member name="eObjectLifetimes" />
    <member name="eCoreChecks" />
    <member name="eUniqueHandles" />
    <member name="eShaderValidationCache" />
  </enum>
  <enum name="ValidationFeatureEnableEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eGpuAssisted" />
    <member name="eGpuAssistedReserveBindingSlot" />
    <member name="eBestPractices" />
    <member name="eDebugPrintf" />
    <member name="eSynchronizationValidation" />
  </enum>
  <enum name="CoverageReductionModeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eMerge" />
    <member name="eTruncate" />
  </enum>
  <enum name="PipelineCoverageReductionStateCreateFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="PipelineCoverageReductionStateCreateFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineCoverageReductionStateCreateFlagBitsNV&gt;" />
  <enum name="ProvokingVertexModeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFirstVertex" />
    <member name="eLastVertex" />
  </enum>
  <enum name="HeadlessSurfaceCreateFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="HeadlessSurfaceCreateFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;HeadlessSurfaceCreateFlagBitsEXT&gt;" />
  <enum name="LineRasterizationModeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDefault" />
    <member name="eRectangular" />
    <member name="eBresenham" />
    <member name="eRectangularSmooth" />
  </enum>
  <enum name="PipelineExecutableStatisticFormatKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eBool32" />
    <member name="eInt64" />
    <member name="eUint64" />
    <member name="eFloat64" />
  </enum>
  <enum name="HostImageCopyFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eMemcpy" />
  </enum>
  <type_alias name="HostImageCopyFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;HostImageCopyFlagBitsEXT&gt;" />
  <enum name="MemoryUnmapFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="MemoryUnmapFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;MemoryUnmapFlagBitsKHR&gt;" />
  <enum name="PresentGravityFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eMin" />
    <member name="eMax" />
    <member name="eCentered" />
  </enum>
  <type_alias name="PresentGravityFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PresentGravityFlagBitsEXT&gt;" />
  <enum name="PresentScalingFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOneToOne" />
    <member name="eAspectRatioStretch" />
    <member name="eStretch" />
  </enum>
  <type_alias name="PresentScalingFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PresentScalingFlagBitsEXT&gt;" />
  <enum name="IndirectCommandsLayoutUsageFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eExplicitPreprocess" />
    <member name="eIndexedSequences" />
    <member name="eUnorderedSequences" />
  </enum>
  <type_alias name="IndirectCommandsLayoutUsageFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;IndirectCommandsLayoutUsageFlagBitsNV&gt;" />
  <enum name="IndirectCommandsTokenTypeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eShaderGroup" />
    <member name="eStateFlags" />
    <member name="eIndexBuffer" />
    <member name="eVertexBuffer" />
    <member name="ePushConstant" />
    <member name="eDrawIndexed" />
    <member name="eDraw" />
    <member name="eDrawTasks" />
    <member name="eDrawMeshTasks" />
    <member name="ePipeline" />
    <member name="eDispatch" />
  </enum>
  <enum name="IndirectStateFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFlagFrontface" />
  </enum>
  <type_alias name="IndirectStateFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;IndirectStateFlagBitsNV&gt;" />
  <enum name="DepthBiasRepresentationEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eLeastRepresentableValueFormat" />
    <member name="eLeastRepresentableValueForceUnorm" />
    <member name="eFloat" />
  </enum>
  <enum name="DeviceMemoryReportEventTypeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eAllocate" />
    <member name="eFree" />
    <member name="eImport" />
    <member name="eUnimport" />
    <member name="eAllocationFailed" />
  </enum>
  <enum name="DeviceMemoryReportFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="DeviceMemoryReportFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DeviceMemoryReportFlagBitsEXT&gt;" />
  <enum name="VideoEncodeCapabilityFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="ePrecedingExternallyEncodedBytes" />
    <member name="eInsufficientstreamBufferRangeDetectionBit" />
  </enum>
  <type_alias name="VideoEncodeCapabilityFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeCapabilityFlagBitsKHR&gt;" />
  <enum name="VideoEncodeContentFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDefault" />
    <member name="eCamera" />
    <member name="eDesktop" />
    <member name="eRendered" />
  </enum>
  <type_alias name="VideoEncodeContentFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeContentFlagBitsKHR&gt;" />
  <enum name="VideoEncodeFeedbackFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="estreamBufferOffsetBit" />
    <member name="estreamBytesWrittenBit" />
    <member name="estreamHasOverridesBit" />
  </enum>
  <type_alias name="VideoEncodeFeedbackFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeFeedbackFlagBitsKHR&gt;" />
  <enum name="VideoEncodeFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="VideoEncodeFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeFlagBitsKHR&gt;" />
  <enum name="VideoEncodeRateControlFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="VideoEncodeRateControlFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeRateControlFlagBitsKHR&gt;" />
  <enum name="VideoEncodeRateControlModeFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDefault" />
    <member name="eDisabled" />
    <member name="eCbr" />
    <member name="eVbr" />
  </enum>
  <type_alias name="VideoEncodeRateControlModeFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeRateControlModeFlagBitsKHR&gt;" />
  <enum name="VideoEncodeTuningModeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDefault" />
    <member name="eHighQuality" />
    <member name="eLowLatency" />
    <member name="eUltraLowLatency" />
    <member name="eLossless" />
  </enum>
  <enum name="VideoEncodeUsageFlagBitsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDefault" />
    <member name="eTranscoding" />
    <member name="eStreaming" />
    <member name="eRecording" />
    <member name="eConferencing" />
  </enum>
  <type_alias name="VideoEncodeUsageFlagsKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;VideoEncodeUsageFlagBitsKHR&gt;" />
  <enum name="DeviceDiagnosticsConfigFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eEnableShaderDebugInfo" />
    <member name="eEnableResourceTracking" />
    <member name="eEnableAutomaticCheckpoints" />
    <member name="eEnableShaderErrorReporting" />
  </enum>
  <type_alias name="DeviceDiagnosticsConfigFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DeviceDiagnosticsConfigFlagBitsNV&gt;" />
  <enum name="GraphicsPipelineLibraryFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eVertexInputInterface" />
    <member name="ePreRasterizationShaders" />
    <member name="eFragmentShader" />
    <member name="eFragmentOutputInterface" />
  </enum>
  <type_alias name="GraphicsPipelineLibraryFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;GraphicsPipelineLibraryFlagBitsEXT&gt;" />
  <enum name="FragmentShadingRateNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="e1InvocationPerPixel" />
    <member name="e1InvocationPer1X2Pixels" />
    <member name="e1InvocationPer2X1Pixels" />
    <member name="e1InvocationPer2X2Pixels" />
    <member name="e1InvocationPer2X4Pixels" />
    <member name="e1InvocationPer4X2Pixels" />
    <member name="e1InvocationPer4X4Pixels" />
    <member name="e2InvocationsPerPixel" />
    <member name="e4InvocationsPerPixel" />
    <member name="e8InvocationsPerPixel" />
    <member name="e16InvocationsPerPixel" />
    <member name="eNoInvocations" />
  </enum>
  <enum name="FragmentShadingRateTypeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFragmentSize" />
    <member name="eEnums" />
  </enum>
  <enum name="AccelerationStructureMotionInfoFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="AccelerationStructureMotionInfoFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;AccelerationStructureMotionInfoFlagBitsNV&gt;" />
  <enum name="AccelerationStructureMotionInstanceFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="AccelerationStructureMotionInstanceFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;AccelerationStructureMotionInstanceFlagBitsNV&gt;" />
  <enum name="AccelerationStructureMotionInstanceTypeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eStatic" />
    <member name="eMatrixMotion" />
    <member name="eSrtMotion" />
  </enum>
  <enum name="ImageCompressionFixedRateFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNone" />
    <member name="e1Bpc" />
    <member name="e2Bpc" />
    <member name="e3Bpc" />
    <member name="e4Bpc" />
    <member name="e5Bpc" />
    <member name="e6Bpc" />
    <member name="e7Bpc" />
    <member name="e8Bpc" />
    <member name="e9Bpc" />
    <member name="e10Bpc" />
    <member name="e11Bpc" />
    <member name="e12Bpc" />
    <member name="e13Bpc" />
    <member name="e14Bpc" />
    <member name="e15Bpc" />
    <member name="e16Bpc" />
    <member name="e17Bpc" />
    <member name="e18Bpc" />
    <member name="e19Bpc" />
    <member name="e20Bpc" />
    <member name="e21Bpc" />
    <member name="e22Bpc" />
    <member name="e23Bpc" />
    <member name="e24Bpc" />
  </enum>
  <type_alias name="ImageCompressionFixedRateFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ImageCompressionFixedRateFlagBitsEXT&gt;" />
  <enum name="ImageCompressionFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDefault" />
    <member name="eFixedRateDefault" />
    <member name="eFixedRateExplicit" />
    <member name="eDisabled" />
  </enum>
  <type_alias name="ImageCompressionFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ImageCompressionFlagBitsEXT&gt;" />
  <enum name="DeviceFaultAddressTypeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNone" />
    <member name="eReadInvalid" />
    <member name="eWriteInvalid" />
    <member name="eExecuteInvalid" />
    <member name="eInstructionPointerUnknown" />
    <member name="eInstructionPointerInvalid" />
    <member name="eInstructionPointerFault" />
  </enum>
  <enum name="DeviceFaultVendorBinaryHeaderVersionEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOne" />
  </enum>
  <enum name="DeviceAddressBindingFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eInternalObject" />
  </enum>
  <type_alias name="DeviceAddressBindingFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DeviceAddressBindingFlagBitsEXT&gt;" />
  <enum name="DeviceAddressBindingTypeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eBind" />
    <member name="eUnbind" />
  </enum>
  <enum name="FrameBoundaryFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFrameEnd" />
  </enum>
  <type_alias name="FrameBoundaryFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;FrameBoundaryFlagBitsEXT&gt;" />
  <enum name="BuildMicromapFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="ePreferFastTrace" />
    <member name="ePreferFastBuild" />
    <member name="eAllowCompaction" />
  </enum>
  <type_alias name="BuildMicromapFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;BuildMicromapFlagBitsEXT&gt;" />
  <enum name="BuildMicromapModeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eBuild" />
  </enum>
  <enum name="CopyMicromapModeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eClone" />
    <member name="eSerialize" />
    <member name="eDeserialize" />
    <member name="eCompact" />
  </enum>
  <enum name="MicromapCreateFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDeviceAddressCaptureReplay" />
  </enum>
  <type_alias name="MicromapCreateFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;MicromapCreateFlagBitsEXT&gt;" />
  <enum name="MicromapTypeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eOpacityMicromap" />
  </enum>
  <enum name="OpacityMicromapFormatEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="e2State" />
    <member name="e4State" />
  </enum>
  <enum name="OpacityMicromapSpecialIndexEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFullyTransparent" />
    <member name="eFullyOpaque" />
    <member name="eFullyUnknownTransparent" />
    <member name="eFullyUnknownOpaque" />
  </enum>
  <enum name="PhysicalDeviceSchedulingControlsFlagBitsARM" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eShaderCoreCount" />
  </enum>
  <type_alias name="PhysicalDeviceSchedulingControlsFlagsARM" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PhysicalDeviceSchedulingControlsFlagBitsARM&gt;" />
  <enum name="MemoryDecompressionMethodFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eGdeflate10" />
  </enum>
  <type_alias name="MemoryDecompressionMethodFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;MemoryDecompressionMethodFlagBitsNV&gt;" />
  <enum name="SubpassMergeStatusEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eMerged" />
    <member name="eDisallowed" />
    <member name="eNotMergedSideEffects" />
    <member name="eNotMergedSamplesMismatch" />
    <member name="eNotMergedViewsMismatch" />
    <member name="eNotMergedAliasing" />
    <member name="eNotMergedDependencies" />
    <member name="eNotMergedIncompatibleInputAttachment" />
    <member name="eNotMergedTooManyAttachments" />
    <member name="eNotMergedInsufficientStorage" />
    <member name="eNotMergedDepthStencilCount" />
    <member name="eNotMergedResolveAttachmentReuse" />
    <member name="eNotMergedSingleSubpass" />
    <member name="eNotMergedUnspecified" />
  </enum>
  <enum name="DirectDriverLoadingFlagBitsLUNARG" namespace="vk" filename="vulkan/vulkan_enums.hpp" />
  <type_alias name="DirectDriverLoadingFlagsLUNARG" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;DirectDriverLoadingFlagBitsLUNARG&gt;" />
  <enum name="DirectDriverLoadingModeLUNARG" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eExclusive" />
    <member name="eInclusive" />
  </enum>
  <enum name="OpticalFlowExecuteFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDisableTemporalHints" />
  </enum>
  <type_alias name="OpticalFlowExecuteFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;OpticalFlowExecuteFlagBitsNV&gt;" />
  <enum name="OpticalFlowGridSizeFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUnknown" />
    <member name="e1X1" />
    <member name="e2X2" />
    <member name="e4X4" />
    <member name="e8X8" />
  </enum>
  <type_alias name="OpticalFlowGridSizeFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;OpticalFlowGridSizeFlagBitsNV&gt;" />
  <enum name="OpticalFlowPerformanceLevelNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUnknown" />
    <member name="eSlow" />
    <member name="eMedium" />
    <member name="eFast" />
  </enum>
  <enum name="OpticalFlowSessionBindingPointNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUnknown" />
    <member name="eInput" />
    <member name="eReference" />
    <member name="eHint" />
    <member name="eFlowVector" />
    <member name="eBackwardFlowVector" />
    <member name="eCost" />
    <member name="eBackwardCost" />
    <member name="eGlobalFlow" />
  </enum>
  <enum name="OpticalFlowSessionCreateFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eEnableHint" />
    <member name="eEnableCost" />
    <member name="eEnableGlobalFlow" />
    <member name="eAllowRegions" />
    <member name="eBothDirections" />
  </enum>
  <type_alias name="OpticalFlowSessionCreateFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;OpticalFlowSessionCreateFlagBitsNV&gt;" />
  <enum name="OpticalFlowUsageFlagBitsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eUnknown" />
    <member name="eInput" />
    <member name="eOutput" />
    <member name="eHint" />
    <member name="eCost" />
    <member name="eGlobalFlow" />
  </enum>
  <type_alias name="OpticalFlowUsageFlagsNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;OpticalFlowUsageFlagBitsNV&gt;" />
  <enum name="BufferUsageFlagBits2KHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eTransferSrc" />
    <member name="eTransferDst" />
    <member name="eUniformTexelBuffer" />
    <member name="eStorageTexelBuffer" />
    <member name="eUniformBuffer" />
    <member name="eStorageBuffer" />
    <member name="eIndexBuffer" />
    <member name="eVertexBuffer" />
    <member name="eIndirectBuffer" />
    <member name="eConditionalRenderingEXT" />
    <member name="eShaderBindingTable" />
    <member name="eRayTracingNV" />
    <member name="eTransformFeedbackBufferEXT" />
    <member name="eTransformFeedbackCounterBufferEXT" />
    <member name="eVideoDecodeSrc" />
    <member name="eVideoDecodeDst" />
    <member name="eShaderDeviceAddress" />
    <member name="eAccelerationStructureBuildInputReadOnly" />
    <member name="eAccelerationStructureStorage" />
    <member name="eSamplerDescriptorBufferEXT" />
    <member name="eResourceDescriptorBufferEXT" />
    <member name="ePushDescriptorsDescriptorBufferEXT" />
    <member name="eMicromapBuildInputReadOnlyEXT" />
    <member name="eMicromapStorageEXT" />
  </enum>
  <type_alias name="BufferUsageFlags2KHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;BufferUsageFlagBits2KHR&gt;" />
  <enum name="PipelineCreateFlagBits2KHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDisableOptimization" />
    <member name="eAllowDerivatives" />
    <member name="eDerivative" />
    <member name="eViewIndexFromDeviceIndex" />
    <member name="eDispatchBase" />
    <member name="eDeferCompileNV" />
    <member name="eCaptureStatistics" />
    <member name="eCaptureInternalRepresentations" />
    <member name="eFailOnPipelineCompileRequired" />
    <member name="eEarlyReturnOnFailure" />
    <member name="eLinkTimeOptimizationEXT" />
    <member name="eRetainLinkTimeOptimizationInfoEXT" />
    <member name="eLibrary" />
    <member name="eRayTracingSkipTriangles" />
    <member name="eRayTracingSkipAabbs" />
    <member name="eRayTracingNoNullAnyHitShaders" />
    <member name="eRayTracingNoNullClosestHitShaders" />
    <member name="eRayTracingNoNullMissShaders" />
    <member name="eRayTracingNoNullIntersectionShaders" />
    <member name="eRayTracingShaderGroupHandleCaptureReplay" />
    <member name="eIndirectBindableNV" />
    <member name="eRayTracingAllowMotionNV" />
    <member name="eRenderingFragmentShadingRateAttachment" />
    <member name="eRenderingFragmentDensityMapAttachmentEXT" />
    <member name="eRayTracingOpacityMicromapEXT" />
    <member name="eColorAttachmentFeedbackLoopEXT" />
    <member name="eDepthStencilAttachmentFeedbackLoopEXT" />
    <member name="eNoProtectedAccessEXT" />
    <member name="eProtectedAccessOnlyEXT" />
    <member name="eRayTracingDisplacementMicromapNV" />
    <member name="eDescriptorBufferEXT" />
  </enum>
  <type_alias name="PipelineCreateFlags2KHR" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;PipelineCreateFlagBits2KHR&gt;" />
  <enum name="ShaderCodeTypeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eBinary" />
    <member name="eSpirv" />
  </enum>
  <enum name="ShaderCreateFlagBitsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eLinkStage" />
    <member name="eAllowVaryingSubgroupSize" />
    <member name="eRequireFullSubgroups" />
    <member name="eNoTaskShader" />
    <member name="eDispatchBase" />
    <member name="eFragmentShadingRateAttachment" />
    <member name="eFragmentDensityMapAttachment" />
  </enum>
  <type_alias name="ShaderCreateFlagsEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="Flags&lt;ShaderCreateFlagBitsEXT&gt;" />
  <enum name="RayTracingInvocationReorderModeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNone" />
    <member name="eReorder" />
  </enum>
  <enum name="LayerSettingTypeEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eBool32" />
    <member name="eInt32" />
    <member name="eInt64" />
    <member name="eUint32" />
    <member name="eUint64" />
    <member name="eFloat32" />
    <member name="eFloat64" />
    <member name="eString" />
  </enum>
  <enum name="LatencyMarkerNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eSimulationStart" />
    <member name="eSimulationEnd" />
    <member name="eRendersubmitStart" />
    <member name="eRendersubmitEnd" />
    <member name="ePresentStart" />
    <member name="ePresentEnd" />
    <member name="eInputSample" />
    <member name="eTriggerFlash" />
    <member name="eOutOfBandRendersubmitStart" />
    <member name="eOutOfBandRendersubmitEnd" />
    <member name="eOutOfBandPresentStart" />
    <member name="eOutOfBandPresentEnd" />
  </enum>
  <enum name="OutOfBandQueueTypeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eRender" />
    <member name="ePresent" />
  </enum>
  <enum name="ComponentTypeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eFloat16" />
    <member name="eFloat32" />
    <member name="eFloat64" />
    <member name="eSint8" />
    <member name="eSint16" />
    <member name="eSint32" />
    <member name="eSint64" />
    <member name="eUint8" />
    <member name="eUint16" />
    <member name="eUint32" />
    <member name="eUint64" />
  </enum>
  <type_alias name="ComponentTypeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ComponentTypeKHR" />
  <enum name="ScopeKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDevice" />
    <member name="eWorkgroup" />
    <member name="eSubgroup" />
    <member name="eQueueFamily" />
  </enum>
  <type_alias name="ScopeNV" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="ScopeKHR" />
  <enum name="BlockMatchWindowCompareModeQCOM" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eMin" />
    <member name="eMax" />
  </enum>
  <enum name="CubicFilterWeightsQCOM" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eCatmullRom" />
    <member name="eZeroTangentCardinal" />
    <member name="eBSpline" />
    <member name="eMitchellNetravali" />
  </enum>
  <enum name="LayeredDriverUnderlyingApiMSFT" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eNone" />
    <member name="eD3D12" />
  </enum>
  <type_alias name="TimeDomainEXT" namespace="vk" filename="vulkan/vulkan_enums.hpp" alias_raw="TimeDomainKHR" />
  <enum name="TimeDomainKHR" namespace="vk" filename="vulkan/vulkan_enums.hpp">
    <member name="eDevice" />
    <member name="eClockMonotonic" />
    <member name="eClockMonotonicRaw" />
    <member name="eQueryPerformanceCounter" />
  </enum>
  <class name="IndexTypeValue" namespace="vk" filename="vulkan/vulkan_enums.hpp" template_raw="template &lt;typename T&gt;" />
  <class name="DeviceLostError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="DeviceLostError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="DeviceLostError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="Error" namespace="vk" filename="vulkan/vulkan.hpp">
    <constructor name="Error" />
    <constructor name="Error">
      <argument name="" type="const Error &amp;" />
    </constructor>
    <destructor name="~Error" />
    <method name="what" />
  </class>
  <class name="ErrorCategoryImpl" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="std::error_category" />
    <method name="name" />
    <method name="message">
      <argument name="ev" type="int" />
    </method>
  </class>
  <class name="ExtensionNotPresentError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="ExtensionNotPresentError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="ExtensionNotPresentError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="FeatureNotPresentError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="FeatureNotPresentError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="FeatureNotPresentError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="FormatNotSupportedError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="FormatNotSupportedError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="FormatNotSupportedError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="FragmentationError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="FragmentationError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="FragmentationError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="FragmentedPoolError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="FragmentedPoolError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="FragmentedPoolError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="ImageUsageNotSupportedKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="ImageUsageNotSupportedKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="ImageUsageNotSupportedKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="IncompatibleDisplayKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="IncompatibleDisplayKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="IncompatibleDisplayKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="IncompatibleDriverError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="IncompatibleDriverError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="IncompatibleDriverError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="InitializationFailedError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="InitializationFailedError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="InitializationFailedError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="InvalidDrmFormatModifierPlaneLayoutEXTError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="InvalidDrmFormatModifierPlaneLayoutEXTError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="InvalidDrmFormatModifierPlaneLayoutEXTError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="InvalidExternalHandleError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="InvalidExternalHandleError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="InvalidExternalHandleError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="InvalidOpaqueCaptureAddressError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="InvalidOpaqueCaptureAddressError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="InvalidOpaqueCaptureAddressError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="InvalidShaderNVError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="InvalidShaderNVError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="InvalidShaderNVError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="LayerNotPresentError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="LayerNotPresentError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="LayerNotPresentError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="LogicError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="Error" />
    <base name="std::logic_error" />
    <constructor name="LogicError">
      <argument name="what" type="const std::string &amp;" />
    </constructor>
    <constructor name="LogicError">
      <argument name="what" type="const char *" />
    </constructor>
    <method name="what" />
  </class>
  <class name="MemoryMapFailedError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="MemoryMapFailedError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="MemoryMapFailedError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="NativeWindowInUseKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="NativeWindowInUseKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="NativeWindowInUseKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="NotPermittedKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="NotPermittedKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="NotPermittedKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="OutOfDateKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="OutOfDateKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="OutOfDateKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="OutOfDeviceMemoryError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="OutOfDeviceMemoryError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="OutOfDeviceMemoryError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="OutOfHostMemoryError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="OutOfHostMemoryError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="OutOfHostMemoryError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="OutOfPoolMemoryError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="OutOfPoolMemoryError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="OutOfPoolMemoryError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="SurfaceLostKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="SurfaceLostKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="SurfaceLostKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="SystemError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="Error" />
    <base name="std::system_error" />
    <constructor name="SystemError">
      <argument name="ec" type="std::error_code" />
    </constructor>
    <constructor name="SystemError">
      <argument name="ec" type="std::error_code" />
      <argument name="what" type="const std::string &amp;" />
    </constructor>
    <constructor name="SystemError">
      <argument name="ec" type="std::error_code" />
      <argument name="what" type="const char *" />
    </constructor>
    <constructor name="SystemError">
      <argument name="ev" type="int" />
      <argument name="ecat" type="const std::error_category &amp;" />
    </constructor>
    <constructor name="SystemError">
      <argument name="ev" type="int" />
      <argument name="ecat" type="const std::error_category &amp;" />
      <argument name="what" type="const std::string &amp;" />
    </constructor>
    <constructor name="SystemError">
      <argument name="ev" type="int" />
      <argument name="ecat" type="const std::error_category &amp;" />
      <argument name="what" type="const char *" />
    </constructor>
    <method name="what" />
  </class>
  <class name="TooManyObjectsError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="TooManyObjectsError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="TooManyObjectsError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="UnknownError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="UnknownError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="UnknownError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="ValidationFailedEXTError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="ValidationFailedEXTError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="ValidationFailedEXTError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="VideoPictureLayoutNotSupportedKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="VideoPictureLayoutNotSupportedKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="VideoPictureLayoutNotSupportedKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="VideoProfileCodecNotSupportedKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="VideoProfileCodecNotSupportedKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="VideoProfileCodecNotSupportedKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="VideoProfileFormatNotSupportedKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="VideoProfileFormatNotSupportedKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="VideoProfileFormatNotSupportedKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="VideoProfileOperationNotSupportedKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="VideoProfileOperationNotSupportedKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="VideoProfileOperationNotSupportedKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="VideoStdVersionNotSupportedKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="VideoStdVersionNotSupportedKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="VideoStdVersionNotSupportedKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="CompressionExhaustedEXTError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="CompressionExhaustedEXTError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="CompressionExhaustedEXTError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="IncompatibleShaderBinaryEXTError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="IncompatibleShaderBinaryEXTError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="IncompatibleShaderBinaryEXTError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="InvalidVideoStdParametersKHRError" namespace="vk" filename="vulkan/vulkan.hpp">
    <base name="SystemError" />
    <constructor name="InvalidVideoStdParametersKHRError">
      <argument name="message" type="const std::string &amp;" />
    </constructor>
    <constructor name="InvalidVideoStdParametersKHRError">
      <argument name="message" type="const char *" />
    </constructor>
  </class>
  <class name="ResultValue" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T&gt;">
    <constructor name="ResultValue&lt;T&gt;">
      <argument name="r" type="Result" />
      <argument name="v" type="T &amp;" />
    </constructor>
    <constructor name="ResultValue&lt;T&gt;">
      <argument name="r" type="Result" />
      <argument name="v" type="T &amp;&amp;" />
    </constructor>
    <field name="result" />
    <field name="value" />
    <conversion_function name="operator tuple&lt;vk::Result &amp;, type-parameter-0-0 &amp;&gt;" />
  </class>
  <class name="ResultValueType" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T&gt;" />
  <constant name="AttachmentUnused" namespace="vk" />
  <constant name="False" namespace="vk" />
  <constant name="LodClampNone" namespace="vk" />
  <constant name="MaxDescriptionSize" namespace="vk" />
  <constant name="MaxExtensionNameSize" namespace="vk" />
  <constant name="MaxMemoryHeaps" namespace="vk" />
  <constant name="MaxMemoryTypes" namespace="vk" />
  <constant name="MaxPhysicalDeviceNameSize" namespace="vk" />
  <constant name="QueueFamilyIgnored" namespace="vk" />
  <constant name="RemainingArrayLayers" namespace="vk" />
  <constant name="RemainingMipLevels" namespace="vk" />
  <constant name="SubpassExternal" namespace="vk" />
  <constant name="True" namespace="vk" />
  <constant name="UuidSize" namespace="vk" />
  <constant name="WholeSize" namespace="vk" />
  <constant name="LuidSize" namespace="vk" />
  <constant name="MaxDeviceGroupSize" namespace="vk" />
  <constant name="QueueFamilyExternal" namespace="vk" />
  <constant name="MaxDriverInfoSize" namespace="vk" />
  <constant name="MaxDriverNameSize" namespace="vk" />
  <constant name="KHRSurfaceExtensionName" namespace="vk" />
  <constant name="KHRSurfaceSpecVersion" namespace="vk" />
  <constant name="KHRSwapchainExtensionName" namespace="vk" />
  <constant name="KHRSwapchainSpecVersion" namespace="vk" />
  <constant name="KHRDisplayExtensionName" namespace="vk" />
  <constant name="KHRDisplaySpecVersion" namespace="vk" />
  <constant name="KHRDisplaySwapchainExtensionName" namespace="vk" />
  <constant name="KHRDisplaySwapchainSpecVersion" namespace="vk" />
  <constant name="EXTDebugReportExtensionName" namespace="vk" />
  <constant name="EXTDebugReportSpecVersion" namespace="vk" />
  <constant name="NVGlslShaderExtensionName" namespace="vk" />
  <constant name="NVGlslShaderSpecVersion" namespace="vk" />
  <constant name="EXTDepthRangeUnrestrictedExtensionName" namespace="vk" />
  <constant name="EXTDepthRangeUnrestrictedSpecVersion" namespace="vk" />
  <constant name="KHRSamplerMirrorClampToEdgeExtensionName" namespace="vk" />
  <constant name="KHRSamplerMirrorClampToEdgeSpecVersion" namespace="vk" />
  <constant name="IMGFilterCubicExtensionName" namespace="vk" />
  <constant name="IMGFilterCubicSpecVersion" namespace="vk" />
  <constant name="AMDRasterizationOrderExtensionName" namespace="vk" />
  <constant name="AMDRasterizationOrderSpecVersion" namespace="vk" />
  <constant name="AMDShaderTrinaryMinmaxExtensionName" namespace="vk" />
  <constant name="AMDShaderTrinaryMinmaxSpecVersion" namespace="vk" />
  <constant name="AMDShaderExplicitVertexParameterExtensionName" namespace="vk" />
  <constant name="AMDShaderExplicitVertexParameterSpecVersion" namespace="vk" />
  <constant name="EXTDebugMarkerExtensionName" namespace="vk" />
  <constant name="EXTDebugMarkerSpecVersion" namespace="vk" />
  <constant name="KHRVideoQueueExtensionName" namespace="vk" />
  <constant name="KHRVideoQueueSpecVersion" namespace="vk" />
  <constant name="KHRVideoDecodeQueueExtensionName" namespace="vk" />
  <constant name="KHRVideoDecodeQueueSpecVersion" namespace="vk" />
  <constant name="AMDGcnShaderExtensionName" namespace="vk" />
  <constant name="AMDGcnShaderSpecVersion" namespace="vk" />
  <constant name="NVDedicatedAllocationExtensionName" namespace="vk" />
  <constant name="NVDedicatedAllocationSpecVersion" namespace="vk" />
  <constant name="EXTTransformFeedbackExtensionName" namespace="vk" />
  <constant name="EXTTransformFeedbackSpecVersion" namespace="vk" />
  <constant name="NVXBinaryImportExtensionName" namespace="vk" />
  <constant name="NVXBinaryImportSpecVersion" namespace="vk" />
  <constant name="NVXImageViewHandleExtensionName" namespace="vk" />
  <constant name="NVXImageViewHandleSpecVersion" namespace="vk" />
  <constant name="AMDDrawIndirectCountExtensionName" namespace="vk" />
  <constant name="AMDDrawIndirectCountSpecVersion" namespace="vk" />
  <constant name="AMDNegativeViewportHeightExtensionName" namespace="vk" />
  <constant name="AMDNegativeViewportHeightSpecVersion" namespace="vk" />
  <constant name="AMDGpuShaderHalfFloatExtensionName" namespace="vk" />
  <constant name="AMDGpuShaderHalfFloatSpecVersion" namespace="vk" />
  <constant name="AMDShaderBallotExtensionName" namespace="vk" />
  <constant name="AMDShaderBallotSpecVersion" namespace="vk" />
  <constant name="KHRVideoEncodeH264ExtensionName" namespace="vk" />
  <constant name="KHRVideoEncodeH264SpecVersion" namespace="vk" />
  <constant name="KHRVideoEncodeH265ExtensionName" namespace="vk" />
  <constant name="KHRVideoEncodeH265SpecVersion" namespace="vk" />
  <constant name="KHRVideoDecodeH264ExtensionName" namespace="vk" />
  <constant name="KHRVideoDecodeH264SpecVersion" namespace="vk" />
  <constant name="AMDTextureGatherBiasLodExtensionName" namespace="vk" />
  <constant name="AMDTextureGatherBiasLodSpecVersion" namespace="vk" />
  <constant name="AMDShaderInfoExtensionName" namespace="vk" />
  <constant name="AMDShaderInfoSpecVersion" namespace="vk" />
  <constant name="KHRDynamicRenderingExtensionName" namespace="vk" />
  <constant name="KHRDynamicRenderingSpecVersion" namespace="vk" />
  <constant name="AMDShaderImageLoadStoreLodExtensionName" namespace="vk" />
  <constant name="AMDShaderImageLoadStoreLodSpecVersion" namespace="vk" />
  <constant name="NVCornerSampledImageExtensionName" namespace="vk" />
  <constant name="NVCornerSampledImageSpecVersion" namespace="vk" />
  <constant name="KHRMultiviewExtensionName" namespace="vk" />
  <constant name="KHRMultiviewSpecVersion" namespace="vk" />
  <constant name="IMGFormatPvrtcExtensionName" namespace="vk" />
  <constant name="IMGFormatPvrtcSpecVersion" namespace="vk" />
  <constant name="NVExternalMemoryCapabilitiesExtensionName" namespace="vk" />
  <constant name="NVExternalMemoryCapabilitiesSpecVersion" namespace="vk" />
  <constant name="NVExternalMemoryExtensionName" namespace="vk" />
  <constant name="NVExternalMemorySpecVersion" namespace="vk" />
  <constant name="KHRGetPhysicalDeviceProperties2ExtensionName" namespace="vk" />
  <constant name="KHRGetPhysicalDeviceProperties2SpecVersion" namespace="vk" />
  <constant name="KHRDeviceGroupExtensionName" namespace="vk" />
  <constant name="KHRDeviceGroupSpecVersion" namespace="vk" />
  <constant name="EXTValidationFlagsExtensionName" namespace="vk" />
  <constant name="EXTValidationFlagsSpecVersion" namespace="vk" />
  <constant name="KHRShaderDrawParametersExtensionName" namespace="vk" />
  <constant name="KHRShaderDrawParametersSpecVersion" namespace="vk" />
  <constant name="EXTShaderSubgroupBallotExtensionName" namespace="vk" />
  <constant name="EXTShaderSubgroupBallotSpecVersion" namespace="vk" />
  <constant name="EXTShaderSubgroupVoteExtensionName" namespace="vk" />
  <constant name="EXTShaderSubgroupVoteSpecVersion" namespace="vk" />
  <constant name="EXTTextureCompressionAstcHdrExtensionName" namespace="vk" />
  <constant name="EXTTextureCompressionAstcHdrSpecVersion" namespace="vk" />
  <constant name="EXTAstcDecodeModeExtensionName" namespace="vk" />
  <constant name="EXTAstcDecodeModeSpecVersion" namespace="vk" />
  <constant name="EXTPipelineRobustnessExtensionName" namespace="vk" />
  <constant name="EXTPipelineRobustnessSpecVersion" namespace="vk" />
  <constant name="KHRMaintenance1ExtensionName" namespace="vk" />
  <constant name="KHRMaintenance1SpecVersion" namespace="vk" />
  <constant name="KHRDeviceGroupCreationExtensionName" namespace="vk" />
  <constant name="KHRDeviceGroupCreationSpecVersion" namespace="vk" />
  <constant name="MaxDeviceGroupSizeKHR" namespace="vk" />
  <constant name="KHRExternalMemoryCapabilitiesExtensionName" namespace="vk" />
  <constant name="KHRExternalMemoryCapabilitiesSpecVersion" namespace="vk" />
  <constant name="LuidSizeKHR" namespace="vk" />
  <constant name="KHRExternalMemoryExtensionName" namespace="vk" />
  <constant name="KHRExternalMemorySpecVersion" namespace="vk" />
  <constant name="QueueFamilyExternalKHR" namespace="vk" />
  <constant name="KHRExternalMemoryFdExtensionName" namespace="vk" />
  <constant name="KHRExternalMemoryFdSpecVersion" namespace="vk" />
  <constant name="KHRExternalSemaphoreCapabilitiesExtensionName" namespace="vk" />
  <constant name="KHRExternalSemaphoreCapabilitiesSpecVersion" namespace="vk" />
  <constant name="KHRExternalSemaphoreExtensionName" namespace="vk" />
  <constant name="KHRExternalSemaphoreSpecVersion" namespace="vk" />
  <constant name="KHRExternalSemaphoreFdExtensionName" namespace="vk" />
  <constant name="KHRExternalSemaphoreFdSpecVersion" namespace="vk" />
  <constant name="KHRPushDescriptorExtensionName" namespace="vk" />
  <constant name="KHRPushDescriptorSpecVersion" namespace="vk" />
  <constant name="EXTConditionalRenderingExtensionName" namespace="vk" />
  <constant name="EXTConditionalRenderingSpecVersion" namespace="vk" />
  <constant name="KHRShaderFloat16Int8ExtensionName" namespace="vk" />
  <constant name="KHRShaderFloat16Int8SpecVersion" namespace="vk" />
  <constant name="KHR16BitStorageExtensionName" namespace="vk" />
  <constant name="KHR16BitStorageSpecVersion" namespace="vk" />
  <constant name="KHRIncrementalPresentExtensionName" namespace="vk" />
  <constant name="KHRIncrementalPresentSpecVersion" namespace="vk" />
  <constant name="KHRDescriptorUpdateTemplateExtensionName" namespace="vk" />
  <constant name="KHRDescriptorUpdateTemplateSpecVersion" namespace="vk" />
  <constant name="NVClipSpaceWScalingExtensionName" namespace="vk" />
  <constant name="NVClipSpaceWScalingSpecVersion" namespace="vk" />
  <constant name="EXTDirectModeDisplayExtensionName" namespace="vk" />
  <constant name="EXTDirectModeDisplaySpecVersion" namespace="vk" />
  <constant name="EXTDisplaySurfaceCounterExtensionName" namespace="vk" />
  <constant name="EXTDisplaySurfaceCounterSpecVersion" namespace="vk" />
  <constant name="EXTDisplayControlExtensionName" namespace="vk" />
  <constant name="EXTDisplayControlSpecVersion" namespace="vk" />
  <constant name="GOOGLEDisplayTimingExtensionName" namespace="vk" />
  <constant name="GOOGLEDisplayTimingSpecVersion" namespace="vk" />
  <constant name="NVSampleMaskOverrideCoverageExtensionName" namespace="vk" />
  <constant name="NVSampleMaskOverrideCoverageSpecVersion" namespace="vk" />
  <constant name="NVGeometryShaderPassthroughExtensionName" namespace="vk" />
  <constant name="NVGeometryShaderPassthroughSpecVersion" namespace="vk" />
  <constant name="NVViewportArray2ExtensionName" namespace="vk" />
  <constant name="NVViewportArray2SpecVersion" namespace="vk" />
  <constant name="NVXMultiviewPerViewAttributesExtensionName" namespace="vk" />
  <constant name="NVXMultiviewPerViewAttributesSpecVersion" namespace="vk" />
  <constant name="NVViewportSwizzleExtensionName" namespace="vk" />
  <constant name="NVViewportSwizzleSpecVersion" namespace="vk" />
  <constant name="EXTDiscardRectanglesExtensionName" namespace="vk" />
  <constant name="EXTDiscardRectanglesSpecVersion" namespace="vk" />
  <constant name="EXTConservativeRasterizationExtensionName" namespace="vk" />
  <constant name="EXTConservativeRasterizationSpecVersion" namespace="vk" />
  <constant name="EXTDepthClipEnableExtensionName" namespace="vk" />
  <constant name="EXTDepthClipEnableSpecVersion" namespace="vk" />
  <constant name="EXTSwapchainColorSpaceExtensionName" namespace="vk" />
  <constant name="EXTSwapchainColorSpaceSpecVersion" namespace="vk" />
  <constant name="EXTHdrMetadataExtensionName" namespace="vk" />
  <constant name="EXTHdrMetadataSpecVersion" namespace="vk" />
  <constant name="KHRImagelessFramebufferExtensionName" namespace="vk" />
  <constant name="KHRImagelessFramebufferSpecVersion" namespace="vk" />
  <constant name="KHRCreateRenderpass2ExtensionName" namespace="vk" />
  <constant name="KHRCreateRenderpass2SpecVersion" namespace="vk" />
  <constant name="IMGRelaxedLineRasterizationExtensionName" namespace="vk" />
  <constant name="IMGRelaxedLineRasterizationSpecVersion" namespace="vk" />
  <constant name="KHRSharedPresentableImageExtensionName" namespace="vk" />
  <constant name="KHRSharedPresentableImageSpecVersion" namespace="vk" />
  <constant name="KHRExternalFenceCapabilitiesExtensionName" namespace="vk" />
  <constant name="KHRExternalFenceCapabilitiesSpecVersion" namespace="vk" />
  <constant name="KHRExternalFenceExtensionName" namespace="vk" />
  <constant name="KHRExternalFenceSpecVersion" namespace="vk" />
  <constant name="KHRExternalFenceFdExtensionName" namespace="vk" />
  <constant name="KHRExternalFenceFdSpecVersion" namespace="vk" />
  <constant name="KHRPerformanceQueryExtensionName" namespace="vk" />
  <constant name="KHRPerformanceQuerySpecVersion" namespace="vk" />
  <constant name="KHRMaintenance2ExtensionName" namespace="vk" />
  <constant name="KHRMaintenance2SpecVersion" namespace="vk" />
  <constant name="KHRGetSurfaceCapabilities2ExtensionName" namespace="vk" />
  <constant name="KHRGetSurfaceCapabilities2SpecVersion" namespace="vk" />
  <constant name="KHRVariablePointersExtensionName" namespace="vk" />
  <constant name="KHRVariablePointersSpecVersion" namespace="vk" />
  <constant name="KHRGetDisplayProperties2ExtensionName" namespace="vk" />
  <constant name="KHRGetDisplayProperties2SpecVersion" namespace="vk" />
  <constant name="EXTExternalMemoryDmaBufExtensionName" namespace="vk" />
  <constant name="EXTExternalMemoryDmaBufSpecVersion" namespace="vk" />
  <constant name="EXTQueueFamilyForeignExtensionName" namespace="vk" />
  <constant name="EXTQueueFamilyForeignSpecVersion" namespace="vk" />
  <constant name="QueueFamilyForeignEXT" namespace="vk" />
  <constant name="KHRDedicatedAllocationExtensionName" namespace="vk" />
  <constant name="KHRDedicatedAllocationSpecVersion" namespace="vk" />
  <constant name="EXTDebugUtilsExtensionName" namespace="vk" />
  <constant name="EXTDebugUtilsSpecVersion" namespace="vk" />
  <constant name="EXTSamplerFilterMinmaxExtensionName" namespace="vk" />
  <constant name="EXTSamplerFilterMinmaxSpecVersion" namespace="vk" />
  <constant name="KHRStorageBufferStorageClassExtensionName" namespace="vk" />
  <constant name="KHRStorageBufferStorageClassSpecVersion" namespace="vk" />
  <constant name="AMDGpuShaderInt16ExtensionName" namespace="vk" />
  <constant name="AMDGpuShaderInt16SpecVersion" namespace="vk" />
  <constant name="AMDMixedAttachmentSamplesExtensionName" namespace="vk" />
  <constant name="AMDMixedAttachmentSamplesSpecVersion" namespace="vk" />
  <constant name="AMDShaderFragmentMaskExtensionName" namespace="vk" />
  <constant name="AMDShaderFragmentMaskSpecVersion" namespace="vk" />
  <constant name="EXTInlineUniformBlockExtensionName" namespace="vk" />
  <constant name="EXTInlineUniformBlockSpecVersion" namespace="vk" />
  <constant name="EXTShaderStencilExportExtensionName" namespace="vk" />
  <constant name="EXTShaderStencilExportSpecVersion" namespace="vk" />
  <constant name="EXTSampleLocationsExtensionName" namespace="vk" />
  <constant name="EXTSampleLocationsSpecVersion" namespace="vk" />
  <constant name="KHRRelaxedBlockLayoutExtensionName" namespace="vk" />
  <constant name="KHRRelaxedBlockLayoutSpecVersion" namespace="vk" />
  <constant name="KHRGetMemoryRequirements2ExtensionName" namespace="vk" />
  <constant name="KHRGetMemoryRequirements2SpecVersion" namespace="vk" />
  <constant name="KHRImageFormatListExtensionName" namespace="vk" />
  <constant name="KHRImageFormatListSpecVersion" namespace="vk" />
  <constant name="EXTBlendOperationAdvancedExtensionName" namespace="vk" />
  <constant name="EXTBlendOperationAdvancedSpecVersion" namespace="vk" />
  <constant name="NVFragmentCoverageToColorExtensionName" namespace="vk" />
  <constant name="NVFragmentCoverageToColorSpecVersion" namespace="vk" />
  <constant name="KHRAccelerationStructureExtensionName" namespace="vk" />
  <constant name="KHRAccelerationStructureSpecVersion" namespace="vk" />
  <constant name="KHRRayTracingPipelineExtensionName" namespace="vk" />
  <constant name="KHRRayTracingPipelineSpecVersion" namespace="vk" />
  <constant name="ShaderUnusedKHR" namespace="vk" />
  <constant name="KHRRayQueryExtensionName" namespace="vk" />
  <constant name="KHRRayQuerySpecVersion" namespace="vk" />
  <constant name="NVFramebufferMixedSamplesExtensionName" namespace="vk" />
  <constant name="NVFramebufferMixedSamplesSpecVersion" namespace="vk" />
  <constant name="NVFillRectangleExtensionName" namespace="vk" />
  <constant name="NVFillRectangleSpecVersion" namespace="vk" />
  <constant name="NVShaderSmBuiltinsExtensionName" namespace="vk" />
  <constant name="NVShaderSmBuiltinsSpecVersion" namespace="vk" />
  <constant name="EXTPostDepthCoverageExtensionName" namespace="vk" />
  <constant name="EXTPostDepthCoverageSpecVersion" namespace="vk" />
  <constant name="KHRSamplerYcbcrConversionExtensionName" namespace="vk" />
  <constant name="KHRSamplerYcbcrConversionSpecVersion" namespace="vk" />
  <constant name="KHRBindMemory2ExtensionName" namespace="vk" />
  <constant name="KHRBindMemory2SpecVersion" namespace="vk" />
  <constant name="EXTImageDrmFormatModifierExtensionName" namespace="vk" />
  <constant name="EXTImageDrmFormatModifierSpecVersion" namespace="vk" />
  <constant name="EXTValidationCacheExtensionName" namespace="vk" />
  <constant name="EXTValidationCacheSpecVersion" namespace="vk" />
  <constant name="EXTDescriptorIndexingExtensionName" namespace="vk" />
  <constant name="EXTDescriptorIndexingSpecVersion" namespace="vk" />
  <constant name="EXTShaderViewportIndexLayerExtensionName" namespace="vk" />
  <constant name="EXTShaderViewportIndexLayerSpecVersion" namespace="vk" />
  <constant name="NVShadingRateImageExtensionName" namespace="vk" />
  <constant name="NVShadingRateImageSpecVersion" namespace="vk" />
  <constant name="NVRayTracingExtensionName" namespace="vk" />
  <constant name="NVRayTracingSpecVersion" namespace="vk" />
  <constant name="ShaderUnusedNV" namespace="vk" />
  <constant name="NVRepresentativeFragmentTestExtensionName" namespace="vk" />
  <constant name="NVRepresentativeFragmentTestSpecVersion" namespace="vk" />
  <constant name="KHRMaintenance3ExtensionName" namespace="vk" />
  <constant name="KHRMaintenance3SpecVersion" namespace="vk" />
  <constant name="KHRDrawIndirectCountExtensionName" namespace="vk" />
  <constant name="KHRDrawIndirectCountSpecVersion" namespace="vk" />
  <constant name="EXTFilterCubicExtensionName" namespace="vk" />
  <constant name="EXTFilterCubicSpecVersion" namespace="vk" />
  <constant name="QCOMRenderPassShaderResolveExtensionName" namespace="vk" />
  <constant name="QCOMRenderPassShaderResolveSpecVersion" namespace="vk" />
  <constant name="EXTGlobalPriorityExtensionName" namespace="vk" />
  <constant name="EXTGlobalPrioritySpecVersion" namespace="vk" />
  <constant name="KHRShaderSubgroupExtendedTypesExtensionName" namespace="vk" />
  <constant name="KHRShaderSubgroupExtendedTypesSpecVersion" namespace="vk" />
  <constant name="KHR8BitStorageExtensionName" namespace="vk" />
  <constant name="KHR8BitStorageSpecVersion" namespace="vk" />
  <constant name="EXTExternalMemoryHostExtensionName" namespace="vk" />
  <constant name="EXTExternalMemoryHostSpecVersion" namespace="vk" />
  <constant name="AMDBufferMarkerExtensionName" namespace="vk" />
  <constant name="AMDBufferMarkerSpecVersion" namespace="vk" />
  <constant name="KHRShaderAtomicInt64ExtensionName" namespace="vk" />
  <constant name="KHRShaderAtomicInt64SpecVersion" namespace="vk" />
  <constant name="KHRShaderClockExtensionName" namespace="vk" />
  <constant name="KHRShaderClockSpecVersion" namespace="vk" />
  <constant name="AMDPipelineCompilerControlExtensionName" namespace="vk" />
  <constant name="AMDPipelineCompilerControlSpecVersion" namespace="vk" />
  <constant name="EXTCalibratedTimestampsExtensionName" namespace="vk" />
  <constant name="EXTCalibratedTimestampsSpecVersion" namespace="vk" />
  <constant name="AMDShaderCorePropertiesExtensionName" namespace="vk" />
  <constant name="AMDShaderCorePropertiesSpecVersion" namespace="vk" />
  <constant name="KHRVideoDecodeH265ExtensionName" namespace="vk" />
  <constant name="KHRVideoDecodeH265SpecVersion" namespace="vk" />
  <constant name="KHRGlobalPriorityExtensionName" namespace="vk" />
  <constant name="KHRGlobalPrioritySpecVersion" namespace="vk" />
  <constant name="MaxGlobalPrioritySizeKHR" namespace="vk" />
  <constant name="AMDMemoryOverallocationBehaviorExtensionName" namespace="vk" />
  <constant name="AMDMemoryOverallocationBehaviorSpecVersion" namespace="vk" />
  <constant name="EXTVertexAttributeDivisorExtensionName" namespace="vk" />
  <constant name="EXTVertexAttributeDivisorSpecVersion" namespace="vk" />
  <constant name="EXTPipelineCreationFeedbackExtensionName" namespace="vk" />
  <constant name="EXTPipelineCreationFeedbackSpecVersion" namespace="vk" />
  <constant name="KHRDriverPropertiesExtensionName" namespace="vk" />
  <constant name="KHRDriverPropertiesSpecVersion" namespace="vk" />
  <constant name="MaxDriverInfoSizeKHR" namespace="vk" />
  <constant name="MaxDriverNameSizeKHR" namespace="vk" />
  <constant name="KHRShaderFloatControlsExtensionName" namespace="vk" />
  <constant name="KHRShaderFloatControlsSpecVersion" namespace="vk" />
  <constant name="NVShaderSubgroupPartitionedExtensionName" namespace="vk" />
  <constant name="NVShaderSubgroupPartitionedSpecVersion" namespace="vk" />
  <constant name="KHRDepthStencilResolveExtensionName" namespace="vk" />
  <constant name="KHRDepthStencilResolveSpecVersion" namespace="vk" />
  <constant name="KHRSwapchainMutableFormatExtensionName" namespace="vk" />
  <constant name="KHRSwapchainMutableFormatSpecVersion" namespace="vk" />
  <constant name="NVComputeShaderDerivativesExtensionName" namespace="vk" />
  <constant name="NVComputeShaderDerivativesSpecVersion" namespace="vk" />
  <constant name="NVMeshShaderExtensionName" namespace="vk" />
  <constant name="NVMeshShaderSpecVersion" namespace="vk" />
  <constant name="NVFragmentShaderBarycentricExtensionName" namespace="vk" />
  <constant name="NVFragmentShaderBarycentricSpecVersion" namespace="vk" />
  <constant name="NVShaderImageFootprintExtensionName" namespace="vk" />
  <constant name="NVShaderImageFootprintSpecVersion" namespace="vk" />
  <constant name="NVScissorExclusiveExtensionName" namespace="vk" />
  <constant name="NVScissorExclusiveSpecVersion" namespace="vk" />
  <constant name="NVDeviceDiagnosticCheckpointsExtensionName" namespace="vk" />
  <constant name="NVDeviceDiagnosticCheckpointsSpecVersion" namespace="vk" />
  <constant name="KHRTimelineSemaphoreExtensionName" namespace="vk" />
  <constant name="KHRTimelineSemaphoreSpecVersion" namespace="vk" />
  <constant name="INTELShaderIntegerFunctions2ExtensionName" namespace="vk" />
  <constant name="INTELShaderIntegerFunctions2SpecVersion" namespace="vk" />
  <constant name="INTELPerformanceQueryExtensionName" namespace="vk" />
  <constant name="INTELPerformanceQuerySpecVersion" namespace="vk" />
  <constant name="KHRVulkanMemoryModelExtensionName" namespace="vk" />
  <constant name="KHRVulkanMemoryModelSpecVersion" namespace="vk" />
  <constant name="EXTPciBusInfoExtensionName" namespace="vk" />
  <constant name="EXTPciBusInfoSpecVersion" namespace="vk" />
  <constant name="AMDDisplayNativeHdrExtensionName" namespace="vk" />
  <constant name="AMDDisplayNativeHdrSpecVersion" namespace="vk" />
  <constant name="KHRShaderTerminateInvocationExtensionName" namespace="vk" />
  <constant name="KHRShaderTerminateInvocationSpecVersion" namespace="vk" />
  <constant name="EXTFragmentDensityMapExtensionName" namespace="vk" />
  <constant name="EXTFragmentDensityMapSpecVersion" namespace="vk" />
  <constant name="EXTScalarBlockLayoutExtensionName" namespace="vk" />
  <constant name="EXTScalarBlockLayoutSpecVersion" namespace="vk" />
  <constant name="GOOGLEHlslFunctionality1ExtensionName" namespace="vk" />
  <constant name="GOOGLEHlslFunctionality1SpecVersion" namespace="vk" />
  <constant name="GOOGLEDecorateStringExtensionName" namespace="vk" />
  <constant name="GOOGLEDecorateStringSpecVersion" namespace="vk" />
  <constant name="EXTSubgroupSizeControlExtensionName" namespace="vk" />
  <constant name="EXTSubgroupSizeControlSpecVersion" namespace="vk" />
  <constant name="KHRFragmentShadingRateExtensionName" namespace="vk" />
  <constant name="KHRFragmentShadingRateSpecVersion" namespace="vk" />
  <constant name="AMDShaderCoreProperties2ExtensionName" namespace="vk" />
  <constant name="AMDShaderCoreProperties2SpecVersion" namespace="vk" />
  <constant name="AMDDeviceCoherentMemoryExtensionName" namespace="vk" />
  <constant name="AMDDeviceCoherentMemorySpecVersion" namespace="vk" />
  <constant name="EXTShaderImageAtomicInt64ExtensionName" namespace="vk" />
  <constant name="EXTShaderImageAtomicInt64SpecVersion" namespace="vk" />
  <constant name="KHRSpirv14ExtensionName" namespace="vk" />
  <constant name="KHRSpirv14SpecVersion" namespace="vk" />
  <constant name="EXTMemoryBudgetExtensionName" namespace="vk" />
  <constant name="EXTMemoryBudgetSpecVersion" namespace="vk" />
  <constant name="EXTMemoryPriorityExtensionName" namespace="vk" />
  <constant name="EXTMemoryPrioritySpecVersion" namespace="vk" />
  <constant name="KHRSurfaceProtectedCapabilitiesExtensionName" namespace="vk" />
  <constant name="KHRSurfaceProtectedCapabilitiesSpecVersion" namespace="vk" />
  <constant name="NVDedicatedAllocationImageAliasingExtensionName" namespace="vk" />
  <constant name="NVDedicatedAllocationImageAliasingSpecVersion" namespace="vk" />
  <constant name="KHRSeparateDepthStencilLayoutsExtensionName" namespace="vk" />
  <constant name="KHRSeparateDepthStencilLayoutsSpecVersion" namespace="vk" />
  <constant name="EXTBufferDeviceAddressExtensionName" namespace="vk" />
  <constant name="EXTBufferDeviceAddressSpecVersion" namespace="vk" />
  <constant name="EXTToolingInfoExtensionName" namespace="vk" />
  <constant name="EXTToolingInfoSpecVersion" namespace="vk" />
  <constant name="EXTSeparateStencilUsageExtensionName" namespace="vk" />
  <constant name="EXTSeparateStencilUsageSpecVersion" namespace="vk" />
  <constant name="EXTValidationFeaturesExtensionName" namespace="vk" />
  <constant name="EXTValidationFeaturesSpecVersion" namespace="vk" />
  <constant name="KHRPresentWaitExtensionName" namespace="vk" />
  <constant name="KHRPresentWaitSpecVersion" namespace="vk" />
  <constant name="NVCooperativeMatrixExtensionName" namespace="vk" />
  <constant name="NVCooperativeMatrixSpecVersion" namespace="vk" />
  <constant name="NVCoverageReductionModeExtensionName" namespace="vk" />
  <constant name="NVCoverageReductionModeSpecVersion" namespace="vk" />
  <constant name="EXTFragmentShaderInterlockExtensionName" namespace="vk" />
  <constant name="EXTFragmentShaderInterlockSpecVersion" namespace="vk" />
  <constant name="EXTYcbcrImageArraysExtensionName" namespace="vk" />
  <constant name="EXTYcbcrImageArraysSpecVersion" namespace="vk" />
  <constant name="KHRUniformBufferStandardLayoutExtensionName" namespace="vk" />
  <constant name="KHRUniformBufferStandardLayoutSpecVersion" namespace="vk" />
  <constant name="EXTProvokingVertexExtensionName" namespace="vk" />
  <constant name="EXTProvokingVertexSpecVersion" namespace="vk" />
  <constant name="EXTHeadlessSurfaceExtensionName" namespace="vk" />
  <constant name="EXTHeadlessSurfaceSpecVersion" namespace="vk" />
  <constant name="KHRBufferDeviceAddressExtensionName" namespace="vk" />
  <constant name="KHRBufferDeviceAddressSpecVersion" namespace="vk" />
  <constant name="EXTLineRasterizationExtensionName" namespace="vk" />
  <constant name="EXTLineRasterizationSpecVersion" namespace="vk" />
  <constant name="EXTShaderAtomicFloatExtensionName" namespace="vk" />
  <constant name="EXTShaderAtomicFloatSpecVersion" namespace="vk" />
  <constant name="EXTHostQueryResetExtensionName" namespace="vk" />
  <constant name="EXTHostQueryResetSpecVersion" namespace="vk" />
  <constant name="EXTIndexTypeUint8ExtensionName" namespace="vk" />
  <constant name="EXTIndexTypeUint8SpecVersion" namespace="vk" />
  <constant name="EXTExtendedDynamicStateExtensionName" namespace="vk" />
  <constant name="EXTExtendedDynamicStateSpecVersion" namespace="vk" />
  <constant name="KHRDeferredHostOperationsExtensionName" namespace="vk" />
  <constant name="KHRDeferredHostOperationsSpecVersion" namespace="vk" />
  <constant name="KHRPipelineExecutablePropertiesExtensionName" namespace="vk" />
  <constant name="KHRPipelineExecutablePropertiesSpecVersion" namespace="vk" />
  <constant name="EXTHostImageCopyExtensionName" namespace="vk" />
  <constant name="EXTHostImageCopySpecVersion" namespace="vk" />
  <constant name="KHRMapMemory2ExtensionName" namespace="vk" />
  <constant name="KHRMapMemory2SpecVersion" namespace="vk" />
  <constant name="EXTShaderAtomicFloat2ExtensionName" namespace="vk" />
  <constant name="EXTShaderAtomicFloat2SpecVersion" namespace="vk" />
  <constant name="EXTSurfaceMaintenance1ExtensionName" namespace="vk" />
  <constant name="EXTSurfaceMaintenance1SpecVersion" namespace="vk" />
  <constant name="EXTSwapchainMaintenance1ExtensionName" namespace="vk" />
  <constant name="EXTSwapchainMaintenance1SpecVersion" namespace="vk" />
  <constant name="EXTShaderDemoteToHelperInvocationExtensionName" namespace="vk" />
  <constant name="EXTShaderDemoteToHelperInvocationSpecVersion" namespace="vk" />
  <constant name="NVDeviceGeneratedCommandsExtensionName" namespace="vk" />
  <constant name="NVDeviceGeneratedCommandsSpecVersion" namespace="vk" />
  <constant name="NVInheritedViewportScissorExtensionName" namespace="vk" />
  <constant name="NVInheritedViewportScissorSpecVersion" namespace="vk" />
  <constant name="KHRShaderIntegerDotProductExtensionName" namespace="vk" />
  <constant name="KHRShaderIntegerDotProductSpecVersion" namespace="vk" />
  <constant name="EXTTexelBufferAlignmentExtensionName" namespace="vk" />
  <constant name="EXTTexelBufferAlignmentSpecVersion" namespace="vk" />
  <constant name="QCOMRenderPassTransformExtensionName" namespace="vk" />
  <constant name="QCOMRenderPassTransformSpecVersion" namespace="vk" />
  <constant name="EXTDepthBiasControlExtensionName" namespace="vk" />
  <constant name="EXTDepthBiasControlSpecVersion" namespace="vk" />
  <constant name="EXTDeviceMemoryReportExtensionName" namespace="vk" />
  <constant name="EXTDeviceMemoryReportSpecVersion" namespace="vk" />
  <constant name="EXTAcquireDrmDisplayExtensionName" namespace="vk" />
  <constant name="EXTAcquireDrmDisplaySpecVersion" namespace="vk" />
  <constant name="EXTRobustness2ExtensionName" namespace="vk" />
  <constant name="EXTRobustness2SpecVersion" namespace="vk" />
  <constant name="EXTCustomBorderColorExtensionName" namespace="vk" />
  <constant name="EXTCustomBorderColorSpecVersion" namespace="vk" />
  <constant name="GOOGLEUserTypeExtensionName" namespace="vk" />
  <constant name="GOOGLEUserTypeSpecVersion" namespace="vk" />
  <constant name="KHRPipelineLibraryExtensionName" namespace="vk" />
  <constant name="KHRPipelineLibrarySpecVersion" namespace="vk" />
  <constant name="NVPresentBarrierExtensionName" namespace="vk" />
  <constant name="NVPresentBarrierSpecVersion" namespace="vk" />
  <constant name="KHRShaderNonSemanticInfoExtensionName" namespace="vk" />
  <constant name="KHRShaderNonSemanticInfoSpecVersion" namespace="vk" />
  <constant name="KHRPresentIdExtensionName" namespace="vk" />
  <constant name="KHRPresentIdSpecVersion" namespace="vk" />
  <constant name="EXTPrivateDataExtensionName" namespace="vk" />
  <constant name="EXTPrivateDataSpecVersion" namespace="vk" />
  <constant name="EXTPipelineCreationCacheControlExtensionName" namespace="vk" />
  <constant name="EXTPipelineCreationCacheControlSpecVersion" namespace="vk" />
  <constant name="KHRVideoEncodeQueueExtensionName" namespace="vk" />
  <constant name="KHRVideoEncodeQueueSpecVersion" namespace="vk" />
  <constant name="NVDeviceDiagnosticsConfigExtensionName" namespace="vk" />
  <constant name="NVDeviceDiagnosticsConfigSpecVersion" namespace="vk" />
  <constant name="QCOMRenderPassStoreOpsExtensionName" namespace="vk" />
  <constant name="QCOMRenderPassStoreOpsSpecVersion" namespace="vk" />
  <constant name="NVLowLatencyExtensionName" namespace="vk" />
  <constant name="NVLowLatencySpecVersion" namespace="vk" />
  <constant name="KHRSynchronization2ExtensionName" namespace="vk" />
  <constant name="KHRSynchronization2SpecVersion" namespace="vk" />
  <constant name="EXTDescriptorBufferExtensionName" namespace="vk" />
  <constant name="EXTDescriptorBufferSpecVersion" namespace="vk" />
  <constant name="EXTGraphicsPipelineLibraryExtensionName" namespace="vk" />
  <constant name="EXTGraphicsPipelineLibrarySpecVersion" namespace="vk" />
  <constant name="AMDShaderEarlyAndLateFragmentTestsExtensionName" namespace="vk" />
  <constant name="AMDShaderEarlyAndLateFragmentTestsSpecVersion" namespace="vk" />
  <constant name="KHRFragmentShaderBarycentricExtensionName" namespace="vk" />
  <constant name="KHRFragmentShaderBarycentricSpecVersion" namespace="vk" />
  <constant name="KHRShaderSubgroupUniformControlFlowExtensionName" namespace="vk" />
  <constant name="KHRShaderSubgroupUniformControlFlowSpecVersion" namespace="vk" />
  <constant name="KHRZeroInitializeWorkgroupMemoryExtensionName" namespace="vk" />
  <constant name="KHRZeroInitializeWorkgroupMemorySpecVersion" namespace="vk" />
  <constant name="NVFragmentShadingRateEnumsExtensionName" namespace="vk" />
  <constant name="NVFragmentShadingRateEnumsSpecVersion" namespace="vk" />
  <constant name="NVRayTracingMotionBlurExtensionName" namespace="vk" />
  <constant name="NVRayTracingMotionBlurSpecVersion" namespace="vk" />
  <constant name="EXTMeshShaderExtensionName" namespace="vk" />
  <constant name="EXTMeshShaderSpecVersion" namespace="vk" />
  <constant name="EXTYcbcr2Plane444FormatsExtensionName" namespace="vk" />
  <constant name="EXTYcbcr2Plane444FormatsSpecVersion" namespace="vk" />
  <constant name="EXTFragmentDensityMap2ExtensionName" namespace="vk" />
  <constant name="EXTFragmentDensityMap2SpecVersion" namespace="vk" />
  <constant name="QCOMRotatedCopyCommandsExtensionName" namespace="vk" />
  <constant name="QCOMRotatedCopyCommandsSpecVersion" namespace="vk" />
  <constant name="EXTImageRobustnessExtensionName" namespace="vk" />
  <constant name="EXTImageRobustnessSpecVersion" namespace="vk" />
  <constant name="KHRWorkgroupMemoryExplicitLayoutExtensionName" namespace="vk" />
  <constant name="KHRWorkgroupMemoryExplicitLayoutSpecVersion" namespace="vk" />
  <constant name="KHRCopyCommands2ExtensionName" namespace="vk" />
  <constant name="KHRCopyCommands2SpecVersion" namespace="vk" />
  <constant name="EXTImageCompressionControlExtensionName" namespace="vk" />
  <constant name="EXTImageCompressionControlSpecVersion" namespace="vk" />
  <constant name="EXTAttachmentFeedbackLoopLayoutExtensionName" namespace="vk" />
  <constant name="EXTAttachmentFeedbackLoopLayoutSpecVersion" namespace="vk" />
  <constant name="EXT4444FormatsExtensionName" namespace="vk" />
  <constant name="EXT4444FormatsSpecVersion" namespace="vk" />
  <constant name="EXTDeviceFaultExtensionName" namespace="vk" />
  <constant name="EXTDeviceFaultSpecVersion" namespace="vk" />
  <constant name="ARMRasterizationOrderAttachmentAccessExtensionName" namespace="vk" />
  <constant name="ARMRasterizationOrderAttachmentAccessSpecVersion" namespace="vk" />
  <constant name="EXTRgba10X6FormatsExtensionName" namespace="vk" />
  <constant name="EXTRgba10X6FormatsSpecVersion" namespace="vk" />
  <constant name="VALVEMutableDescriptorTypeExtensionName" namespace="vk" />
  <constant name="VALVEMutableDescriptorTypeSpecVersion" namespace="vk" />
  <constant name="EXTVertexInputDynamicStateExtensionName" namespace="vk" />
  <constant name="EXTVertexInputDynamicStateSpecVersion" namespace="vk" />
  <constant name="EXTPhysicalDeviceDrmExtensionName" namespace="vk" />
  <constant name="EXTPhysicalDeviceDrmSpecVersion" namespace="vk" />
  <constant name="EXTDeviceAddressBindingReportExtensionName" namespace="vk" />
  <constant name="EXTDeviceAddressBindingReportSpecVersion" namespace="vk" />
  <constant name="EXTDepthClipControlExtensionName" namespace="vk" />
  <constant name="EXTDepthClipControlSpecVersion" namespace="vk" />
  <constant name="EXTPrimitiveTopologyListRestartExtensionName" namespace="vk" />
  <constant name="EXTPrimitiveTopologyListRestartSpecVersion" namespace="vk" />
  <constant name="KHRFormatFeatureFlags2ExtensionName" namespace="vk" />
  <constant name="KHRFormatFeatureFlags2SpecVersion" namespace="vk" />
  <constant name="HUAWEISubpassShadingExtensionName" namespace="vk" />
  <constant name="HUAWEISubpassShadingSpecVersion" namespace="vk" />
  <constant name="HUAWEIInvocationMaskExtensionName" namespace="vk" />
  <constant name="HUAWEIInvocationMaskSpecVersion" namespace="vk" />
  <constant name="NVExternalMemoryRdmaExtensionName" namespace="vk" />
  <constant name="NVExternalMemoryRdmaSpecVersion" namespace="vk" />
  <constant name="EXTPipelinePropertiesExtensionName" namespace="vk" />
  <constant name="EXTPipelinePropertiesSpecVersion" namespace="vk" />
  <constant name="EXTFrameBoundaryExtensionName" namespace="vk" />
  <constant name="EXTFrameBoundarySpecVersion" namespace="vk" />
  <constant name="EXTMultisampledRenderToSingleSampledExtensionName" namespace="vk" />
  <constant name="EXTMultisampledRenderToSingleSampledSpecVersion" namespace="vk" />
  <constant name="EXTExtendedDynamicState2ExtensionName" namespace="vk" />
  <constant name="EXTExtendedDynamicState2SpecVersion" namespace="vk" />
  <constant name="EXTColorWriteEnableExtensionName" namespace="vk" />
  <constant name="EXTColorWriteEnableSpecVersion" namespace="vk" />
  <constant name="EXTPrimitivesGeneratedQueryExtensionName" namespace="vk" />
  <constant name="EXTPrimitivesGeneratedQuerySpecVersion" namespace="vk" />
  <constant name="KHRRayTracingMaintenance1ExtensionName" namespace="vk" />
  <constant name="KHRRayTracingMaintenance1SpecVersion" namespace="vk" />
  <constant name="EXTGlobalPriorityQueryExtensionName" namespace="vk" />
  <constant name="EXTGlobalPriorityQuerySpecVersion" namespace="vk" />
  <constant name="MaxGlobalPrioritySizeEXT" namespace="vk" />
  <constant name="EXTImageViewMinLodExtensionName" namespace="vk" />
  <constant name="EXTImageViewMinLodSpecVersion" namespace="vk" />
  <constant name="EXTMultiDrawExtensionName" namespace="vk" />
  <constant name="EXTMultiDrawSpecVersion" namespace="vk" />
  <constant name="EXTImage2DViewOf3DExtensionName" namespace="vk" />
  <constant name="EXTImage2DViewOf3DSpecVersion" namespace="vk" />
  <constant name="KHRPortabilityEnumerationExtensionName" namespace="vk" />
  <constant name="KHRPortabilityEnumerationSpecVersion" namespace="vk" />
  <constant name="EXTShaderTileImageExtensionName" namespace="vk" />
  <constant name="EXTShaderTileImageSpecVersion" namespace="vk" />
  <constant name="EXTOpacityMicromapExtensionName" namespace="vk" />
  <constant name="EXTOpacityMicromapSpecVersion" namespace="vk" />
  <constant name="EXTLoadStoreOpNoneExtensionName" namespace="vk" />
  <constant name="EXTLoadStoreOpNoneSpecVersion" namespace="vk" />
  <constant name="HUAWEIClusterCullingShaderExtensionName" namespace="vk" />
  <constant name="HUAWEIClusterCullingShaderSpecVersion" namespace="vk" />
  <constant name="EXTBorderColorSwizzleExtensionName" namespace="vk" />
  <constant name="EXTBorderColorSwizzleSpecVersion" namespace="vk" />
  <constant name="EXTPageableDeviceLocalMemoryExtensionName" namespace="vk" />
  <constant name="EXTPageableDeviceLocalMemorySpecVersion" namespace="vk" />
  <constant name="KHRMaintenance4ExtensionName" namespace="vk" />
  <constant name="KHRMaintenance4SpecVersion" namespace="vk" />
  <constant name="ARMShaderCorePropertiesExtensionName" namespace="vk" />
  <constant name="ARMShaderCorePropertiesSpecVersion" namespace="vk" />
  <constant name="ARMSchedulingControlsExtensionName" namespace="vk" />
  <constant name="ARMSchedulingControlsSpecVersion" namespace="vk" />
  <constant name="EXTImageSlicedViewOf3DExtensionName" namespace="vk" />
  <constant name="EXTImageSlicedViewOf3DSpecVersion" namespace="vk" />
  <constant name="Remaining3DSlicesEXT" namespace="vk" />
  <constant name="VALVEDescriptorSetHostMappingExtensionName" namespace="vk" />
  <constant name="VALVEDescriptorSetHostMappingSpecVersion" namespace="vk" />
  <constant name="EXTDepthClampZeroOneExtensionName" namespace="vk" />
  <constant name="EXTDepthClampZeroOneSpecVersion" namespace="vk" />
  <constant name="EXTNonSeamlessCubeMapExtensionName" namespace="vk" />
  <constant name="EXTNonSeamlessCubeMapSpecVersion" namespace="vk" />
  <constant name="ARMRenderPassStripedExtensionName" namespace="vk" />
  <constant name="ARMRenderPassStripedSpecVersion" namespace="vk" />
  <constant name="QCOMFragmentDensityMapOffsetExtensionName" namespace="vk" />
  <constant name="QCOMFragmentDensityMapOffsetSpecVersion" namespace="vk" />
  <constant name="NVCopyMemoryIndirectExtensionName" namespace="vk" />
  <constant name="NVCopyMemoryIndirectSpecVersion" namespace="vk" />
  <constant name="NVMemoryDecompressionExtensionName" namespace="vk" />
  <constant name="NVMemoryDecompressionSpecVersion" namespace="vk" />
  <constant name="NVDeviceGeneratedCommandsComputeExtensionName" namespace="vk" />
  <constant name="NVDeviceGeneratedCommandsComputeSpecVersion" namespace="vk" />
  <constant name="NVLinearColorAttachmentExtensionName" namespace="vk" />
  <constant name="NVLinearColorAttachmentSpecVersion" namespace="vk" />
  <constant name="GOOGLESurfacelessQueryExtensionName" namespace="vk" />
  <constant name="GOOGLESurfacelessQuerySpecVersion" namespace="vk" />
  <constant name="EXTImageCompressionControlSwapchainExtensionName" namespace="vk" />
  <constant name="EXTImageCompressionControlSwapchainSpecVersion" namespace="vk" />
  <constant name="QCOMImageProcessingExtensionName" namespace="vk" />
  <constant name="QCOMImageProcessingSpecVersion" namespace="vk" />
  <constant name="EXTNestedCommandBufferExtensionName" namespace="vk" />
  <constant name="EXTNestedCommandBufferSpecVersion" namespace="vk" />
  <constant name="EXTExternalMemoryAcquireUnmodifiedExtensionName" namespace="vk" />
  <constant name="EXTExternalMemoryAcquireUnmodifiedSpecVersion" namespace="vk" />
  <constant name="EXTExtendedDynamicState3ExtensionName" namespace="vk" />
  <constant name="EXTExtendedDynamicState3SpecVersion" namespace="vk" />
  <constant name="EXTSubpassMergeFeedbackExtensionName" namespace="vk" />
  <constant name="EXTSubpassMergeFeedbackSpecVersion" namespace="vk" />
  <constant name="LUNARGDirectDriverLoadingExtensionName" namespace="vk" />
  <constant name="LUNARGDirectDriverLoadingSpecVersion" namespace="vk" />
  <constant name="EXTShaderModuleIdentifierExtensionName" namespace="vk" />
  <constant name="EXTShaderModuleIdentifierSpecVersion" namespace="vk" />
  <constant name="MaxShaderModuleIdentifierSizeEXT" namespace="vk" />
  <constant name="EXTRasterizationOrderAttachmentAccessExtensionName" namespace="vk" />
  <constant name="EXTRasterizationOrderAttachmentAccessSpecVersion" namespace="vk" />
  <constant name="NVOpticalFlowExtensionName" namespace="vk" />
  <constant name="NVOpticalFlowSpecVersion" namespace="vk" />
  <constant name="EXTLegacyDitheringExtensionName" namespace="vk" />
  <constant name="EXTLegacyDitheringSpecVersion" namespace="vk" />
  <constant name="EXTPipelineProtectedAccessExtensionName" namespace="vk" />
  <constant name="EXTPipelineProtectedAccessSpecVersion" namespace="vk" />
  <constant name="KHRMaintenance5ExtensionName" namespace="vk" />
  <constant name="KHRMaintenance5SpecVersion" namespace="vk" />
  <constant name="KHRRayTracingPositionFetchExtensionName" namespace="vk" />
  <constant name="KHRRayTracingPositionFetchSpecVersion" namespace="vk" />
  <constant name="EXTShaderObjectExtensionName" namespace="vk" />
  <constant name="EXTShaderObjectSpecVersion" namespace="vk" />
  <constant name="QCOMTilePropertiesExtensionName" namespace="vk" />
  <constant name="QCOMTilePropertiesSpecVersion" namespace="vk" />
  <constant name="SECAmigoProfilingExtensionName" namespace="vk" />
  <constant name="SECAmigoProfilingSpecVersion" namespace="vk" />
  <constant name="QCOMMultiviewPerViewViewportsExtensionName" namespace="vk" />
  <constant name="QCOMMultiviewPerViewViewportsSpecVersion" namespace="vk" />
  <constant name="NVRayTracingInvocationReorderExtensionName" namespace="vk" />
  <constant name="NVRayTracingInvocationReorderSpecVersion" namespace="vk" />
  <constant name="NVExtendedSparseAddressSpaceExtensionName" namespace="vk" />
  <constant name="NVExtendedSparseAddressSpaceSpecVersion" namespace="vk" />
  <constant name="EXTMutableDescriptorTypeExtensionName" namespace="vk" />
  <constant name="EXTMutableDescriptorTypeSpecVersion" namespace="vk" />
  <constant name="EXTLayerSettingsExtensionName" namespace="vk" />
  <constant name="EXTLayerSettingsSpecVersion" namespace="vk" />
  <constant name="ARMShaderCoreBuiltinsExtensionName" namespace="vk" />
  <constant name="ARMShaderCoreBuiltinsSpecVersion" namespace="vk" />
  <constant name="EXTPipelineLibraryGroupHandlesExtensionName" namespace="vk" />
  <constant name="EXTPipelineLibraryGroupHandlesSpecVersion" namespace="vk" />
  <constant name="EXTDynamicRenderingUnusedAttachmentsExtensionName" namespace="vk" />
  <constant name="EXTDynamicRenderingUnusedAttachmentsSpecVersion" namespace="vk" />
  <constant name="NVLowLatency2ExtensionName" namespace="vk" />
  <constant name="NVLowLatency2SpecVersion" namespace="vk" />
  <constant name="KHRCooperativeMatrixExtensionName" namespace="vk" />
  <constant name="KHRCooperativeMatrixSpecVersion" namespace="vk" />
  <constant name="QCOMMultiviewPerViewRenderAreasExtensionName" namespace="vk" />
  <constant name="QCOMMultiviewPerViewRenderAreasSpecVersion" namespace="vk" />
  <constant name="KHRVideoMaintenance1ExtensionName" namespace="vk" />
  <constant name="KHRVideoMaintenance1SpecVersion" namespace="vk" />
  <constant name="NVPerStageDescriptorSetExtensionName" namespace="vk" />
  <constant name="NVPerStageDescriptorSetSpecVersion" namespace="vk" />
  <constant name="QCOMImageProcessing2ExtensionName" namespace="vk" />
  <constant name="QCOMImageProcessing2SpecVersion" namespace="vk" />
  <constant name="QCOMFilterCubicWeightsExtensionName" namespace="vk" />
  <constant name="QCOMFilterCubicWeightsSpecVersion" namespace="vk" />
  <constant name="QCOMYcbcrDegammaExtensionName" namespace="vk" />
  <constant name="QCOMYcbcrDegammaSpecVersion" namespace="vk" />
  <constant name="QCOMFilterCubicClampExtensionName" namespace="vk" />
  <constant name="QCOMFilterCubicClampSpecVersion" namespace="vk" />
  <constant name="EXTAttachmentFeedbackLoopDynamicStateExtensionName" namespace="vk" />
  <constant name="EXTAttachmentFeedbackLoopDynamicStateSpecVersion" namespace="vk" />
  <constant name="KHRVertexAttributeDivisorExtensionName" namespace="vk" />
  <constant name="KHRVertexAttributeDivisorSpecVersion" namespace="vk" />
  <constant name="MSFTLayeredDriverExtensionName" namespace="vk" />
  <constant name="MSFTLayeredDriverSpecVersion" namespace="vk" />
  <constant name="KHRCalibratedTimestampsExtensionName" namespace="vk" />
  <constant name="KHRCalibratedTimestampsSpecVersion" namespace="vk" />
  <constant name="KHRMaintenance6ExtensionName" namespace="vk" />
  <constant name="KHRMaintenance6SpecVersion" namespace="vk" />
  <constant name="NVDescriptorPoolOverallocationExtensionName" namespace="vk" />
  <constant name="NVDescriptorPoolOverallocationSpecVersion" namespace="vk" />
  <constant name="HeaderVersion" namespace="vk" />
  <function name="apiVersionMajor" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;" />
  <function name="apiVersionMinor" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;" />
  <function name="apiVersionPatch" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;" />
  <function name="apiVersionVariant" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;" />
  <function name="makeApiVersion" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;" />
  <function name="makeVersion" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;" />
  <function name="versionMajor" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;" />
  <function name="versionMinor" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;" />
  <function name="versionPatch" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;" />
  <constant name="ApiVersion" namespace="vk" />
  <constant name="ApiVersion10" namespace="vk" />
  <constant name="ApiVersion11" namespace="vk" />
  <constant name="ApiVersion12" namespace="vk" />
  <constant name="ApiVersion13" namespace="vk" />
  <constant name="HeaderVersionComplete" namespace="vk" />
  <struct name="AllocationCallbacks" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AllocationCallbacks">
      <argument name="pUserData_" type="void *" default_raw="{}" />
      <argument name="pfnAllocation_" type="PFN_vkAllocationFunction" default_raw="{}" />
      <argument name="pfnReallocation_" type="PFN_vkReallocationFunction" default_raw="{}" />
      <argument name="pfnFree_" type="PFN_vkFreeFunction" default_raw="{}" />
      <argument name="pfnInternalAllocation_" type="PFN_vkInternalAllocationNotification" default_raw="{}" />
      <argument name="pfnInternalFree_" type="PFN_vkInternalFreeNotification" default_raw="{}" />
    </constructor>
    <constructor name="AllocationCallbacks">
      <argument name="rhs" type="const AllocationCallbacks &amp;" />
    </constructor>
    <constructor name="AllocationCallbacks">
      <argument name="rhs" type="const VkAllocationCallbacks &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AllocationCallbacks &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAllocationCallbacks &amp;" />
    </method>
    <method name="setPUserData">
      <argument name="pUserData_" type="void *" />
    </method>
    <method name="setPfnAllocation">
      <argument name="pfnAllocation_" type="PFN_vkAllocationFunction" />
    </method>
    <method name="setPfnReallocation">
      <argument name="pfnReallocation_" type="PFN_vkReallocationFunction" />
    </method>
    <method name="setPfnFree">
      <argument name="pfnFree_" type="PFN_vkFreeFunction" />
    </method>
    <method name="setPfnInternalAllocation">
      <argument name="pfnInternalAllocation_" type="PFN_vkInternalAllocationNotification" />
    </method>
    <method name="setPfnInternalFree">
      <argument name="pfnInternalFree_" type="PFN_vkInternalFreeNotification" />
    </method>
    <conversion_function name="operator const VkAllocationCallbacks &amp;" />
    <conversion_function name="operator VkAllocationCallbacks &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AllocationCallbacks &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AllocationCallbacks &amp;" />
    </method>
    <field name="pUserData" />
    <field name="pfnAllocation" />
    <field name="pfnReallocation" />
    <field name="pfnFree" />
    <field name="pfnInternalAllocation" />
    <field name="pfnInternalFree" />
  </struct>
  <struct name="ApplicationInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ApplicationInfo">
      <argument name="pApplicationName_" type="const char *" default_raw="{}" />
      <argument name="applicationVersion_" type="uint32_t" default_raw="{}" />
      <argument name="pEngineName_" type="const char *" default_raw="{}" />
      <argument name="engineVersion_" type="uint32_t" default_raw="{}" />
      <argument name="apiVersion_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ApplicationInfo">
      <argument name="rhs" type="const ApplicationInfo &amp;" />
    </constructor>
    <constructor name="ApplicationInfo">
      <argument name="rhs" type="const VkApplicationInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ApplicationInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkApplicationInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPApplicationName">
      <argument name="pApplicationName_" type="const char *" />
    </method>
    <method name="setApplicationVersion">
      <argument name="applicationVersion_" type="uint32_t" />
    </method>
    <method name="setPEngineName">
      <argument name="pEngineName_" type="const char *" />
    </method>
    <method name="setEngineVersion">
      <argument name="engineVersion_" type="uint32_t" />
    </method>
    <method name="setApiVersion">
      <argument name="apiVersion_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkApplicationInfo &amp;" />
    <conversion_function name="operator VkApplicationInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ApplicationInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ApplicationInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pApplicationName" />
    <field name="applicationVersion" />
    <field name="pEngineName" />
    <field name="engineVersion" />
    <field name="apiVersion" />
  </struct>
  <struct name="AttachmentDescription" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AttachmentDescription">
      <argument name="flags_" type="vk::AttachmentDescriptionFlags" default_raw="{}" />
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="samples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="loadOp_" type="vk::AttachmentLoadOp" default_raw="VULKAN_HPP_NAMESPACE::AttachmentLoadOp::eLoad" />
      <argument name="storeOp_" type="vk::AttachmentStoreOp" default_raw="VULKAN_HPP_NAMESPACE::AttachmentStoreOp::eStore" />
      <argument name="stencilLoadOp_" type="vk::AttachmentLoadOp" default_raw="VULKAN_HPP_NAMESPACE::AttachmentLoadOp::eLoad" />
      <argument name="stencilStoreOp_" type="vk::AttachmentStoreOp" default_raw="VULKAN_HPP_NAMESPACE::AttachmentStoreOp::eStore" />
      <argument name="initialLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="finalLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
    </constructor>
    <constructor name="AttachmentDescription">
      <argument name="rhs" type="const AttachmentDescription &amp;" />
    </constructor>
    <constructor name="AttachmentDescription">
      <argument name="rhs" type="const VkAttachmentDescription &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AttachmentDescription &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAttachmentDescription &amp;" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::AttachmentDescriptionFlags" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <method name="setSamples">
      <argument name="samples_" type="vk::SampleCountFlagBits" />
    </method>
    <method name="setLoadOp">
      <argument name="loadOp_" type="vk::AttachmentLoadOp" />
    </method>
    <method name="setStoreOp">
      <argument name="storeOp_" type="vk::AttachmentStoreOp" />
    </method>
    <method name="setStencilLoadOp">
      <argument name="stencilLoadOp_" type="vk::AttachmentLoadOp" />
    </method>
    <method name="setStencilStoreOp">
      <argument name="stencilStoreOp_" type="vk::AttachmentStoreOp" />
    </method>
    <method name="setInitialLayout">
      <argument name="initialLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setFinalLayout">
      <argument name="finalLayout_" type="vk::ImageLayout" />
    </method>
    <conversion_function name="operator const VkAttachmentDescription &amp;" />
    <conversion_function name="operator VkAttachmentDescription &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AttachmentDescription &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AttachmentDescription &amp;" />
    </method>
    <field name="flags" />
    <field name="format" />
    <field name="samples" />
    <field name="loadOp" />
    <field name="storeOp" />
    <field name="stencilLoadOp" />
    <field name="stencilStoreOp" />
    <field name="initialLayout" />
    <field name="finalLayout" />
  </struct>
  <struct name="AttachmentReference" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AttachmentReference">
      <argument name="attachment_" type="uint32_t" default_raw="{}" />
      <argument name="layout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
    </constructor>
    <constructor name="AttachmentReference">
      <argument name="rhs" type="const AttachmentReference &amp;" />
    </constructor>
    <constructor name="AttachmentReference">
      <argument name="rhs" type="const VkAttachmentReference &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AttachmentReference &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAttachmentReference &amp;" />
    </method>
    <method name="setAttachment">
      <argument name="attachment_" type="uint32_t" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::ImageLayout" />
    </method>
    <conversion_function name="operator const VkAttachmentReference &amp;" />
    <conversion_function name="operator VkAttachmentReference &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AttachmentReference &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AttachmentReference &amp;" />
    </method>
    <field name="attachment" />
    <field name="layout" />
  </struct>
  <struct name="BaseInStructure" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BaseInStructure">
      <argument name="sType_" type="vk::StructureType" default_raw="VULKAN_HPP_NAMESPACE::StructureType::eApplicationInfo" />
      <argument name="pNext_" type="const struct vk::BaseInStructure *" default_raw="nullptr" />
    </constructor>
    <constructor name="BaseInStructure">
      <argument name="rhs" type="const BaseInStructure &amp;" />
    </constructor>
    <constructor name="BaseInStructure">
      <argument name="rhs" type="const VkBaseInStructure &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BaseInStructure &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBaseInStructure &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const struct vk::BaseInStructure *" />
    </method>
    <conversion_function name="operator const VkBaseInStructure &amp;" />
    <conversion_function name="operator VkBaseInStructure &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BaseInStructure &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BaseInStructure &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
  </struct>
  <struct name="BaseOutStructure" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BaseOutStructure">
      <argument name="sType_" type="vk::StructureType" default_raw="VULKAN_HPP_NAMESPACE::StructureType::eApplicationInfo" />
      <argument name="pNext_" type="struct vk::BaseOutStructure *" default_raw="nullptr" />
    </constructor>
    <constructor name="BaseOutStructure">
      <argument name="rhs" type="const BaseOutStructure &amp;" />
    </constructor>
    <constructor name="BaseOutStructure">
      <argument name="rhs" type="const VkBaseOutStructure &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BaseOutStructure &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBaseOutStructure &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="struct vk::BaseOutStructure *" />
    </method>
    <conversion_function name="operator const VkBaseOutStructure &amp;" />
    <conversion_function name="operator VkBaseOutStructure &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BaseOutStructure &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BaseOutStructure &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
  </struct>
  <struct name="BindSparseInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindSparseInfo">
      <argument name="waitSemaphoreCount_" type="uint32_t" default_raw="{}" />
      <argument name="pWaitSemaphores_" type="const vk::Semaphore *" default_raw="{}" />
      <argument name="bufferBindCount_" type="uint32_t" default_raw="{}" />
      <argument name="pBufferBinds_" type="const vk::SparseBufferMemoryBindInfo *" default_raw="{}" />
      <argument name="imageOpaqueBindCount_" type="uint32_t" default_raw="{}" />
      <argument name="pImageOpaqueBinds_" type="const vk::SparseImageOpaqueMemoryBindInfo *" default_raw="{}" />
      <argument name="imageBindCount_" type="uint32_t" default_raw="{}" />
      <argument name="pImageBinds_" type="const vk::SparseImageMemoryBindInfo *" default_raw="{}" />
      <argument name="signalSemaphoreCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSignalSemaphores_" type="const vk::Semaphore *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindSparseInfo">
      <argument name="rhs" type="const BindSparseInfo &amp;" />
    </constructor>
    <constructor name="BindSparseInfo">
      <argument name="rhs" type="const VkBindSparseInfo &amp;" />
    </constructor>
    <constructor name="BindSparseInfo">
      <argument name="waitSemaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" />
      <argument name="bufferBinds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseBufferMemoryBindInfo&gt; &amp;" default_raw="{}" />
      <argument name="imageOpaqueBinds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseImageOpaqueMemoryBindInfo&gt; &amp;" default_raw="{}" />
      <argument name="imageBinds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseImageMemoryBindInfo&gt; &amp;" default_raw="{}" />
      <argument name="signalSemaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindSparseInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindSparseInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setWaitSemaphoreCount">
      <argument name="waitSemaphoreCount_" type="uint32_t" />
    </method>
    <method name="setPWaitSemaphores">
      <argument name="pWaitSemaphores_" type="const vk::Semaphore *" />
    </method>
    <method name="setWaitSemaphores">
      <argument name="waitSemaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" />
    </method>
    <method name="setBufferBindCount">
      <argument name="bufferBindCount_" type="uint32_t" />
    </method>
    <method name="setPBufferBinds">
      <argument name="pBufferBinds_" type="const vk::SparseBufferMemoryBindInfo *" />
    </method>
    <method name="setBufferBinds">
      <argument name="bufferBinds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseBufferMemoryBindInfo&gt; &amp;" />
    </method>
    <method name="setImageOpaqueBindCount">
      <argument name="imageOpaqueBindCount_" type="uint32_t" />
    </method>
    <method name="setPImageOpaqueBinds">
      <argument name="pImageOpaqueBinds_" type="const vk::SparseImageOpaqueMemoryBindInfo *" />
    </method>
    <method name="setImageOpaqueBinds">
      <argument name="imageOpaqueBinds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseImageOpaqueMemoryBindInfo&gt; &amp;" />
    </method>
    <method name="setImageBindCount">
      <argument name="imageBindCount_" type="uint32_t" />
    </method>
    <method name="setPImageBinds">
      <argument name="pImageBinds_" type="const vk::SparseImageMemoryBindInfo *" />
    </method>
    <method name="setImageBinds">
      <argument name="imageBinds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseImageMemoryBindInfo&gt; &amp;" />
    </method>
    <method name="setSignalSemaphoreCount">
      <argument name="signalSemaphoreCount_" type="uint32_t" />
    </method>
    <method name="setPSignalSemaphores">
      <argument name="pSignalSemaphores_" type="const vk::Semaphore *" />
    </method>
    <method name="setSignalSemaphores">
      <argument name="signalSemaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkBindSparseInfo &amp;" />
    <conversion_function name="operator VkBindSparseInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindSparseInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindSparseInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="waitSemaphoreCount" />
    <field name="pWaitSemaphores" />
    <field name="bufferBindCount" />
    <field name="pBufferBinds" />
    <field name="imageOpaqueBindCount" />
    <field name="pImageOpaqueBinds" />
    <field name="imageBindCount" />
    <field name="pImageBinds" />
    <field name="signalSemaphoreCount" />
    <field name="pSignalSemaphores" />
  </struct>
  <struct name="BufferCopy" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferCopy">
      <argument name="srcOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="dstOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
    </constructor>
    <constructor name="BufferCopy">
      <argument name="rhs" type="const BufferCopy &amp;" />
    </constructor>
    <constructor name="BufferCopy">
      <argument name="rhs" type="const VkBufferCopy &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferCopy &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferCopy &amp;" />
    </method>
    <method name="setSrcOffset">
      <argument name="srcOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setDstOffset">
      <argument name="dstOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkBufferCopy &amp;" />
    <conversion_function name="operator VkBufferCopy &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferCopy &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferCopy &amp;" />
    </method>
    <field name="srcOffset" />
    <field name="dstOffset" />
    <field name="size" />
  </struct>
  <struct name="BufferCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferCreateInfo">
      <argument name="flags_" type="vk::BufferCreateFlags" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="usage_" type="vk::BufferUsageFlags" default_raw="{}" />
      <argument name="sharingMode_" type="vk::SharingMode" default_raw="VULKAN_HPP_NAMESPACE::SharingMode::eExclusive" />
      <argument name="queueFamilyIndexCount_" type="uint32_t" default_raw="{}" />
      <argument name="pQueueFamilyIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferCreateInfo">
      <argument name="rhs" type="const BufferCreateInfo &amp;" />
    </constructor>
    <constructor name="BufferCreateInfo">
      <argument name="rhs" type="const VkBufferCreateInfo &amp;" />
    </constructor>
    <constructor name="BufferCreateInfo">
      <argument name="flags_" type="vk::BufferCreateFlags" />
      <argument name="size_" type="vk::DeviceSize" />
      <argument name="usage_" type="vk::BufferUsageFlags" />
      <argument name="sharingMode_" type="vk::SharingMode" />
      <argument name="queueFamilyIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::BufferCreateFlags" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <method name="setUsage">
      <argument name="usage_" type="vk::BufferUsageFlags" />
    </method>
    <method name="setSharingMode">
      <argument name="sharingMode_" type="vk::SharingMode" />
    </method>
    <method name="setQueueFamilyIndexCount">
      <argument name="queueFamilyIndexCount_" type="uint32_t" />
    </method>
    <method name="setPQueueFamilyIndices">
      <argument name="pQueueFamilyIndices_" type="const uint32_t *" />
    </method>
    <method name="setQueueFamilyIndices">
      <argument name="queueFamilyIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkBufferCreateInfo &amp;" />
    <conversion_function name="operator VkBufferCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="size" />
    <field name="usage" />
    <field name="sharingMode" />
    <field name="queueFamilyIndexCount" />
    <field name="pQueueFamilyIndices" />
  </struct>
  <struct name="BufferImageCopy" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferImageCopy">
      <argument name="bufferOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="bufferRowLength_" type="uint32_t" default_raw="{}" />
      <argument name="bufferImageHeight_" type="uint32_t" default_raw="{}" />
      <argument name="imageSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="imageOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="imageExtent_" type="vk::Extent3D" default_raw="{}" />
    </constructor>
    <constructor name="BufferImageCopy">
      <argument name="rhs" type="const BufferImageCopy &amp;" />
    </constructor>
    <constructor name="BufferImageCopy">
      <argument name="rhs" type="const VkBufferImageCopy &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferImageCopy &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferImageCopy &amp;" />
    </method>
    <method name="setBufferOffset">
      <argument name="bufferOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setBufferRowLength">
      <argument name="bufferRowLength_" type="uint32_t" />
    </method>
    <method name="setBufferImageHeight">
      <argument name="bufferImageHeight_" type="uint32_t" />
    </method>
    <method name="setImageSubresource">
      <argument name="imageSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setImageOffset">
      <argument name="imageOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setImageExtent">
      <argument name="imageExtent_" type="const vk::Extent3D &amp;" />
    </method>
    <conversion_function name="operator const VkBufferImageCopy &amp;" />
    <conversion_function name="operator VkBufferImageCopy &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferImageCopy &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferImageCopy &amp;" />
    </method>
    <field name="bufferOffset" />
    <field name="bufferRowLength" />
    <field name="bufferImageHeight" />
    <field name="imageSubresource" />
    <field name="imageOffset" />
    <field name="imageExtent" />
  </struct>
  <struct name="BufferMemoryBarrier" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferMemoryBarrier">
      <argument name="srcAccessMask_" type="vk::AccessFlags" default_raw="{}" />
      <argument name="dstAccessMask_" type="vk::AccessFlags" default_raw="{}" />
      <argument name="srcQueueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="dstQueueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferMemoryBarrier">
      <argument name="rhs" type="const BufferMemoryBarrier &amp;" />
    </constructor>
    <constructor name="BufferMemoryBarrier">
      <argument name="rhs" type="const VkBufferMemoryBarrier &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferMemoryBarrier &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferMemoryBarrier &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcAccessMask">
      <argument name="srcAccessMask_" type="vk::AccessFlags" />
    </method>
    <method name="setDstAccessMask">
      <argument name="dstAccessMask_" type="vk::AccessFlags" />
    </method>
    <method name="setSrcQueueFamilyIndex">
      <argument name="srcQueueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setDstQueueFamilyIndex">
      <argument name="dstQueueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkBufferMemoryBarrier &amp;" />
    <conversion_function name="operator VkBufferMemoryBarrier &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferMemoryBarrier &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferMemoryBarrier &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcAccessMask" />
    <field name="dstAccessMask" />
    <field name="srcQueueFamilyIndex" />
    <field name="dstQueueFamilyIndex" />
    <field name="buffer" />
    <field name="offset" />
    <field name="size" />
  </struct>
  <struct name="BufferViewCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferViewCreateInfo">
      <argument name="flags_" type="vk::BufferViewCreateFlags" default_raw="{}" />
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="range_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferViewCreateInfo">
      <argument name="rhs" type="const BufferViewCreateInfo &amp;" />
    </constructor>
    <constructor name="BufferViewCreateInfo">
      <argument name="rhs" type="const VkBufferViewCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferViewCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferViewCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::BufferViewCreateFlags" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <method name="setRange">
      <argument name="range_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkBufferViewCreateInfo &amp;" />
    <conversion_function name="operator VkBufferViewCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferViewCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferViewCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="buffer" />
    <field name="format" />
    <field name="offset" />
    <field name="range" />
  </struct>
  <struct name="ClearAttachment" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ClearAttachment">
      <argument name="aspectMask_" type="vk::ImageAspectFlags" default_raw="{}" />
      <argument name="colorAttachment_" type="uint32_t" default_raw="{}" />
      <argument name="clearValue_" type="vk::ClearValue" default_raw="{}" />
    </constructor>
    <constructor name="ClearAttachment">
      <argument name="rhs" type="const ClearAttachment &amp;" />
    </constructor>
    <constructor name="ClearAttachment">
      <argument name="rhs" type="const VkClearAttachment &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ClearAttachment &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkClearAttachment &amp;" />
    </method>
    <method name="setAspectMask">
      <argument name="aspectMask_" type="vk::ImageAspectFlags" />
    </method>
    <method name="setColorAttachment">
      <argument name="colorAttachment_" type="uint32_t" />
    </method>
    <method name="setClearValue">
      <argument name="clearValue_" type="const vk::ClearValue &amp;" />
    </method>
    <conversion_function name="operator const VkClearAttachment &amp;" />
    <conversion_function name="operator VkClearAttachment &amp;" />
    <field name="aspectMask" />
    <field name="colorAttachment" />
    <field name="clearValue" />
  </struct>
  <union name="ClearColorValue" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ClearColorValue">
      <argument name="float32_" type="const std::array&lt;float, 4&gt; &amp;" default_raw="{}" />
    </constructor>
    <constructor name="ClearColorValue">
      <argument name="float32_0" type="float" />
      <argument name="float32_1" type="float" />
      <argument name="float32_2" type="float" />
      <argument name="float32_3" type="float" />
    </constructor>
    <constructor name="ClearColorValue">
      <argument name="int32_" type="const std::array&lt;int32_t, 4&gt; &amp;" />
    </constructor>
    <constructor name="ClearColorValue">
      <argument name="int32_0" type="int32_t" />
      <argument name="int32_1" type="int32_t" />
      <argument name="int32_2" type="int32_t" />
      <argument name="int32_3" type="int32_t" />
    </constructor>
    <constructor name="ClearColorValue">
      <argument name="uint32_" type="const std::array&lt;uint32_t, 4&gt; &amp;" />
    </constructor>
    <constructor name="ClearColorValue">
      <argument name="uint32_0" type="uint32_t" />
      <argument name="uint32_1" type="uint32_t" />
      <argument name="uint32_2" type="uint32_t" />
      <argument name="uint32_3" type="uint32_t" />
    </constructor>
    <method name="setFloat32">
      <argument name="float32_" type="std::array&lt;float, 4&gt;" />
    </method>
    <method name="setInt32">
      <argument name="int32_" type="std::array&lt;int32_t, 4&gt;" />
    </method>
    <method name="setUint32">
      <argument name="uint32_" type="std::array&lt;uint32_t, 4&gt;" />
    </method>
    <conversion_function name="operator const VkClearColorValue &amp;" />
    <conversion_function name="operator VkClearColorValue &amp;" />
    <field name="float32" />
    <field name="int32" />
    <field name="uint32" />
  </union>
  <struct name="ClearDepthStencilValue" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ClearDepthStencilValue">
      <argument name="depth_" type="float" default_raw="{}" />
      <argument name="stencil_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="ClearDepthStencilValue">
      <argument name="rhs" type="const ClearDepthStencilValue &amp;" />
    </constructor>
    <constructor name="ClearDepthStencilValue">
      <argument name="rhs" type="const VkClearDepthStencilValue &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ClearDepthStencilValue &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkClearDepthStencilValue &amp;" />
    </method>
    <method name="setDepth">
      <argument name="depth_" type="float" />
    </method>
    <method name="setStencil">
      <argument name="stencil_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkClearDepthStencilValue &amp;" />
    <conversion_function name="operator VkClearDepthStencilValue &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ClearDepthStencilValue &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ClearDepthStencilValue &amp;" />
    </method>
    <field name="depth" />
    <field name="stencil" />
  </struct>
  <struct name="ClearRect" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ClearRect">
      <argument name="rect_" type="vk::Rect2D" default_raw="{}" />
      <argument name="baseArrayLayer_" type="uint32_t" default_raw="{}" />
      <argument name="layerCount_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="ClearRect">
      <argument name="rhs" type="const ClearRect &amp;" />
    </constructor>
    <constructor name="ClearRect">
      <argument name="rhs" type="const VkClearRect &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ClearRect &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkClearRect &amp;" />
    </method>
    <method name="setRect">
      <argument name="rect_" type="const vk::Rect2D &amp;" />
    </method>
    <method name="setBaseArrayLayer">
      <argument name="baseArrayLayer_" type="uint32_t" />
    </method>
    <method name="setLayerCount">
      <argument name="layerCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkClearRect &amp;" />
    <conversion_function name="operator VkClearRect &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ClearRect &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ClearRect &amp;" />
    </method>
    <field name="rect" />
    <field name="baseArrayLayer" />
    <field name="layerCount" />
  </struct>
  <union name="ClearValue" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ClearValue">
      <argument name="color_" type="vk::ClearColorValue" default_raw="{}" />
    </constructor>
    <constructor name="ClearValue">
      <argument name="depthStencil_" type="vk::ClearDepthStencilValue" />
    </constructor>
    <method name="setColor">
      <argument name="color_" type="const vk::ClearColorValue &amp;" />
    </method>
    <method name="setDepthStencil">
      <argument name="depthStencil_" type="const vk::ClearDepthStencilValue &amp;" />
    </method>
    <conversion_function name="operator const VkClearValue &amp;" />
    <conversion_function name="operator VkClearValue &amp;" />
    <field name="color" />
    <field name="depthStencil" />
  </union>
  <struct name="CommandBufferAllocateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CommandBufferAllocateInfo">
      <argument name="commandPool_" type="vk::CommandPool" default_raw="{}" />
      <argument name="level_" type="vk::CommandBufferLevel" default_raw="VULKAN_HPP_NAMESPACE::CommandBufferLevel::ePrimary" />
      <argument name="commandBufferCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CommandBufferAllocateInfo">
      <argument name="rhs" type="const CommandBufferAllocateInfo &amp;" />
    </constructor>
    <constructor name="CommandBufferAllocateInfo">
      <argument name="rhs" type="const VkCommandBufferAllocateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CommandBufferAllocateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCommandBufferAllocateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setCommandPool">
      <argument name="commandPool_" type="vk::CommandPool" />
    </method>
    <method name="setLevel">
      <argument name="level_" type="vk::CommandBufferLevel" />
    </method>
    <method name="setCommandBufferCount">
      <argument name="commandBufferCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkCommandBufferAllocateInfo &amp;" />
    <conversion_function name="operator VkCommandBufferAllocateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CommandBufferAllocateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CommandBufferAllocateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="commandPool" />
    <field name="level" />
    <field name="commandBufferCount" />
  </struct>
  <struct name="CommandBufferBeginInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CommandBufferBeginInfo">
      <argument name="flags_" type="vk::CommandBufferUsageFlags" default_raw="{}" />
      <argument name="pInheritanceInfo_" type="const vk::CommandBufferInheritanceInfo *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CommandBufferBeginInfo">
      <argument name="rhs" type="const CommandBufferBeginInfo &amp;" />
    </constructor>
    <constructor name="CommandBufferBeginInfo">
      <argument name="rhs" type="const VkCommandBufferBeginInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CommandBufferBeginInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCommandBufferBeginInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::CommandBufferUsageFlags" />
    </method>
    <method name="setPInheritanceInfo">
      <argument name="pInheritanceInfo_" type="const vk::CommandBufferInheritanceInfo *" />
    </method>
    <conversion_function name="operator const VkCommandBufferBeginInfo &amp;" />
    <conversion_function name="operator VkCommandBufferBeginInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CommandBufferBeginInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CommandBufferBeginInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="pInheritanceInfo" />
  </struct>
  <struct name="CommandBufferInheritanceInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CommandBufferInheritanceInfo">
      <argument name="renderPass_" type="vk::RenderPass" default_raw="{}" />
      <argument name="subpass_" type="uint32_t" default_raw="{}" />
      <argument name="framebuffer_" type="vk::Framebuffer" default_raw="{}" />
      <argument name="occlusionQueryEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="queryFlags_" type="vk::QueryControlFlags" default_raw="{}" />
      <argument name="pipelineStatistics_" type="vk::QueryPipelineStatisticFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CommandBufferInheritanceInfo">
      <argument name="rhs" type="const CommandBufferInheritanceInfo &amp;" />
    </constructor>
    <constructor name="CommandBufferInheritanceInfo">
      <argument name="rhs" type="const VkCommandBufferInheritanceInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CommandBufferInheritanceInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCommandBufferInheritanceInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setRenderPass">
      <argument name="renderPass_" type="vk::RenderPass" />
    </method>
    <method name="setSubpass">
      <argument name="subpass_" type="uint32_t" />
    </method>
    <method name="setFramebuffer">
      <argument name="framebuffer_" type="vk::Framebuffer" />
    </method>
    <method name="setOcclusionQueryEnable">
      <argument name="occlusionQueryEnable_" type="vk::Bool32" />
    </method>
    <method name="setQueryFlags">
      <argument name="queryFlags_" type="vk::QueryControlFlags" />
    </method>
    <method name="setPipelineStatistics">
      <argument name="pipelineStatistics_" type="vk::QueryPipelineStatisticFlags" />
    </method>
    <conversion_function name="operator const VkCommandBufferInheritanceInfo &amp;" />
    <conversion_function name="operator VkCommandBufferInheritanceInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CommandBufferInheritanceInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CommandBufferInheritanceInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="renderPass" />
    <field name="subpass" />
    <field name="framebuffer" />
    <field name="occlusionQueryEnable" />
    <field name="queryFlags" />
    <field name="pipelineStatistics" />
  </struct>
  <struct name="CommandPoolCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CommandPoolCreateInfo">
      <argument name="flags_" type="vk::CommandPoolCreateFlags" default_raw="{}" />
      <argument name="queueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CommandPoolCreateInfo">
      <argument name="rhs" type="const CommandPoolCreateInfo &amp;" />
    </constructor>
    <constructor name="CommandPoolCreateInfo">
      <argument name="rhs" type="const VkCommandPoolCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CommandPoolCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCommandPoolCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::CommandPoolCreateFlags" />
    </method>
    <method name="setQueueFamilyIndex">
      <argument name="queueFamilyIndex_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkCommandPoolCreateInfo &amp;" />
    <conversion_function name="operator VkCommandPoolCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CommandPoolCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CommandPoolCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="queueFamilyIndex" />
  </struct>
  <struct name="ComponentMapping" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ComponentMapping">
      <argument name="r_" type="vk::ComponentSwizzle" default_raw="VULKAN_HPP_NAMESPACE::ComponentSwizzle::eIdentity" />
      <argument name="g_" type="vk::ComponentSwizzle" default_raw="VULKAN_HPP_NAMESPACE::ComponentSwizzle::eIdentity" />
      <argument name="b_" type="vk::ComponentSwizzle" default_raw="VULKAN_HPP_NAMESPACE::ComponentSwizzle::eIdentity" />
      <argument name="a_" type="vk::ComponentSwizzle" default_raw="VULKAN_HPP_NAMESPACE::ComponentSwizzle::eIdentity" />
    </constructor>
    <constructor name="ComponentMapping">
      <argument name="rhs" type="const ComponentMapping &amp;" />
    </constructor>
    <constructor name="ComponentMapping">
      <argument name="rhs" type="const VkComponentMapping &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ComponentMapping &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkComponentMapping &amp;" />
    </method>
    <method name="setR">
      <argument name="r_" type="vk::ComponentSwizzle" />
    </method>
    <method name="setG">
      <argument name="g_" type="vk::ComponentSwizzle" />
    </method>
    <method name="setB">
      <argument name="b_" type="vk::ComponentSwizzle" />
    </method>
    <method name="setA">
      <argument name="a_" type="vk::ComponentSwizzle" />
    </method>
    <conversion_function name="operator const VkComponentMapping &amp;" />
    <conversion_function name="operator VkComponentMapping &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ComponentMapping &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ComponentMapping &amp;" />
    </method>
    <field name="r" />
    <field name="g" />
    <field name="b" />
    <field name="a" />
  </struct>
  <struct name="ComputePipelineCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ComputePipelineCreateInfo">
      <argument name="flags_" type="vk::PipelineCreateFlags" default_raw="{}" />
      <argument name="stage_" type="vk::PipelineShaderStageCreateInfo" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="basePipelineHandle_" type="vk::Pipeline" default_raw="{}" />
      <argument name="basePipelineIndex_" type="int32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ComputePipelineCreateInfo">
      <argument name="rhs" type="const ComputePipelineCreateInfo &amp;" />
    </constructor>
    <constructor name="ComputePipelineCreateInfo">
      <argument name="rhs" type="const VkComputePipelineCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ComputePipelineCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkComputePipelineCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineCreateFlags" />
    </method>
    <method name="setStage">
      <argument name="stage_" type="const vk::PipelineShaderStageCreateInfo &amp;" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::PipelineLayout" />
    </method>
    <method name="setBasePipelineHandle">
      <argument name="basePipelineHandle_" type="vk::Pipeline" />
    </method>
    <method name="setBasePipelineIndex">
      <argument name="basePipelineIndex_" type="int32_t" />
    </method>
    <conversion_function name="operator const VkComputePipelineCreateInfo &amp;" />
    <conversion_function name="operator VkComputePipelineCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ComputePipelineCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ComputePipelineCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="stage" />
    <field name="layout" />
    <field name="basePipelineHandle" />
    <field name="basePipelineIndex" />
  </struct>
  <struct name="CopyDescriptorSet" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyDescriptorSet">
      <argument name="srcSet_" type="vk::DescriptorSet" default_raw="{}" />
      <argument name="srcBinding_" type="uint32_t" default_raw="{}" />
      <argument name="srcArrayElement_" type="uint32_t" default_raw="{}" />
      <argument name="dstSet_" type="vk::DescriptorSet" default_raw="{}" />
      <argument name="dstBinding_" type="uint32_t" default_raw="{}" />
      <argument name="dstArrayElement_" type="uint32_t" default_raw="{}" />
      <argument name="descriptorCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyDescriptorSet">
      <argument name="rhs" type="const CopyDescriptorSet &amp;" />
    </constructor>
    <constructor name="CopyDescriptorSet">
      <argument name="rhs" type="const VkCopyDescriptorSet &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyDescriptorSet &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyDescriptorSet &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcSet">
      <argument name="srcSet_" type="vk::DescriptorSet" />
    </method>
    <method name="setSrcBinding">
      <argument name="srcBinding_" type="uint32_t" />
    </method>
    <method name="setSrcArrayElement">
      <argument name="srcArrayElement_" type="uint32_t" />
    </method>
    <method name="setDstSet">
      <argument name="dstSet_" type="vk::DescriptorSet" />
    </method>
    <method name="setDstBinding">
      <argument name="dstBinding_" type="uint32_t" />
    </method>
    <method name="setDstArrayElement">
      <argument name="dstArrayElement_" type="uint32_t" />
    </method>
    <method name="setDescriptorCount">
      <argument name="descriptorCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkCopyDescriptorSet &amp;" />
    <conversion_function name="operator VkCopyDescriptorSet &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyDescriptorSet &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyDescriptorSet &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcSet" />
    <field name="srcBinding" />
    <field name="srcArrayElement" />
    <field name="dstSet" />
    <field name="dstBinding" />
    <field name="dstArrayElement" />
    <field name="descriptorCount" />
  </struct>
  <struct name="DescriptorBufferInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorBufferInfo">
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="range_" type="vk::DeviceSize" default_raw="{}" />
    </constructor>
    <constructor name="DescriptorBufferInfo">
      <argument name="rhs" type="const DescriptorBufferInfo &amp;" />
    </constructor>
    <constructor name="DescriptorBufferInfo">
      <argument name="rhs" type="const VkDescriptorBufferInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorBufferInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorBufferInfo &amp;" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <method name="setRange">
      <argument name="range_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkDescriptorBufferInfo &amp;" />
    <conversion_function name="operator VkDescriptorBufferInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorBufferInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorBufferInfo &amp;" />
    </method>
    <field name="buffer" />
    <field name="offset" />
    <field name="range" />
  </struct>
  <struct name="DescriptorImageInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorImageInfo">
      <argument name="sampler_" type="vk::Sampler" default_raw="{}" />
      <argument name="imageView_" type="vk::ImageView" default_raw="{}" />
      <argument name="imageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
    </constructor>
    <constructor name="DescriptorImageInfo">
      <argument name="rhs" type="const DescriptorImageInfo &amp;" />
    </constructor>
    <constructor name="DescriptorImageInfo">
      <argument name="rhs" type="const VkDescriptorImageInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorImageInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorImageInfo &amp;" />
    </method>
    <method name="setSampler">
      <argument name="sampler_" type="vk::Sampler" />
    </method>
    <method name="setImageView">
      <argument name="imageView_" type="vk::ImageView" />
    </method>
    <method name="setImageLayout">
      <argument name="imageLayout_" type="vk::ImageLayout" />
    </method>
    <conversion_function name="operator const VkDescriptorImageInfo &amp;" />
    <conversion_function name="operator VkDescriptorImageInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorImageInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorImageInfo &amp;" />
    </method>
    <field name="sampler" />
    <field name="imageView" />
    <field name="imageLayout" />
  </struct>
  <struct name="DescriptorPoolCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorPoolCreateInfo">
      <argument name="flags_" type="vk::DescriptorPoolCreateFlags" default_raw="{}" />
      <argument name="maxSets_" type="uint32_t" default_raw="{}" />
      <argument name="poolSizeCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPoolSizes_" type="const vk::DescriptorPoolSize *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorPoolCreateInfo">
      <argument name="rhs" type="const DescriptorPoolCreateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorPoolCreateInfo">
      <argument name="rhs" type="const VkDescriptorPoolCreateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorPoolCreateInfo">
      <argument name="flags_" type="vk::DescriptorPoolCreateFlags" />
      <argument name="maxSets_" type="uint32_t" />
      <argument name="poolSizes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorPoolSize&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorPoolCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorPoolCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DescriptorPoolCreateFlags" />
    </method>
    <method name="setMaxSets">
      <argument name="maxSets_" type="uint32_t" />
    </method>
    <method name="setPoolSizeCount">
      <argument name="poolSizeCount_" type="uint32_t" />
    </method>
    <method name="setPPoolSizes">
      <argument name="pPoolSizes_" type="const vk::DescriptorPoolSize *" />
    </method>
    <method name="setPoolSizes">
      <argument name="poolSizes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorPoolSize&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDescriptorPoolCreateInfo &amp;" />
    <conversion_function name="operator VkDescriptorPoolCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorPoolCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorPoolCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="maxSets" />
    <field name="poolSizeCount" />
    <field name="pPoolSizes" />
  </struct>
  <struct name="DescriptorPoolSize" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorPoolSize">
      <argument name="type_" type="vk::DescriptorType" default_raw="VULKAN_HPP_NAMESPACE::DescriptorType::eSampler" />
      <argument name="descriptorCount_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="DescriptorPoolSize">
      <argument name="rhs" type="const DescriptorPoolSize &amp;" />
    </constructor>
    <constructor name="DescriptorPoolSize">
      <argument name="rhs" type="const VkDescriptorPoolSize &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorPoolSize &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorPoolSize &amp;" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::DescriptorType" />
    </method>
    <method name="setDescriptorCount">
      <argument name="descriptorCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDescriptorPoolSize &amp;" />
    <conversion_function name="operator VkDescriptorPoolSize &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorPoolSize &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorPoolSize &amp;" />
    </method>
    <field name="type" />
    <field name="descriptorCount" />
  </struct>
  <struct name="DescriptorSetAllocateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorSetAllocateInfo">
      <argument name="descriptorPool_" type="vk::DescriptorPool" default_raw="{}" />
      <argument name="descriptorSetCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSetLayouts_" type="const vk::DescriptorSetLayout *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorSetAllocateInfo">
      <argument name="rhs" type="const DescriptorSetAllocateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorSetAllocateInfo">
      <argument name="rhs" type="const VkDescriptorSetAllocateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorSetAllocateInfo">
      <argument name="descriptorPool_" type="vk::DescriptorPool" />
      <argument name="setLayouts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorSetLayout&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorSetAllocateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorSetAllocateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDescriptorPool">
      <argument name="descriptorPool_" type="vk::DescriptorPool" />
    </method>
    <method name="setDescriptorSetCount">
      <argument name="descriptorSetCount_" type="uint32_t" />
    </method>
    <method name="setPSetLayouts">
      <argument name="pSetLayouts_" type="const vk::DescriptorSetLayout *" />
    </method>
    <method name="setSetLayouts">
      <argument name="setLayouts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorSetLayout&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDescriptorSetAllocateInfo &amp;" />
    <conversion_function name="operator VkDescriptorSetAllocateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorSetAllocateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorSetAllocateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="descriptorPool" />
    <field name="descriptorSetCount" />
    <field name="pSetLayouts" />
  </struct>
  <struct name="DescriptorSetLayoutBinding" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorSetLayoutBinding">
      <argument name="binding_" type="uint32_t" default_raw="{}" />
      <argument name="descriptorType_" type="vk::DescriptorType" default_raw="VULKAN_HPP_NAMESPACE::DescriptorType::eSampler" />
      <argument name="descriptorCount_" type="uint32_t" default_raw="{}" />
      <argument name="stageFlags_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="pImmutableSamplers_" type="const vk::Sampler *" default_raw="{}" />
    </constructor>
    <constructor name="DescriptorSetLayoutBinding">
      <argument name="rhs" type="const DescriptorSetLayoutBinding &amp;" />
    </constructor>
    <constructor name="DescriptorSetLayoutBinding">
      <argument name="rhs" type="const VkDescriptorSetLayoutBinding &amp;" />
    </constructor>
    <constructor name="DescriptorSetLayoutBinding">
      <argument name="binding_" type="uint32_t" />
      <argument name="descriptorType_" type="vk::DescriptorType" />
      <argument name="stageFlags_" type="vk::ShaderStageFlags" />
      <argument name="immutableSamplers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Sampler&gt; &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorSetLayoutBinding &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorSetLayoutBinding &amp;" />
    </method>
    <method name="setBinding">
      <argument name="binding_" type="uint32_t" />
    </method>
    <method name="setDescriptorType">
      <argument name="descriptorType_" type="vk::DescriptorType" />
    </method>
    <method name="setDescriptorCount">
      <argument name="descriptorCount_" type="uint32_t" />
    </method>
    <method name="setStageFlags">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" />
    </method>
    <method name="setPImmutableSamplers">
      <argument name="pImmutableSamplers_" type="const vk::Sampler *" />
    </method>
    <method name="setImmutableSamplers">
      <argument name="immutableSamplers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Sampler&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDescriptorSetLayoutBinding &amp;" />
    <conversion_function name="operator VkDescriptorSetLayoutBinding &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorSetLayoutBinding &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorSetLayoutBinding &amp;" />
    </method>
    <field name="binding" />
    <field name="descriptorType" />
    <field name="descriptorCount" />
    <field name="stageFlags" />
    <field name="pImmutableSamplers" />
  </struct>
  <struct name="DescriptorSetLayoutCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorSetLayoutCreateInfo">
      <argument name="flags_" type="vk::DescriptorSetLayoutCreateFlags" default_raw="{}" />
      <argument name="bindingCount_" type="uint32_t" default_raw="{}" />
      <argument name="pBindings_" type="const vk::DescriptorSetLayoutBinding *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorSetLayoutCreateInfo">
      <argument name="rhs" type="const DescriptorSetLayoutCreateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorSetLayoutCreateInfo">
      <argument name="rhs" type="const VkDescriptorSetLayoutCreateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorSetLayoutCreateInfo">
      <argument name="flags_" type="vk::DescriptorSetLayoutCreateFlags" />
      <argument name="bindings_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorSetLayoutBinding&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorSetLayoutCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorSetLayoutCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DescriptorSetLayoutCreateFlags" />
    </method>
    <method name="setBindingCount">
      <argument name="bindingCount_" type="uint32_t" />
    </method>
    <method name="setPBindings">
      <argument name="pBindings_" type="const vk::DescriptorSetLayoutBinding *" />
    </method>
    <method name="setBindings">
      <argument name="bindings_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorSetLayoutBinding&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDescriptorSetLayoutCreateInfo &amp;" />
    <conversion_function name="operator VkDescriptorSetLayoutCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorSetLayoutCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorSetLayoutCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="bindingCount" />
    <field name="pBindings" />
  </struct>
  <struct name="DeviceCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceCreateInfo">
      <argument name="flags_" type="vk::DeviceCreateFlags" default_raw="{}" />
      <argument name="queueCreateInfoCount_" type="uint32_t" default_raw="{}" />
      <argument name="pQueueCreateInfos_" type="const vk::DeviceQueueCreateInfo *" default_raw="{}" />
      <argument name="enabledLayerCount_" type="uint32_t" default_raw="{}" />
      <argument name="ppEnabledLayerNames_" type="const char *const *" default_raw="{}" />
      <argument name="enabledExtensionCount_" type="uint32_t" default_raw="{}" />
      <argument name="ppEnabledExtensionNames_" type="const char *const *" default_raw="{}" />
      <argument name="pEnabledFeatures_" type="const vk::PhysicalDeviceFeatures *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceCreateInfo">
      <argument name="rhs" type="const DeviceCreateInfo &amp;" />
    </constructor>
    <constructor name="DeviceCreateInfo">
      <argument name="rhs" type="const VkDeviceCreateInfo &amp;" />
    </constructor>
    <constructor name="DeviceCreateInfo">
      <argument name="flags_" type="vk::DeviceCreateFlags" />
      <argument name="queueCreateInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DeviceQueueCreateInfo&gt; &amp;" />
      <argument name="pEnabledLayerNames_" type="const vk::ArrayProxyNoTemporaries&lt;const char *const&gt; &amp;" default_raw="{}" />
      <argument name="pEnabledExtensionNames_" type="const vk::ArrayProxyNoTemporaries&lt;const char *const&gt; &amp;" default_raw="{}" />
      <argument name="pEnabledFeatures_" type="const vk::PhysicalDeviceFeatures *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DeviceCreateFlags" />
    </method>
    <method name="setQueueCreateInfoCount">
      <argument name="queueCreateInfoCount_" type="uint32_t" />
    </method>
    <method name="setPQueueCreateInfos">
      <argument name="pQueueCreateInfos_" type="const vk::DeviceQueueCreateInfo *" />
    </method>
    <method name="setQueueCreateInfos">
      <argument name="queueCreateInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DeviceQueueCreateInfo&gt; &amp;" />
    </method>
    <method name="setEnabledLayerCount">
      <argument name="enabledLayerCount_" type="uint32_t" />
    </method>
    <method name="setPpEnabledLayerNames">
      <argument name="ppEnabledLayerNames_" type="const char *const *" />
    </method>
    <method name="setPEnabledLayerNames">
      <argument name="pEnabledLayerNames_" type="const vk::ArrayProxyNoTemporaries&lt;const char *const&gt; &amp;" />
    </method>
    <method name="setEnabledExtensionCount">
      <argument name="enabledExtensionCount_" type="uint32_t" />
    </method>
    <method name="setPpEnabledExtensionNames">
      <argument name="ppEnabledExtensionNames_" type="const char *const *" />
    </method>
    <method name="setPEnabledExtensionNames">
      <argument name="pEnabledExtensionNames_" type="const vk::ArrayProxyNoTemporaries&lt;const char *const&gt; &amp;" />
    </method>
    <method name="setPEnabledFeatures">
      <argument name="pEnabledFeatures_" type="const vk::PhysicalDeviceFeatures *" />
    </method>
    <conversion_function name="operator const VkDeviceCreateInfo &amp;" />
    <conversion_function name="operator VkDeviceCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="queueCreateInfoCount" />
    <field name="pQueueCreateInfos" />
    <field name="enabledLayerCount" />
    <field name="ppEnabledLayerNames" />
    <field name="enabledExtensionCount" />
    <field name="ppEnabledExtensionNames" />
    <field name="pEnabledFeatures" />
  </struct>
  <struct name="DeviceQueueCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceQueueCreateInfo">
      <argument name="flags_" type="vk::DeviceQueueCreateFlags" default_raw="{}" />
      <argument name="queueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="queueCount_" type="uint32_t" default_raw="{}" />
      <argument name="pQueuePriorities_" type="const float *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceQueueCreateInfo">
      <argument name="rhs" type="const DeviceQueueCreateInfo &amp;" />
    </constructor>
    <constructor name="DeviceQueueCreateInfo">
      <argument name="rhs" type="const VkDeviceQueueCreateInfo &amp;" />
    </constructor>
    <constructor name="DeviceQueueCreateInfo">
      <argument name="flags_" type="vk::DeviceQueueCreateFlags" />
      <argument name="queueFamilyIndex_" type="uint32_t" />
      <argument name="queuePriorities_" type="const vk::ArrayProxyNoTemporaries&lt;const float&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceQueueCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceQueueCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DeviceQueueCreateFlags" />
    </method>
    <method name="setQueueFamilyIndex">
      <argument name="queueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setQueueCount">
      <argument name="queueCount_" type="uint32_t" />
    </method>
    <method name="setPQueuePriorities">
      <argument name="pQueuePriorities_" type="const float *" />
    </method>
    <method name="setQueuePriorities">
      <argument name="queuePriorities_" type="const vk::ArrayProxyNoTemporaries&lt;const float&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDeviceQueueCreateInfo &amp;" />
    <conversion_function name="operator VkDeviceQueueCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceQueueCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceQueueCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="queueFamilyIndex" />
    <field name="queueCount" />
    <field name="pQueuePriorities" />
  </struct>
  <struct name="DispatchIndirectCommand" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DispatchIndirectCommand">
      <argument name="x_" type="uint32_t" default_raw="{}" />
      <argument name="y_" type="uint32_t" default_raw="{}" />
      <argument name="z_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="DispatchIndirectCommand">
      <argument name="rhs" type="const DispatchIndirectCommand &amp;" />
    </constructor>
    <constructor name="DispatchIndirectCommand">
      <argument name="rhs" type="const VkDispatchIndirectCommand &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DispatchIndirectCommand &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDispatchIndirectCommand &amp;" />
    </method>
    <method name="setX">
      <argument name="x_" type="uint32_t" />
    </method>
    <method name="setY">
      <argument name="y_" type="uint32_t" />
    </method>
    <method name="setZ">
      <argument name="z_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDispatchIndirectCommand &amp;" />
    <conversion_function name="operator VkDispatchIndirectCommand &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DispatchIndirectCommand &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DispatchIndirectCommand &amp;" />
    </method>
    <field name="x" />
    <field name="y" />
    <field name="z" />
  </struct>
  <struct name="DrawIndexedIndirectCommand" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DrawIndexedIndirectCommand">
      <argument name="indexCount_" type="uint32_t" default_raw="{}" />
      <argument name="instanceCount_" type="uint32_t" default_raw="{}" />
      <argument name="firstIndex_" type="uint32_t" default_raw="{}" />
      <argument name="vertexOffset_" type="int32_t" default_raw="{}" />
      <argument name="firstInstance_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="DrawIndexedIndirectCommand">
      <argument name="rhs" type="const DrawIndexedIndirectCommand &amp;" />
    </constructor>
    <constructor name="DrawIndexedIndirectCommand">
      <argument name="rhs" type="const VkDrawIndexedIndirectCommand &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DrawIndexedIndirectCommand &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDrawIndexedIndirectCommand &amp;" />
    </method>
    <method name="setIndexCount">
      <argument name="indexCount_" type="uint32_t" />
    </method>
    <method name="setInstanceCount">
      <argument name="instanceCount_" type="uint32_t" />
    </method>
    <method name="setFirstIndex">
      <argument name="firstIndex_" type="uint32_t" />
    </method>
    <method name="setVertexOffset">
      <argument name="vertexOffset_" type="int32_t" />
    </method>
    <method name="setFirstInstance">
      <argument name="firstInstance_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDrawIndexedIndirectCommand &amp;" />
    <conversion_function name="operator VkDrawIndexedIndirectCommand &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DrawIndexedIndirectCommand &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DrawIndexedIndirectCommand &amp;" />
    </method>
    <field name="indexCount" />
    <field name="instanceCount" />
    <field name="firstIndex" />
    <field name="vertexOffset" />
    <field name="firstInstance" />
  </struct>
  <struct name="DrawIndirectCommand" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DrawIndirectCommand">
      <argument name="vertexCount_" type="uint32_t" default_raw="{}" />
      <argument name="instanceCount_" type="uint32_t" default_raw="{}" />
      <argument name="firstVertex_" type="uint32_t" default_raw="{}" />
      <argument name="firstInstance_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="DrawIndirectCommand">
      <argument name="rhs" type="const DrawIndirectCommand &amp;" />
    </constructor>
    <constructor name="DrawIndirectCommand">
      <argument name="rhs" type="const VkDrawIndirectCommand &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DrawIndirectCommand &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDrawIndirectCommand &amp;" />
    </method>
    <method name="setVertexCount">
      <argument name="vertexCount_" type="uint32_t" />
    </method>
    <method name="setInstanceCount">
      <argument name="instanceCount_" type="uint32_t" />
    </method>
    <method name="setFirstVertex">
      <argument name="firstVertex_" type="uint32_t" />
    </method>
    <method name="setFirstInstance">
      <argument name="firstInstance_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDrawIndirectCommand &amp;" />
    <conversion_function name="operator VkDrawIndirectCommand &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DrawIndirectCommand &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DrawIndirectCommand &amp;" />
    </method>
    <field name="vertexCount" />
    <field name="instanceCount" />
    <field name="firstVertex" />
    <field name="firstInstance" />
  </struct>
  <struct name="EventCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="EventCreateInfo">
      <argument name="flags_" type="vk::EventCreateFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="EventCreateInfo">
      <argument name="rhs" type="const EventCreateInfo &amp;" />
    </constructor>
    <constructor name="EventCreateInfo">
      <argument name="rhs" type="const VkEventCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const EventCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkEventCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::EventCreateFlags" />
    </method>
    <conversion_function name="operator const VkEventCreateInfo &amp;" />
    <conversion_function name="operator VkEventCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const EventCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const EventCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
  </struct>
  <struct name="ExtensionProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExtensionProperties">
      <argument name="extensionName_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="specVersion_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="ExtensionProperties">
      <argument name="rhs" type="const ExtensionProperties &amp;" />
    </constructor>
    <constructor name="ExtensionProperties">
      <argument name="rhs" type="const VkExtensionProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExtensionProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExtensionProperties &amp;" />
    </method>
    <conversion_function name="operator const VkExtensionProperties &amp;" />
    <conversion_function name="operator VkExtensionProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExtensionProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExtensionProperties &amp;" />
    </method>
    <field name="extensionName" />
    <field name="specVersion" />
  </struct>
  <struct name="Extent2D" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="Extent2D">
      <argument name="width_" type="uint32_t" default_raw="{}" />
      <argument name="height_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="Extent2D">
      <argument name="rhs" type="const Extent2D &amp;" />
    </constructor>
    <constructor name="Extent2D">
      <argument name="rhs" type="const VkExtent2D &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const Extent2D &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExtent2D &amp;" />
    </method>
    <method name="setWidth">
      <argument name="width_" type="uint32_t" />
    </method>
    <method name="setHeight">
      <argument name="height_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkExtent2D &amp;" />
    <conversion_function name="operator VkExtent2D &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const Extent2D &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Extent2D &amp;" />
    </method>
    <field name="width" />
    <field name="height" />
  </struct>
  <struct name="Extent3D" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="Extent3D">
      <argument name="width_" type="uint32_t" default_raw="{}" />
      <argument name="height_" type="uint32_t" default_raw="{}" />
      <argument name="depth_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="Extent3D">
      <argument name="rhs" type="const Extent3D &amp;" />
    </constructor>
    <constructor name="Extent3D">
      <argument name="rhs" type="const VkExtent3D &amp;" />
    </constructor>
    <constructor name="Extent3D">
      <argument name="extent2D" type="const Extent2D &amp;" />
      <argument name="depth_" type="uint32_t" default_raw="{}" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const Extent3D &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExtent3D &amp;" />
    </method>
    <method name="setWidth">
      <argument name="width_" type="uint32_t" />
    </method>
    <method name="setHeight">
      <argument name="height_" type="uint32_t" />
    </method>
    <method name="setDepth">
      <argument name="depth_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkExtent3D &amp;" />
    <conversion_function name="operator VkExtent3D &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const Extent3D &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Extent3D &amp;" />
    </method>
    <field name="width" />
    <field name="height" />
    <field name="depth" />
  </struct>
  <struct name="FenceCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FenceCreateInfo">
      <argument name="flags_" type="vk::FenceCreateFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="FenceCreateInfo">
      <argument name="rhs" type="const FenceCreateInfo &amp;" />
    </constructor>
    <constructor name="FenceCreateInfo">
      <argument name="rhs" type="const VkFenceCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const FenceCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFenceCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::FenceCreateFlags" />
    </method>
    <conversion_function name="operator const VkFenceCreateInfo &amp;" />
    <conversion_function name="operator VkFenceCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FenceCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FenceCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
  </struct>
  <struct name="FormatProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FormatProperties">
      <argument name="linearTilingFeatures_" type="vk::FormatFeatureFlags" default_raw="{}" />
      <argument name="optimalTilingFeatures_" type="vk::FormatFeatureFlags" default_raw="{}" />
      <argument name="bufferFeatures_" type="vk::FormatFeatureFlags" default_raw="{}" />
    </constructor>
    <constructor name="FormatProperties">
      <argument name="rhs" type="const FormatProperties &amp;" />
    </constructor>
    <constructor name="FormatProperties">
      <argument name="rhs" type="const VkFormatProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const FormatProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFormatProperties &amp;" />
    </method>
    <conversion_function name="operator const VkFormatProperties &amp;" />
    <conversion_function name="operator VkFormatProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FormatProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FormatProperties &amp;" />
    </method>
    <field name="linearTilingFeatures" />
    <field name="optimalTilingFeatures" />
    <field name="bufferFeatures" />
  </struct>
  <struct name="FramebufferCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FramebufferCreateInfo">
      <argument name="flags_" type="vk::FramebufferCreateFlags" default_raw="{}" />
      <argument name="renderPass_" type="vk::RenderPass" default_raw="{}" />
      <argument name="attachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pAttachments_" type="const vk::ImageView *" default_raw="{}" />
      <argument name="width_" type="uint32_t" default_raw="{}" />
      <argument name="height_" type="uint32_t" default_raw="{}" />
      <argument name="layers_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="FramebufferCreateInfo">
      <argument name="rhs" type="const FramebufferCreateInfo &amp;" />
    </constructor>
    <constructor name="FramebufferCreateInfo">
      <argument name="rhs" type="const VkFramebufferCreateInfo &amp;" />
    </constructor>
    <constructor name="FramebufferCreateInfo">
      <argument name="flags_" type="vk::FramebufferCreateFlags" />
      <argument name="renderPass_" type="vk::RenderPass" />
      <argument name="attachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageView&gt; &amp;" />
      <argument name="width_" type="uint32_t" default_raw="{}" />
      <argument name="height_" type="uint32_t" default_raw="{}" />
      <argument name="layers_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const FramebufferCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFramebufferCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::FramebufferCreateFlags" />
    </method>
    <method name="setRenderPass">
      <argument name="renderPass_" type="vk::RenderPass" />
    </method>
    <method name="setAttachmentCount">
      <argument name="attachmentCount_" type="uint32_t" />
    </method>
    <method name="setPAttachments">
      <argument name="pAttachments_" type="const vk::ImageView *" />
    </method>
    <method name="setAttachments">
      <argument name="attachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageView&gt; &amp;" />
    </method>
    <method name="setWidth">
      <argument name="width_" type="uint32_t" />
    </method>
    <method name="setHeight">
      <argument name="height_" type="uint32_t" />
    </method>
    <method name="setLayers">
      <argument name="layers_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkFramebufferCreateInfo &amp;" />
    <conversion_function name="operator VkFramebufferCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FramebufferCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FramebufferCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="renderPass" />
    <field name="attachmentCount" />
    <field name="pAttachments" />
    <field name="width" />
    <field name="height" />
    <field name="layers" />
  </struct>
  <struct name="GraphicsPipelineCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="GraphicsPipelineCreateInfo">
      <argument name="flags_" type="vk::PipelineCreateFlags" default_raw="{}" />
      <argument name="stageCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStages_" type="const vk::PipelineShaderStageCreateInfo *" default_raw="{}" />
      <argument name="pVertexInputState_" type="const vk::PipelineVertexInputStateCreateInfo *" default_raw="{}" />
      <argument name="pInputAssemblyState_" type="const vk::PipelineInputAssemblyStateCreateInfo *" default_raw="{}" />
      <argument name="pTessellationState_" type="const vk::PipelineTessellationStateCreateInfo *" default_raw="{}" />
      <argument name="pViewportState_" type="const vk::PipelineViewportStateCreateInfo *" default_raw="{}" />
      <argument name="pRasterizationState_" type="const vk::PipelineRasterizationStateCreateInfo *" default_raw="{}" />
      <argument name="pMultisampleState_" type="const vk::PipelineMultisampleStateCreateInfo *" default_raw="{}" />
      <argument name="pDepthStencilState_" type="const vk::PipelineDepthStencilStateCreateInfo *" default_raw="{}" />
      <argument name="pColorBlendState_" type="const vk::PipelineColorBlendStateCreateInfo *" default_raw="{}" />
      <argument name="pDynamicState_" type="const vk::PipelineDynamicStateCreateInfo *" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="renderPass_" type="vk::RenderPass" default_raw="{}" />
      <argument name="subpass_" type="uint32_t" default_raw="{}" />
      <argument name="basePipelineHandle_" type="vk::Pipeline" default_raw="{}" />
      <argument name="basePipelineIndex_" type="int32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="GraphicsPipelineCreateInfo">
      <argument name="rhs" type="const GraphicsPipelineCreateInfo &amp;" />
    </constructor>
    <constructor name="GraphicsPipelineCreateInfo">
      <argument name="rhs" type="const VkGraphicsPipelineCreateInfo &amp;" />
    </constructor>
    <constructor name="GraphicsPipelineCreateInfo">
      <argument name="flags_" type="vk::PipelineCreateFlags" />
      <argument name="stages_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineShaderStageCreateInfo&gt; &amp;" />
      <argument name="pVertexInputState_" type="const vk::PipelineVertexInputStateCreateInfo *" default_raw="{}" />
      <argument name="pInputAssemblyState_" type="const vk::PipelineInputAssemblyStateCreateInfo *" default_raw="{}" />
      <argument name="pTessellationState_" type="const vk::PipelineTessellationStateCreateInfo *" default_raw="{}" />
      <argument name="pViewportState_" type="const vk::PipelineViewportStateCreateInfo *" default_raw="{}" />
      <argument name="pRasterizationState_" type="const vk::PipelineRasterizationStateCreateInfo *" default_raw="{}" />
      <argument name="pMultisampleState_" type="const vk::PipelineMultisampleStateCreateInfo *" default_raw="{}" />
      <argument name="pDepthStencilState_" type="const vk::PipelineDepthStencilStateCreateInfo *" default_raw="{}" />
      <argument name="pColorBlendState_" type="const vk::PipelineColorBlendStateCreateInfo *" default_raw="{}" />
      <argument name="pDynamicState_" type="const vk::PipelineDynamicStateCreateInfo *" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="renderPass_" type="vk::RenderPass" default_raw="{}" />
      <argument name="subpass_" type="uint32_t" default_raw="{}" />
      <argument name="basePipelineHandle_" type="vk::Pipeline" default_raw="{}" />
      <argument name="basePipelineIndex_" type="int32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const GraphicsPipelineCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkGraphicsPipelineCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineCreateFlags" />
    </method>
    <method name="setStageCount">
      <argument name="stageCount_" type="uint32_t" />
    </method>
    <method name="setPStages">
      <argument name="pStages_" type="const vk::PipelineShaderStageCreateInfo *" />
    </method>
    <method name="setStages">
      <argument name="stages_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineShaderStageCreateInfo&gt; &amp;" />
    </method>
    <method name="setPVertexInputState">
      <argument name="pVertexInputState_" type="const vk::PipelineVertexInputStateCreateInfo *" />
    </method>
    <method name="setPInputAssemblyState">
      <argument name="pInputAssemblyState_" type="const vk::PipelineInputAssemblyStateCreateInfo *" />
    </method>
    <method name="setPTessellationState">
      <argument name="pTessellationState_" type="const vk::PipelineTessellationStateCreateInfo *" />
    </method>
    <method name="setPViewportState">
      <argument name="pViewportState_" type="const vk::PipelineViewportStateCreateInfo *" />
    </method>
    <method name="setPRasterizationState">
      <argument name="pRasterizationState_" type="const vk::PipelineRasterizationStateCreateInfo *" />
    </method>
    <method name="setPMultisampleState">
      <argument name="pMultisampleState_" type="const vk::PipelineMultisampleStateCreateInfo *" />
    </method>
    <method name="setPDepthStencilState">
      <argument name="pDepthStencilState_" type="const vk::PipelineDepthStencilStateCreateInfo *" />
    </method>
    <method name="setPColorBlendState">
      <argument name="pColorBlendState_" type="const vk::PipelineColorBlendStateCreateInfo *" />
    </method>
    <method name="setPDynamicState">
      <argument name="pDynamicState_" type="const vk::PipelineDynamicStateCreateInfo *" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::PipelineLayout" />
    </method>
    <method name="setRenderPass">
      <argument name="renderPass_" type="vk::RenderPass" />
    </method>
    <method name="setSubpass">
      <argument name="subpass_" type="uint32_t" />
    </method>
    <method name="setBasePipelineHandle">
      <argument name="basePipelineHandle_" type="vk::Pipeline" />
    </method>
    <method name="setBasePipelineIndex">
      <argument name="basePipelineIndex_" type="int32_t" />
    </method>
    <conversion_function name="operator const VkGraphicsPipelineCreateInfo &amp;" />
    <conversion_function name="operator VkGraphicsPipelineCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const GraphicsPipelineCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const GraphicsPipelineCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="stageCount" />
    <field name="pStages" />
    <field name="pVertexInputState" />
    <field name="pInputAssemblyState" />
    <field name="pTessellationState" />
    <field name="pViewportState" />
    <field name="pRasterizationState" />
    <field name="pMultisampleState" />
    <field name="pDepthStencilState" />
    <field name="pColorBlendState" />
    <field name="pDynamicState" />
    <field name="layout" />
    <field name="renderPass" />
    <field name="subpass" />
    <field name="basePipelineHandle" />
    <field name="basePipelineIndex" />
  </struct>
  <struct name="ImageBlit" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageBlit">
      <argument name="srcSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="srcOffsets_" type="const std::array&lt;vk::Offset3D, 2&gt; &amp;" default_raw="{}" />
      <argument name="dstSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="dstOffsets_" type="const std::array&lt;vk::Offset3D, 2&gt; &amp;" default_raw="{}" />
    </constructor>
    <constructor name="ImageBlit">
      <argument name="rhs" type="const ImageBlit &amp;" />
    </constructor>
    <constructor name="ImageBlit">
      <argument name="rhs" type="const VkImageBlit &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageBlit &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageBlit &amp;" />
    </method>
    <method name="setSrcSubresource">
      <argument name="srcSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setSrcOffsets">
      <argument name="srcOffsets_" type="const std::array&lt;vk::Offset3D, 2&gt; &amp;" />
    </method>
    <method name="setDstSubresource">
      <argument name="dstSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setDstOffsets">
      <argument name="dstOffsets_" type="const std::array&lt;vk::Offset3D, 2&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkImageBlit &amp;" />
    <conversion_function name="operator VkImageBlit &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageBlit &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageBlit &amp;" />
    </method>
    <field name="srcSubresource" />
    <field name="srcOffsets" />
    <field name="dstSubresource" />
    <field name="dstOffsets" />
  </struct>
  <struct name="ImageCopy" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageCopy">
      <argument name="srcSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="srcOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="dstSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="dstOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="extent_" type="vk::Extent3D" default_raw="{}" />
    </constructor>
    <constructor name="ImageCopy">
      <argument name="rhs" type="const ImageCopy &amp;" />
    </constructor>
    <constructor name="ImageCopy">
      <argument name="rhs" type="const VkImageCopy &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageCopy &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageCopy &amp;" />
    </method>
    <method name="setSrcSubresource">
      <argument name="srcSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setSrcOffset">
      <argument name="srcOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setDstSubresource">
      <argument name="dstSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setDstOffset">
      <argument name="dstOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setExtent">
      <argument name="extent_" type="const vk::Extent3D &amp;" />
    </method>
    <conversion_function name="operator const VkImageCopy &amp;" />
    <conversion_function name="operator VkImageCopy &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageCopy &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageCopy &amp;" />
    </method>
    <field name="srcSubresource" />
    <field name="srcOffset" />
    <field name="dstSubresource" />
    <field name="dstOffset" />
    <field name="extent" />
  </struct>
  <struct name="ImageCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageCreateInfo">
      <argument name="flags_" type="vk::ImageCreateFlags" default_raw="{}" />
      <argument name="imageType_" type="vk::ImageType" default_raw="VULKAN_HPP_NAMESPACE::ImageType::e1D" />
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="extent_" type="vk::Extent3D" default_raw="{}" />
      <argument name="mipLevels_" type="uint32_t" default_raw="{}" />
      <argument name="arrayLayers_" type="uint32_t" default_raw="{}" />
      <argument name="samples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="tiling_" type="vk::ImageTiling" default_raw="VULKAN_HPP_NAMESPACE::ImageTiling::eOptimal" />
      <argument name="usage_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="sharingMode_" type="vk::SharingMode" default_raw="VULKAN_HPP_NAMESPACE::SharingMode::eExclusive" />
      <argument name="queueFamilyIndexCount_" type="uint32_t" default_raw="{}" />
      <argument name="pQueueFamilyIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="initialLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageCreateInfo">
      <argument name="rhs" type="const ImageCreateInfo &amp;" />
    </constructor>
    <constructor name="ImageCreateInfo">
      <argument name="rhs" type="const VkImageCreateInfo &amp;" />
    </constructor>
    <constructor name="ImageCreateInfo">
      <argument name="flags_" type="vk::ImageCreateFlags" />
      <argument name="imageType_" type="vk::ImageType" />
      <argument name="format_" type="vk::Format" />
      <argument name="extent_" type="vk::Extent3D" />
      <argument name="mipLevels_" type="uint32_t" />
      <argument name="arrayLayers_" type="uint32_t" />
      <argument name="samples_" type="vk::SampleCountFlagBits" />
      <argument name="tiling_" type="vk::ImageTiling" />
      <argument name="usage_" type="vk::ImageUsageFlags" />
      <argument name="sharingMode_" type="vk::SharingMode" />
      <argument name="queueFamilyIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="initialLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::ImageCreateFlags" />
    </method>
    <method name="setImageType">
      <argument name="imageType_" type="vk::ImageType" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <method name="setExtent">
      <argument name="extent_" type="const vk::Extent3D &amp;" />
    </method>
    <method name="setMipLevels">
      <argument name="mipLevels_" type="uint32_t" />
    </method>
    <method name="setArrayLayers">
      <argument name="arrayLayers_" type="uint32_t" />
    </method>
    <method name="setSamples">
      <argument name="samples_" type="vk::SampleCountFlagBits" />
    </method>
    <method name="setTiling">
      <argument name="tiling_" type="vk::ImageTiling" />
    </method>
    <method name="setUsage">
      <argument name="usage_" type="vk::ImageUsageFlags" />
    </method>
    <method name="setSharingMode">
      <argument name="sharingMode_" type="vk::SharingMode" />
    </method>
    <method name="setQueueFamilyIndexCount">
      <argument name="queueFamilyIndexCount_" type="uint32_t" />
    </method>
    <method name="setPQueueFamilyIndices">
      <argument name="pQueueFamilyIndices_" type="const uint32_t *" />
    </method>
    <method name="setQueueFamilyIndices">
      <argument name="queueFamilyIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <method name="setInitialLayout">
      <argument name="initialLayout_" type="vk::ImageLayout" />
    </method>
    <conversion_function name="operator const VkImageCreateInfo &amp;" />
    <conversion_function name="operator VkImageCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="imageType" />
    <field name="format" />
    <field name="extent" />
    <field name="mipLevels" />
    <field name="arrayLayers" />
    <field name="samples" />
    <field name="tiling" />
    <field name="usage" />
    <field name="sharingMode" />
    <field name="queueFamilyIndexCount" />
    <field name="pQueueFamilyIndices" />
    <field name="initialLayout" />
  </struct>
  <struct name="ImageFormatProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageFormatProperties">
      <argument name="maxExtent_" type="vk::Extent3D" default_raw="{}" />
      <argument name="maxMipLevels_" type="uint32_t" default_raw="{}" />
      <argument name="maxArrayLayers_" type="uint32_t" default_raw="{}" />
      <argument name="sampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="maxResourceSize_" type="vk::DeviceSize" default_raw="{}" />
    </constructor>
    <constructor name="ImageFormatProperties">
      <argument name="rhs" type="const ImageFormatProperties &amp;" />
    </constructor>
    <constructor name="ImageFormatProperties">
      <argument name="rhs" type="const VkImageFormatProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageFormatProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageFormatProperties &amp;" />
    </method>
    <conversion_function name="operator const VkImageFormatProperties &amp;" />
    <conversion_function name="operator VkImageFormatProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageFormatProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageFormatProperties &amp;" />
    </method>
    <field name="maxExtent" />
    <field name="maxMipLevels" />
    <field name="maxArrayLayers" />
    <field name="sampleCounts" />
    <field name="maxResourceSize" />
  </struct>
  <struct name="ImageMemoryBarrier" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageMemoryBarrier">
      <argument name="srcAccessMask_" type="vk::AccessFlags" default_raw="{}" />
      <argument name="dstAccessMask_" type="vk::AccessFlags" default_raw="{}" />
      <argument name="oldLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="newLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="srcQueueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="dstQueueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="subresourceRange_" type="vk::ImageSubresourceRange" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageMemoryBarrier">
      <argument name="rhs" type="const ImageMemoryBarrier &amp;" />
    </constructor>
    <constructor name="ImageMemoryBarrier">
      <argument name="rhs" type="const VkImageMemoryBarrier &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageMemoryBarrier &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageMemoryBarrier &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcAccessMask">
      <argument name="srcAccessMask_" type="vk::AccessFlags" />
    </method>
    <method name="setDstAccessMask">
      <argument name="dstAccessMask_" type="vk::AccessFlags" />
    </method>
    <method name="setOldLayout">
      <argument name="oldLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setNewLayout">
      <argument name="newLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setSrcQueueFamilyIndex">
      <argument name="srcQueueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setDstQueueFamilyIndex">
      <argument name="dstQueueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <method name="setSubresourceRange">
      <argument name="subresourceRange_" type="const vk::ImageSubresourceRange &amp;" />
    </method>
    <conversion_function name="operator const VkImageMemoryBarrier &amp;" />
    <conversion_function name="operator VkImageMemoryBarrier &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageMemoryBarrier &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageMemoryBarrier &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcAccessMask" />
    <field name="dstAccessMask" />
    <field name="oldLayout" />
    <field name="newLayout" />
    <field name="srcQueueFamilyIndex" />
    <field name="dstQueueFamilyIndex" />
    <field name="image" />
    <field name="subresourceRange" />
  </struct>
  <struct name="ImageResolve" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageResolve">
      <argument name="srcSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="srcOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="dstSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="dstOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="extent_" type="vk::Extent3D" default_raw="{}" />
    </constructor>
    <constructor name="ImageResolve">
      <argument name="rhs" type="const ImageResolve &amp;" />
    </constructor>
    <constructor name="ImageResolve">
      <argument name="rhs" type="const VkImageResolve &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageResolve &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageResolve &amp;" />
    </method>
    <method name="setSrcSubresource">
      <argument name="srcSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setSrcOffset">
      <argument name="srcOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setDstSubresource">
      <argument name="dstSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setDstOffset">
      <argument name="dstOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setExtent">
      <argument name="extent_" type="const vk::Extent3D &amp;" />
    </method>
    <conversion_function name="operator const VkImageResolve &amp;" />
    <conversion_function name="operator VkImageResolve &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageResolve &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageResolve &amp;" />
    </method>
    <field name="srcSubresource" />
    <field name="srcOffset" />
    <field name="dstSubresource" />
    <field name="dstOffset" />
    <field name="extent" />
  </struct>
  <struct name="ImageSubresource" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageSubresource">
      <argument name="aspectMask_" type="vk::ImageAspectFlags" default_raw="{}" />
      <argument name="mipLevel_" type="uint32_t" default_raw="{}" />
      <argument name="arrayLayer_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="ImageSubresource">
      <argument name="rhs" type="const ImageSubresource &amp;" />
    </constructor>
    <constructor name="ImageSubresource">
      <argument name="rhs" type="const VkImageSubresource &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageSubresource &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageSubresource &amp;" />
    </method>
    <method name="setAspectMask">
      <argument name="aspectMask_" type="vk::ImageAspectFlags" />
    </method>
    <method name="setMipLevel">
      <argument name="mipLevel_" type="uint32_t" />
    </method>
    <method name="setArrayLayer">
      <argument name="arrayLayer_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkImageSubresource &amp;" />
    <conversion_function name="operator VkImageSubresource &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageSubresource &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageSubresource &amp;" />
    </method>
    <field name="aspectMask" />
    <field name="mipLevel" />
    <field name="arrayLayer" />
  </struct>
  <struct name="ImageSubresourceLayers" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageSubresourceLayers">
      <argument name="aspectMask_" type="vk::ImageAspectFlags" default_raw="{}" />
      <argument name="mipLevel_" type="uint32_t" default_raw="{}" />
      <argument name="baseArrayLayer_" type="uint32_t" default_raw="{}" />
      <argument name="layerCount_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="ImageSubresourceLayers">
      <argument name="rhs" type="const ImageSubresourceLayers &amp;" />
    </constructor>
    <constructor name="ImageSubresourceLayers">
      <argument name="rhs" type="const VkImageSubresourceLayers &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageSubresourceLayers &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageSubresourceLayers &amp;" />
    </method>
    <method name="setAspectMask">
      <argument name="aspectMask_" type="vk::ImageAspectFlags" />
    </method>
    <method name="setMipLevel">
      <argument name="mipLevel_" type="uint32_t" />
    </method>
    <method name="setBaseArrayLayer">
      <argument name="baseArrayLayer_" type="uint32_t" />
    </method>
    <method name="setLayerCount">
      <argument name="layerCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkImageSubresourceLayers &amp;" />
    <conversion_function name="operator VkImageSubresourceLayers &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageSubresourceLayers &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageSubresourceLayers &amp;" />
    </method>
    <field name="aspectMask" />
    <field name="mipLevel" />
    <field name="baseArrayLayer" />
    <field name="layerCount" />
  </struct>
  <struct name="ImageSubresourceRange" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageSubresourceRange">
      <argument name="aspectMask_" type="vk::ImageAspectFlags" default_raw="{}" />
      <argument name="baseMipLevel_" type="uint32_t" default_raw="{}" />
      <argument name="levelCount_" type="uint32_t" default_raw="{}" />
      <argument name="baseArrayLayer_" type="uint32_t" default_raw="{}" />
      <argument name="layerCount_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="ImageSubresourceRange">
      <argument name="rhs" type="const ImageSubresourceRange &amp;" />
    </constructor>
    <constructor name="ImageSubresourceRange">
      <argument name="rhs" type="const VkImageSubresourceRange &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageSubresourceRange &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageSubresourceRange &amp;" />
    </method>
    <method name="setAspectMask">
      <argument name="aspectMask_" type="vk::ImageAspectFlags" />
    </method>
    <method name="setBaseMipLevel">
      <argument name="baseMipLevel_" type="uint32_t" />
    </method>
    <method name="setLevelCount">
      <argument name="levelCount_" type="uint32_t" />
    </method>
    <method name="setBaseArrayLayer">
      <argument name="baseArrayLayer_" type="uint32_t" />
    </method>
    <method name="setLayerCount">
      <argument name="layerCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkImageSubresourceRange &amp;" />
    <conversion_function name="operator VkImageSubresourceRange &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageSubresourceRange &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageSubresourceRange &amp;" />
    </method>
    <field name="aspectMask" />
    <field name="baseMipLevel" />
    <field name="levelCount" />
    <field name="baseArrayLayer" />
    <field name="layerCount" />
  </struct>
  <struct name="ImageViewCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageViewCreateInfo">
      <argument name="flags_" type="vk::ImageViewCreateFlags" default_raw="{}" />
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="viewType_" type="vk::ImageViewType" default_raw="VULKAN_HPP_NAMESPACE::ImageViewType::e1D" />
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="components_" type="vk::ComponentMapping" default_raw="{}" />
      <argument name="subresourceRange_" type="vk::ImageSubresourceRange" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageViewCreateInfo">
      <argument name="rhs" type="const ImageViewCreateInfo &amp;" />
    </constructor>
    <constructor name="ImageViewCreateInfo">
      <argument name="rhs" type="const VkImageViewCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageViewCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageViewCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::ImageViewCreateFlags" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <method name="setViewType">
      <argument name="viewType_" type="vk::ImageViewType" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <method name="setComponents">
      <argument name="components_" type="const vk::ComponentMapping &amp;" />
    </method>
    <method name="setSubresourceRange">
      <argument name="subresourceRange_" type="const vk::ImageSubresourceRange &amp;" />
    </method>
    <conversion_function name="operator const VkImageViewCreateInfo &amp;" />
    <conversion_function name="operator VkImageViewCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageViewCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageViewCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="image" />
    <field name="viewType" />
    <field name="format" />
    <field name="components" />
    <field name="subresourceRange" />
  </struct>
  <struct name="InstanceCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="InstanceCreateInfo">
      <argument name="flags_" type="vk::InstanceCreateFlags" default_raw="{}" />
      <argument name="pApplicationInfo_" type="const vk::ApplicationInfo *" default_raw="{}" />
      <argument name="enabledLayerCount_" type="uint32_t" default_raw="{}" />
      <argument name="ppEnabledLayerNames_" type="const char *const *" default_raw="{}" />
      <argument name="enabledExtensionCount_" type="uint32_t" default_raw="{}" />
      <argument name="ppEnabledExtensionNames_" type="const char *const *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="InstanceCreateInfo">
      <argument name="rhs" type="const InstanceCreateInfo &amp;" />
    </constructor>
    <constructor name="InstanceCreateInfo">
      <argument name="rhs" type="const VkInstanceCreateInfo &amp;" />
    </constructor>
    <constructor name="InstanceCreateInfo">
      <argument name="flags_" type="vk::InstanceCreateFlags" />
      <argument name="pApplicationInfo_" type="const vk::ApplicationInfo *" />
      <argument name="pEnabledLayerNames_" type="const vk::ArrayProxyNoTemporaries&lt;const char *const&gt; &amp;" />
      <argument name="pEnabledExtensionNames_" type="const vk::ArrayProxyNoTemporaries&lt;const char *const&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const InstanceCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkInstanceCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::InstanceCreateFlags" />
    </method>
    <method name="setPApplicationInfo">
      <argument name="pApplicationInfo_" type="const vk::ApplicationInfo *" />
    </method>
    <method name="setEnabledLayerCount">
      <argument name="enabledLayerCount_" type="uint32_t" />
    </method>
    <method name="setPpEnabledLayerNames">
      <argument name="ppEnabledLayerNames_" type="const char *const *" />
    </method>
    <method name="setPEnabledLayerNames">
      <argument name="pEnabledLayerNames_" type="const vk::ArrayProxyNoTemporaries&lt;const char *const&gt; &amp;" />
    </method>
    <method name="setEnabledExtensionCount">
      <argument name="enabledExtensionCount_" type="uint32_t" />
    </method>
    <method name="setPpEnabledExtensionNames">
      <argument name="ppEnabledExtensionNames_" type="const char *const *" />
    </method>
    <method name="setPEnabledExtensionNames">
      <argument name="pEnabledExtensionNames_" type="const vk::ArrayProxyNoTemporaries&lt;const char *const&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkInstanceCreateInfo &amp;" />
    <conversion_function name="operator VkInstanceCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const InstanceCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const InstanceCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="pApplicationInfo" />
    <field name="enabledLayerCount" />
    <field name="ppEnabledLayerNames" />
    <field name="enabledExtensionCount" />
    <field name="ppEnabledExtensionNames" />
  </struct>
  <struct name="LayerProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="LayerProperties">
      <argument name="layerName_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="specVersion_" type="uint32_t" default_raw="{}" />
      <argument name="implementationVersion_" type="uint32_t" default_raw="{}" />
      <argument name="description_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
    </constructor>
    <constructor name="LayerProperties">
      <argument name="rhs" type="const LayerProperties &amp;" />
    </constructor>
    <constructor name="LayerProperties">
      <argument name="rhs" type="const VkLayerProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const LayerProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkLayerProperties &amp;" />
    </method>
    <conversion_function name="operator const VkLayerProperties &amp;" />
    <conversion_function name="operator VkLayerProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const LayerProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const LayerProperties &amp;" />
    </method>
    <field name="layerName" />
    <field name="specVersion" />
    <field name="implementationVersion" />
    <field name="description" />
  </struct>
  <struct name="MappedMemoryRange" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MappedMemoryRange">
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MappedMemoryRange">
      <argument name="rhs" type="const MappedMemoryRange &amp;" />
    </constructor>
    <constructor name="MappedMemoryRange">
      <argument name="rhs" type="const VkMappedMemoryRange &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MappedMemoryRange &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMappedMemoryRange &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkMappedMemoryRange &amp;" />
    <conversion_function name="operator VkMappedMemoryRange &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MappedMemoryRange &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MappedMemoryRange &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memory" />
    <field name="offset" />
    <field name="size" />
  </struct>
  <struct name="MemoryAllocateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryAllocateInfo">
      <argument name="allocationSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="memoryTypeIndex_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryAllocateInfo">
      <argument name="rhs" type="const MemoryAllocateInfo &amp;" />
    </constructor>
    <constructor name="MemoryAllocateInfo">
      <argument name="rhs" type="const VkMemoryAllocateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryAllocateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryAllocateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAllocationSize">
      <argument name="allocationSize_" type="vk::DeviceSize" />
    </method>
    <method name="setMemoryTypeIndex">
      <argument name="memoryTypeIndex_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkMemoryAllocateInfo &amp;" />
    <conversion_function name="operator VkMemoryAllocateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryAllocateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryAllocateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="allocationSize" />
    <field name="memoryTypeIndex" />
  </struct>
  <struct name="MemoryBarrier" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryBarrier">
      <argument name="srcAccessMask_" type="vk::AccessFlags" default_raw="{}" />
      <argument name="dstAccessMask_" type="vk::AccessFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryBarrier">
      <argument name="rhs" type="const MemoryBarrier &amp;" />
    </constructor>
    <constructor name="MemoryBarrier">
      <argument name="rhs" type="const VkMemoryBarrier &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryBarrier &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryBarrier &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcAccessMask">
      <argument name="srcAccessMask_" type="vk::AccessFlags" />
    </method>
    <method name="setDstAccessMask">
      <argument name="dstAccessMask_" type="vk::AccessFlags" />
    </method>
    <conversion_function name="operator const VkMemoryBarrier &amp;" />
    <conversion_function name="operator VkMemoryBarrier &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryBarrier &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryBarrier &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcAccessMask" />
    <field name="dstAccessMask" />
  </struct>
  <struct name="MemoryHeap" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryHeap">
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="flags_" type="vk::MemoryHeapFlags" default_raw="{}" />
    </constructor>
    <constructor name="MemoryHeap">
      <argument name="rhs" type="const MemoryHeap &amp;" />
    </constructor>
    <constructor name="MemoryHeap">
      <argument name="rhs" type="const VkMemoryHeap &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryHeap &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryHeap &amp;" />
    </method>
    <conversion_function name="operator const VkMemoryHeap &amp;" />
    <conversion_function name="operator VkMemoryHeap &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryHeap &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryHeap &amp;" />
    </method>
    <field name="size" />
    <field name="flags" />
  </struct>
  <struct name="MemoryRequirements" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryRequirements">
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="alignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="memoryTypeBits_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="MemoryRequirements">
      <argument name="rhs" type="const MemoryRequirements &amp;" />
    </constructor>
    <constructor name="MemoryRequirements">
      <argument name="rhs" type="const VkMemoryRequirements &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryRequirements &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryRequirements &amp;" />
    </method>
    <conversion_function name="operator const VkMemoryRequirements &amp;" />
    <conversion_function name="operator VkMemoryRequirements &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryRequirements &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryRequirements &amp;" />
    </method>
    <field name="size" />
    <field name="alignment" />
    <field name="memoryTypeBits" />
  </struct>
  <struct name="MemoryType" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryType">
      <argument name="propertyFlags_" type="vk::MemoryPropertyFlags" default_raw="{}" />
      <argument name="heapIndex_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="MemoryType">
      <argument name="rhs" type="const MemoryType &amp;" />
    </constructor>
    <constructor name="MemoryType">
      <argument name="rhs" type="const VkMemoryType &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryType &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryType &amp;" />
    </method>
    <conversion_function name="operator const VkMemoryType &amp;" />
    <conversion_function name="operator VkMemoryType &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryType &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryType &amp;" />
    </method>
    <field name="propertyFlags" />
    <field name="heapIndex" />
  </struct>
  <struct name="Offset2D" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="Offset2D">
      <argument name="x_" type="int32_t" default_raw="{}" />
      <argument name="y_" type="int32_t" default_raw="{}" />
    </constructor>
    <constructor name="Offset2D">
      <argument name="rhs" type="const Offset2D &amp;" />
    </constructor>
    <constructor name="Offset2D">
      <argument name="rhs" type="const VkOffset2D &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const Offset2D &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkOffset2D &amp;" />
    </method>
    <method name="setX">
      <argument name="x_" type="int32_t" />
    </method>
    <method name="setY">
      <argument name="y_" type="int32_t" />
    </method>
    <conversion_function name="operator const VkOffset2D &amp;" />
    <conversion_function name="operator VkOffset2D &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const Offset2D &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Offset2D &amp;" />
    </method>
    <field name="x" />
    <field name="y" />
  </struct>
  <struct name="Offset3D" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="Offset3D">
      <argument name="x_" type="int32_t" default_raw="{}" />
      <argument name="y_" type="int32_t" default_raw="{}" />
      <argument name="z_" type="int32_t" default_raw="{}" />
    </constructor>
    <constructor name="Offset3D">
      <argument name="rhs" type="const Offset3D &amp;" />
    </constructor>
    <constructor name="Offset3D">
      <argument name="rhs" type="const VkOffset3D &amp;" />
    </constructor>
    <constructor name="Offset3D">
      <argument name="offset2D" type="const Offset2D &amp;" />
      <argument name="z_" type="int32_t" default_raw="{}" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const Offset3D &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkOffset3D &amp;" />
    </method>
    <method name="setX">
      <argument name="x_" type="int32_t" />
    </method>
    <method name="setY">
      <argument name="y_" type="int32_t" />
    </method>
    <method name="setZ">
      <argument name="z_" type="int32_t" />
    </method>
    <conversion_function name="operator const VkOffset3D &amp;" />
    <conversion_function name="operator VkOffset3D &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const Offset3D &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Offset3D &amp;" />
    </method>
    <field name="x" />
    <field name="y" />
    <field name="z" />
  </struct>
  <struct name="PhysicalDeviceFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFeatures">
      <argument name="robustBufferAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="fullDrawIndexUint32_" type="vk::Bool32" default_raw="{}" />
      <argument name="imageCubeArray_" type="vk::Bool32" default_raw="{}" />
      <argument name="independentBlend_" type="vk::Bool32" default_raw="{}" />
      <argument name="geometryShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="tessellationShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="sampleRateShading_" type="vk::Bool32" default_raw="{}" />
      <argument name="dualSrcBlend_" type="vk::Bool32" default_raw="{}" />
      <argument name="logicOp_" type="vk::Bool32" default_raw="{}" />
      <argument name="multiDrawIndirect_" type="vk::Bool32" default_raw="{}" />
      <argument name="drawIndirectFirstInstance_" type="vk::Bool32" default_raw="{}" />
      <argument name="depthClamp_" type="vk::Bool32" default_raw="{}" />
      <argument name="depthBiasClamp_" type="vk::Bool32" default_raw="{}" />
      <argument name="fillModeNonSolid_" type="vk::Bool32" default_raw="{}" />
      <argument name="depthBounds_" type="vk::Bool32" default_raw="{}" />
      <argument name="wideLines_" type="vk::Bool32" default_raw="{}" />
      <argument name="largePoints_" type="vk::Bool32" default_raw="{}" />
      <argument name="alphaToOne_" type="vk::Bool32" default_raw="{}" />
      <argument name="multiViewport_" type="vk::Bool32" default_raw="{}" />
      <argument name="samplerAnisotropy_" type="vk::Bool32" default_raw="{}" />
      <argument name="textureCompressionETC2_" type="vk::Bool32" default_raw="{}" />
      <argument name="textureCompressionASTC_LDR_" type="vk::Bool32" default_raw="{}" />
      <argument name="textureCompressionBC_" type="vk::Bool32" default_raw="{}" />
      <argument name="occlusionQueryPrecise_" type="vk::Bool32" default_raw="{}" />
      <argument name="pipelineStatisticsQuery_" type="vk::Bool32" default_raw="{}" />
      <argument name="vertexPipelineStoresAndAtomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentStoresAndAtomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderTessellationAndGeometryPointSize_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderImageGatherExtended_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageImageExtendedFormats_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageImageMultisample_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageImageReadWithoutFormat_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageImageWriteWithoutFormat_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderUniformBufferArrayDynamicIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSampledImageArrayDynamicIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageBufferArrayDynamicIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageImageArrayDynamicIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderClipDistance_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderCullDistance_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderFloat64_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderInt64_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderInt16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderResourceResidency_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderResourceMinLod_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseBinding_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseResidencyBuffer_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseResidencyImage2D_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseResidencyImage3D_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseResidency2Samples_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseResidency4Samples_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseResidency8Samples_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseResidency16Samples_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseResidencyAliased_" type="vk::Bool32" default_raw="{}" />
      <argument name="variableMultisampleRate_" type="vk::Bool32" default_raw="{}" />
      <argument name="inheritedQueries_" type="vk::Bool32" default_raw="{}" />
    </constructor>
    <constructor name="PhysicalDeviceFeatures">
      <argument name="rhs" type="const PhysicalDeviceFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFeatures &amp;" />
    </method>
    <method name="setRobustBufferAccess">
      <argument name="robustBufferAccess_" type="vk::Bool32" />
    </method>
    <method name="setFullDrawIndexUint32">
      <argument name="fullDrawIndexUint32_" type="vk::Bool32" />
    </method>
    <method name="setImageCubeArray">
      <argument name="imageCubeArray_" type="vk::Bool32" />
    </method>
    <method name="setIndependentBlend">
      <argument name="independentBlend_" type="vk::Bool32" />
    </method>
    <method name="setGeometryShader">
      <argument name="geometryShader_" type="vk::Bool32" />
    </method>
    <method name="setTessellationShader">
      <argument name="tessellationShader_" type="vk::Bool32" />
    </method>
    <method name="setSampleRateShading">
      <argument name="sampleRateShading_" type="vk::Bool32" />
    </method>
    <method name="setDualSrcBlend">
      <argument name="dualSrcBlend_" type="vk::Bool32" />
    </method>
    <method name="setLogicOp">
      <argument name="logicOp_" type="vk::Bool32" />
    </method>
    <method name="setMultiDrawIndirect">
      <argument name="multiDrawIndirect_" type="vk::Bool32" />
    </method>
    <method name="setDrawIndirectFirstInstance">
      <argument name="drawIndirectFirstInstance_" type="vk::Bool32" />
    </method>
    <method name="setDepthClamp">
      <argument name="depthClamp_" type="vk::Bool32" />
    </method>
    <method name="setDepthBiasClamp">
      <argument name="depthBiasClamp_" type="vk::Bool32" />
    </method>
    <method name="setFillModeNonSolid">
      <argument name="fillModeNonSolid_" type="vk::Bool32" />
    </method>
    <method name="setDepthBounds">
      <argument name="depthBounds_" type="vk::Bool32" />
    </method>
    <method name="setWideLines">
      <argument name="wideLines_" type="vk::Bool32" />
    </method>
    <method name="setLargePoints">
      <argument name="largePoints_" type="vk::Bool32" />
    </method>
    <method name="setAlphaToOne">
      <argument name="alphaToOne_" type="vk::Bool32" />
    </method>
    <method name="setMultiViewport">
      <argument name="multiViewport_" type="vk::Bool32" />
    </method>
    <method name="setSamplerAnisotropy">
      <argument name="samplerAnisotropy_" type="vk::Bool32" />
    </method>
    <method name="setTextureCompressionETC2">
      <argument name="textureCompressionETC2_" type="vk::Bool32" />
    </method>
    <method name="setTextureCompressionASTC_LDR">
      <argument name="textureCompressionASTC_LDR_" type="vk::Bool32" />
    </method>
    <method name="setTextureCompressionBC">
      <argument name="textureCompressionBC_" type="vk::Bool32" />
    </method>
    <method name="setOcclusionQueryPrecise">
      <argument name="occlusionQueryPrecise_" type="vk::Bool32" />
    </method>
    <method name="setPipelineStatisticsQuery">
      <argument name="pipelineStatisticsQuery_" type="vk::Bool32" />
    </method>
    <method name="setVertexPipelineStoresAndAtomics">
      <argument name="vertexPipelineStoresAndAtomics_" type="vk::Bool32" />
    </method>
    <method name="setFragmentStoresAndAtomics">
      <argument name="fragmentStoresAndAtomics_" type="vk::Bool32" />
    </method>
    <method name="setShaderTessellationAndGeometryPointSize">
      <argument name="shaderTessellationAndGeometryPointSize_" type="vk::Bool32" />
    </method>
    <method name="setShaderImageGatherExtended">
      <argument name="shaderImageGatherExtended_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageImageExtendedFormats">
      <argument name="shaderStorageImageExtendedFormats_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageImageMultisample">
      <argument name="shaderStorageImageMultisample_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageImageReadWithoutFormat">
      <argument name="shaderStorageImageReadWithoutFormat_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageImageWriteWithoutFormat">
      <argument name="shaderStorageImageWriteWithoutFormat_" type="vk::Bool32" />
    </method>
    <method name="setShaderUniformBufferArrayDynamicIndexing">
      <argument name="shaderUniformBufferArrayDynamicIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderSampledImageArrayDynamicIndexing">
      <argument name="shaderSampledImageArrayDynamicIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageBufferArrayDynamicIndexing">
      <argument name="shaderStorageBufferArrayDynamicIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageImageArrayDynamicIndexing">
      <argument name="shaderStorageImageArrayDynamicIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderClipDistance">
      <argument name="shaderClipDistance_" type="vk::Bool32" />
    </method>
    <method name="setShaderCullDistance">
      <argument name="shaderCullDistance_" type="vk::Bool32" />
    </method>
    <method name="setShaderFloat64">
      <argument name="shaderFloat64_" type="vk::Bool32" />
    </method>
    <method name="setShaderInt64">
      <argument name="shaderInt64_" type="vk::Bool32" />
    </method>
    <method name="setShaderInt16">
      <argument name="shaderInt16_" type="vk::Bool32" />
    </method>
    <method name="setShaderResourceResidency">
      <argument name="shaderResourceResidency_" type="vk::Bool32" />
    </method>
    <method name="setShaderResourceMinLod">
      <argument name="shaderResourceMinLod_" type="vk::Bool32" />
    </method>
    <method name="setSparseBinding">
      <argument name="sparseBinding_" type="vk::Bool32" />
    </method>
    <method name="setSparseResidencyBuffer">
      <argument name="sparseResidencyBuffer_" type="vk::Bool32" />
    </method>
    <method name="setSparseResidencyImage2D">
      <argument name="sparseResidencyImage2D_" type="vk::Bool32" />
    </method>
    <method name="setSparseResidencyImage3D">
      <argument name="sparseResidencyImage3D_" type="vk::Bool32" />
    </method>
    <method name="setSparseResidency2Samples">
      <argument name="sparseResidency2Samples_" type="vk::Bool32" />
    </method>
    <method name="setSparseResidency4Samples">
      <argument name="sparseResidency4Samples_" type="vk::Bool32" />
    </method>
    <method name="setSparseResidency8Samples">
      <argument name="sparseResidency8Samples_" type="vk::Bool32" />
    </method>
    <method name="setSparseResidency16Samples">
      <argument name="sparseResidency16Samples_" type="vk::Bool32" />
    </method>
    <method name="setSparseResidencyAliased">
      <argument name="sparseResidencyAliased_" type="vk::Bool32" />
    </method>
    <method name="setVariableMultisampleRate">
      <argument name="variableMultisampleRate_" type="vk::Bool32" />
    </method>
    <method name="setInheritedQueries">
      <argument name="inheritedQueries_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFeatures &amp;" />
    </method>
    <field name="robustBufferAccess" />
    <field name="fullDrawIndexUint32" />
    <field name="imageCubeArray" />
    <field name="independentBlend" />
    <field name="geometryShader" />
    <field name="tessellationShader" />
    <field name="sampleRateShading" />
    <field name="dualSrcBlend" />
    <field name="logicOp" />
    <field name="multiDrawIndirect" />
    <field name="drawIndirectFirstInstance" />
    <field name="depthClamp" />
    <field name="depthBiasClamp" />
    <field name="fillModeNonSolid" />
    <field name="depthBounds" />
    <field name="wideLines" />
    <field name="largePoints" />
    <field name="alphaToOne" />
    <field name="multiViewport" />
    <field name="samplerAnisotropy" />
    <field name="textureCompressionETC2" />
    <field name="textureCompressionASTC_LDR" />
    <field name="textureCompressionBC" />
    <field name="occlusionQueryPrecise" />
    <field name="pipelineStatisticsQuery" />
    <field name="vertexPipelineStoresAndAtomics" />
    <field name="fragmentStoresAndAtomics" />
    <field name="shaderTessellationAndGeometryPointSize" />
    <field name="shaderImageGatherExtended" />
    <field name="shaderStorageImageExtendedFormats" />
    <field name="shaderStorageImageMultisample" />
    <field name="shaderStorageImageReadWithoutFormat" />
    <field name="shaderStorageImageWriteWithoutFormat" />
    <field name="shaderUniformBufferArrayDynamicIndexing" />
    <field name="shaderSampledImageArrayDynamicIndexing" />
    <field name="shaderStorageBufferArrayDynamicIndexing" />
    <field name="shaderStorageImageArrayDynamicIndexing" />
    <field name="shaderClipDistance" />
    <field name="shaderCullDistance" />
    <field name="shaderFloat64" />
    <field name="shaderInt64" />
    <field name="shaderInt16" />
    <field name="shaderResourceResidency" />
    <field name="shaderResourceMinLod" />
    <field name="sparseBinding" />
    <field name="sparseResidencyBuffer" />
    <field name="sparseResidencyImage2D" />
    <field name="sparseResidencyImage3D" />
    <field name="sparseResidency2Samples" />
    <field name="sparseResidency4Samples" />
    <field name="sparseResidency8Samples" />
    <field name="sparseResidency16Samples" />
    <field name="sparseResidencyAliased" />
    <field name="variableMultisampleRate" />
    <field name="inheritedQueries" />
  </struct>
  <struct name="PhysicalDeviceLimits" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceLimits">
      <argument name="maxImageDimension1D_" type="uint32_t" default_raw="{}" />
      <argument name="maxImageDimension2D_" type="uint32_t" default_raw="{}" />
      <argument name="maxImageDimension3D_" type="uint32_t" default_raw="{}" />
      <argument name="maxImageDimensionCube_" type="uint32_t" default_raw="{}" />
      <argument name="maxImageArrayLayers_" type="uint32_t" default_raw="{}" />
      <argument name="maxTexelBufferElements_" type="uint32_t" default_raw="{}" />
      <argument name="maxUniformBufferRange_" type="uint32_t" default_raw="{}" />
      <argument name="maxStorageBufferRange_" type="uint32_t" default_raw="{}" />
      <argument name="maxPushConstantsSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxMemoryAllocationCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxSamplerAllocationCount_" type="uint32_t" default_raw="{}" />
      <argument name="bufferImageGranularity_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="sparseAddressSpaceSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="maxBoundDescriptorSets_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorSamplers_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUniformBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorStorageBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorSampledImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorStorageImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorInputAttachments_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageResources_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetSamplers_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUniformBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUniformBuffersDynamic_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetStorageBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetStorageBuffersDynamic_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetSampledImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetStorageImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetInputAttachments_" type="uint32_t" default_raw="{}" />
      <argument name="maxVertexInputAttributes_" type="uint32_t" default_raw="{}" />
      <argument name="maxVertexInputBindings_" type="uint32_t" default_raw="{}" />
      <argument name="maxVertexInputAttributeOffset_" type="uint32_t" default_raw="{}" />
      <argument name="maxVertexInputBindingStride_" type="uint32_t" default_raw="{}" />
      <argument name="maxVertexOutputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxTessellationGenerationLevel_" type="uint32_t" default_raw="{}" />
      <argument name="maxTessellationPatchSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxTessellationControlPerVertexInputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxTessellationControlPerVertexOutputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxTessellationControlPerPatchOutputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxTessellationControlTotalOutputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxTessellationEvaluationInputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxTessellationEvaluationOutputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxGeometryShaderInvocations_" type="uint32_t" default_raw="{}" />
      <argument name="maxGeometryInputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxGeometryOutputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxGeometryOutputVertices_" type="uint32_t" default_raw="{}" />
      <argument name="maxGeometryTotalOutputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxFragmentInputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxFragmentOutputAttachments_" type="uint32_t" default_raw="{}" />
      <argument name="maxFragmentDualSrcAttachments_" type="uint32_t" default_raw="{}" />
      <argument name="maxFragmentCombinedOutputResources_" type="uint32_t" default_raw="{}" />
      <argument name="maxComputeSharedMemorySize_" type="uint32_t" default_raw="{}" />
      <argument name="maxComputeWorkGroupCount_" type="const std::array&lt;uint32_t, 3&gt; &amp;" default_raw="{}" />
      <argument name="maxComputeWorkGroupInvocations_" type="uint32_t" default_raw="{}" />
      <argument name="maxComputeWorkGroupSize_" type="const std::array&lt;uint32_t, 3&gt; &amp;" default_raw="{}" />
      <argument name="subPixelPrecisionBits_" type="uint32_t" default_raw="{}" />
      <argument name="subTexelPrecisionBits_" type="uint32_t" default_raw="{}" />
      <argument name="mipmapPrecisionBits_" type="uint32_t" default_raw="{}" />
      <argument name="maxDrawIndexedIndexValue_" type="uint32_t" default_raw="{}" />
      <argument name="maxDrawIndirectCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxSamplerLodBias_" type="float" default_raw="{}" />
      <argument name="maxSamplerAnisotropy_" type="float" default_raw="{}" />
      <argument name="maxViewports_" type="uint32_t" default_raw="{}" />
      <argument name="maxViewportDimensions_" type="const std::array&lt;uint32_t, 2&gt; &amp;" default_raw="{}" />
      <argument name="viewportBoundsRange_" type="const std::array&lt;float, 2&gt; &amp;" default_raw="{}" />
      <argument name="viewportSubPixelBits_" type="uint32_t" default_raw="{}" />
      <argument name="minMemoryMapAlignment_" type="size_t" default_raw="{}" />
      <argument name="minTexelBufferOffsetAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="minUniformBufferOffsetAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="minStorageBufferOffsetAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="minTexelOffset_" type="int32_t" default_raw="{}" />
      <argument name="maxTexelOffset_" type="uint32_t" default_raw="{}" />
      <argument name="minTexelGatherOffset_" type="int32_t" default_raw="{}" />
      <argument name="maxTexelGatherOffset_" type="uint32_t" default_raw="{}" />
      <argument name="minInterpolationOffset_" type="float" default_raw="{}" />
      <argument name="maxInterpolationOffset_" type="float" default_raw="{}" />
      <argument name="subPixelInterpolationOffsetBits_" type="uint32_t" default_raw="{}" />
      <argument name="maxFramebufferWidth_" type="uint32_t" default_raw="{}" />
      <argument name="maxFramebufferHeight_" type="uint32_t" default_raw="{}" />
      <argument name="maxFramebufferLayers_" type="uint32_t" default_raw="{}" />
      <argument name="framebufferColorSampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="framebufferDepthSampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="framebufferStencilSampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="framebufferNoAttachmentsSampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="maxColorAttachments_" type="uint32_t" default_raw="{}" />
      <argument name="sampledImageColorSampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="sampledImageIntegerSampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="sampledImageDepthSampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="sampledImageStencilSampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="storageImageSampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="maxSampleMaskWords_" type="uint32_t" default_raw="{}" />
      <argument name="timestampComputeAndGraphics_" type="vk::Bool32" default_raw="{}" />
      <argument name="timestampPeriod_" type="float" default_raw="{}" />
      <argument name="maxClipDistances_" type="uint32_t" default_raw="{}" />
      <argument name="maxCullDistances_" type="uint32_t" default_raw="{}" />
      <argument name="maxCombinedClipAndCullDistances_" type="uint32_t" default_raw="{}" />
      <argument name="discreteQueuePriorities_" type="uint32_t" default_raw="{}" />
      <argument name="pointSizeRange_" type="const std::array&lt;float, 2&gt; &amp;" default_raw="{}" />
      <argument name="lineWidthRange_" type="const std::array&lt;float, 2&gt; &amp;" default_raw="{}" />
      <argument name="pointSizeGranularity_" type="float" default_raw="{}" />
      <argument name="lineWidthGranularity_" type="float" default_raw="{}" />
      <argument name="strictLines_" type="vk::Bool32" default_raw="{}" />
      <argument name="standardSampleLocations_" type="vk::Bool32" default_raw="{}" />
      <argument name="optimalBufferCopyOffsetAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="optimalBufferCopyRowPitchAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="nonCoherentAtomSize_" type="vk::DeviceSize" default_raw="{}" />
    </constructor>
    <constructor name="PhysicalDeviceLimits">
      <argument name="rhs" type="const PhysicalDeviceLimits &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceLimits">
      <argument name="rhs" type="const VkPhysicalDeviceLimits &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceLimits &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceLimits &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceLimits &amp;" />
    <conversion_function name="operator VkPhysicalDeviceLimits &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceLimits &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceLimits &amp;" />
    </method>
    <field name="maxImageDimension1D" />
    <field name="maxImageDimension2D" />
    <field name="maxImageDimension3D" />
    <field name="maxImageDimensionCube" />
    <field name="maxImageArrayLayers" />
    <field name="maxTexelBufferElements" />
    <field name="maxUniformBufferRange" />
    <field name="maxStorageBufferRange" />
    <field name="maxPushConstantsSize" />
    <field name="maxMemoryAllocationCount" />
    <field name="maxSamplerAllocationCount" />
    <field name="bufferImageGranularity" />
    <field name="sparseAddressSpaceSize" />
    <field name="maxBoundDescriptorSets" />
    <field name="maxPerStageDescriptorSamplers" />
    <field name="maxPerStageDescriptorUniformBuffers" />
    <field name="maxPerStageDescriptorStorageBuffers" />
    <field name="maxPerStageDescriptorSampledImages" />
    <field name="maxPerStageDescriptorStorageImages" />
    <field name="maxPerStageDescriptorInputAttachments" />
    <field name="maxPerStageResources" />
    <field name="maxDescriptorSetSamplers" />
    <field name="maxDescriptorSetUniformBuffers" />
    <field name="maxDescriptorSetUniformBuffersDynamic" />
    <field name="maxDescriptorSetStorageBuffers" />
    <field name="maxDescriptorSetStorageBuffersDynamic" />
    <field name="maxDescriptorSetSampledImages" />
    <field name="maxDescriptorSetStorageImages" />
    <field name="maxDescriptorSetInputAttachments" />
    <field name="maxVertexInputAttributes" />
    <field name="maxVertexInputBindings" />
    <field name="maxVertexInputAttributeOffset" />
    <field name="maxVertexInputBindingStride" />
    <field name="maxVertexOutputComponents" />
    <field name="maxTessellationGenerationLevel" />
    <field name="maxTessellationPatchSize" />
    <field name="maxTessellationControlPerVertexInputComponents" />
    <field name="maxTessellationControlPerVertexOutputComponents" />
    <field name="maxTessellationControlPerPatchOutputComponents" />
    <field name="maxTessellationControlTotalOutputComponents" />
    <field name="maxTessellationEvaluationInputComponents" />
    <field name="maxTessellationEvaluationOutputComponents" />
    <field name="maxGeometryShaderInvocations" />
    <field name="maxGeometryInputComponents" />
    <field name="maxGeometryOutputComponents" />
    <field name="maxGeometryOutputVertices" />
    <field name="maxGeometryTotalOutputComponents" />
    <field name="maxFragmentInputComponents" />
    <field name="maxFragmentOutputAttachments" />
    <field name="maxFragmentDualSrcAttachments" />
    <field name="maxFragmentCombinedOutputResources" />
    <field name="maxComputeSharedMemorySize" />
    <field name="maxComputeWorkGroupCount" />
    <field name="maxComputeWorkGroupInvocations" />
    <field name="maxComputeWorkGroupSize" />
    <field name="subPixelPrecisionBits" />
    <field name="subTexelPrecisionBits" />
    <field name="mipmapPrecisionBits" />
    <field name="maxDrawIndexedIndexValue" />
    <field name="maxDrawIndirectCount" />
    <field name="maxSamplerLodBias" />
    <field name="maxSamplerAnisotropy" />
    <field name="maxViewports" />
    <field name="maxViewportDimensions" />
    <field name="viewportBoundsRange" />
    <field name="viewportSubPixelBits" />
    <field name="minMemoryMapAlignment" />
    <field name="minTexelBufferOffsetAlignment" />
    <field name="minUniformBufferOffsetAlignment" />
    <field name="minStorageBufferOffsetAlignment" />
    <field name="minTexelOffset" />
    <field name="maxTexelOffset" />
    <field name="minTexelGatherOffset" />
    <field name="maxTexelGatherOffset" />
    <field name="minInterpolationOffset" />
    <field name="maxInterpolationOffset" />
    <field name="subPixelInterpolationOffsetBits" />
    <field name="maxFramebufferWidth" />
    <field name="maxFramebufferHeight" />
    <field name="maxFramebufferLayers" />
    <field name="framebufferColorSampleCounts" />
    <field name="framebufferDepthSampleCounts" />
    <field name="framebufferStencilSampleCounts" />
    <field name="framebufferNoAttachmentsSampleCounts" />
    <field name="maxColorAttachments" />
    <field name="sampledImageColorSampleCounts" />
    <field name="sampledImageIntegerSampleCounts" />
    <field name="sampledImageDepthSampleCounts" />
    <field name="sampledImageStencilSampleCounts" />
    <field name="storageImageSampleCounts" />
    <field name="maxSampleMaskWords" />
    <field name="timestampComputeAndGraphics" />
    <field name="timestampPeriod" />
    <field name="maxClipDistances" />
    <field name="maxCullDistances" />
    <field name="maxCombinedClipAndCullDistances" />
    <field name="discreteQueuePriorities" />
    <field name="pointSizeRange" />
    <field name="lineWidthRange" />
    <field name="pointSizeGranularity" />
    <field name="lineWidthGranularity" />
    <field name="strictLines" />
    <field name="standardSampleLocations" />
    <field name="optimalBufferCopyOffsetAlignment" />
    <field name="optimalBufferCopyRowPitchAlignment" />
    <field name="nonCoherentAtomSize" />
  </struct>
  <struct name="PhysicalDeviceMemoryProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMemoryProperties">
      <argument name="memoryTypeCount_" type="uint32_t" default_raw="{}" />
      <argument name="memoryTypes_" type="const std::array&lt;vk::MemoryType, 32U&gt; &amp;" default_raw="{}" />
      <argument name="memoryHeapCount_" type="uint32_t" default_raw="{}" />
      <argument name="memoryHeaps_" type="const std::array&lt;vk::MemoryHeap, 16U&gt; &amp;" default_raw="{}" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryProperties">
      <argument name="rhs" type="const PhysicalDeviceMemoryProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryProperties">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMemoryProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMemoryProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMemoryProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMemoryProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMemoryProperties &amp;" />
    </method>
    <field name="memoryTypeCount" />
    <field name="memoryTypes" />
    <field name="memoryHeapCount" />
    <field name="memoryHeaps" />
  </struct>
  <struct name="PhysicalDeviceProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceProperties">
      <argument name="apiVersion_" type="uint32_t" default_raw="{}" />
      <argument name="driverVersion_" type="uint32_t" default_raw="{}" />
      <argument name="vendorID_" type="uint32_t" default_raw="{}" />
      <argument name="deviceID_" type="uint32_t" default_raw="{}" />
      <argument name="deviceType_" type="vk::PhysicalDeviceType" default_raw="VULKAN_HPP_NAMESPACE::PhysicalDeviceType::eOther" />
      <argument name="deviceName_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="pipelineCacheUUID_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="limits_" type="vk::PhysicalDeviceLimits" default_raw="{}" />
      <argument name="sparseProperties_" type="vk::PhysicalDeviceSparseProperties" default_raw="{}" />
    </constructor>
    <constructor name="PhysicalDeviceProperties">
      <argument name="rhs" type="const PhysicalDeviceProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceProperties">
      <argument name="rhs" type="const VkPhysicalDeviceProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceProperties &amp;" />
    </method>
    <field name="apiVersion" />
    <field name="driverVersion" />
    <field name="vendorID" />
    <field name="deviceID" />
    <field name="deviceType" />
    <field name="deviceName" />
    <field name="pipelineCacheUUID" />
    <field name="limits" />
    <field name="sparseProperties" />
  </struct>
  <struct name="PhysicalDeviceSparseProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSparseProperties">
      <argument name="residencyStandard2DBlockShape_" type="vk::Bool32" default_raw="{}" />
      <argument name="residencyStandard2DMultisampleBlockShape_" type="vk::Bool32" default_raw="{}" />
      <argument name="residencyStandard3DBlockShape_" type="vk::Bool32" default_raw="{}" />
      <argument name="residencyAlignedMipSize_" type="vk::Bool32" default_raw="{}" />
      <argument name="residencyNonResidentStrict_" type="vk::Bool32" default_raw="{}" />
    </constructor>
    <constructor name="PhysicalDeviceSparseProperties">
      <argument name="rhs" type="const PhysicalDeviceSparseProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSparseProperties">
      <argument name="rhs" type="const VkPhysicalDeviceSparseProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSparseProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSparseProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSparseProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSparseProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSparseProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSparseProperties &amp;" />
    </method>
    <field name="residencyStandard2DBlockShape" />
    <field name="residencyStandard2DMultisampleBlockShape" />
    <field name="residencyStandard3DBlockShape" />
    <field name="residencyAlignedMipSize" />
    <field name="residencyNonResidentStrict" />
  </struct>
  <struct name="PipelineCacheCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineCacheCreateInfo">
      <argument name="flags_" type="vk::PipelineCacheCreateFlags" default_raw="{}" />
      <argument name="initialDataSize_" type="size_t" default_raw="{}" />
      <argument name="pInitialData_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineCacheCreateInfo">
      <argument name="rhs" type="const PipelineCacheCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineCacheCreateInfo">
      <argument name="rhs" type="const VkPipelineCacheCreateInfo &amp;" />
    </constructor>
    <method name="PipelineCacheCreateInfo" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const PipelineCacheCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineCacheCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineCacheCreateFlags" />
    </method>
    <method name="setInitialDataSize">
      <argument name="initialDataSize_" type="size_t" />
    </method>
    <method name="setPInitialData">
      <argument name="pInitialData_" type="const void *" />
    </method>
    <method name="setInitialData" template_raw="template &lt;typename T&gt;" />
    <conversion_function name="operator const VkPipelineCacheCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineCacheCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineCacheCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineCacheCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="initialDataSize" />
    <field name="pInitialData" />
  </struct>
  <struct name="PipelineCacheHeaderVersionOne" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineCacheHeaderVersionOne">
      <argument name="headerSize_" type="uint32_t" default_raw="{}" />
      <argument name="headerVersion_" type="vk::PipelineCacheHeaderVersion" default_raw="VULKAN_HPP_NAMESPACE::PipelineCacheHeaderVersion::eOne" />
      <argument name="vendorID_" type="uint32_t" default_raw="{}" />
      <argument name="deviceID_" type="uint32_t" default_raw="{}" />
      <argument name="pipelineCacheUUID_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
    </constructor>
    <constructor name="PipelineCacheHeaderVersionOne">
      <argument name="rhs" type="const PipelineCacheHeaderVersionOne &amp;" />
    </constructor>
    <constructor name="PipelineCacheHeaderVersionOne">
      <argument name="rhs" type="const VkPipelineCacheHeaderVersionOne &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineCacheHeaderVersionOne &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineCacheHeaderVersionOne &amp;" />
    </method>
    <method name="setHeaderSize">
      <argument name="headerSize_" type="uint32_t" />
    </method>
    <method name="setHeaderVersion">
      <argument name="headerVersion_" type="vk::PipelineCacheHeaderVersion" />
    </method>
    <method name="setVendorID">
      <argument name="vendorID_" type="uint32_t" />
    </method>
    <method name="setDeviceID">
      <argument name="deviceID_" type="uint32_t" />
    </method>
    <method name="setPipelineCacheUUID">
      <argument name="pipelineCacheUUID_" type="std::array&lt;uint8_t, 16U&gt;" />
    </method>
    <conversion_function name="operator const VkPipelineCacheHeaderVersionOne &amp;" />
    <conversion_function name="operator VkPipelineCacheHeaderVersionOne &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineCacheHeaderVersionOne &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineCacheHeaderVersionOne &amp;" />
    </method>
    <field name="headerSize" />
    <field name="headerVersion" />
    <field name="vendorID" />
    <field name="deviceID" />
    <field name="pipelineCacheUUID" />
  </struct>
  <struct name="PipelineColorBlendAttachmentState" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineColorBlendAttachmentState">
      <argument name="blendEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="srcColorBlendFactor_" type="vk::BlendFactor" default_raw="VULKAN_HPP_NAMESPACE::BlendFactor::eZero" />
      <argument name="dstColorBlendFactor_" type="vk::BlendFactor" default_raw="VULKAN_HPP_NAMESPACE::BlendFactor::eZero" />
      <argument name="colorBlendOp_" type="vk::BlendOp" default_raw="VULKAN_HPP_NAMESPACE::BlendOp::eAdd" />
      <argument name="srcAlphaBlendFactor_" type="vk::BlendFactor" default_raw="VULKAN_HPP_NAMESPACE::BlendFactor::eZero" />
      <argument name="dstAlphaBlendFactor_" type="vk::BlendFactor" default_raw="VULKAN_HPP_NAMESPACE::BlendFactor::eZero" />
      <argument name="alphaBlendOp_" type="vk::BlendOp" default_raw="VULKAN_HPP_NAMESPACE::BlendOp::eAdd" />
      <argument name="colorWriteMask_" type="vk::ColorComponentFlags" default_raw="{}" />
    </constructor>
    <constructor name="PipelineColorBlendAttachmentState">
      <argument name="rhs" type="const PipelineColorBlendAttachmentState &amp;" />
    </constructor>
    <constructor name="PipelineColorBlendAttachmentState">
      <argument name="rhs" type="const VkPipelineColorBlendAttachmentState &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineColorBlendAttachmentState &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineColorBlendAttachmentState &amp;" />
    </method>
    <method name="setBlendEnable">
      <argument name="blendEnable_" type="vk::Bool32" />
    </method>
    <method name="setSrcColorBlendFactor">
      <argument name="srcColorBlendFactor_" type="vk::BlendFactor" />
    </method>
    <method name="setDstColorBlendFactor">
      <argument name="dstColorBlendFactor_" type="vk::BlendFactor" />
    </method>
    <method name="setColorBlendOp">
      <argument name="colorBlendOp_" type="vk::BlendOp" />
    </method>
    <method name="setSrcAlphaBlendFactor">
      <argument name="srcAlphaBlendFactor_" type="vk::BlendFactor" />
    </method>
    <method name="setDstAlphaBlendFactor">
      <argument name="dstAlphaBlendFactor_" type="vk::BlendFactor" />
    </method>
    <method name="setAlphaBlendOp">
      <argument name="alphaBlendOp_" type="vk::BlendOp" />
    </method>
    <method name="setColorWriteMask">
      <argument name="colorWriteMask_" type="vk::ColorComponentFlags" />
    </method>
    <conversion_function name="operator const VkPipelineColorBlendAttachmentState &amp;" />
    <conversion_function name="operator VkPipelineColorBlendAttachmentState &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineColorBlendAttachmentState &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineColorBlendAttachmentState &amp;" />
    </method>
    <field name="blendEnable" />
    <field name="srcColorBlendFactor" />
    <field name="dstColorBlendFactor" />
    <field name="colorBlendOp" />
    <field name="srcAlphaBlendFactor" />
    <field name="dstAlphaBlendFactor" />
    <field name="alphaBlendOp" />
    <field name="colorWriteMask" />
  </struct>
  <struct name="PipelineColorBlendStateCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineColorBlendStateCreateInfo">
      <argument name="flags_" type="vk::PipelineColorBlendStateCreateFlags" default_raw="{}" />
      <argument name="logicOpEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="logicOp_" type="vk::LogicOp" default_raw="VULKAN_HPP_NAMESPACE::LogicOp::eClear" />
      <argument name="attachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pAttachments_" type="const vk::PipelineColorBlendAttachmentState *" default_raw="{}" />
      <argument name="blendConstants_" type="const std::array&lt;float, 4&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineColorBlendStateCreateInfo">
      <argument name="rhs" type="const PipelineColorBlendStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineColorBlendStateCreateInfo">
      <argument name="rhs" type="const VkPipelineColorBlendStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineColorBlendStateCreateInfo">
      <argument name="flags_" type="vk::PipelineColorBlendStateCreateFlags" />
      <argument name="logicOpEnable_" type="vk::Bool32" />
      <argument name="logicOp_" type="vk::LogicOp" />
      <argument name="attachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineColorBlendAttachmentState&gt; &amp;" />
      <argument name="blendConstants_" type="const std::array&lt;float, 4&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineColorBlendStateCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineColorBlendStateCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineColorBlendStateCreateFlags" />
    </method>
    <method name="setLogicOpEnable">
      <argument name="logicOpEnable_" type="vk::Bool32" />
    </method>
    <method name="setLogicOp">
      <argument name="logicOp_" type="vk::LogicOp" />
    </method>
    <method name="setAttachmentCount">
      <argument name="attachmentCount_" type="uint32_t" />
    </method>
    <method name="setPAttachments">
      <argument name="pAttachments_" type="const vk::PipelineColorBlendAttachmentState *" />
    </method>
    <method name="setAttachments">
      <argument name="attachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineColorBlendAttachmentState&gt; &amp;" />
    </method>
    <method name="setBlendConstants">
      <argument name="blendConstants_" type="std::array&lt;float, 4&gt;" />
    </method>
    <conversion_function name="operator const VkPipelineColorBlendStateCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineColorBlendStateCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineColorBlendStateCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineColorBlendStateCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="logicOpEnable" />
    <field name="logicOp" />
    <field name="attachmentCount" />
    <field name="pAttachments" />
    <field name="blendConstants" />
  </struct>
  <struct name="PipelineDepthStencilStateCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineDepthStencilStateCreateInfo">
      <argument name="flags_" type="vk::PipelineDepthStencilStateCreateFlags" default_raw="{}" />
      <argument name="depthTestEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="depthWriteEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="depthCompareOp_" type="vk::CompareOp" default_raw="VULKAN_HPP_NAMESPACE::CompareOp::eNever" />
      <argument name="depthBoundsTestEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="stencilTestEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="front_" type="vk::StencilOpState" default_raw="{}" />
      <argument name="back_" type="vk::StencilOpState" default_raw="{}" />
      <argument name="minDepthBounds_" type="float" default_raw="{}" />
      <argument name="maxDepthBounds_" type="float" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineDepthStencilStateCreateInfo">
      <argument name="rhs" type="const PipelineDepthStencilStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineDepthStencilStateCreateInfo">
      <argument name="rhs" type="const VkPipelineDepthStencilStateCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineDepthStencilStateCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineDepthStencilStateCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineDepthStencilStateCreateFlags" />
    </method>
    <method name="setDepthTestEnable">
      <argument name="depthTestEnable_" type="vk::Bool32" />
    </method>
    <method name="setDepthWriteEnable">
      <argument name="depthWriteEnable_" type="vk::Bool32" />
    </method>
    <method name="setDepthCompareOp">
      <argument name="depthCompareOp_" type="vk::CompareOp" />
    </method>
    <method name="setDepthBoundsTestEnable">
      <argument name="depthBoundsTestEnable_" type="vk::Bool32" />
    </method>
    <method name="setStencilTestEnable">
      <argument name="stencilTestEnable_" type="vk::Bool32" />
    </method>
    <method name="setFront">
      <argument name="front_" type="const vk::StencilOpState &amp;" />
    </method>
    <method name="setBack">
      <argument name="back_" type="const vk::StencilOpState &amp;" />
    </method>
    <method name="setMinDepthBounds">
      <argument name="minDepthBounds_" type="float" />
    </method>
    <method name="setMaxDepthBounds">
      <argument name="maxDepthBounds_" type="float" />
    </method>
    <conversion_function name="operator const VkPipelineDepthStencilStateCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineDepthStencilStateCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineDepthStencilStateCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineDepthStencilStateCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="depthTestEnable" />
    <field name="depthWriteEnable" />
    <field name="depthCompareOp" />
    <field name="depthBoundsTestEnable" />
    <field name="stencilTestEnable" />
    <field name="front" />
    <field name="back" />
    <field name="minDepthBounds" />
    <field name="maxDepthBounds" />
  </struct>
  <struct name="PipelineDynamicStateCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineDynamicStateCreateInfo">
      <argument name="flags_" type="vk::PipelineDynamicStateCreateFlags" default_raw="{}" />
      <argument name="dynamicStateCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDynamicStates_" type="const vk::DynamicState *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineDynamicStateCreateInfo">
      <argument name="rhs" type="const PipelineDynamicStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineDynamicStateCreateInfo">
      <argument name="rhs" type="const VkPipelineDynamicStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineDynamicStateCreateInfo">
      <argument name="flags_" type="vk::PipelineDynamicStateCreateFlags" />
      <argument name="dynamicStates_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DynamicState&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineDynamicStateCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineDynamicStateCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineDynamicStateCreateFlags" />
    </method>
    <method name="setDynamicStateCount">
      <argument name="dynamicStateCount_" type="uint32_t" />
    </method>
    <method name="setPDynamicStates">
      <argument name="pDynamicStates_" type="const vk::DynamicState *" />
    </method>
    <method name="setDynamicStates">
      <argument name="dynamicStates_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DynamicState&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineDynamicStateCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineDynamicStateCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineDynamicStateCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineDynamicStateCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="dynamicStateCount" />
    <field name="pDynamicStates" />
  </struct>
  <struct name="PipelineInputAssemblyStateCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineInputAssemblyStateCreateInfo">
      <argument name="flags_" type="vk::PipelineInputAssemblyStateCreateFlags" default_raw="{}" />
      <argument name="topology_" type="vk::PrimitiveTopology" default_raw="VULKAN_HPP_NAMESPACE::PrimitiveTopology::ePointList" />
      <argument name="primitiveRestartEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineInputAssemblyStateCreateInfo">
      <argument name="rhs" type="const PipelineInputAssemblyStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineInputAssemblyStateCreateInfo">
      <argument name="rhs" type="const VkPipelineInputAssemblyStateCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineInputAssemblyStateCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineInputAssemblyStateCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineInputAssemblyStateCreateFlags" />
    </method>
    <method name="setTopology">
      <argument name="topology_" type="vk::PrimitiveTopology" />
    </method>
    <method name="setPrimitiveRestartEnable">
      <argument name="primitiveRestartEnable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPipelineInputAssemblyStateCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineInputAssemblyStateCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineInputAssemblyStateCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineInputAssemblyStateCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="topology" />
    <field name="primitiveRestartEnable" />
  </struct>
  <struct name="PipelineLayoutCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineLayoutCreateInfo">
      <argument name="flags_" type="vk::PipelineLayoutCreateFlags" default_raw="{}" />
      <argument name="setLayoutCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSetLayouts_" type="const vk::DescriptorSetLayout *" default_raw="{}" />
      <argument name="pushConstantRangeCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPushConstantRanges_" type="const vk::PushConstantRange *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineLayoutCreateInfo">
      <argument name="rhs" type="const PipelineLayoutCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineLayoutCreateInfo">
      <argument name="rhs" type="const VkPipelineLayoutCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineLayoutCreateInfo">
      <argument name="flags_" type="vk::PipelineLayoutCreateFlags" />
      <argument name="setLayouts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorSetLayout&gt; &amp;" />
      <argument name="pushConstantRanges_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PushConstantRange&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineLayoutCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineLayoutCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineLayoutCreateFlags" />
    </method>
    <method name="setSetLayoutCount">
      <argument name="setLayoutCount_" type="uint32_t" />
    </method>
    <method name="setPSetLayouts">
      <argument name="pSetLayouts_" type="const vk::DescriptorSetLayout *" />
    </method>
    <method name="setSetLayouts">
      <argument name="setLayouts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorSetLayout&gt; &amp;" />
    </method>
    <method name="setPushConstantRangeCount">
      <argument name="pushConstantRangeCount_" type="uint32_t" />
    </method>
    <method name="setPPushConstantRanges">
      <argument name="pPushConstantRanges_" type="const vk::PushConstantRange *" />
    </method>
    <method name="setPushConstantRanges">
      <argument name="pushConstantRanges_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PushConstantRange&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineLayoutCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineLayoutCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineLayoutCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineLayoutCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="setLayoutCount" />
    <field name="pSetLayouts" />
    <field name="pushConstantRangeCount" />
    <field name="pPushConstantRanges" />
  </struct>
  <struct name="PipelineMultisampleStateCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineMultisampleStateCreateInfo">
      <argument name="flags_" type="vk::PipelineMultisampleStateCreateFlags" default_raw="{}" />
      <argument name="rasterizationSamples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="sampleShadingEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="minSampleShading_" type="float" default_raw="{}" />
      <argument name="pSampleMask_" type="const vk::SampleMask *" default_raw="{}" />
      <argument name="alphaToCoverageEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="alphaToOneEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineMultisampleStateCreateInfo">
      <argument name="rhs" type="const PipelineMultisampleStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineMultisampleStateCreateInfo">
      <argument name="rhs" type="const VkPipelineMultisampleStateCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineMultisampleStateCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineMultisampleStateCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineMultisampleStateCreateFlags" />
    </method>
    <method name="setRasterizationSamples">
      <argument name="rasterizationSamples_" type="vk::SampleCountFlagBits" />
    </method>
    <method name="setSampleShadingEnable">
      <argument name="sampleShadingEnable_" type="vk::Bool32" />
    </method>
    <method name="setMinSampleShading">
      <argument name="minSampleShading_" type="float" />
    </method>
    <method name="setPSampleMask">
      <argument name="pSampleMask_" type="const vk::SampleMask *" />
    </method>
    <method name="setAlphaToCoverageEnable">
      <argument name="alphaToCoverageEnable_" type="vk::Bool32" />
    </method>
    <method name="setAlphaToOneEnable">
      <argument name="alphaToOneEnable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPipelineMultisampleStateCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineMultisampleStateCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineMultisampleStateCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineMultisampleStateCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="rasterizationSamples" />
    <field name="sampleShadingEnable" />
    <field name="minSampleShading" />
    <field name="pSampleMask" />
    <field name="alphaToCoverageEnable" />
    <field name="alphaToOneEnable" />
  </struct>
  <struct name="PipelineRasterizationStateCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineRasterizationStateCreateInfo">
      <argument name="flags_" type="vk::PipelineRasterizationStateCreateFlags" default_raw="{}" />
      <argument name="depthClampEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="rasterizerDiscardEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="polygonMode_" type="vk::PolygonMode" default_raw="VULKAN_HPP_NAMESPACE::PolygonMode::eFill" />
      <argument name="cullMode_" type="vk::CullModeFlags" default_raw="{}" />
      <argument name="frontFace_" type="vk::FrontFace" default_raw="VULKAN_HPP_NAMESPACE::FrontFace::eCounterClockwise" />
      <argument name="depthBiasEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="depthBiasConstantFactor_" type="float" default_raw="{}" />
      <argument name="depthBiasClamp_" type="float" default_raw="{}" />
      <argument name="depthBiasSlopeFactor_" type="float" default_raw="{}" />
      <argument name="lineWidth_" type="float" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineRasterizationStateCreateInfo">
      <argument name="rhs" type="const PipelineRasterizationStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineRasterizationStateCreateInfo">
      <argument name="rhs" type="const VkPipelineRasterizationStateCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineRasterizationStateCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineRasterizationStateCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineRasterizationStateCreateFlags" />
    </method>
    <method name="setDepthClampEnable">
      <argument name="depthClampEnable_" type="vk::Bool32" />
    </method>
    <method name="setRasterizerDiscardEnable">
      <argument name="rasterizerDiscardEnable_" type="vk::Bool32" />
    </method>
    <method name="setPolygonMode">
      <argument name="polygonMode_" type="vk::PolygonMode" />
    </method>
    <method name="setCullMode">
      <argument name="cullMode_" type="vk::CullModeFlags" />
    </method>
    <method name="setFrontFace">
      <argument name="frontFace_" type="vk::FrontFace" />
    </method>
    <method name="setDepthBiasEnable">
      <argument name="depthBiasEnable_" type="vk::Bool32" />
    </method>
    <method name="setDepthBiasConstantFactor">
      <argument name="depthBiasConstantFactor_" type="float" />
    </method>
    <method name="setDepthBiasClamp">
      <argument name="depthBiasClamp_" type="float" />
    </method>
    <method name="setDepthBiasSlopeFactor">
      <argument name="depthBiasSlopeFactor_" type="float" />
    </method>
    <method name="setLineWidth">
      <argument name="lineWidth_" type="float" />
    </method>
    <conversion_function name="operator const VkPipelineRasterizationStateCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineRasterizationStateCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineRasterizationStateCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineRasterizationStateCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="depthClampEnable" />
    <field name="rasterizerDiscardEnable" />
    <field name="polygonMode" />
    <field name="cullMode" />
    <field name="frontFace" />
    <field name="depthBiasEnable" />
    <field name="depthBiasConstantFactor" />
    <field name="depthBiasClamp" />
    <field name="depthBiasSlopeFactor" />
    <field name="lineWidth" />
  </struct>
  <struct name="PipelineShaderStageCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineShaderStageCreateInfo">
      <argument name="flags_" type="vk::PipelineShaderStageCreateFlags" default_raw="{}" />
      <argument name="stage_" type="vk::ShaderStageFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ShaderStageFlagBits::eVertex" />
      <argument name="module_" type="vk::ShaderModule" default_raw="{}" />
      <argument name="pName_" type="const char *" default_raw="{}" />
      <argument name="pSpecializationInfo_" type="const vk::SpecializationInfo *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineShaderStageCreateInfo">
      <argument name="rhs" type="const PipelineShaderStageCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineShaderStageCreateInfo">
      <argument name="rhs" type="const VkPipelineShaderStageCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineShaderStageCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineShaderStageCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineShaderStageCreateFlags" />
    </method>
    <method name="setStage">
      <argument name="stage_" type="vk::ShaderStageFlagBits" />
    </method>
    <method name="setModule">
      <argument name="module_" type="vk::ShaderModule" />
    </method>
    <method name="setPName">
      <argument name="pName_" type="const char *" />
    </method>
    <method name="setPSpecializationInfo">
      <argument name="pSpecializationInfo_" type="const vk::SpecializationInfo *" />
    </method>
    <conversion_function name="operator const VkPipelineShaderStageCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineShaderStageCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineShaderStageCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineShaderStageCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="stage" />
    <field name="module" />
    <field name="pName" />
    <field name="pSpecializationInfo" />
  </struct>
  <struct name="PipelineTessellationStateCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineTessellationStateCreateInfo">
      <argument name="flags_" type="vk::PipelineTessellationStateCreateFlags" default_raw="{}" />
      <argument name="patchControlPoints_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineTessellationStateCreateInfo">
      <argument name="rhs" type="const PipelineTessellationStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineTessellationStateCreateInfo">
      <argument name="rhs" type="const VkPipelineTessellationStateCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineTessellationStateCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineTessellationStateCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineTessellationStateCreateFlags" />
    </method>
    <method name="setPatchControlPoints">
      <argument name="patchControlPoints_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkPipelineTessellationStateCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineTessellationStateCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineTessellationStateCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineTessellationStateCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="patchControlPoints" />
  </struct>
  <struct name="PipelineVertexInputStateCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineVertexInputStateCreateInfo">
      <argument name="flags_" type="vk::PipelineVertexInputStateCreateFlags" default_raw="{}" />
      <argument name="vertexBindingDescriptionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pVertexBindingDescriptions_" type="const vk::VertexInputBindingDescription *" default_raw="{}" />
      <argument name="vertexAttributeDescriptionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pVertexAttributeDescriptions_" type="const vk::VertexInputAttributeDescription *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineVertexInputStateCreateInfo">
      <argument name="rhs" type="const PipelineVertexInputStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineVertexInputStateCreateInfo">
      <argument name="rhs" type="const VkPipelineVertexInputStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineVertexInputStateCreateInfo">
      <argument name="flags_" type="vk::PipelineVertexInputStateCreateFlags" />
      <argument name="vertexBindingDescriptions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VertexInputBindingDescription&gt; &amp;" />
      <argument name="vertexAttributeDescriptions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VertexInputAttributeDescription&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineVertexInputStateCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineVertexInputStateCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineVertexInputStateCreateFlags" />
    </method>
    <method name="setVertexBindingDescriptionCount">
      <argument name="vertexBindingDescriptionCount_" type="uint32_t" />
    </method>
    <method name="setPVertexBindingDescriptions">
      <argument name="pVertexBindingDescriptions_" type="const vk::VertexInputBindingDescription *" />
    </method>
    <method name="setVertexBindingDescriptions">
      <argument name="vertexBindingDescriptions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VertexInputBindingDescription&gt; &amp;" />
    </method>
    <method name="setVertexAttributeDescriptionCount">
      <argument name="vertexAttributeDescriptionCount_" type="uint32_t" />
    </method>
    <method name="setPVertexAttributeDescriptions">
      <argument name="pVertexAttributeDescriptions_" type="const vk::VertexInputAttributeDescription *" />
    </method>
    <method name="setVertexAttributeDescriptions">
      <argument name="vertexAttributeDescriptions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VertexInputAttributeDescription&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineVertexInputStateCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineVertexInputStateCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineVertexInputStateCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineVertexInputStateCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="vertexBindingDescriptionCount" />
    <field name="pVertexBindingDescriptions" />
    <field name="vertexAttributeDescriptionCount" />
    <field name="pVertexAttributeDescriptions" />
  </struct>
  <struct name="PipelineViewportStateCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineViewportStateCreateInfo">
      <argument name="flags_" type="vk::PipelineViewportStateCreateFlags" default_raw="{}" />
      <argument name="viewportCount_" type="uint32_t" default_raw="{}" />
      <argument name="pViewports_" type="const vk::Viewport *" default_raw="{}" />
      <argument name="scissorCount_" type="uint32_t" default_raw="{}" />
      <argument name="pScissors_" type="const vk::Rect2D *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineViewportStateCreateInfo">
      <argument name="rhs" type="const PipelineViewportStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineViewportStateCreateInfo">
      <argument name="rhs" type="const VkPipelineViewportStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineViewportStateCreateInfo">
      <argument name="flags_" type="vk::PipelineViewportStateCreateFlags" />
      <argument name="viewports_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Viewport&gt; &amp;" />
      <argument name="scissors_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineViewportStateCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineViewportStateCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineViewportStateCreateFlags" />
    </method>
    <method name="setViewportCount">
      <argument name="viewportCount_" type="uint32_t" />
    </method>
    <method name="setPViewports">
      <argument name="pViewports_" type="const vk::Viewport *" />
    </method>
    <method name="setViewports">
      <argument name="viewports_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Viewport&gt; &amp;" />
    </method>
    <method name="setScissorCount">
      <argument name="scissorCount_" type="uint32_t" />
    </method>
    <method name="setPScissors">
      <argument name="pScissors_" type="const vk::Rect2D *" />
    </method>
    <method name="setScissors">
      <argument name="scissors_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineViewportStateCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineViewportStateCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineViewportStateCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineViewportStateCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="viewportCount" />
    <field name="pViewports" />
    <field name="scissorCount" />
    <field name="pScissors" />
  </struct>
  <struct name="PushConstantRange" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PushConstantRange">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="offset_" type="uint32_t" default_raw="{}" />
      <argument name="size_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="PushConstantRange">
      <argument name="rhs" type="const PushConstantRange &amp;" />
    </constructor>
    <constructor name="PushConstantRange">
      <argument name="rhs" type="const VkPushConstantRange &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PushConstantRange &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPushConstantRange &amp;" />
    </method>
    <method name="setStageFlags">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="uint32_t" />
    </method>
    <method name="setSize">
      <argument name="size_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkPushConstantRange &amp;" />
    <conversion_function name="operator VkPushConstantRange &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PushConstantRange &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PushConstantRange &amp;" />
    </method>
    <field name="stageFlags" />
    <field name="offset" />
    <field name="size" />
  </struct>
  <struct name="QueryPoolCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueryPoolCreateInfo">
      <argument name="flags_" type="vk::QueryPoolCreateFlags" default_raw="{}" />
      <argument name="queryType_" type="vk::QueryType" default_raw="VULKAN_HPP_NAMESPACE::QueryType::eOcclusion" />
      <argument name="queryCount_" type="uint32_t" default_raw="{}" />
      <argument name="pipelineStatistics_" type="vk::QueryPipelineStatisticFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="QueryPoolCreateInfo">
      <argument name="rhs" type="const QueryPoolCreateInfo &amp;" />
    </constructor>
    <constructor name="QueryPoolCreateInfo">
      <argument name="rhs" type="const VkQueryPoolCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueryPoolCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueryPoolCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::QueryPoolCreateFlags" />
    </method>
    <method name="setQueryType">
      <argument name="queryType_" type="vk::QueryType" />
    </method>
    <method name="setQueryCount">
      <argument name="queryCount_" type="uint32_t" />
    </method>
    <method name="setPipelineStatistics">
      <argument name="pipelineStatistics_" type="vk::QueryPipelineStatisticFlags" />
    </method>
    <conversion_function name="operator const VkQueryPoolCreateInfo &amp;" />
    <conversion_function name="operator VkQueryPoolCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueryPoolCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueryPoolCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="queryType" />
    <field name="queryCount" />
    <field name="pipelineStatistics" />
  </struct>
  <struct name="QueueFamilyProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueueFamilyProperties">
      <argument name="queueFlags_" type="vk::QueueFlags" default_raw="{}" />
      <argument name="queueCount_" type="uint32_t" default_raw="{}" />
      <argument name="timestampValidBits_" type="uint32_t" default_raw="{}" />
      <argument name="minImageTransferGranularity_" type="vk::Extent3D" default_raw="{}" />
    </constructor>
    <constructor name="QueueFamilyProperties">
      <argument name="rhs" type="const QueueFamilyProperties &amp;" />
    </constructor>
    <constructor name="QueueFamilyProperties">
      <argument name="rhs" type="const VkQueueFamilyProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueueFamilyProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueueFamilyProperties &amp;" />
    </method>
    <conversion_function name="operator const VkQueueFamilyProperties &amp;" />
    <conversion_function name="operator VkQueueFamilyProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueueFamilyProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueueFamilyProperties &amp;" />
    </method>
    <field name="queueFlags" />
    <field name="queueCount" />
    <field name="timestampValidBits" />
    <field name="minImageTransferGranularity" />
  </struct>
  <struct name="Rect2D" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="Rect2D">
      <argument name="offset_" type="vk::Offset2D" default_raw="{}" />
      <argument name="extent_" type="vk::Extent2D" default_raw="{}" />
    </constructor>
    <constructor name="Rect2D">
      <argument name="rhs" type="const Rect2D &amp;" />
    </constructor>
    <constructor name="Rect2D">
      <argument name="rhs" type="const VkRect2D &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const Rect2D &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRect2D &amp;" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="const vk::Offset2D &amp;" />
    </method>
    <method name="setExtent">
      <argument name="extent_" type="const vk::Extent2D &amp;" />
    </method>
    <conversion_function name="operator const VkRect2D &amp;" />
    <conversion_function name="operator VkRect2D &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const Rect2D &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Rect2D &amp;" />
    </method>
    <field name="offset" />
    <field name="extent" />
  </struct>
  <struct name="RenderPassBeginInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassBeginInfo">
      <argument name="renderPass_" type="vk::RenderPass" default_raw="{}" />
      <argument name="framebuffer_" type="vk::Framebuffer" default_raw="{}" />
      <argument name="renderArea_" type="vk::Rect2D" default_raw="{}" />
      <argument name="clearValueCount_" type="uint32_t" default_raw="{}" />
      <argument name="pClearValues_" type="const vk::ClearValue *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassBeginInfo">
      <argument name="rhs" type="const RenderPassBeginInfo &amp;" />
    </constructor>
    <constructor name="RenderPassBeginInfo">
      <argument name="rhs" type="const VkRenderPassBeginInfo &amp;" />
    </constructor>
    <constructor name="RenderPassBeginInfo">
      <argument name="renderPass_" type="vk::RenderPass" />
      <argument name="framebuffer_" type="vk::Framebuffer" />
      <argument name="renderArea_" type="vk::Rect2D" />
      <argument name="clearValues_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ClearValue&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassBeginInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassBeginInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setRenderPass">
      <argument name="renderPass_" type="vk::RenderPass" />
    </method>
    <method name="setFramebuffer">
      <argument name="framebuffer_" type="vk::Framebuffer" />
    </method>
    <method name="setRenderArea">
      <argument name="renderArea_" type="const vk::Rect2D &amp;" />
    </method>
    <method name="setClearValueCount">
      <argument name="clearValueCount_" type="uint32_t" />
    </method>
    <method name="setPClearValues">
      <argument name="pClearValues_" type="const vk::ClearValue *" />
    </method>
    <method name="setClearValues">
      <argument name="clearValues_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ClearValue&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassBeginInfo &amp;" />
    <conversion_function name="operator VkRenderPassBeginInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassBeginInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassBeginInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="renderPass" />
    <field name="framebuffer" />
    <field name="renderArea" />
    <field name="clearValueCount" />
    <field name="pClearValues" />
  </struct>
  <struct name="RenderPassCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassCreateInfo">
      <argument name="flags_" type="vk::RenderPassCreateFlags" default_raw="{}" />
      <argument name="attachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pAttachments_" type="const vk::AttachmentDescription *" default_raw="{}" />
      <argument name="subpassCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSubpasses_" type="const vk::SubpassDescription *" default_raw="{}" />
      <argument name="dependencyCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDependencies_" type="const vk::SubpassDependency *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassCreateInfo">
      <argument name="rhs" type="const RenderPassCreateInfo &amp;" />
    </constructor>
    <constructor name="RenderPassCreateInfo">
      <argument name="rhs" type="const VkRenderPassCreateInfo &amp;" />
    </constructor>
    <constructor name="RenderPassCreateInfo">
      <argument name="flags_" type="vk::RenderPassCreateFlags" />
      <argument name="attachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentDescription&gt; &amp;" />
      <argument name="subpasses_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubpassDescription&gt; &amp;" default_raw="{}" />
      <argument name="dependencies_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubpassDependency&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::RenderPassCreateFlags" />
    </method>
    <method name="setAttachmentCount">
      <argument name="attachmentCount_" type="uint32_t" />
    </method>
    <method name="setPAttachments">
      <argument name="pAttachments_" type="const vk::AttachmentDescription *" />
    </method>
    <method name="setAttachments">
      <argument name="attachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentDescription&gt; &amp;" />
    </method>
    <method name="setSubpassCount">
      <argument name="subpassCount_" type="uint32_t" />
    </method>
    <method name="setPSubpasses">
      <argument name="pSubpasses_" type="const vk::SubpassDescription *" />
    </method>
    <method name="setSubpasses">
      <argument name="subpasses_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubpassDescription&gt; &amp;" />
    </method>
    <method name="setDependencyCount">
      <argument name="dependencyCount_" type="uint32_t" />
    </method>
    <method name="setPDependencies">
      <argument name="pDependencies_" type="const vk::SubpassDependency *" />
    </method>
    <method name="setDependencies">
      <argument name="dependencies_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubpassDependency&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassCreateInfo &amp;" />
    <conversion_function name="operator VkRenderPassCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="attachmentCount" />
    <field name="pAttachments" />
    <field name="subpassCount" />
    <field name="pSubpasses" />
    <field name="dependencyCount" />
    <field name="pDependencies" />
  </struct>
  <struct name="SamplerCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SamplerCreateInfo">
      <argument name="flags_" type="vk::SamplerCreateFlags" default_raw="{}" />
      <argument name="magFilter_" type="vk::Filter" default_raw="VULKAN_HPP_NAMESPACE::Filter::eNearest" />
      <argument name="minFilter_" type="vk::Filter" default_raw="VULKAN_HPP_NAMESPACE::Filter::eNearest" />
      <argument name="mipmapMode_" type="vk::SamplerMipmapMode" default_raw="VULKAN_HPP_NAMESPACE::SamplerMipmapMode::eNearest" />
      <argument name="addressModeU_" type="vk::SamplerAddressMode" default_raw="VULKAN_HPP_NAMESPACE::SamplerAddressMode::eRepeat" />
      <argument name="addressModeV_" type="vk::SamplerAddressMode" default_raw="VULKAN_HPP_NAMESPACE::SamplerAddressMode::eRepeat" />
      <argument name="addressModeW_" type="vk::SamplerAddressMode" default_raw="VULKAN_HPP_NAMESPACE::SamplerAddressMode::eRepeat" />
      <argument name="mipLodBias_" type="float" default_raw="{}" />
      <argument name="anisotropyEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxAnisotropy_" type="float" default_raw="{}" />
      <argument name="compareEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="compareOp_" type="vk::CompareOp" default_raw="VULKAN_HPP_NAMESPACE::CompareOp::eNever" />
      <argument name="minLod_" type="float" default_raw="{}" />
      <argument name="maxLod_" type="float" default_raw="{}" />
      <argument name="borderColor_" type="vk::BorderColor" default_raw="VULKAN_HPP_NAMESPACE::BorderColor::eFloatTransparentBlack" />
      <argument name="unnormalizedCoordinates_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SamplerCreateInfo">
      <argument name="rhs" type="const SamplerCreateInfo &amp;" />
    </constructor>
    <constructor name="SamplerCreateInfo">
      <argument name="rhs" type="const VkSamplerCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SamplerCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSamplerCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::SamplerCreateFlags" />
    </method>
    <method name="setMagFilter">
      <argument name="magFilter_" type="vk::Filter" />
    </method>
    <method name="setMinFilter">
      <argument name="minFilter_" type="vk::Filter" />
    </method>
    <method name="setMipmapMode">
      <argument name="mipmapMode_" type="vk::SamplerMipmapMode" />
    </method>
    <method name="setAddressModeU">
      <argument name="addressModeU_" type="vk::SamplerAddressMode" />
    </method>
    <method name="setAddressModeV">
      <argument name="addressModeV_" type="vk::SamplerAddressMode" />
    </method>
    <method name="setAddressModeW">
      <argument name="addressModeW_" type="vk::SamplerAddressMode" />
    </method>
    <method name="setMipLodBias">
      <argument name="mipLodBias_" type="float" />
    </method>
    <method name="setAnisotropyEnable">
      <argument name="anisotropyEnable_" type="vk::Bool32" />
    </method>
    <method name="setMaxAnisotropy">
      <argument name="maxAnisotropy_" type="float" />
    </method>
    <method name="setCompareEnable">
      <argument name="compareEnable_" type="vk::Bool32" />
    </method>
    <method name="setCompareOp">
      <argument name="compareOp_" type="vk::CompareOp" />
    </method>
    <method name="setMinLod">
      <argument name="minLod_" type="float" />
    </method>
    <method name="setMaxLod">
      <argument name="maxLod_" type="float" />
    </method>
    <method name="setBorderColor">
      <argument name="borderColor_" type="vk::BorderColor" />
    </method>
    <method name="setUnnormalizedCoordinates">
      <argument name="unnormalizedCoordinates_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkSamplerCreateInfo &amp;" />
    <conversion_function name="operator VkSamplerCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SamplerCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SamplerCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="magFilter" />
    <field name="minFilter" />
    <field name="mipmapMode" />
    <field name="addressModeU" />
    <field name="addressModeV" />
    <field name="addressModeW" />
    <field name="mipLodBias" />
    <field name="anisotropyEnable" />
    <field name="maxAnisotropy" />
    <field name="compareEnable" />
    <field name="compareOp" />
    <field name="minLod" />
    <field name="maxLod" />
    <field name="borderColor" />
    <field name="unnormalizedCoordinates" />
  </struct>
  <struct name="SemaphoreCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SemaphoreCreateInfo">
      <argument name="flags_" type="vk::SemaphoreCreateFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SemaphoreCreateInfo">
      <argument name="rhs" type="const SemaphoreCreateInfo &amp;" />
    </constructor>
    <constructor name="SemaphoreCreateInfo">
      <argument name="rhs" type="const VkSemaphoreCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SemaphoreCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSemaphoreCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::SemaphoreCreateFlags" />
    </method>
    <conversion_function name="operator const VkSemaphoreCreateInfo &amp;" />
    <conversion_function name="operator VkSemaphoreCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SemaphoreCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SemaphoreCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
  </struct>
  <struct name="ShaderModuleCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ShaderModuleCreateInfo">
      <argument name="flags_" type="vk::ShaderModuleCreateFlags" default_raw="{}" />
      <argument name="codeSize_" type="size_t" default_raw="{}" />
      <argument name="pCode_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ShaderModuleCreateInfo">
      <argument name="rhs" type="const ShaderModuleCreateInfo &amp;" />
    </constructor>
    <constructor name="ShaderModuleCreateInfo">
      <argument name="rhs" type="const VkShaderModuleCreateInfo &amp;" />
    </constructor>
    <constructor name="ShaderModuleCreateInfo">
      <argument name="flags_" type="vk::ShaderModuleCreateFlags" />
      <argument name="code_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ShaderModuleCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkShaderModuleCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::ShaderModuleCreateFlags" />
    </method>
    <method name="setCodeSize">
      <argument name="codeSize_" type="size_t" />
    </method>
    <method name="setPCode">
      <argument name="pCode_" type="const uint32_t *" />
    </method>
    <method name="setCode">
      <argument name="code_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkShaderModuleCreateInfo &amp;" />
    <conversion_function name="operator VkShaderModuleCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ShaderModuleCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ShaderModuleCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="codeSize" />
    <field name="pCode" />
  </struct>
  <struct name="SparseBufferMemoryBindInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SparseBufferMemoryBindInfo">
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="bindCount_" type="uint32_t" default_raw="{}" />
      <argument name="pBinds_" type="const vk::SparseMemoryBind *" default_raw="{}" />
    </constructor>
    <constructor name="SparseBufferMemoryBindInfo">
      <argument name="rhs" type="const SparseBufferMemoryBindInfo &amp;" />
    </constructor>
    <constructor name="SparseBufferMemoryBindInfo">
      <argument name="rhs" type="const VkSparseBufferMemoryBindInfo &amp;" />
    </constructor>
    <constructor name="SparseBufferMemoryBindInfo">
      <argument name="buffer_" type="vk::Buffer" />
      <argument name="binds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseMemoryBind&gt; &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SparseBufferMemoryBindInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSparseBufferMemoryBindInfo &amp;" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <method name="setBindCount">
      <argument name="bindCount_" type="uint32_t" />
    </method>
    <method name="setPBinds">
      <argument name="pBinds_" type="const vk::SparseMemoryBind *" />
    </method>
    <method name="setBinds">
      <argument name="binds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseMemoryBind&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSparseBufferMemoryBindInfo &amp;" />
    <conversion_function name="operator VkSparseBufferMemoryBindInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SparseBufferMemoryBindInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SparseBufferMemoryBindInfo &amp;" />
    </method>
    <field name="buffer" />
    <field name="bindCount" />
    <field name="pBinds" />
  </struct>
  <struct name="SparseImageFormatProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SparseImageFormatProperties">
      <argument name="aspectMask_" type="vk::ImageAspectFlags" default_raw="{}" />
      <argument name="imageGranularity_" type="vk::Extent3D" default_raw="{}" />
      <argument name="flags_" type="vk::SparseImageFormatFlags" default_raw="{}" />
    </constructor>
    <constructor name="SparseImageFormatProperties">
      <argument name="rhs" type="const SparseImageFormatProperties &amp;" />
    </constructor>
    <constructor name="SparseImageFormatProperties">
      <argument name="rhs" type="const VkSparseImageFormatProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SparseImageFormatProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSparseImageFormatProperties &amp;" />
    </method>
    <conversion_function name="operator const VkSparseImageFormatProperties &amp;" />
    <conversion_function name="operator VkSparseImageFormatProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SparseImageFormatProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SparseImageFormatProperties &amp;" />
    </method>
    <field name="aspectMask" />
    <field name="imageGranularity" />
    <field name="flags" />
  </struct>
  <struct name="SparseImageMemoryBind" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SparseImageMemoryBind">
      <argument name="subresource_" type="vk::ImageSubresource" default_raw="{}" />
      <argument name="offset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="extent_" type="vk::Extent3D" default_raw="{}" />
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="memoryOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="flags_" type="vk::SparseMemoryBindFlags" default_raw="{}" />
    </constructor>
    <constructor name="SparseImageMemoryBind">
      <argument name="rhs" type="const SparseImageMemoryBind &amp;" />
    </constructor>
    <constructor name="SparseImageMemoryBind">
      <argument name="rhs" type="const VkSparseImageMemoryBind &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SparseImageMemoryBind &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSparseImageMemoryBind &amp;" />
    </method>
    <method name="setSubresource">
      <argument name="subresource_" type="const vk::ImageSubresource &amp;" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setExtent">
      <argument name="extent_" type="const vk::Extent3D &amp;" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <method name="setMemoryOffset">
      <argument name="memoryOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::SparseMemoryBindFlags" />
    </method>
    <conversion_function name="operator const VkSparseImageMemoryBind &amp;" />
    <conversion_function name="operator VkSparseImageMemoryBind &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SparseImageMemoryBind &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SparseImageMemoryBind &amp;" />
    </method>
    <field name="subresource" />
    <field name="offset" />
    <field name="extent" />
    <field name="memory" />
    <field name="memoryOffset" />
    <field name="flags" />
  </struct>
  <struct name="SparseImageMemoryBindInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SparseImageMemoryBindInfo">
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="bindCount_" type="uint32_t" default_raw="{}" />
      <argument name="pBinds_" type="const vk::SparseImageMemoryBind *" default_raw="{}" />
    </constructor>
    <constructor name="SparseImageMemoryBindInfo">
      <argument name="rhs" type="const SparseImageMemoryBindInfo &amp;" />
    </constructor>
    <constructor name="SparseImageMemoryBindInfo">
      <argument name="rhs" type="const VkSparseImageMemoryBindInfo &amp;" />
    </constructor>
    <constructor name="SparseImageMemoryBindInfo">
      <argument name="image_" type="vk::Image" />
      <argument name="binds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseImageMemoryBind&gt; &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SparseImageMemoryBindInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSparseImageMemoryBindInfo &amp;" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <method name="setBindCount">
      <argument name="bindCount_" type="uint32_t" />
    </method>
    <method name="setPBinds">
      <argument name="pBinds_" type="const vk::SparseImageMemoryBind *" />
    </method>
    <method name="setBinds">
      <argument name="binds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseImageMemoryBind&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSparseImageMemoryBindInfo &amp;" />
    <conversion_function name="operator VkSparseImageMemoryBindInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SparseImageMemoryBindInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SparseImageMemoryBindInfo &amp;" />
    </method>
    <field name="image" />
    <field name="bindCount" />
    <field name="pBinds" />
  </struct>
  <struct name="SparseImageMemoryRequirements" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SparseImageMemoryRequirements">
      <argument name="formatProperties_" type="vk::SparseImageFormatProperties" default_raw="{}" />
      <argument name="imageMipTailFirstLod_" type="uint32_t" default_raw="{}" />
      <argument name="imageMipTailSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="imageMipTailOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="imageMipTailStride_" type="vk::DeviceSize" default_raw="{}" />
    </constructor>
    <constructor name="SparseImageMemoryRequirements">
      <argument name="rhs" type="const SparseImageMemoryRequirements &amp;" />
    </constructor>
    <constructor name="SparseImageMemoryRequirements">
      <argument name="rhs" type="const VkSparseImageMemoryRequirements &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SparseImageMemoryRequirements &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSparseImageMemoryRequirements &amp;" />
    </method>
    <conversion_function name="operator const VkSparseImageMemoryRequirements &amp;" />
    <conversion_function name="operator VkSparseImageMemoryRequirements &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SparseImageMemoryRequirements &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SparseImageMemoryRequirements &amp;" />
    </method>
    <field name="formatProperties" />
    <field name="imageMipTailFirstLod" />
    <field name="imageMipTailSize" />
    <field name="imageMipTailOffset" />
    <field name="imageMipTailStride" />
  </struct>
  <struct name="SparseImageOpaqueMemoryBindInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SparseImageOpaqueMemoryBindInfo">
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="bindCount_" type="uint32_t" default_raw="{}" />
      <argument name="pBinds_" type="const vk::SparseMemoryBind *" default_raw="{}" />
    </constructor>
    <constructor name="SparseImageOpaqueMemoryBindInfo">
      <argument name="rhs" type="const SparseImageOpaqueMemoryBindInfo &amp;" />
    </constructor>
    <constructor name="SparseImageOpaqueMemoryBindInfo">
      <argument name="rhs" type="const VkSparseImageOpaqueMemoryBindInfo &amp;" />
    </constructor>
    <constructor name="SparseImageOpaqueMemoryBindInfo">
      <argument name="image_" type="vk::Image" />
      <argument name="binds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseMemoryBind&gt; &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SparseImageOpaqueMemoryBindInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSparseImageOpaqueMemoryBindInfo &amp;" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <method name="setBindCount">
      <argument name="bindCount_" type="uint32_t" />
    </method>
    <method name="setPBinds">
      <argument name="pBinds_" type="const vk::SparseMemoryBind *" />
    </method>
    <method name="setBinds">
      <argument name="binds_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SparseMemoryBind&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSparseImageOpaqueMemoryBindInfo &amp;" />
    <conversion_function name="operator VkSparseImageOpaqueMemoryBindInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SparseImageOpaqueMemoryBindInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SparseImageOpaqueMemoryBindInfo &amp;" />
    </method>
    <field name="image" />
    <field name="bindCount" />
    <field name="pBinds" />
  </struct>
  <struct name="SparseMemoryBind" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SparseMemoryBind">
      <argument name="resourceOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="memoryOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="flags_" type="vk::SparseMemoryBindFlags" default_raw="{}" />
    </constructor>
    <constructor name="SparseMemoryBind">
      <argument name="rhs" type="const SparseMemoryBind &amp;" />
    </constructor>
    <constructor name="SparseMemoryBind">
      <argument name="rhs" type="const VkSparseMemoryBind &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SparseMemoryBind &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSparseMemoryBind &amp;" />
    </method>
    <method name="setResourceOffset">
      <argument name="resourceOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <method name="setMemoryOffset">
      <argument name="memoryOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::SparseMemoryBindFlags" />
    </method>
    <conversion_function name="operator const VkSparseMemoryBind &amp;" />
    <conversion_function name="operator VkSparseMemoryBind &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SparseMemoryBind &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SparseMemoryBind &amp;" />
    </method>
    <field name="resourceOffset" />
    <field name="size" />
    <field name="memory" />
    <field name="memoryOffset" />
    <field name="flags" />
  </struct>
  <struct name="SpecializationInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SpecializationInfo">
      <argument name="mapEntryCount_" type="uint32_t" default_raw="{}" />
      <argument name="pMapEntries_" type="const vk::SpecializationMapEntry *" default_raw="{}" />
      <argument name="dataSize_" type="size_t" default_raw="{}" />
      <argument name="pData_" type="const void *" default_raw="{}" />
    </constructor>
    <constructor name="SpecializationInfo">
      <argument name="rhs" type="const SpecializationInfo &amp;" />
    </constructor>
    <constructor name="SpecializationInfo">
      <argument name="rhs" type="const VkSpecializationInfo &amp;" />
    </constructor>
    <method name="SpecializationInfo" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const SpecializationInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSpecializationInfo &amp;" />
    </method>
    <method name="setMapEntryCount">
      <argument name="mapEntryCount_" type="uint32_t" />
    </method>
    <method name="setPMapEntries">
      <argument name="pMapEntries_" type="const vk::SpecializationMapEntry *" />
    </method>
    <method name="setMapEntries">
      <argument name="mapEntries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SpecializationMapEntry&gt; &amp;" />
    </method>
    <method name="setDataSize">
      <argument name="dataSize_" type="size_t" />
    </method>
    <method name="setPData">
      <argument name="pData_" type="const void *" />
    </method>
    <method name="setData" template_raw="template &lt;typename T&gt;" />
    <conversion_function name="operator const VkSpecializationInfo &amp;" />
    <conversion_function name="operator VkSpecializationInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SpecializationInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SpecializationInfo &amp;" />
    </method>
    <field name="mapEntryCount" />
    <field name="pMapEntries" />
    <field name="dataSize" />
    <field name="pData" />
  </struct>
  <struct name="SpecializationMapEntry" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SpecializationMapEntry">
      <argument name="constantID_" type="uint32_t" default_raw="{}" />
      <argument name="offset_" type="uint32_t" default_raw="{}" />
      <argument name="size_" type="size_t" default_raw="{}" />
    </constructor>
    <constructor name="SpecializationMapEntry">
      <argument name="rhs" type="const SpecializationMapEntry &amp;" />
    </constructor>
    <constructor name="SpecializationMapEntry">
      <argument name="rhs" type="const VkSpecializationMapEntry &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SpecializationMapEntry &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSpecializationMapEntry &amp;" />
    </method>
    <method name="setConstantID">
      <argument name="constantID_" type="uint32_t" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="uint32_t" />
    </method>
    <method name="setSize">
      <argument name="size_" type="size_t" />
    </method>
    <conversion_function name="operator const VkSpecializationMapEntry &amp;" />
    <conversion_function name="operator VkSpecializationMapEntry &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SpecializationMapEntry &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SpecializationMapEntry &amp;" />
    </method>
    <field name="constantID" />
    <field name="offset" />
    <field name="size" />
  </struct>
  <struct name="StencilOpState" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="StencilOpState">
      <argument name="failOp_" type="vk::StencilOp" default_raw="VULKAN_HPP_NAMESPACE::StencilOp::eKeep" />
      <argument name="passOp_" type="vk::StencilOp" default_raw="VULKAN_HPP_NAMESPACE::StencilOp::eKeep" />
      <argument name="depthFailOp_" type="vk::StencilOp" default_raw="VULKAN_HPP_NAMESPACE::StencilOp::eKeep" />
      <argument name="compareOp_" type="vk::CompareOp" default_raw="VULKAN_HPP_NAMESPACE::CompareOp::eNever" />
      <argument name="compareMask_" type="uint32_t" default_raw="{}" />
      <argument name="writeMask_" type="uint32_t" default_raw="{}" />
      <argument name="reference_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="StencilOpState">
      <argument name="rhs" type="const StencilOpState &amp;" />
    </constructor>
    <constructor name="StencilOpState">
      <argument name="rhs" type="const VkStencilOpState &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const StencilOpState &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkStencilOpState &amp;" />
    </method>
    <method name="setFailOp">
      <argument name="failOp_" type="vk::StencilOp" />
    </method>
    <method name="setPassOp">
      <argument name="passOp_" type="vk::StencilOp" />
    </method>
    <method name="setDepthFailOp">
      <argument name="depthFailOp_" type="vk::StencilOp" />
    </method>
    <method name="setCompareOp">
      <argument name="compareOp_" type="vk::CompareOp" />
    </method>
    <method name="setCompareMask">
      <argument name="compareMask_" type="uint32_t" />
    </method>
    <method name="setWriteMask">
      <argument name="writeMask_" type="uint32_t" />
    </method>
    <method name="setReference">
      <argument name="reference_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkStencilOpState &amp;" />
    <conversion_function name="operator VkStencilOpState &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const StencilOpState &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const StencilOpState &amp;" />
    </method>
    <field name="failOp" />
    <field name="passOp" />
    <field name="depthFailOp" />
    <field name="compareOp" />
    <field name="compareMask" />
    <field name="writeMask" />
    <field name="reference" />
  </struct>
  <struct name="SubmitInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubmitInfo">
      <argument name="waitSemaphoreCount_" type="uint32_t" default_raw="{}" />
      <argument name="pWaitSemaphores_" type="const vk::Semaphore *" default_raw="{}" />
      <argument name="pWaitDstStageMask_" type="const vk::PipelineStageFlags *" default_raw="{}" />
      <argument name="commandBufferCount_" type="uint32_t" default_raw="{}" />
      <argument name="pCommandBuffers_" type="const vk::CommandBuffer *" default_raw="{}" />
      <argument name="signalSemaphoreCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSignalSemaphores_" type="const vk::Semaphore *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubmitInfo">
      <argument name="rhs" type="const SubmitInfo &amp;" />
    </constructor>
    <constructor name="SubmitInfo">
      <argument name="rhs" type="const VkSubmitInfo &amp;" />
    </constructor>
    <constructor name="SubmitInfo">
      <argument name="waitSemaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" />
      <argument name="waitDstStageMask_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineStageFlags&gt; &amp;" default_raw="{}" />
      <argument name="commandBuffers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::CommandBuffer&gt; &amp;" default_raw="{}" />
      <argument name="signalSemaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubmitInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubmitInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setWaitSemaphoreCount">
      <argument name="waitSemaphoreCount_" type="uint32_t" />
    </method>
    <method name="setPWaitSemaphores">
      <argument name="pWaitSemaphores_" type="const vk::Semaphore *" />
    </method>
    <method name="setWaitSemaphores">
      <argument name="waitSemaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" />
    </method>
    <method name="setPWaitDstStageMask">
      <argument name="pWaitDstStageMask_" type="const vk::PipelineStageFlags *" />
    </method>
    <method name="setWaitDstStageMask">
      <argument name="waitDstStageMask_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineStageFlags&gt; &amp;" />
    </method>
    <method name="setCommandBufferCount">
      <argument name="commandBufferCount_" type="uint32_t" />
    </method>
    <method name="setPCommandBuffers">
      <argument name="pCommandBuffers_" type="const vk::CommandBuffer *" />
    </method>
    <method name="setCommandBuffers">
      <argument name="commandBuffers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::CommandBuffer&gt; &amp;" />
    </method>
    <method name="setSignalSemaphoreCount">
      <argument name="signalSemaphoreCount_" type="uint32_t" />
    </method>
    <method name="setPSignalSemaphores">
      <argument name="pSignalSemaphores_" type="const vk::Semaphore *" />
    </method>
    <method name="setSignalSemaphores">
      <argument name="signalSemaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSubmitInfo &amp;" />
    <conversion_function name="operator VkSubmitInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubmitInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubmitInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="waitSemaphoreCount" />
    <field name="pWaitSemaphores" />
    <field name="pWaitDstStageMask" />
    <field name="commandBufferCount" />
    <field name="pCommandBuffers" />
    <field name="signalSemaphoreCount" />
    <field name="pSignalSemaphores" />
  </struct>
  <struct name="SubpassDependency" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubpassDependency">
      <argument name="srcSubpass_" type="uint32_t" default_raw="{}" />
      <argument name="dstSubpass_" type="uint32_t" default_raw="{}" />
      <argument name="srcStageMask_" type="vk::PipelineStageFlags" default_raw="{}" />
      <argument name="dstStageMask_" type="vk::PipelineStageFlags" default_raw="{}" />
      <argument name="srcAccessMask_" type="vk::AccessFlags" default_raw="{}" />
      <argument name="dstAccessMask_" type="vk::AccessFlags" default_raw="{}" />
      <argument name="dependencyFlags_" type="vk::DependencyFlags" default_raw="{}" />
    </constructor>
    <constructor name="SubpassDependency">
      <argument name="rhs" type="const SubpassDependency &amp;" />
    </constructor>
    <constructor name="SubpassDependency">
      <argument name="rhs" type="const VkSubpassDependency &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubpassDependency &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubpassDependency &amp;" />
    </method>
    <method name="setSrcSubpass">
      <argument name="srcSubpass_" type="uint32_t" />
    </method>
    <method name="setDstSubpass">
      <argument name="dstSubpass_" type="uint32_t" />
    </method>
    <method name="setSrcStageMask">
      <argument name="srcStageMask_" type="vk::PipelineStageFlags" />
    </method>
    <method name="setDstStageMask">
      <argument name="dstStageMask_" type="vk::PipelineStageFlags" />
    </method>
    <method name="setSrcAccessMask">
      <argument name="srcAccessMask_" type="vk::AccessFlags" />
    </method>
    <method name="setDstAccessMask">
      <argument name="dstAccessMask_" type="vk::AccessFlags" />
    </method>
    <method name="setDependencyFlags">
      <argument name="dependencyFlags_" type="vk::DependencyFlags" />
    </method>
    <conversion_function name="operator const VkSubpassDependency &amp;" />
    <conversion_function name="operator VkSubpassDependency &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubpassDependency &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubpassDependency &amp;" />
    </method>
    <field name="srcSubpass" />
    <field name="dstSubpass" />
    <field name="srcStageMask" />
    <field name="dstStageMask" />
    <field name="srcAccessMask" />
    <field name="dstAccessMask" />
    <field name="dependencyFlags" />
  </struct>
  <struct name="SubpassDescription" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubpassDescription">
      <argument name="flags_" type="vk::SubpassDescriptionFlags" default_raw="{}" />
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" default_raw="VULKAN_HPP_NAMESPACE::PipelineBindPoint::eGraphics" />
      <argument name="inputAttachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pInputAttachments_" type="const vk::AttachmentReference *" default_raw="{}" />
      <argument name="colorAttachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pColorAttachments_" type="const vk::AttachmentReference *" default_raw="{}" />
      <argument name="pResolveAttachments_" type="const vk::AttachmentReference *" default_raw="{}" />
      <argument name="pDepthStencilAttachment_" type="const vk::AttachmentReference *" default_raw="{}" />
      <argument name="preserveAttachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPreserveAttachments_" type="const uint32_t *" default_raw="{}" />
    </constructor>
    <constructor name="SubpassDescription">
      <argument name="rhs" type="const SubpassDescription &amp;" />
    </constructor>
    <constructor name="SubpassDescription">
      <argument name="rhs" type="const VkSubpassDescription &amp;" />
    </constructor>
    <constructor name="SubpassDescription">
      <argument name="flags_" type="vk::SubpassDescriptionFlags" />
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" />
      <argument name="inputAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference&gt; &amp;" />
      <argument name="colorAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference&gt; &amp;" default_raw="{}" />
      <argument name="resolveAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference&gt; &amp;" default_raw="{}" />
      <argument name="pDepthStencilAttachment_" type="const vk::AttachmentReference *" default_raw="{}" />
      <argument name="preserveAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" default_raw="{}" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubpassDescription &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubpassDescription &amp;" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::SubpassDescriptionFlags" />
    </method>
    <method name="setPipelineBindPoint">
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" />
    </method>
    <method name="setInputAttachmentCount">
      <argument name="inputAttachmentCount_" type="uint32_t" />
    </method>
    <method name="setPInputAttachments">
      <argument name="pInputAttachments_" type="const vk::AttachmentReference *" />
    </method>
    <method name="setInputAttachments">
      <argument name="inputAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference&gt; &amp;" />
    </method>
    <method name="setColorAttachmentCount">
      <argument name="colorAttachmentCount_" type="uint32_t" />
    </method>
    <method name="setPColorAttachments">
      <argument name="pColorAttachments_" type="const vk::AttachmentReference *" />
    </method>
    <method name="setColorAttachments">
      <argument name="colorAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference&gt; &amp;" />
    </method>
    <method name="setPResolveAttachments">
      <argument name="pResolveAttachments_" type="const vk::AttachmentReference *" />
    </method>
    <method name="setResolveAttachments">
      <argument name="resolveAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference&gt; &amp;" />
    </method>
    <method name="setPDepthStencilAttachment">
      <argument name="pDepthStencilAttachment_" type="const vk::AttachmentReference *" />
    </method>
    <method name="setPreserveAttachmentCount">
      <argument name="preserveAttachmentCount_" type="uint32_t" />
    </method>
    <method name="setPPreserveAttachments">
      <argument name="pPreserveAttachments_" type="const uint32_t *" />
    </method>
    <method name="setPreserveAttachments">
      <argument name="preserveAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSubpassDescription &amp;" />
    <conversion_function name="operator VkSubpassDescription &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubpassDescription &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubpassDescription &amp;" />
    </method>
    <field name="flags" />
    <field name="pipelineBindPoint" />
    <field name="inputAttachmentCount" />
    <field name="pInputAttachments" />
    <field name="colorAttachmentCount" />
    <field name="pColorAttachments" />
    <field name="pResolveAttachments" />
    <field name="pDepthStencilAttachment" />
    <field name="preserveAttachmentCount" />
    <field name="pPreserveAttachments" />
  </struct>
  <struct name="SubresourceLayout" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubresourceLayout">
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="rowPitch_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="arrayPitch_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="depthPitch_" type="vk::DeviceSize" default_raw="{}" />
    </constructor>
    <constructor name="SubresourceLayout">
      <argument name="rhs" type="const SubresourceLayout &amp;" />
    </constructor>
    <constructor name="SubresourceLayout">
      <argument name="rhs" type="const VkSubresourceLayout &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubresourceLayout &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubresourceLayout &amp;" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <method name="setRowPitch">
      <argument name="rowPitch_" type="vk::DeviceSize" />
    </method>
    <method name="setArrayPitch">
      <argument name="arrayPitch_" type="vk::DeviceSize" />
    </method>
    <method name="setDepthPitch">
      <argument name="depthPitch_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkSubresourceLayout &amp;" />
    <conversion_function name="operator VkSubresourceLayout &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubresourceLayout &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubresourceLayout &amp;" />
    </method>
    <field name="offset" />
    <field name="size" />
    <field name="rowPitch" />
    <field name="arrayPitch" />
    <field name="depthPitch" />
  </struct>
  <struct name="VertexInputAttributeDescription" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VertexInputAttributeDescription">
      <argument name="location_" type="uint32_t" default_raw="{}" />
      <argument name="binding_" type="uint32_t" default_raw="{}" />
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="offset_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="VertexInputAttributeDescription">
      <argument name="rhs" type="const VertexInputAttributeDescription &amp;" />
    </constructor>
    <constructor name="VertexInputAttributeDescription">
      <argument name="rhs" type="const VkVertexInputAttributeDescription &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VertexInputAttributeDescription &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVertexInputAttributeDescription &amp;" />
    </method>
    <method name="setLocation">
      <argument name="location_" type="uint32_t" />
    </method>
    <method name="setBinding">
      <argument name="binding_" type="uint32_t" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVertexInputAttributeDescription &amp;" />
    <conversion_function name="operator VkVertexInputAttributeDescription &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VertexInputAttributeDescription &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VertexInputAttributeDescription &amp;" />
    </method>
    <field name="location" />
    <field name="binding" />
    <field name="format" />
    <field name="offset" />
  </struct>
  <struct name="VertexInputBindingDescription" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VertexInputBindingDescription">
      <argument name="binding_" type="uint32_t" default_raw="{}" />
      <argument name="stride_" type="uint32_t" default_raw="{}" />
      <argument name="inputRate_" type="vk::VertexInputRate" default_raw="VULKAN_HPP_NAMESPACE::VertexInputRate::eVertex" />
    </constructor>
    <constructor name="VertexInputBindingDescription">
      <argument name="rhs" type="const VertexInputBindingDescription &amp;" />
    </constructor>
    <constructor name="VertexInputBindingDescription">
      <argument name="rhs" type="const VkVertexInputBindingDescription &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VertexInputBindingDescription &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVertexInputBindingDescription &amp;" />
    </method>
    <method name="setBinding">
      <argument name="binding_" type="uint32_t" />
    </method>
    <method name="setStride">
      <argument name="stride_" type="uint32_t" />
    </method>
    <method name="setInputRate">
      <argument name="inputRate_" type="vk::VertexInputRate" />
    </method>
    <conversion_function name="operator const VkVertexInputBindingDescription &amp;" />
    <conversion_function name="operator VkVertexInputBindingDescription &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VertexInputBindingDescription &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VertexInputBindingDescription &amp;" />
    </method>
    <field name="binding" />
    <field name="stride" />
    <field name="inputRate" />
  </struct>
  <struct name="Viewport" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="Viewport">
      <argument name="x_" type="float" default_raw="{}" />
      <argument name="y_" type="float" default_raw="{}" />
      <argument name="width_" type="float" default_raw="{}" />
      <argument name="height_" type="float" default_raw="{}" />
      <argument name="minDepth_" type="float" default_raw="{}" />
      <argument name="maxDepth_" type="float" default_raw="{}" />
    </constructor>
    <constructor name="Viewport">
      <argument name="rhs" type="const Viewport &amp;" />
    </constructor>
    <constructor name="Viewport">
      <argument name="rhs" type="const VkViewport &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const Viewport &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkViewport &amp;" />
    </method>
    <method name="setX">
      <argument name="x_" type="float" />
    </method>
    <method name="setY">
      <argument name="y_" type="float" />
    </method>
    <method name="setWidth">
      <argument name="width_" type="float" />
    </method>
    <method name="setHeight">
      <argument name="height_" type="float" />
    </method>
    <method name="setMinDepth">
      <argument name="minDepth_" type="float" />
    </method>
    <method name="setMaxDepth">
      <argument name="maxDepth_" type="float" />
    </method>
    <conversion_function name="operator const VkViewport &amp;" />
    <conversion_function name="operator VkViewport &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const Viewport &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Viewport &amp;" />
    </method>
    <field name="x" />
    <field name="y" />
    <field name="width" />
    <field name="height" />
    <field name="minDepth" />
    <field name="maxDepth" />
  </struct>
  <struct name="WriteDescriptorSet" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="WriteDescriptorSet">
      <argument name="dstSet_" type="vk::DescriptorSet" default_raw="{}" />
      <argument name="dstBinding_" type="uint32_t" default_raw="{}" />
      <argument name="dstArrayElement_" type="uint32_t" default_raw="{}" />
      <argument name="descriptorCount_" type="uint32_t" default_raw="{}" />
      <argument name="descriptorType_" type="vk::DescriptorType" default_raw="VULKAN_HPP_NAMESPACE::DescriptorType::eSampler" />
      <argument name="pImageInfo_" type="const vk::DescriptorImageInfo *" default_raw="{}" />
      <argument name="pBufferInfo_" type="const vk::DescriptorBufferInfo *" default_raw="{}" />
      <argument name="pTexelBufferView_" type="const vk::BufferView *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="WriteDescriptorSet">
      <argument name="rhs" type="const WriteDescriptorSet &amp;" />
    </constructor>
    <constructor name="WriteDescriptorSet">
      <argument name="rhs" type="const VkWriteDescriptorSet &amp;" />
    </constructor>
    <constructor name="WriteDescriptorSet">
      <argument name="dstSet_" type="vk::DescriptorSet" />
      <argument name="dstBinding_" type="uint32_t" />
      <argument name="dstArrayElement_" type="uint32_t" />
      <argument name="descriptorType_" type="vk::DescriptorType" />
      <argument name="imageInfo_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorImageInfo&gt; &amp;" />
      <argument name="bufferInfo_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorBufferInfo&gt; &amp;" default_raw="{}" />
      <argument name="texelBufferView_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::BufferView&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const WriteDescriptorSet &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkWriteDescriptorSet &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDstSet">
      <argument name="dstSet_" type="vk::DescriptorSet" />
    </method>
    <method name="setDstBinding">
      <argument name="dstBinding_" type="uint32_t" />
    </method>
    <method name="setDstArrayElement">
      <argument name="dstArrayElement_" type="uint32_t" />
    </method>
    <method name="setDescriptorCount">
      <argument name="descriptorCount_" type="uint32_t" />
    </method>
    <method name="setDescriptorType">
      <argument name="descriptorType_" type="vk::DescriptorType" />
    </method>
    <method name="setPImageInfo">
      <argument name="pImageInfo_" type="const vk::DescriptorImageInfo *" />
    </method>
    <method name="setImageInfo">
      <argument name="imageInfo_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorImageInfo&gt; &amp;" />
    </method>
    <method name="setPBufferInfo">
      <argument name="pBufferInfo_" type="const vk::DescriptorBufferInfo *" />
    </method>
    <method name="setBufferInfo">
      <argument name="bufferInfo_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorBufferInfo&gt; &amp;" />
    </method>
    <method name="setPTexelBufferView">
      <argument name="pTexelBufferView_" type="const vk::BufferView *" />
    </method>
    <method name="setTexelBufferView">
      <argument name="texelBufferView_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::BufferView&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkWriteDescriptorSet &amp;" />
    <conversion_function name="operator VkWriteDescriptorSet &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const WriteDescriptorSet &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const WriteDescriptorSet &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="dstSet" />
    <field name="dstBinding" />
    <field name="dstArrayElement" />
    <field name="descriptorCount" />
    <field name="descriptorType" />
    <field name="pImageInfo" />
    <field name="pBufferInfo" />
    <field name="pTexelBufferView" />
  </struct>
  <struct name="BindBufferMemoryDeviceGroupInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindBufferMemoryDeviceGroupInfo">
      <argument name="deviceIndexCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDeviceIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindBufferMemoryDeviceGroupInfo">
      <argument name="rhs" type="const BindBufferMemoryDeviceGroupInfo &amp;" />
    </constructor>
    <constructor name="BindBufferMemoryDeviceGroupInfo">
      <argument name="rhs" type="const VkBindBufferMemoryDeviceGroupInfo &amp;" />
    </constructor>
    <constructor name="BindBufferMemoryDeviceGroupInfo">
      <argument name="deviceIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindBufferMemoryDeviceGroupInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindBufferMemoryDeviceGroupInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDeviceIndexCount">
      <argument name="deviceIndexCount_" type="uint32_t" />
    </method>
    <method name="setPDeviceIndices">
      <argument name="pDeviceIndices_" type="const uint32_t *" />
    </method>
    <method name="setDeviceIndices">
      <argument name="deviceIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkBindBufferMemoryDeviceGroupInfo &amp;" />
    <conversion_function name="operator VkBindBufferMemoryDeviceGroupInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindBufferMemoryDeviceGroupInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindBufferMemoryDeviceGroupInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceIndexCount" />
    <field name="pDeviceIndices" />
  </struct>
  <type_alias name="BindBufferMemoryDeviceGroupInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BindBufferMemoryDeviceGroupInfo" />
  <struct name="BindBufferMemoryInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindBufferMemoryInfo">
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="memoryOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindBufferMemoryInfo">
      <argument name="rhs" type="const BindBufferMemoryInfo &amp;" />
    </constructor>
    <constructor name="BindBufferMemoryInfo">
      <argument name="rhs" type="const VkBindBufferMemoryInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindBufferMemoryInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindBufferMemoryInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <method name="setMemoryOffset">
      <argument name="memoryOffset_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkBindBufferMemoryInfo &amp;" />
    <conversion_function name="operator VkBindBufferMemoryInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindBufferMemoryInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindBufferMemoryInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="buffer" />
    <field name="memory" />
    <field name="memoryOffset" />
  </struct>
  <type_alias name="BindBufferMemoryInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BindBufferMemoryInfo" />
  <struct name="BindImageMemoryDeviceGroupInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindImageMemoryDeviceGroupInfo">
      <argument name="deviceIndexCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDeviceIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="splitInstanceBindRegionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSplitInstanceBindRegions_" type="const vk::Rect2D *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindImageMemoryDeviceGroupInfo">
      <argument name="rhs" type="const BindImageMemoryDeviceGroupInfo &amp;" />
    </constructor>
    <constructor name="BindImageMemoryDeviceGroupInfo">
      <argument name="rhs" type="const VkBindImageMemoryDeviceGroupInfo &amp;" />
    </constructor>
    <constructor name="BindImageMemoryDeviceGroupInfo">
      <argument name="deviceIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="splitInstanceBindRegions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindImageMemoryDeviceGroupInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindImageMemoryDeviceGroupInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDeviceIndexCount">
      <argument name="deviceIndexCount_" type="uint32_t" />
    </method>
    <method name="setPDeviceIndices">
      <argument name="pDeviceIndices_" type="const uint32_t *" />
    </method>
    <method name="setDeviceIndices">
      <argument name="deviceIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <method name="setSplitInstanceBindRegionCount">
      <argument name="splitInstanceBindRegionCount_" type="uint32_t" />
    </method>
    <method name="setPSplitInstanceBindRegions">
      <argument name="pSplitInstanceBindRegions_" type="const vk::Rect2D *" />
    </method>
    <method name="setSplitInstanceBindRegions">
      <argument name="splitInstanceBindRegions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkBindImageMemoryDeviceGroupInfo &amp;" />
    <conversion_function name="operator VkBindImageMemoryDeviceGroupInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindImageMemoryDeviceGroupInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindImageMemoryDeviceGroupInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceIndexCount" />
    <field name="pDeviceIndices" />
    <field name="splitInstanceBindRegionCount" />
    <field name="pSplitInstanceBindRegions" />
  </struct>
  <type_alias name="BindImageMemoryDeviceGroupInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BindImageMemoryDeviceGroupInfo" />
  <struct name="BindImageMemoryInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindImageMemoryInfo">
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="memoryOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindImageMemoryInfo">
      <argument name="rhs" type="const BindImageMemoryInfo &amp;" />
    </constructor>
    <constructor name="BindImageMemoryInfo">
      <argument name="rhs" type="const VkBindImageMemoryInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindImageMemoryInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindImageMemoryInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <method name="setMemoryOffset">
      <argument name="memoryOffset_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkBindImageMemoryInfo &amp;" />
    <conversion_function name="operator VkBindImageMemoryInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindImageMemoryInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindImageMemoryInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="image" />
    <field name="memory" />
    <field name="memoryOffset" />
  </struct>
  <type_alias name="BindImageMemoryInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BindImageMemoryInfo" />
  <struct name="BindImagePlaneMemoryInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindImagePlaneMemoryInfo">
      <argument name="planeAspect_" type="vk::ImageAspectFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ImageAspectFlagBits::eColor" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindImagePlaneMemoryInfo">
      <argument name="rhs" type="const BindImagePlaneMemoryInfo &amp;" />
    </constructor>
    <constructor name="BindImagePlaneMemoryInfo">
      <argument name="rhs" type="const VkBindImagePlaneMemoryInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindImagePlaneMemoryInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindImagePlaneMemoryInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPlaneAspect">
      <argument name="planeAspect_" type="vk::ImageAspectFlagBits" />
    </method>
    <conversion_function name="operator const VkBindImagePlaneMemoryInfo &amp;" />
    <conversion_function name="operator VkBindImagePlaneMemoryInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindImagePlaneMemoryInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindImagePlaneMemoryInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="planeAspect" />
  </struct>
  <type_alias name="BindImagePlaneMemoryInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BindImagePlaneMemoryInfo" />
  <struct name="BufferMemoryRequirementsInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferMemoryRequirementsInfo2">
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferMemoryRequirementsInfo2">
      <argument name="rhs" type="const BufferMemoryRequirementsInfo2 &amp;" />
    </constructor>
    <constructor name="BufferMemoryRequirementsInfo2">
      <argument name="rhs" type="const VkBufferMemoryRequirementsInfo2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <conversion_function name="operator const VkBufferMemoryRequirementsInfo2 &amp;" />
    <conversion_function name="operator VkBufferMemoryRequirementsInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferMemoryRequirementsInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="buffer" />
  </struct>
  <type_alias name="BufferMemoryRequirementsInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BufferMemoryRequirementsInfo2" />
  <struct name="DescriptorSetLayoutSupport" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorSetLayoutSupport">
      <argument name="supported_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorSetLayoutSupport">
      <argument name="rhs" type="const DescriptorSetLayoutSupport &amp;" />
    </constructor>
    <constructor name="DescriptorSetLayoutSupport">
      <argument name="rhs" type="const VkDescriptorSetLayoutSupport &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorSetLayoutSupport &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorSetLayoutSupport &amp;" />
    </method>
    <conversion_function name="operator const VkDescriptorSetLayoutSupport &amp;" />
    <conversion_function name="operator VkDescriptorSetLayoutSupport &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorSetLayoutSupport &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorSetLayoutSupport &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="supported" />
  </struct>
  <type_alias name="DescriptorSetLayoutSupportKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DescriptorSetLayoutSupport" />
  <struct name="DescriptorUpdateTemplateCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorUpdateTemplateCreateInfo">
      <argument name="flags_" type="vk::DescriptorUpdateTemplateCreateFlags" default_raw="{}" />
      <argument name="descriptorUpdateEntryCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDescriptorUpdateEntries_" type="const vk::DescriptorUpdateTemplateEntry *" default_raw="{}" />
      <argument name="templateType_" type="vk::DescriptorUpdateTemplateType" default_raw="VULKAN_HPP_NAMESPACE::DescriptorUpdateTemplateType::eDescriptorSet" />
      <argument name="descriptorSetLayout_" type="vk::DescriptorSetLayout" default_raw="{}" />
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" default_raw="VULKAN_HPP_NAMESPACE::PipelineBindPoint::eGraphics" />
      <argument name="pipelineLayout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="set_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorUpdateTemplateCreateInfo">
      <argument name="rhs" type="const DescriptorUpdateTemplateCreateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorUpdateTemplateCreateInfo">
      <argument name="rhs" type="const VkDescriptorUpdateTemplateCreateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorUpdateTemplateCreateInfo">
      <argument name="flags_" type="vk::DescriptorUpdateTemplateCreateFlags" />
      <argument name="descriptorUpdateEntries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorUpdateTemplateEntry&gt; &amp;" />
      <argument name="templateType_" type="vk::DescriptorUpdateTemplateType" default_raw="VULKAN_HPP_NAMESPACE::DescriptorUpdateTemplateType::eDescriptorSet" />
      <argument name="descriptorSetLayout_" type="vk::DescriptorSetLayout" default_raw="{}" />
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" default_raw="VULKAN_HPP_NAMESPACE::PipelineBindPoint::eGraphics" />
      <argument name="pipelineLayout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="set_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorUpdateTemplateCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorUpdateTemplateCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DescriptorUpdateTemplateCreateFlags" />
    </method>
    <method name="setDescriptorUpdateEntryCount">
      <argument name="descriptorUpdateEntryCount_" type="uint32_t" />
    </method>
    <method name="setPDescriptorUpdateEntries">
      <argument name="pDescriptorUpdateEntries_" type="const vk::DescriptorUpdateTemplateEntry *" />
    </method>
    <method name="setDescriptorUpdateEntries">
      <argument name="descriptorUpdateEntries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorUpdateTemplateEntry&gt; &amp;" />
    </method>
    <method name="setTemplateType">
      <argument name="templateType_" type="vk::DescriptorUpdateTemplateType" />
    </method>
    <method name="setDescriptorSetLayout">
      <argument name="descriptorSetLayout_" type="vk::DescriptorSetLayout" />
    </method>
    <method name="setPipelineBindPoint">
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" />
    </method>
    <method name="setPipelineLayout">
      <argument name="pipelineLayout_" type="vk::PipelineLayout" />
    </method>
    <method name="setSet">
      <argument name="set_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDescriptorUpdateTemplateCreateInfo &amp;" />
    <conversion_function name="operator VkDescriptorUpdateTemplateCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorUpdateTemplateCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorUpdateTemplateCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="descriptorUpdateEntryCount" />
    <field name="pDescriptorUpdateEntries" />
    <field name="templateType" />
    <field name="descriptorSetLayout" />
    <field name="pipelineBindPoint" />
    <field name="pipelineLayout" />
    <field name="set" />
  </struct>
  <type_alias name="DescriptorUpdateTemplateCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DescriptorUpdateTemplateCreateInfo" />
  <struct name="DescriptorUpdateTemplateEntry" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorUpdateTemplateEntry">
      <argument name="dstBinding_" type="uint32_t" default_raw="{}" />
      <argument name="dstArrayElement_" type="uint32_t" default_raw="{}" />
      <argument name="descriptorCount_" type="uint32_t" default_raw="{}" />
      <argument name="descriptorType_" type="vk::DescriptorType" default_raw="VULKAN_HPP_NAMESPACE::DescriptorType::eSampler" />
      <argument name="offset_" type="size_t" default_raw="{}" />
      <argument name="stride_" type="size_t" default_raw="{}" />
    </constructor>
    <constructor name="DescriptorUpdateTemplateEntry">
      <argument name="rhs" type="const DescriptorUpdateTemplateEntry &amp;" />
    </constructor>
    <constructor name="DescriptorUpdateTemplateEntry">
      <argument name="rhs" type="const VkDescriptorUpdateTemplateEntry &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorUpdateTemplateEntry &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorUpdateTemplateEntry &amp;" />
    </method>
    <method name="setDstBinding">
      <argument name="dstBinding_" type="uint32_t" />
    </method>
    <method name="setDstArrayElement">
      <argument name="dstArrayElement_" type="uint32_t" />
    </method>
    <method name="setDescriptorCount">
      <argument name="descriptorCount_" type="uint32_t" />
    </method>
    <method name="setDescriptorType">
      <argument name="descriptorType_" type="vk::DescriptorType" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="size_t" />
    </method>
    <method name="setStride">
      <argument name="stride_" type="size_t" />
    </method>
    <conversion_function name="operator const VkDescriptorUpdateTemplateEntry &amp;" />
    <conversion_function name="operator VkDescriptorUpdateTemplateEntry &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorUpdateTemplateEntry &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorUpdateTemplateEntry &amp;" />
    </method>
    <field name="dstBinding" />
    <field name="dstArrayElement" />
    <field name="descriptorCount" />
    <field name="descriptorType" />
    <field name="offset" />
    <field name="stride" />
  </struct>
  <type_alias name="DescriptorUpdateTemplateEntryKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DescriptorUpdateTemplateEntry" />
  <struct name="DeviceGroupBindSparseInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceGroupBindSparseInfo">
      <argument name="resourceDeviceIndex_" type="uint32_t" default_raw="{}" />
      <argument name="memoryDeviceIndex_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceGroupBindSparseInfo">
      <argument name="rhs" type="const DeviceGroupBindSparseInfo &amp;" />
    </constructor>
    <constructor name="DeviceGroupBindSparseInfo">
      <argument name="rhs" type="const VkDeviceGroupBindSparseInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceGroupBindSparseInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceGroupBindSparseInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setResourceDeviceIndex">
      <argument name="resourceDeviceIndex_" type="uint32_t" />
    </method>
    <method name="setMemoryDeviceIndex">
      <argument name="memoryDeviceIndex_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDeviceGroupBindSparseInfo &amp;" />
    <conversion_function name="operator VkDeviceGroupBindSparseInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceGroupBindSparseInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceGroupBindSparseInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="resourceDeviceIndex" />
    <field name="memoryDeviceIndex" />
  </struct>
  <type_alias name="DeviceGroupBindSparseInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DeviceGroupBindSparseInfo" />
  <struct name="DeviceGroupCommandBufferBeginInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceGroupCommandBufferBeginInfo">
      <argument name="deviceMask_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceGroupCommandBufferBeginInfo">
      <argument name="rhs" type="const DeviceGroupCommandBufferBeginInfo &amp;" />
    </constructor>
    <constructor name="DeviceGroupCommandBufferBeginInfo">
      <argument name="rhs" type="const VkDeviceGroupCommandBufferBeginInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceGroupCommandBufferBeginInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceGroupCommandBufferBeginInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDeviceMask">
      <argument name="deviceMask_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDeviceGroupCommandBufferBeginInfo &amp;" />
    <conversion_function name="operator VkDeviceGroupCommandBufferBeginInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceGroupCommandBufferBeginInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceGroupCommandBufferBeginInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceMask" />
  </struct>
  <type_alias name="DeviceGroupCommandBufferBeginInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DeviceGroupCommandBufferBeginInfo" />
  <struct name="DeviceGroupDeviceCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceGroupDeviceCreateInfo">
      <argument name="physicalDeviceCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPhysicalDevices_" type="const vk::PhysicalDevice *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceGroupDeviceCreateInfo">
      <argument name="rhs" type="const DeviceGroupDeviceCreateInfo &amp;" />
    </constructor>
    <constructor name="DeviceGroupDeviceCreateInfo">
      <argument name="rhs" type="const VkDeviceGroupDeviceCreateInfo &amp;" />
    </constructor>
    <constructor name="DeviceGroupDeviceCreateInfo">
      <argument name="physicalDevices_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PhysicalDevice&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceGroupDeviceCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceGroupDeviceCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPhysicalDeviceCount">
      <argument name="physicalDeviceCount_" type="uint32_t" />
    </method>
    <method name="setPPhysicalDevices">
      <argument name="pPhysicalDevices_" type="const vk::PhysicalDevice *" />
    </method>
    <method name="setPhysicalDevices">
      <argument name="physicalDevices_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PhysicalDevice&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDeviceGroupDeviceCreateInfo &amp;" />
    <conversion_function name="operator VkDeviceGroupDeviceCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceGroupDeviceCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceGroupDeviceCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="physicalDeviceCount" />
    <field name="pPhysicalDevices" />
  </struct>
  <type_alias name="DeviceGroupDeviceCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DeviceGroupDeviceCreateInfo" />
  <struct name="DeviceGroupRenderPassBeginInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceGroupRenderPassBeginInfo">
      <argument name="deviceMask_" type="uint32_t" default_raw="{}" />
      <argument name="deviceRenderAreaCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDeviceRenderAreas_" type="const vk::Rect2D *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceGroupRenderPassBeginInfo">
      <argument name="rhs" type="const DeviceGroupRenderPassBeginInfo &amp;" />
    </constructor>
    <constructor name="DeviceGroupRenderPassBeginInfo">
      <argument name="rhs" type="const VkDeviceGroupRenderPassBeginInfo &amp;" />
    </constructor>
    <constructor name="DeviceGroupRenderPassBeginInfo">
      <argument name="deviceMask_" type="uint32_t" />
      <argument name="deviceRenderAreas_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceGroupRenderPassBeginInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceGroupRenderPassBeginInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDeviceMask">
      <argument name="deviceMask_" type="uint32_t" />
    </method>
    <method name="setDeviceRenderAreaCount">
      <argument name="deviceRenderAreaCount_" type="uint32_t" />
    </method>
    <method name="setPDeviceRenderAreas">
      <argument name="pDeviceRenderAreas_" type="const vk::Rect2D *" />
    </method>
    <method name="setDeviceRenderAreas">
      <argument name="deviceRenderAreas_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDeviceGroupRenderPassBeginInfo &amp;" />
    <conversion_function name="operator VkDeviceGroupRenderPassBeginInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceGroupRenderPassBeginInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceGroupRenderPassBeginInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceMask" />
    <field name="deviceRenderAreaCount" />
    <field name="pDeviceRenderAreas" />
  </struct>
  <type_alias name="DeviceGroupRenderPassBeginInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DeviceGroupRenderPassBeginInfo" />
  <struct name="DeviceGroupSubmitInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceGroupSubmitInfo">
      <argument name="waitSemaphoreCount_" type="uint32_t" default_raw="{}" />
      <argument name="pWaitSemaphoreDeviceIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="commandBufferCount_" type="uint32_t" default_raw="{}" />
      <argument name="pCommandBufferDeviceMasks_" type="const uint32_t *" default_raw="{}" />
      <argument name="signalSemaphoreCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSignalSemaphoreDeviceIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceGroupSubmitInfo">
      <argument name="rhs" type="const DeviceGroupSubmitInfo &amp;" />
    </constructor>
    <constructor name="DeviceGroupSubmitInfo">
      <argument name="rhs" type="const VkDeviceGroupSubmitInfo &amp;" />
    </constructor>
    <constructor name="DeviceGroupSubmitInfo">
      <argument name="waitSemaphoreDeviceIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="commandBufferDeviceMasks_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" default_raw="{}" />
      <argument name="signalSemaphoreDeviceIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceGroupSubmitInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceGroupSubmitInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setWaitSemaphoreCount">
      <argument name="waitSemaphoreCount_" type="uint32_t" />
    </method>
    <method name="setPWaitSemaphoreDeviceIndices">
      <argument name="pWaitSemaphoreDeviceIndices_" type="const uint32_t *" />
    </method>
    <method name="setWaitSemaphoreDeviceIndices">
      <argument name="waitSemaphoreDeviceIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <method name="setCommandBufferCount">
      <argument name="commandBufferCount_" type="uint32_t" />
    </method>
    <method name="setPCommandBufferDeviceMasks">
      <argument name="pCommandBufferDeviceMasks_" type="const uint32_t *" />
    </method>
    <method name="setCommandBufferDeviceMasks">
      <argument name="commandBufferDeviceMasks_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <method name="setSignalSemaphoreCount">
      <argument name="signalSemaphoreCount_" type="uint32_t" />
    </method>
    <method name="setPSignalSemaphoreDeviceIndices">
      <argument name="pSignalSemaphoreDeviceIndices_" type="const uint32_t *" />
    </method>
    <method name="setSignalSemaphoreDeviceIndices">
      <argument name="signalSemaphoreDeviceIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDeviceGroupSubmitInfo &amp;" />
    <conversion_function name="operator VkDeviceGroupSubmitInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceGroupSubmitInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceGroupSubmitInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="waitSemaphoreCount" />
    <field name="pWaitSemaphoreDeviceIndices" />
    <field name="commandBufferCount" />
    <field name="pCommandBufferDeviceMasks" />
    <field name="signalSemaphoreCount" />
    <field name="pSignalSemaphoreDeviceIndices" />
  </struct>
  <type_alias name="DeviceGroupSubmitInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DeviceGroupSubmitInfo" />
  <struct name="DeviceQueueInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceQueueInfo2">
      <argument name="flags_" type="vk::DeviceQueueCreateFlags" default_raw="{}" />
      <argument name="queueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="queueIndex_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceQueueInfo2">
      <argument name="rhs" type="const DeviceQueueInfo2 &amp;" />
    </constructor>
    <constructor name="DeviceQueueInfo2">
      <argument name="rhs" type="const VkDeviceQueueInfo2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceQueueInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceQueueInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DeviceQueueCreateFlags" />
    </method>
    <method name="setQueueFamilyIndex">
      <argument name="queueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setQueueIndex">
      <argument name="queueIndex_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDeviceQueueInfo2 &amp;" />
    <conversion_function name="operator VkDeviceQueueInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceQueueInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceQueueInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="queueFamilyIndex" />
    <field name="queueIndex" />
  </struct>
  <struct name="ExportFenceCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExportFenceCreateInfo">
      <argument name="handleTypes_" type="vk::ExternalFenceHandleTypeFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExportFenceCreateInfo">
      <argument name="rhs" type="const ExportFenceCreateInfo &amp;" />
    </constructor>
    <constructor name="ExportFenceCreateInfo">
      <argument name="rhs" type="const VkExportFenceCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExportFenceCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExportFenceCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleTypes">
      <argument name="handleTypes_" type="vk::ExternalFenceHandleTypeFlags" />
    </method>
    <conversion_function name="operator const VkExportFenceCreateInfo &amp;" />
    <conversion_function name="operator VkExportFenceCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExportFenceCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExportFenceCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleTypes" />
  </struct>
  <type_alias name="ExportFenceCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ExportFenceCreateInfo" />
  <struct name="ExportMemoryAllocateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExportMemoryAllocateInfo">
      <argument name="handleTypes_" type="vk::ExternalMemoryHandleTypeFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExportMemoryAllocateInfo">
      <argument name="rhs" type="const ExportMemoryAllocateInfo &amp;" />
    </constructor>
    <constructor name="ExportMemoryAllocateInfo">
      <argument name="rhs" type="const VkExportMemoryAllocateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExportMemoryAllocateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExportMemoryAllocateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleTypes">
      <argument name="handleTypes_" type="vk::ExternalMemoryHandleTypeFlags" />
    </method>
    <conversion_function name="operator const VkExportMemoryAllocateInfo &amp;" />
    <conversion_function name="operator VkExportMemoryAllocateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExportMemoryAllocateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExportMemoryAllocateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleTypes" />
  </struct>
  <type_alias name="ExportMemoryAllocateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ExportMemoryAllocateInfo" />
  <struct name="ExportSemaphoreCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExportSemaphoreCreateInfo">
      <argument name="handleTypes_" type="vk::ExternalSemaphoreHandleTypeFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExportSemaphoreCreateInfo">
      <argument name="rhs" type="const ExportSemaphoreCreateInfo &amp;" />
    </constructor>
    <constructor name="ExportSemaphoreCreateInfo">
      <argument name="rhs" type="const VkExportSemaphoreCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExportSemaphoreCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExportSemaphoreCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleTypes">
      <argument name="handleTypes_" type="vk::ExternalSemaphoreHandleTypeFlags" />
    </method>
    <conversion_function name="operator const VkExportSemaphoreCreateInfo &amp;" />
    <conversion_function name="operator VkExportSemaphoreCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExportSemaphoreCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExportSemaphoreCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleTypes" />
  </struct>
  <type_alias name="ExportSemaphoreCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ExportSemaphoreCreateInfo" />
  <struct name="ExternalBufferProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExternalBufferProperties">
      <argument name="externalMemoryProperties_" type="vk::ExternalMemoryProperties" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExternalBufferProperties">
      <argument name="rhs" type="const ExternalBufferProperties &amp;" />
    </constructor>
    <constructor name="ExternalBufferProperties">
      <argument name="rhs" type="const VkExternalBufferProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExternalBufferProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExternalBufferProperties &amp;" />
    </method>
    <conversion_function name="operator const VkExternalBufferProperties &amp;" />
    <conversion_function name="operator VkExternalBufferProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExternalBufferProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExternalBufferProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="externalMemoryProperties" />
  </struct>
  <type_alias name="ExternalBufferPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ExternalBufferProperties" />
  <struct name="ExternalFenceProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExternalFenceProperties">
      <argument name="exportFromImportedHandleTypes_" type="vk::ExternalFenceHandleTypeFlags" default_raw="{}" />
      <argument name="compatibleHandleTypes_" type="vk::ExternalFenceHandleTypeFlags" default_raw="{}" />
      <argument name="externalFenceFeatures_" type="vk::ExternalFenceFeatureFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExternalFenceProperties">
      <argument name="rhs" type="const ExternalFenceProperties &amp;" />
    </constructor>
    <constructor name="ExternalFenceProperties">
      <argument name="rhs" type="const VkExternalFenceProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExternalFenceProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExternalFenceProperties &amp;" />
    </method>
    <conversion_function name="operator const VkExternalFenceProperties &amp;" />
    <conversion_function name="operator VkExternalFenceProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExternalFenceProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExternalFenceProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="exportFromImportedHandleTypes" />
    <field name="compatibleHandleTypes" />
    <field name="externalFenceFeatures" />
  </struct>
  <type_alias name="ExternalFencePropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ExternalFenceProperties" />
  <struct name="ExternalImageFormatProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExternalImageFormatProperties">
      <argument name="externalMemoryProperties_" type="vk::ExternalMemoryProperties" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExternalImageFormatProperties">
      <argument name="rhs" type="const ExternalImageFormatProperties &amp;" />
    </constructor>
    <constructor name="ExternalImageFormatProperties">
      <argument name="rhs" type="const VkExternalImageFormatProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExternalImageFormatProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExternalImageFormatProperties &amp;" />
    </method>
    <conversion_function name="operator const VkExternalImageFormatProperties &amp;" />
    <conversion_function name="operator VkExternalImageFormatProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExternalImageFormatProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExternalImageFormatProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="externalMemoryProperties" />
  </struct>
  <type_alias name="ExternalImageFormatPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ExternalImageFormatProperties" />
  <struct name="ExternalMemoryBufferCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExternalMemoryBufferCreateInfo">
      <argument name="handleTypes_" type="vk::ExternalMemoryHandleTypeFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExternalMemoryBufferCreateInfo">
      <argument name="rhs" type="const ExternalMemoryBufferCreateInfo &amp;" />
    </constructor>
    <constructor name="ExternalMemoryBufferCreateInfo">
      <argument name="rhs" type="const VkExternalMemoryBufferCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExternalMemoryBufferCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExternalMemoryBufferCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleTypes">
      <argument name="handleTypes_" type="vk::ExternalMemoryHandleTypeFlags" />
    </method>
    <conversion_function name="operator const VkExternalMemoryBufferCreateInfo &amp;" />
    <conversion_function name="operator VkExternalMemoryBufferCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExternalMemoryBufferCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExternalMemoryBufferCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleTypes" />
  </struct>
  <type_alias name="ExternalMemoryBufferCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ExternalMemoryBufferCreateInfo" />
  <struct name="ExternalMemoryImageCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExternalMemoryImageCreateInfo">
      <argument name="handleTypes_" type="vk::ExternalMemoryHandleTypeFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExternalMemoryImageCreateInfo">
      <argument name="rhs" type="const ExternalMemoryImageCreateInfo &amp;" />
    </constructor>
    <constructor name="ExternalMemoryImageCreateInfo">
      <argument name="rhs" type="const VkExternalMemoryImageCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExternalMemoryImageCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExternalMemoryImageCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleTypes">
      <argument name="handleTypes_" type="vk::ExternalMemoryHandleTypeFlags" />
    </method>
    <conversion_function name="operator const VkExternalMemoryImageCreateInfo &amp;" />
    <conversion_function name="operator VkExternalMemoryImageCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExternalMemoryImageCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExternalMemoryImageCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleTypes" />
  </struct>
  <type_alias name="ExternalMemoryImageCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ExternalMemoryImageCreateInfo" />
  <struct name="ExternalMemoryProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExternalMemoryProperties">
      <argument name="externalMemoryFeatures_" type="vk::ExternalMemoryFeatureFlags" default_raw="{}" />
      <argument name="exportFromImportedHandleTypes_" type="vk::ExternalMemoryHandleTypeFlags" default_raw="{}" />
      <argument name="compatibleHandleTypes_" type="vk::ExternalMemoryHandleTypeFlags" default_raw="{}" />
    </constructor>
    <constructor name="ExternalMemoryProperties">
      <argument name="rhs" type="const ExternalMemoryProperties &amp;" />
    </constructor>
    <constructor name="ExternalMemoryProperties">
      <argument name="rhs" type="const VkExternalMemoryProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExternalMemoryProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExternalMemoryProperties &amp;" />
    </method>
    <conversion_function name="operator const VkExternalMemoryProperties &amp;" />
    <conversion_function name="operator VkExternalMemoryProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExternalMemoryProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExternalMemoryProperties &amp;" />
    </method>
    <field name="externalMemoryFeatures" />
    <field name="exportFromImportedHandleTypes" />
    <field name="compatibleHandleTypes" />
  </struct>
  <type_alias name="ExternalMemoryPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ExternalMemoryProperties" />
  <struct name="ExternalSemaphoreProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExternalSemaphoreProperties">
      <argument name="exportFromImportedHandleTypes_" type="vk::ExternalSemaphoreHandleTypeFlags" default_raw="{}" />
      <argument name="compatibleHandleTypes_" type="vk::ExternalSemaphoreHandleTypeFlags" default_raw="{}" />
      <argument name="externalSemaphoreFeatures_" type="vk::ExternalSemaphoreFeatureFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExternalSemaphoreProperties">
      <argument name="rhs" type="const ExternalSemaphoreProperties &amp;" />
    </constructor>
    <constructor name="ExternalSemaphoreProperties">
      <argument name="rhs" type="const VkExternalSemaphoreProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExternalSemaphoreProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExternalSemaphoreProperties &amp;" />
    </method>
    <conversion_function name="operator const VkExternalSemaphoreProperties &amp;" />
    <conversion_function name="operator VkExternalSemaphoreProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExternalSemaphoreProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExternalSemaphoreProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="exportFromImportedHandleTypes" />
    <field name="compatibleHandleTypes" />
    <field name="externalSemaphoreFeatures" />
  </struct>
  <type_alias name="ExternalSemaphorePropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ExternalSemaphoreProperties" />
  <struct name="FormatProperties2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FormatProperties2">
      <argument name="formatProperties_" type="vk::FormatProperties" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="FormatProperties2">
      <argument name="rhs" type="const FormatProperties2 &amp;" />
    </constructor>
    <constructor name="FormatProperties2">
      <argument name="rhs" type="const VkFormatProperties2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const FormatProperties2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFormatProperties2 &amp;" />
    </method>
    <conversion_function name="operator const VkFormatProperties2 &amp;" />
    <conversion_function name="operator VkFormatProperties2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FormatProperties2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FormatProperties2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="formatProperties" />
  </struct>
  <type_alias name="FormatProperties2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="FormatProperties2" />
  <struct name="ImageFormatProperties2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageFormatProperties2">
      <argument name="imageFormatProperties_" type="vk::ImageFormatProperties" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageFormatProperties2">
      <argument name="rhs" type="const ImageFormatProperties2 &amp;" />
    </constructor>
    <constructor name="ImageFormatProperties2">
      <argument name="rhs" type="const VkImageFormatProperties2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageFormatProperties2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageFormatProperties2 &amp;" />
    </method>
    <conversion_function name="operator const VkImageFormatProperties2 &amp;" />
    <conversion_function name="operator VkImageFormatProperties2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageFormatProperties2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageFormatProperties2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageFormatProperties" />
  </struct>
  <type_alias name="ImageFormatProperties2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImageFormatProperties2" />
  <struct name="ImageMemoryRequirementsInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageMemoryRequirementsInfo2">
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageMemoryRequirementsInfo2">
      <argument name="rhs" type="const ImageMemoryRequirementsInfo2 &amp;" />
    </constructor>
    <constructor name="ImageMemoryRequirementsInfo2">
      <argument name="rhs" type="const VkImageMemoryRequirementsInfo2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <conversion_function name="operator const VkImageMemoryRequirementsInfo2 &amp;" />
    <conversion_function name="operator VkImageMemoryRequirementsInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageMemoryRequirementsInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="image" />
  </struct>
  <type_alias name="ImageMemoryRequirementsInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImageMemoryRequirementsInfo2" />
  <struct name="ImagePlaneMemoryRequirementsInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImagePlaneMemoryRequirementsInfo">
      <argument name="planeAspect_" type="vk::ImageAspectFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ImageAspectFlagBits::eColor" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImagePlaneMemoryRequirementsInfo">
      <argument name="rhs" type="const ImagePlaneMemoryRequirementsInfo &amp;" />
    </constructor>
    <constructor name="ImagePlaneMemoryRequirementsInfo">
      <argument name="rhs" type="const VkImagePlaneMemoryRequirementsInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImagePlaneMemoryRequirementsInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImagePlaneMemoryRequirementsInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPlaneAspect">
      <argument name="planeAspect_" type="vk::ImageAspectFlagBits" />
    </method>
    <conversion_function name="operator const VkImagePlaneMemoryRequirementsInfo &amp;" />
    <conversion_function name="operator VkImagePlaneMemoryRequirementsInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImagePlaneMemoryRequirementsInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImagePlaneMemoryRequirementsInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="planeAspect" />
  </struct>
  <type_alias name="ImagePlaneMemoryRequirementsInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImagePlaneMemoryRequirementsInfo" />
  <struct name="ImageSparseMemoryRequirementsInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageSparseMemoryRequirementsInfo2">
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageSparseMemoryRequirementsInfo2">
      <argument name="rhs" type="const ImageSparseMemoryRequirementsInfo2 &amp;" />
    </constructor>
    <constructor name="ImageSparseMemoryRequirementsInfo2">
      <argument name="rhs" type="const VkImageSparseMemoryRequirementsInfo2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageSparseMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageSparseMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <conversion_function name="operator const VkImageSparseMemoryRequirementsInfo2 &amp;" />
    <conversion_function name="operator VkImageSparseMemoryRequirementsInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageSparseMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageSparseMemoryRequirementsInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="image" />
  </struct>
  <type_alias name="ImageSparseMemoryRequirementsInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImageSparseMemoryRequirementsInfo2" />
  <struct name="ImageViewUsageCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageViewUsageCreateInfo">
      <argument name="usage_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageViewUsageCreateInfo">
      <argument name="rhs" type="const ImageViewUsageCreateInfo &amp;" />
    </constructor>
    <constructor name="ImageViewUsageCreateInfo">
      <argument name="rhs" type="const VkImageViewUsageCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageViewUsageCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageViewUsageCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setUsage">
      <argument name="usage_" type="vk::ImageUsageFlags" />
    </method>
    <conversion_function name="operator const VkImageViewUsageCreateInfo &amp;" />
    <conversion_function name="operator VkImageViewUsageCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageViewUsageCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageViewUsageCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="usage" />
  </struct>
  <type_alias name="ImageViewUsageCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImageViewUsageCreateInfo" />
  <struct name="InputAttachmentAspectReference" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="InputAttachmentAspectReference">
      <argument name="subpass_" type="uint32_t" default_raw="{}" />
      <argument name="inputAttachmentIndex_" type="uint32_t" default_raw="{}" />
      <argument name="aspectMask_" type="vk::ImageAspectFlags" default_raw="{}" />
    </constructor>
    <constructor name="InputAttachmentAspectReference">
      <argument name="rhs" type="const InputAttachmentAspectReference &amp;" />
    </constructor>
    <constructor name="InputAttachmentAspectReference">
      <argument name="rhs" type="const VkInputAttachmentAspectReference &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const InputAttachmentAspectReference &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkInputAttachmentAspectReference &amp;" />
    </method>
    <method name="setSubpass">
      <argument name="subpass_" type="uint32_t" />
    </method>
    <method name="setInputAttachmentIndex">
      <argument name="inputAttachmentIndex_" type="uint32_t" />
    </method>
    <method name="setAspectMask">
      <argument name="aspectMask_" type="vk::ImageAspectFlags" />
    </method>
    <conversion_function name="operator const VkInputAttachmentAspectReference &amp;" />
    <conversion_function name="operator VkInputAttachmentAspectReference &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const InputAttachmentAspectReference &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const InputAttachmentAspectReference &amp;" />
    </method>
    <field name="subpass" />
    <field name="inputAttachmentIndex" />
    <field name="aspectMask" />
  </struct>
  <type_alias name="InputAttachmentAspectReferenceKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="InputAttachmentAspectReference" />
  <struct name="MemoryAllocateFlagsInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryAllocateFlagsInfo">
      <argument name="flags_" type="vk::MemoryAllocateFlags" default_raw="{}" />
      <argument name="deviceMask_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryAllocateFlagsInfo">
      <argument name="rhs" type="const MemoryAllocateFlagsInfo &amp;" />
    </constructor>
    <constructor name="MemoryAllocateFlagsInfo">
      <argument name="rhs" type="const VkMemoryAllocateFlagsInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryAllocateFlagsInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryAllocateFlagsInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::MemoryAllocateFlags" />
    </method>
    <method name="setDeviceMask">
      <argument name="deviceMask_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkMemoryAllocateFlagsInfo &amp;" />
    <conversion_function name="operator VkMemoryAllocateFlagsInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryAllocateFlagsInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryAllocateFlagsInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="deviceMask" />
  </struct>
  <type_alias name="MemoryAllocateFlagsInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="MemoryAllocateFlagsInfo" />
  <struct name="MemoryDedicatedAllocateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryDedicatedAllocateInfo">
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryDedicatedAllocateInfo">
      <argument name="rhs" type="const MemoryDedicatedAllocateInfo &amp;" />
    </constructor>
    <constructor name="MemoryDedicatedAllocateInfo">
      <argument name="rhs" type="const VkMemoryDedicatedAllocateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryDedicatedAllocateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryDedicatedAllocateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <conversion_function name="operator const VkMemoryDedicatedAllocateInfo &amp;" />
    <conversion_function name="operator VkMemoryDedicatedAllocateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryDedicatedAllocateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryDedicatedAllocateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="image" />
    <field name="buffer" />
  </struct>
  <type_alias name="MemoryDedicatedAllocateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="MemoryDedicatedAllocateInfo" />
  <struct name="MemoryDedicatedRequirements" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryDedicatedRequirements">
      <argument name="prefersDedicatedAllocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="requiresDedicatedAllocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryDedicatedRequirements">
      <argument name="rhs" type="const MemoryDedicatedRequirements &amp;" />
    </constructor>
    <constructor name="MemoryDedicatedRequirements">
      <argument name="rhs" type="const VkMemoryDedicatedRequirements &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryDedicatedRequirements &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryDedicatedRequirements &amp;" />
    </method>
    <conversion_function name="operator const VkMemoryDedicatedRequirements &amp;" />
    <conversion_function name="operator VkMemoryDedicatedRequirements &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryDedicatedRequirements &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryDedicatedRequirements &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="prefersDedicatedAllocation" />
    <field name="requiresDedicatedAllocation" />
  </struct>
  <type_alias name="MemoryDedicatedRequirementsKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="MemoryDedicatedRequirements" />
  <struct name="MemoryRequirements2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryRequirements2">
      <argument name="memoryRequirements_" type="vk::MemoryRequirements" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryRequirements2">
      <argument name="rhs" type="const MemoryRequirements2 &amp;" />
    </constructor>
    <constructor name="MemoryRequirements2">
      <argument name="rhs" type="const VkMemoryRequirements2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryRequirements2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryRequirements2 &amp;" />
    </method>
    <conversion_function name="operator const VkMemoryRequirements2 &amp;" />
    <conversion_function name="operator VkMemoryRequirements2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryRequirements2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryRequirements2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memoryRequirements" />
  </struct>
  <type_alias name="MemoryRequirements2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="MemoryRequirements2" />
  <struct name="PhysicalDevice16BitStorageFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevice16BitStorageFeatures">
      <argument name="storageBuffer16BitAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="uniformAndStorageBuffer16BitAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="storagePushConstant16_" type="vk::Bool32" default_raw="{}" />
      <argument name="storageInputOutput16_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevice16BitStorageFeatures">
      <argument name="rhs" type="const PhysicalDevice16BitStorageFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDevice16BitStorageFeatures">
      <argument name="rhs" type="const VkPhysicalDevice16BitStorageFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevice16BitStorageFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevice16BitStorageFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setStorageBuffer16BitAccess">
      <argument name="storageBuffer16BitAccess_" type="vk::Bool32" />
    </method>
    <method name="setUniformAndStorageBuffer16BitAccess">
      <argument name="uniformAndStorageBuffer16BitAccess_" type="vk::Bool32" />
    </method>
    <method name="setStoragePushConstant16">
      <argument name="storagePushConstant16_" type="vk::Bool32" />
    </method>
    <method name="setStorageInputOutput16">
      <argument name="storageInputOutput16_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevice16BitStorageFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDevice16BitStorageFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevice16BitStorageFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevice16BitStorageFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="storageBuffer16BitAccess" />
    <field name="uniformAndStorageBuffer16BitAccess" />
    <field name="storagePushConstant16" />
    <field name="storageInputOutput16" />
  </struct>
  <type_alias name="PhysicalDevice16BitStorageFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDevice16BitStorageFeatures" />
  <struct name="PhysicalDeviceExternalBufferInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExternalBufferInfo">
      <argument name="flags_" type="vk::BufferCreateFlags" default_raw="{}" />
      <argument name="usage_" type="vk::BufferUsageFlags" default_raw="{}" />
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalMemoryHandleTypeFlagBits::eOpaqueFd" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExternalBufferInfo">
      <argument name="rhs" type="const PhysicalDeviceExternalBufferInfo &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExternalBufferInfo">
      <argument name="rhs" type="const VkPhysicalDeviceExternalBufferInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExternalBufferInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExternalBufferInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::BufferCreateFlags" />
    </method>
    <method name="setUsage">
      <argument name="usage_" type="vk::BufferUsageFlags" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExternalBufferInfo &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExternalBufferInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExternalBufferInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExternalBufferInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="usage" />
    <field name="handleType" />
  </struct>
  <type_alias name="PhysicalDeviceExternalBufferInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceExternalBufferInfo" />
  <struct name="PhysicalDeviceExternalFenceInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExternalFenceInfo">
      <argument name="handleType_" type="vk::ExternalFenceHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalFenceHandleTypeFlagBits::eOpaqueFd" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExternalFenceInfo">
      <argument name="rhs" type="const PhysicalDeviceExternalFenceInfo &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExternalFenceInfo">
      <argument name="rhs" type="const VkPhysicalDeviceExternalFenceInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExternalFenceInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExternalFenceInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalFenceHandleTypeFlagBits" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExternalFenceInfo &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExternalFenceInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExternalFenceInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExternalFenceInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleType" />
  </struct>
  <type_alias name="PhysicalDeviceExternalFenceInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceExternalFenceInfo" />
  <struct name="PhysicalDeviceExternalImageFormatInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExternalImageFormatInfo">
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalMemoryHandleTypeFlagBits::eOpaqueFd" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExternalImageFormatInfo">
      <argument name="rhs" type="const PhysicalDeviceExternalImageFormatInfo &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExternalImageFormatInfo">
      <argument name="rhs" type="const VkPhysicalDeviceExternalImageFormatInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExternalImageFormatInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExternalImageFormatInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExternalImageFormatInfo &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExternalImageFormatInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExternalImageFormatInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExternalImageFormatInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleType" />
  </struct>
  <type_alias name="PhysicalDeviceExternalImageFormatInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceExternalImageFormatInfo" />
  <struct name="PhysicalDeviceExternalSemaphoreInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExternalSemaphoreInfo">
      <argument name="handleType_" type="vk::ExternalSemaphoreHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalSemaphoreHandleTypeFlagBits::eOpaqueFd" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExternalSemaphoreInfo">
      <argument name="rhs" type="const PhysicalDeviceExternalSemaphoreInfo &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExternalSemaphoreInfo">
      <argument name="rhs" type="const VkPhysicalDeviceExternalSemaphoreInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExternalSemaphoreInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExternalSemaphoreInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalSemaphoreHandleTypeFlagBits" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExternalSemaphoreInfo &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExternalSemaphoreInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExternalSemaphoreInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExternalSemaphoreInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleType" />
  </struct>
  <type_alias name="PhysicalDeviceExternalSemaphoreInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceExternalSemaphoreInfo" />
  <struct name="PhysicalDeviceFeatures2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFeatures2">
      <argument name="features_" type="vk::PhysicalDeviceFeatures" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFeatures2">
      <argument name="rhs" type="const PhysicalDeviceFeatures2 &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFeatures2">
      <argument name="rhs" type="const VkPhysicalDeviceFeatures2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFeatures2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFeatures2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFeatures">
      <argument name="features_" type="const vk::PhysicalDeviceFeatures &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFeatures2 &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFeatures2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFeatures2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFeatures2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="features" />
  </struct>
  <type_alias name="PhysicalDeviceFeatures2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceFeatures2" />
  <struct name="PhysicalDeviceGroupProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceGroupProperties">
      <argument name="physicalDeviceCount_" type="uint32_t" default_raw="{}" />
      <argument name="physicalDevices_" type="const std::array&lt;vk::PhysicalDevice, 32U&gt; &amp;" default_raw="{}" />
      <argument name="subsetAllocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceGroupProperties">
      <argument name="rhs" type="const PhysicalDeviceGroupProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceGroupProperties">
      <argument name="rhs" type="const VkPhysicalDeviceGroupProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceGroupProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceGroupProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceGroupProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceGroupProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceGroupProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceGroupProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="physicalDeviceCount" />
    <field name="physicalDevices" />
    <field name="subsetAllocation" />
  </struct>
  <type_alias name="PhysicalDeviceGroupPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceGroupProperties" />
  <struct name="PhysicalDeviceIDProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceIDProperties">
      <argument name="deviceUUID_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="driverUUID_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="deviceLUID_" type="const std::array&lt;uint8_t, 8U&gt; &amp;" default_raw="{}" />
      <argument name="deviceNodeMask_" type="uint32_t" default_raw="{}" />
      <argument name="deviceLUIDValid_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceIDProperties">
      <argument name="rhs" type="const PhysicalDeviceIDProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceIDProperties">
      <argument name="rhs" type="const VkPhysicalDeviceIDProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceIDProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceIDProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceIDProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceIDProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceIDProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceIDProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceUUID" />
    <field name="driverUUID" />
    <field name="deviceLUID" />
    <field name="deviceNodeMask" />
    <field name="deviceLUIDValid" />
  </struct>
  <type_alias name="PhysicalDeviceIDPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceIDProperties" />
  <struct name="PhysicalDeviceImageFormatInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageFormatInfo2">
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="type_" type="vk::ImageType" default_raw="VULKAN_HPP_NAMESPACE::ImageType::e1D" />
      <argument name="tiling_" type="vk::ImageTiling" default_raw="VULKAN_HPP_NAMESPACE::ImageTiling::eOptimal" />
      <argument name="usage_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="flags_" type="vk::ImageCreateFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageFormatInfo2">
      <argument name="rhs" type="const PhysicalDeviceImageFormatInfo2 &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageFormatInfo2">
      <argument name="rhs" type="const VkPhysicalDeviceImageFormatInfo2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageFormatInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageFormatInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::ImageType" />
    </method>
    <method name="setTiling">
      <argument name="tiling_" type="vk::ImageTiling" />
    </method>
    <method name="setUsage">
      <argument name="usage_" type="vk::ImageUsageFlags" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::ImageCreateFlags" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageFormatInfo2 &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageFormatInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageFormatInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageFormatInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="format" />
    <field name="type" />
    <field name="tiling" />
    <field name="usage" />
    <field name="flags" />
  </struct>
  <type_alias name="PhysicalDeviceImageFormatInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceImageFormatInfo2" />
  <struct name="PhysicalDeviceMaintenance3Properties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMaintenance3Properties">
      <argument name="maxPerSetDescriptors_" type="uint32_t" default_raw="{}" />
      <argument name="maxMemoryAllocationSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance3Properties">
      <argument name="rhs" type="const PhysicalDeviceMaintenance3Properties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance3Properties">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance3Properties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance3Properties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance3Properties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMaintenance3Properties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMaintenance3Properties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMaintenance3Properties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance3Properties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxPerSetDescriptors" />
    <field name="maxMemoryAllocationSize" />
  </struct>
  <type_alias name="PhysicalDeviceMaintenance3PropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceMaintenance3Properties" />
  <struct name="PhysicalDeviceMemoryProperties2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMemoryProperties2">
      <argument name="memoryProperties_" type="vk::PhysicalDeviceMemoryProperties" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryProperties2">
      <argument name="rhs" type="const PhysicalDeviceMemoryProperties2 &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryProperties2">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryProperties2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMemoryProperties2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryProperties2 &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMemoryProperties2 &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMemoryProperties2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMemoryProperties2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMemoryProperties2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memoryProperties" />
  </struct>
  <type_alias name="PhysicalDeviceMemoryProperties2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceMemoryProperties2" />
  <struct name="PhysicalDeviceMultiviewFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMultiviewFeatures">
      <argument name="multiview_" type="vk::Bool32" default_raw="{}" />
      <argument name="multiviewGeometryShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="multiviewTessellationShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMultiviewFeatures">
      <argument name="rhs" type="const PhysicalDeviceMultiviewFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMultiviewFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceMultiviewFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMultiviewFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMultiviewFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMultiview">
      <argument name="multiview_" type="vk::Bool32" />
    </method>
    <method name="setMultiviewGeometryShader">
      <argument name="multiviewGeometryShader_" type="vk::Bool32" />
    </method>
    <method name="setMultiviewTessellationShader">
      <argument name="multiviewTessellationShader_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMultiviewFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMultiviewFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMultiviewFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMultiviewFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="multiview" />
    <field name="multiviewGeometryShader" />
    <field name="multiviewTessellationShader" />
  </struct>
  <type_alias name="PhysicalDeviceMultiviewFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceMultiviewFeatures" />
  <struct name="PhysicalDeviceMultiviewProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMultiviewProperties">
      <argument name="maxMultiviewViewCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxMultiviewInstanceIndex_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMultiviewProperties">
      <argument name="rhs" type="const PhysicalDeviceMultiviewProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMultiviewProperties">
      <argument name="rhs" type="const VkPhysicalDeviceMultiviewProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMultiviewProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMultiviewProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMultiviewProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMultiviewProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMultiviewProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMultiviewProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxMultiviewViewCount" />
    <field name="maxMultiviewInstanceIndex" />
  </struct>
  <type_alias name="PhysicalDeviceMultiviewPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceMultiviewProperties" />
  <struct name="PhysicalDevicePointClippingProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePointClippingProperties">
      <argument name="pointClippingBehavior_" type="vk::PointClippingBehavior" default_raw="VULKAN_HPP_NAMESPACE::PointClippingBehavior::eAllClipPlanes" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePointClippingProperties">
      <argument name="rhs" type="const PhysicalDevicePointClippingProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePointClippingProperties">
      <argument name="rhs" type="const VkPhysicalDevicePointClippingProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePointClippingProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePointClippingProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePointClippingProperties &amp;" />
    <conversion_function name="operator VkPhysicalDevicePointClippingProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePointClippingProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePointClippingProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pointClippingBehavior" />
  </struct>
  <type_alias name="PhysicalDevicePointClippingPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDevicePointClippingProperties" />
  <struct name="PhysicalDeviceProperties2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceProperties2">
      <argument name="properties_" type="vk::PhysicalDeviceProperties" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceProperties2">
      <argument name="rhs" type="const PhysicalDeviceProperties2 &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceProperties2">
      <argument name="rhs" type="const VkPhysicalDeviceProperties2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceProperties2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceProperties2 &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceProperties2 &amp;" />
    <conversion_function name="operator VkPhysicalDeviceProperties2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceProperties2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceProperties2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="properties" />
  </struct>
  <type_alias name="PhysicalDeviceProperties2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceProperties2" />
  <struct name="PhysicalDeviceProtectedMemoryFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceProtectedMemoryFeatures">
      <argument name="protectedMemory_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceProtectedMemoryFeatures">
      <argument name="rhs" type="const PhysicalDeviceProtectedMemoryFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceProtectedMemoryFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceProtectedMemoryFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceProtectedMemoryFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceProtectedMemoryFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setProtectedMemory">
      <argument name="protectedMemory_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceProtectedMemoryFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceProtectedMemoryFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceProtectedMemoryFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceProtectedMemoryFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="protectedMemory" />
  </struct>
  <struct name="PhysicalDeviceProtectedMemoryProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceProtectedMemoryProperties">
      <argument name="protectedNoFault_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceProtectedMemoryProperties">
      <argument name="rhs" type="const PhysicalDeviceProtectedMemoryProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceProtectedMemoryProperties">
      <argument name="rhs" type="const VkPhysicalDeviceProtectedMemoryProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceProtectedMemoryProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceProtectedMemoryProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceProtectedMemoryProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceProtectedMemoryProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceProtectedMemoryProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceProtectedMemoryProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="protectedNoFault" />
  </struct>
  <struct name="PhysicalDeviceSamplerYcbcrConversionFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSamplerYcbcrConversionFeatures">
      <argument name="samplerYcbcrConversion_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSamplerYcbcrConversionFeatures">
      <argument name="rhs" type="const PhysicalDeviceSamplerYcbcrConversionFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSamplerYcbcrConversionFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceSamplerYcbcrConversionFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSamplerYcbcrConversionFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSamplerYcbcrConversionFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSamplerYcbcrConversion">
      <argument name="samplerYcbcrConversion_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSamplerYcbcrConversionFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSamplerYcbcrConversionFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSamplerYcbcrConversionFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSamplerYcbcrConversionFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="samplerYcbcrConversion" />
  </struct>
  <type_alias name="PhysicalDeviceSamplerYcbcrConversionFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceSamplerYcbcrConversionFeatures" />
  <type_alias name="PhysicalDeviceShaderDrawParameterFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceShaderDrawParametersFeatures" />
  <struct name="PhysicalDeviceShaderDrawParametersFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderDrawParametersFeatures">
      <argument name="shaderDrawParameters_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderDrawParametersFeatures">
      <argument name="rhs" type="const PhysicalDeviceShaderDrawParametersFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderDrawParametersFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceShaderDrawParametersFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderDrawParametersFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderDrawParametersFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderDrawParameters">
      <argument name="shaderDrawParameters_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderDrawParametersFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderDrawParametersFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderDrawParametersFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderDrawParametersFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderDrawParameters" />
  </struct>
  <struct name="PhysicalDeviceSparseImageFormatInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSparseImageFormatInfo2">
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="type_" type="vk::ImageType" default_raw="VULKAN_HPP_NAMESPACE::ImageType::e1D" />
      <argument name="samples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="usage_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="tiling_" type="vk::ImageTiling" default_raw="VULKAN_HPP_NAMESPACE::ImageTiling::eOptimal" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSparseImageFormatInfo2">
      <argument name="rhs" type="const PhysicalDeviceSparseImageFormatInfo2 &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSparseImageFormatInfo2">
      <argument name="rhs" type="const VkPhysicalDeviceSparseImageFormatInfo2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSparseImageFormatInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSparseImageFormatInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::ImageType" />
    </method>
    <method name="setSamples">
      <argument name="samples_" type="vk::SampleCountFlagBits" />
    </method>
    <method name="setUsage">
      <argument name="usage_" type="vk::ImageUsageFlags" />
    </method>
    <method name="setTiling">
      <argument name="tiling_" type="vk::ImageTiling" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSparseImageFormatInfo2 &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSparseImageFormatInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSparseImageFormatInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSparseImageFormatInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="format" />
    <field name="type" />
    <field name="samples" />
    <field name="usage" />
    <field name="tiling" />
  </struct>
  <type_alias name="PhysicalDeviceSparseImageFormatInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceSparseImageFormatInfo2" />
  <struct name="PhysicalDeviceSubgroupProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSubgroupProperties">
      <argument name="subgroupSize_" type="uint32_t" default_raw="{}" />
      <argument name="supportedStages_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="supportedOperations_" type="vk::SubgroupFeatureFlags" default_raw="{}" />
      <argument name="quadOperationsInAllStages_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSubgroupProperties">
      <argument name="rhs" type="const PhysicalDeviceSubgroupProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSubgroupProperties">
      <argument name="rhs" type="const VkPhysicalDeviceSubgroupProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSubgroupProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSubgroupProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSubgroupProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSubgroupProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSubgroupProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSubgroupProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="subgroupSize" />
    <field name="supportedStages" />
    <field name="supportedOperations" />
    <field name="quadOperationsInAllStages" />
  </struct>
  <type_alias name="PhysicalDeviceVariablePointerFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceVariablePointersFeatures" />
  <type_alias name="PhysicalDeviceVariablePointerFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceVariablePointersFeatures" />
  <struct name="PhysicalDeviceVariablePointersFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVariablePointersFeatures">
      <argument name="variablePointersStorageBuffer_" type="vk::Bool32" default_raw="{}" />
      <argument name="variablePointers_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVariablePointersFeatures">
      <argument name="rhs" type="const PhysicalDeviceVariablePointersFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVariablePointersFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceVariablePointersFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVariablePointersFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVariablePointersFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setVariablePointersStorageBuffer">
      <argument name="variablePointersStorageBuffer_" type="vk::Bool32" />
    </method>
    <method name="setVariablePointers">
      <argument name="variablePointers_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVariablePointersFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVariablePointersFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVariablePointersFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVariablePointersFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="variablePointersStorageBuffer" />
    <field name="variablePointers" />
  </struct>
  <type_alias name="PhysicalDeviceVariablePointersFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceVariablePointersFeatures" />
  <struct name="PipelineTessellationDomainOriginStateCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineTessellationDomainOriginStateCreateInfo">
      <argument name="domainOrigin_" type="vk::TessellationDomainOrigin" default_raw="VULKAN_HPP_NAMESPACE::TessellationDomainOrigin::eUpperLeft" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineTessellationDomainOriginStateCreateInfo">
      <argument name="rhs" type="const PipelineTessellationDomainOriginStateCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineTessellationDomainOriginStateCreateInfo">
      <argument name="rhs" type="const VkPipelineTessellationDomainOriginStateCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineTessellationDomainOriginStateCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineTessellationDomainOriginStateCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDomainOrigin">
      <argument name="domainOrigin_" type="vk::TessellationDomainOrigin" />
    </method>
    <conversion_function name="operator const VkPipelineTessellationDomainOriginStateCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineTessellationDomainOriginStateCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineTessellationDomainOriginStateCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineTessellationDomainOriginStateCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="domainOrigin" />
  </struct>
  <type_alias name="PipelineTessellationDomainOriginStateCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PipelineTessellationDomainOriginStateCreateInfo" />
  <struct name="ProtectedSubmitInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ProtectedSubmitInfo">
      <argument name="protectedSubmit_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ProtectedSubmitInfo">
      <argument name="rhs" type="const ProtectedSubmitInfo &amp;" />
    </constructor>
    <constructor name="ProtectedSubmitInfo">
      <argument name="rhs" type="const VkProtectedSubmitInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ProtectedSubmitInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkProtectedSubmitInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setProtectedSubmit">
      <argument name="protectedSubmit_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkProtectedSubmitInfo &amp;" />
    <conversion_function name="operator VkProtectedSubmitInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ProtectedSubmitInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ProtectedSubmitInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="protectedSubmit" />
  </struct>
  <struct name="QueueFamilyProperties2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueueFamilyProperties2">
      <argument name="queueFamilyProperties_" type="vk::QueueFamilyProperties" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="QueueFamilyProperties2">
      <argument name="rhs" type="const QueueFamilyProperties2 &amp;" />
    </constructor>
    <constructor name="QueueFamilyProperties2">
      <argument name="rhs" type="const VkQueueFamilyProperties2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueueFamilyProperties2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueueFamilyProperties2 &amp;" />
    </method>
    <conversion_function name="operator const VkQueueFamilyProperties2 &amp;" />
    <conversion_function name="operator VkQueueFamilyProperties2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueueFamilyProperties2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueueFamilyProperties2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="queueFamilyProperties" />
  </struct>
  <type_alias name="QueueFamilyProperties2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="QueueFamilyProperties2" />
  <struct name="RenderPassInputAttachmentAspectCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassInputAttachmentAspectCreateInfo">
      <argument name="aspectReferenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="pAspectReferences_" type="const vk::InputAttachmentAspectReference *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassInputAttachmentAspectCreateInfo">
      <argument name="rhs" type="const RenderPassInputAttachmentAspectCreateInfo &amp;" />
    </constructor>
    <constructor name="RenderPassInputAttachmentAspectCreateInfo">
      <argument name="rhs" type="const VkRenderPassInputAttachmentAspectCreateInfo &amp;" />
    </constructor>
    <constructor name="RenderPassInputAttachmentAspectCreateInfo">
      <argument name="aspectReferences_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::InputAttachmentAspectReference&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassInputAttachmentAspectCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassInputAttachmentAspectCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAspectReferenceCount">
      <argument name="aspectReferenceCount_" type="uint32_t" />
    </method>
    <method name="setPAspectReferences">
      <argument name="pAspectReferences_" type="const vk::InputAttachmentAspectReference *" />
    </method>
    <method name="setAspectReferences">
      <argument name="aspectReferences_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::InputAttachmentAspectReference&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassInputAttachmentAspectCreateInfo &amp;" />
    <conversion_function name="operator VkRenderPassInputAttachmentAspectCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassInputAttachmentAspectCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassInputAttachmentAspectCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="aspectReferenceCount" />
    <field name="pAspectReferences" />
  </struct>
  <type_alias name="RenderPassInputAttachmentAspectCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="RenderPassInputAttachmentAspectCreateInfo" />
  <struct name="RenderPassMultiviewCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassMultiviewCreateInfo">
      <argument name="subpassCount_" type="uint32_t" default_raw="{}" />
      <argument name="pViewMasks_" type="const uint32_t *" default_raw="{}" />
      <argument name="dependencyCount_" type="uint32_t" default_raw="{}" />
      <argument name="pViewOffsets_" type="const int32_t *" default_raw="{}" />
      <argument name="correlationMaskCount_" type="uint32_t" default_raw="{}" />
      <argument name="pCorrelationMasks_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassMultiviewCreateInfo">
      <argument name="rhs" type="const RenderPassMultiviewCreateInfo &amp;" />
    </constructor>
    <constructor name="RenderPassMultiviewCreateInfo">
      <argument name="rhs" type="const VkRenderPassMultiviewCreateInfo &amp;" />
    </constructor>
    <constructor name="RenderPassMultiviewCreateInfo">
      <argument name="viewMasks_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="viewOffsets_" type="const vk::ArrayProxyNoTemporaries&lt;const int32_t&gt; &amp;" default_raw="{}" />
      <argument name="correlationMasks_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassMultiviewCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassMultiviewCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSubpassCount">
      <argument name="subpassCount_" type="uint32_t" />
    </method>
    <method name="setPViewMasks">
      <argument name="pViewMasks_" type="const uint32_t *" />
    </method>
    <method name="setViewMasks">
      <argument name="viewMasks_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <method name="setDependencyCount">
      <argument name="dependencyCount_" type="uint32_t" />
    </method>
    <method name="setPViewOffsets">
      <argument name="pViewOffsets_" type="const int32_t *" />
    </method>
    <method name="setViewOffsets">
      <argument name="viewOffsets_" type="const vk::ArrayProxyNoTemporaries&lt;const int32_t&gt; &amp;" />
    </method>
    <method name="setCorrelationMaskCount">
      <argument name="correlationMaskCount_" type="uint32_t" />
    </method>
    <method name="setPCorrelationMasks">
      <argument name="pCorrelationMasks_" type="const uint32_t *" />
    </method>
    <method name="setCorrelationMasks">
      <argument name="correlationMasks_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassMultiviewCreateInfo &amp;" />
    <conversion_function name="operator VkRenderPassMultiviewCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassMultiviewCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassMultiviewCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="subpassCount" />
    <field name="pViewMasks" />
    <field name="dependencyCount" />
    <field name="pViewOffsets" />
    <field name="correlationMaskCount" />
    <field name="pCorrelationMasks" />
  </struct>
  <type_alias name="RenderPassMultiviewCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="RenderPassMultiviewCreateInfo" />
  <struct name="SamplerYcbcrConversionCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SamplerYcbcrConversionCreateInfo">
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="ycbcrModel_" type="vk::SamplerYcbcrModelConversion" default_raw="VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion::eRgbIdentity" />
      <argument name="ycbcrRange_" type="vk::SamplerYcbcrRange" default_raw="VULKAN_HPP_NAMESPACE::SamplerYcbcrRange::eItuFull" />
      <argument name="components_" type="vk::ComponentMapping" default_raw="{}" />
      <argument name="xChromaOffset_" type="vk::ChromaLocation" default_raw="VULKAN_HPP_NAMESPACE::ChromaLocation::eCositedEven" />
      <argument name="yChromaOffset_" type="vk::ChromaLocation" default_raw="VULKAN_HPP_NAMESPACE::ChromaLocation::eCositedEven" />
      <argument name="chromaFilter_" type="vk::Filter" default_raw="VULKAN_HPP_NAMESPACE::Filter::eNearest" />
      <argument name="forceExplicitReconstruction_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SamplerYcbcrConversionCreateInfo">
      <argument name="rhs" type="const SamplerYcbcrConversionCreateInfo &amp;" />
    </constructor>
    <constructor name="SamplerYcbcrConversionCreateInfo">
      <argument name="rhs" type="const VkSamplerYcbcrConversionCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SamplerYcbcrConversionCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSamplerYcbcrConversionCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <method name="setYcbcrModel">
      <argument name="ycbcrModel_" type="vk::SamplerYcbcrModelConversion" />
    </method>
    <method name="setYcbcrRange">
      <argument name="ycbcrRange_" type="vk::SamplerYcbcrRange" />
    </method>
    <method name="setComponents">
      <argument name="components_" type="const vk::ComponentMapping &amp;" />
    </method>
    <method name="setXChromaOffset">
      <argument name="xChromaOffset_" type="vk::ChromaLocation" />
    </method>
    <method name="setYChromaOffset">
      <argument name="yChromaOffset_" type="vk::ChromaLocation" />
    </method>
    <method name="setChromaFilter">
      <argument name="chromaFilter_" type="vk::Filter" />
    </method>
    <method name="setForceExplicitReconstruction">
      <argument name="forceExplicitReconstruction_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkSamplerYcbcrConversionCreateInfo &amp;" />
    <conversion_function name="operator VkSamplerYcbcrConversionCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SamplerYcbcrConversionCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SamplerYcbcrConversionCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="format" />
    <field name="ycbcrModel" />
    <field name="ycbcrRange" />
    <field name="components" />
    <field name="xChromaOffset" />
    <field name="yChromaOffset" />
    <field name="chromaFilter" />
    <field name="forceExplicitReconstruction" />
  </struct>
  <type_alias name="SamplerYcbcrConversionCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SamplerYcbcrConversionCreateInfo" />
  <struct name="SamplerYcbcrConversionImageFormatProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SamplerYcbcrConversionImageFormatProperties">
      <argument name="combinedImageSamplerDescriptorCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SamplerYcbcrConversionImageFormatProperties">
      <argument name="rhs" type="const SamplerYcbcrConversionImageFormatProperties &amp;" />
    </constructor>
    <constructor name="SamplerYcbcrConversionImageFormatProperties">
      <argument name="rhs" type="const VkSamplerYcbcrConversionImageFormatProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SamplerYcbcrConversionImageFormatProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSamplerYcbcrConversionImageFormatProperties &amp;" />
    </method>
    <conversion_function name="operator const VkSamplerYcbcrConversionImageFormatProperties &amp;" />
    <conversion_function name="operator VkSamplerYcbcrConversionImageFormatProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SamplerYcbcrConversionImageFormatProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SamplerYcbcrConversionImageFormatProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="combinedImageSamplerDescriptorCount" />
  </struct>
  <type_alias name="SamplerYcbcrConversionImageFormatPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SamplerYcbcrConversionImageFormatProperties" />
  <struct name="SamplerYcbcrConversionInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SamplerYcbcrConversionInfo">
      <argument name="conversion_" type="vk::SamplerYcbcrConversion" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SamplerYcbcrConversionInfo">
      <argument name="rhs" type="const SamplerYcbcrConversionInfo &amp;" />
    </constructor>
    <constructor name="SamplerYcbcrConversionInfo">
      <argument name="rhs" type="const VkSamplerYcbcrConversionInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SamplerYcbcrConversionInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSamplerYcbcrConversionInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setConversion">
      <argument name="conversion_" type="vk::SamplerYcbcrConversion" />
    </method>
    <conversion_function name="operator const VkSamplerYcbcrConversionInfo &amp;" />
    <conversion_function name="operator VkSamplerYcbcrConversionInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SamplerYcbcrConversionInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SamplerYcbcrConversionInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="conversion" />
  </struct>
  <type_alias name="SamplerYcbcrConversionInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SamplerYcbcrConversionInfo" />
  <struct name="SparseImageFormatProperties2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SparseImageFormatProperties2">
      <argument name="properties_" type="vk::SparseImageFormatProperties" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SparseImageFormatProperties2">
      <argument name="rhs" type="const SparseImageFormatProperties2 &amp;" />
    </constructor>
    <constructor name="SparseImageFormatProperties2">
      <argument name="rhs" type="const VkSparseImageFormatProperties2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SparseImageFormatProperties2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSparseImageFormatProperties2 &amp;" />
    </method>
    <conversion_function name="operator const VkSparseImageFormatProperties2 &amp;" />
    <conversion_function name="operator VkSparseImageFormatProperties2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SparseImageFormatProperties2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SparseImageFormatProperties2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="properties" />
  </struct>
  <type_alias name="SparseImageFormatProperties2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SparseImageFormatProperties2" />
  <struct name="SparseImageMemoryRequirements2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SparseImageMemoryRequirements2">
      <argument name="memoryRequirements_" type="vk::SparseImageMemoryRequirements" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SparseImageMemoryRequirements2">
      <argument name="rhs" type="const SparseImageMemoryRequirements2 &amp;" />
    </constructor>
    <constructor name="SparseImageMemoryRequirements2">
      <argument name="rhs" type="const VkSparseImageMemoryRequirements2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SparseImageMemoryRequirements2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSparseImageMemoryRequirements2 &amp;" />
    </method>
    <conversion_function name="operator const VkSparseImageMemoryRequirements2 &amp;" />
    <conversion_function name="operator VkSparseImageMemoryRequirements2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SparseImageMemoryRequirements2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SparseImageMemoryRequirements2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memoryRequirements" />
  </struct>
  <type_alias name="SparseImageMemoryRequirements2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SparseImageMemoryRequirements2" />
  <struct name="AttachmentDescription2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AttachmentDescription2">
      <argument name="flags_" type="vk::AttachmentDescriptionFlags" default_raw="{}" />
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="samples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="loadOp_" type="vk::AttachmentLoadOp" default_raw="VULKAN_HPP_NAMESPACE::AttachmentLoadOp::eLoad" />
      <argument name="storeOp_" type="vk::AttachmentStoreOp" default_raw="VULKAN_HPP_NAMESPACE::AttachmentStoreOp::eStore" />
      <argument name="stencilLoadOp_" type="vk::AttachmentLoadOp" default_raw="VULKAN_HPP_NAMESPACE::AttachmentLoadOp::eLoad" />
      <argument name="stencilStoreOp_" type="vk::AttachmentStoreOp" default_raw="VULKAN_HPP_NAMESPACE::AttachmentStoreOp::eStore" />
      <argument name="initialLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="finalLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AttachmentDescription2">
      <argument name="rhs" type="const AttachmentDescription2 &amp;" />
    </constructor>
    <constructor name="AttachmentDescription2">
      <argument name="rhs" type="const VkAttachmentDescription2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AttachmentDescription2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAttachmentDescription2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::AttachmentDescriptionFlags" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <method name="setSamples">
      <argument name="samples_" type="vk::SampleCountFlagBits" />
    </method>
    <method name="setLoadOp">
      <argument name="loadOp_" type="vk::AttachmentLoadOp" />
    </method>
    <method name="setStoreOp">
      <argument name="storeOp_" type="vk::AttachmentStoreOp" />
    </method>
    <method name="setStencilLoadOp">
      <argument name="stencilLoadOp_" type="vk::AttachmentLoadOp" />
    </method>
    <method name="setStencilStoreOp">
      <argument name="stencilStoreOp_" type="vk::AttachmentStoreOp" />
    </method>
    <method name="setInitialLayout">
      <argument name="initialLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setFinalLayout">
      <argument name="finalLayout_" type="vk::ImageLayout" />
    </method>
    <conversion_function name="operator const VkAttachmentDescription2 &amp;" />
    <conversion_function name="operator VkAttachmentDescription2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AttachmentDescription2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AttachmentDescription2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="format" />
    <field name="samples" />
    <field name="loadOp" />
    <field name="storeOp" />
    <field name="stencilLoadOp" />
    <field name="stencilStoreOp" />
    <field name="initialLayout" />
    <field name="finalLayout" />
  </struct>
  <type_alias name="AttachmentDescription2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="AttachmentDescription2" />
  <struct name="AttachmentDescriptionStencilLayout" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AttachmentDescriptionStencilLayout">
      <argument name="stencilInitialLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="stencilFinalLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AttachmentDescriptionStencilLayout">
      <argument name="rhs" type="const AttachmentDescriptionStencilLayout &amp;" />
    </constructor>
    <constructor name="AttachmentDescriptionStencilLayout">
      <argument name="rhs" type="const VkAttachmentDescriptionStencilLayout &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AttachmentDescriptionStencilLayout &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAttachmentDescriptionStencilLayout &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setStencilInitialLayout">
      <argument name="stencilInitialLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setStencilFinalLayout">
      <argument name="stencilFinalLayout_" type="vk::ImageLayout" />
    </method>
    <conversion_function name="operator const VkAttachmentDescriptionStencilLayout &amp;" />
    <conversion_function name="operator VkAttachmentDescriptionStencilLayout &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AttachmentDescriptionStencilLayout &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AttachmentDescriptionStencilLayout &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stencilInitialLayout" />
    <field name="stencilFinalLayout" />
  </struct>
  <type_alias name="AttachmentDescriptionStencilLayoutKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="AttachmentDescriptionStencilLayout" />
  <struct name="AttachmentReference2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AttachmentReference2">
      <argument name="attachment_" type="uint32_t" default_raw="{}" />
      <argument name="layout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="aspectMask_" type="vk::ImageAspectFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AttachmentReference2">
      <argument name="rhs" type="const AttachmentReference2 &amp;" />
    </constructor>
    <constructor name="AttachmentReference2">
      <argument name="rhs" type="const VkAttachmentReference2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AttachmentReference2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAttachmentReference2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAttachment">
      <argument name="attachment_" type="uint32_t" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::ImageLayout" />
    </method>
    <method name="setAspectMask">
      <argument name="aspectMask_" type="vk::ImageAspectFlags" />
    </method>
    <conversion_function name="operator const VkAttachmentReference2 &amp;" />
    <conversion_function name="operator VkAttachmentReference2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AttachmentReference2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AttachmentReference2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="attachment" />
    <field name="layout" />
    <field name="aspectMask" />
  </struct>
  <type_alias name="AttachmentReference2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="AttachmentReference2" />
  <struct name="AttachmentReferenceStencilLayout" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AttachmentReferenceStencilLayout">
      <argument name="stencilLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AttachmentReferenceStencilLayout">
      <argument name="rhs" type="const AttachmentReferenceStencilLayout &amp;" />
    </constructor>
    <constructor name="AttachmentReferenceStencilLayout">
      <argument name="rhs" type="const VkAttachmentReferenceStencilLayout &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AttachmentReferenceStencilLayout &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAttachmentReferenceStencilLayout &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setStencilLayout">
      <argument name="stencilLayout_" type="vk::ImageLayout" />
    </method>
    <conversion_function name="operator const VkAttachmentReferenceStencilLayout &amp;" />
    <conversion_function name="operator VkAttachmentReferenceStencilLayout &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AttachmentReferenceStencilLayout &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AttachmentReferenceStencilLayout &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stencilLayout" />
  </struct>
  <type_alias name="AttachmentReferenceStencilLayoutKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="AttachmentReferenceStencilLayout" />
  <struct name="BufferDeviceAddressInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferDeviceAddressInfo">
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferDeviceAddressInfo">
      <argument name="rhs" type="const BufferDeviceAddressInfo &amp;" />
    </constructor>
    <constructor name="BufferDeviceAddressInfo">
      <argument name="rhs" type="const VkBufferDeviceAddressInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferDeviceAddressInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferDeviceAddressInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <conversion_function name="operator const VkBufferDeviceAddressInfo &amp;" />
    <conversion_function name="operator VkBufferDeviceAddressInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferDeviceAddressInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferDeviceAddressInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="buffer" />
  </struct>
  <type_alias name="BufferDeviceAddressInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BufferDeviceAddressInfo" />
  <type_alias name="BufferDeviceAddressInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BufferDeviceAddressInfo" />
  <struct name="BufferOpaqueCaptureAddressCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferOpaqueCaptureAddressCreateInfo">
      <argument name="opaqueCaptureAddress_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferOpaqueCaptureAddressCreateInfo">
      <argument name="rhs" type="const BufferOpaqueCaptureAddressCreateInfo &amp;" />
    </constructor>
    <constructor name="BufferOpaqueCaptureAddressCreateInfo">
      <argument name="rhs" type="const VkBufferOpaqueCaptureAddressCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferOpaqueCaptureAddressCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferOpaqueCaptureAddressCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setOpaqueCaptureAddress">
      <argument name="opaqueCaptureAddress_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkBufferOpaqueCaptureAddressCreateInfo &amp;" />
    <conversion_function name="operator VkBufferOpaqueCaptureAddressCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferOpaqueCaptureAddressCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferOpaqueCaptureAddressCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="opaqueCaptureAddress" />
  </struct>
  <type_alias name="BufferOpaqueCaptureAddressCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BufferOpaqueCaptureAddressCreateInfo" />
  <struct name="ConformanceVersion" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ConformanceVersion">
      <argument name="major_" type="uint8_t" default_raw="{}" />
      <argument name="minor_" type="uint8_t" default_raw="{}" />
      <argument name="subminor_" type="uint8_t" default_raw="{}" />
      <argument name="patch_" type="uint8_t" default_raw="{}" />
    </constructor>
    <constructor name="ConformanceVersion">
      <argument name="rhs" type="const ConformanceVersion &amp;" />
    </constructor>
    <constructor name="ConformanceVersion">
      <argument name="rhs" type="const VkConformanceVersion &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ConformanceVersion &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkConformanceVersion &amp;" />
    </method>
    <method name="setMajor">
      <argument name="major_" type="uint8_t" />
    </method>
    <method name="setMinor">
      <argument name="minor_" type="uint8_t" />
    </method>
    <method name="setSubminor">
      <argument name="subminor_" type="uint8_t" />
    </method>
    <method name="setPatch">
      <argument name="patch_" type="uint8_t" />
    </method>
    <conversion_function name="operator const VkConformanceVersion &amp;" />
    <conversion_function name="operator VkConformanceVersion &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ConformanceVersion &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ConformanceVersion &amp;" />
    </method>
    <field name="major" />
    <field name="minor" />
    <field name="subminor" />
    <field name="patch" />
  </struct>
  <type_alias name="ConformanceVersionKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ConformanceVersion" />
  <struct name="DescriptorSetLayoutBindingFlagsCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorSetLayoutBindingFlagsCreateInfo">
      <argument name="bindingCount_" type="uint32_t" default_raw="{}" />
      <argument name="pBindingFlags_" type="const vk::DescriptorBindingFlags *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorSetLayoutBindingFlagsCreateInfo">
      <argument name="rhs" type="const DescriptorSetLayoutBindingFlagsCreateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorSetLayoutBindingFlagsCreateInfo">
      <argument name="rhs" type="const VkDescriptorSetLayoutBindingFlagsCreateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorSetLayoutBindingFlagsCreateInfo">
      <argument name="bindingFlags_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorBindingFlags&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorSetLayoutBindingFlagsCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorSetLayoutBindingFlagsCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setBindingCount">
      <argument name="bindingCount_" type="uint32_t" />
    </method>
    <method name="setPBindingFlags">
      <argument name="pBindingFlags_" type="const vk::DescriptorBindingFlags *" />
    </method>
    <method name="setBindingFlags">
      <argument name="bindingFlags_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorBindingFlags&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDescriptorSetLayoutBindingFlagsCreateInfo &amp;" />
    <conversion_function name="operator VkDescriptorSetLayoutBindingFlagsCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorSetLayoutBindingFlagsCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorSetLayoutBindingFlagsCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="bindingCount" />
    <field name="pBindingFlags" />
  </struct>
  <type_alias name="DescriptorSetLayoutBindingFlagsCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DescriptorSetLayoutBindingFlagsCreateInfo" />
  <struct name="DescriptorSetVariableDescriptorCountAllocateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorSetVariableDescriptorCountAllocateInfo">
      <argument name="descriptorSetCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDescriptorCounts_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorSetVariableDescriptorCountAllocateInfo">
      <argument name="rhs" type="const DescriptorSetVariableDescriptorCountAllocateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorSetVariableDescriptorCountAllocateInfo">
      <argument name="rhs" type="const VkDescriptorSetVariableDescriptorCountAllocateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorSetVariableDescriptorCountAllocateInfo">
      <argument name="descriptorCounts_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorSetVariableDescriptorCountAllocateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorSetVariableDescriptorCountAllocateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDescriptorSetCount">
      <argument name="descriptorSetCount_" type="uint32_t" />
    </method>
    <method name="setPDescriptorCounts">
      <argument name="pDescriptorCounts_" type="const uint32_t *" />
    </method>
    <method name="setDescriptorCounts">
      <argument name="descriptorCounts_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDescriptorSetVariableDescriptorCountAllocateInfo &amp;" />
    <conversion_function name="operator VkDescriptorSetVariableDescriptorCountAllocateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorSetVariableDescriptorCountAllocateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorSetVariableDescriptorCountAllocateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="descriptorSetCount" />
    <field name="pDescriptorCounts" />
  </struct>
  <type_alias name="DescriptorSetVariableDescriptorCountAllocateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DescriptorSetVariableDescriptorCountAllocateInfo" />
  <struct name="DescriptorSetVariableDescriptorCountLayoutSupport" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorSetVariableDescriptorCountLayoutSupport">
      <argument name="maxVariableDescriptorCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorSetVariableDescriptorCountLayoutSupport">
      <argument name="rhs" type="const DescriptorSetVariableDescriptorCountLayoutSupport &amp;" />
    </constructor>
    <constructor name="DescriptorSetVariableDescriptorCountLayoutSupport">
      <argument name="rhs" type="const VkDescriptorSetVariableDescriptorCountLayoutSupport &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorSetVariableDescriptorCountLayoutSupport &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorSetVariableDescriptorCountLayoutSupport &amp;" />
    </method>
    <conversion_function name="operator const VkDescriptorSetVariableDescriptorCountLayoutSupport &amp;" />
    <conversion_function name="operator VkDescriptorSetVariableDescriptorCountLayoutSupport &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorSetVariableDescriptorCountLayoutSupport &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorSetVariableDescriptorCountLayoutSupport &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxVariableDescriptorCount" />
  </struct>
  <type_alias name="DescriptorSetVariableDescriptorCountLayoutSupportEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DescriptorSetVariableDescriptorCountLayoutSupport" />
  <struct name="DeviceMemoryOpaqueCaptureAddressInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceMemoryOpaqueCaptureAddressInfo">
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceMemoryOpaqueCaptureAddressInfo">
      <argument name="rhs" type="const DeviceMemoryOpaqueCaptureAddressInfo &amp;" />
    </constructor>
    <constructor name="DeviceMemoryOpaqueCaptureAddressInfo">
      <argument name="rhs" type="const VkDeviceMemoryOpaqueCaptureAddressInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceMemoryOpaqueCaptureAddressInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceMemoryOpaqueCaptureAddressInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <conversion_function name="operator const VkDeviceMemoryOpaqueCaptureAddressInfo &amp;" />
    <conversion_function name="operator VkDeviceMemoryOpaqueCaptureAddressInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceMemoryOpaqueCaptureAddressInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceMemoryOpaqueCaptureAddressInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memory" />
  </struct>
  <type_alias name="DeviceMemoryOpaqueCaptureAddressInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DeviceMemoryOpaqueCaptureAddressInfo" />
  <struct name="FramebufferAttachmentImageInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FramebufferAttachmentImageInfo">
      <argument name="flags_" type="vk::ImageCreateFlags" default_raw="{}" />
      <argument name="usage_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="width_" type="uint32_t" default_raw="{}" />
      <argument name="height_" type="uint32_t" default_raw="{}" />
      <argument name="layerCount_" type="uint32_t" default_raw="{}" />
      <argument name="viewFormatCount_" type="uint32_t" default_raw="{}" />
      <argument name="pViewFormats_" type="const vk::Format *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="FramebufferAttachmentImageInfo">
      <argument name="rhs" type="const FramebufferAttachmentImageInfo &amp;" />
    </constructor>
    <constructor name="FramebufferAttachmentImageInfo">
      <argument name="rhs" type="const VkFramebufferAttachmentImageInfo &amp;" />
    </constructor>
    <constructor name="FramebufferAttachmentImageInfo">
      <argument name="flags_" type="vk::ImageCreateFlags" />
      <argument name="usage_" type="vk::ImageUsageFlags" />
      <argument name="width_" type="uint32_t" />
      <argument name="height_" type="uint32_t" />
      <argument name="layerCount_" type="uint32_t" />
      <argument name="viewFormats_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Format&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const FramebufferAttachmentImageInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFramebufferAttachmentImageInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::ImageCreateFlags" />
    </method>
    <method name="setUsage">
      <argument name="usage_" type="vk::ImageUsageFlags" />
    </method>
    <method name="setWidth">
      <argument name="width_" type="uint32_t" />
    </method>
    <method name="setHeight">
      <argument name="height_" type="uint32_t" />
    </method>
    <method name="setLayerCount">
      <argument name="layerCount_" type="uint32_t" />
    </method>
    <method name="setViewFormatCount">
      <argument name="viewFormatCount_" type="uint32_t" />
    </method>
    <method name="setPViewFormats">
      <argument name="pViewFormats_" type="const vk::Format *" />
    </method>
    <method name="setViewFormats">
      <argument name="viewFormats_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Format&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkFramebufferAttachmentImageInfo &amp;" />
    <conversion_function name="operator VkFramebufferAttachmentImageInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FramebufferAttachmentImageInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FramebufferAttachmentImageInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="usage" />
    <field name="width" />
    <field name="height" />
    <field name="layerCount" />
    <field name="viewFormatCount" />
    <field name="pViewFormats" />
  </struct>
  <type_alias name="FramebufferAttachmentImageInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="FramebufferAttachmentImageInfo" />
  <struct name="FramebufferAttachmentsCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FramebufferAttachmentsCreateInfo">
      <argument name="attachmentImageInfoCount_" type="uint32_t" default_raw="{}" />
      <argument name="pAttachmentImageInfos_" type="const vk::FramebufferAttachmentImageInfo *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="FramebufferAttachmentsCreateInfo">
      <argument name="rhs" type="const FramebufferAttachmentsCreateInfo &amp;" />
    </constructor>
    <constructor name="FramebufferAttachmentsCreateInfo">
      <argument name="rhs" type="const VkFramebufferAttachmentsCreateInfo &amp;" />
    </constructor>
    <constructor name="FramebufferAttachmentsCreateInfo">
      <argument name="attachmentImageInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::FramebufferAttachmentImageInfo&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const FramebufferAttachmentsCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFramebufferAttachmentsCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAttachmentImageInfoCount">
      <argument name="attachmentImageInfoCount_" type="uint32_t" />
    </method>
    <method name="setPAttachmentImageInfos">
      <argument name="pAttachmentImageInfos_" type="const vk::FramebufferAttachmentImageInfo *" />
    </method>
    <method name="setAttachmentImageInfos">
      <argument name="attachmentImageInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::FramebufferAttachmentImageInfo&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkFramebufferAttachmentsCreateInfo &amp;" />
    <conversion_function name="operator VkFramebufferAttachmentsCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FramebufferAttachmentsCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FramebufferAttachmentsCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="attachmentImageInfoCount" />
    <field name="pAttachmentImageInfos" />
  </struct>
  <type_alias name="FramebufferAttachmentsCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="FramebufferAttachmentsCreateInfo" />
  <struct name="ImageFormatListCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageFormatListCreateInfo">
      <argument name="viewFormatCount_" type="uint32_t" default_raw="{}" />
      <argument name="pViewFormats_" type="const vk::Format *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageFormatListCreateInfo">
      <argument name="rhs" type="const ImageFormatListCreateInfo &amp;" />
    </constructor>
    <constructor name="ImageFormatListCreateInfo">
      <argument name="rhs" type="const VkImageFormatListCreateInfo &amp;" />
    </constructor>
    <constructor name="ImageFormatListCreateInfo">
      <argument name="viewFormats_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Format&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageFormatListCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageFormatListCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setViewFormatCount">
      <argument name="viewFormatCount_" type="uint32_t" />
    </method>
    <method name="setPViewFormats">
      <argument name="pViewFormats_" type="const vk::Format *" />
    </method>
    <method name="setViewFormats">
      <argument name="viewFormats_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Format&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkImageFormatListCreateInfo &amp;" />
    <conversion_function name="operator VkImageFormatListCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageFormatListCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageFormatListCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="viewFormatCount" />
    <field name="pViewFormats" />
  </struct>
  <type_alias name="ImageFormatListCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImageFormatListCreateInfo" />
  <struct name="ImageStencilUsageCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageStencilUsageCreateInfo">
      <argument name="stencilUsage_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageStencilUsageCreateInfo">
      <argument name="rhs" type="const ImageStencilUsageCreateInfo &amp;" />
    </constructor>
    <constructor name="ImageStencilUsageCreateInfo">
      <argument name="rhs" type="const VkImageStencilUsageCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageStencilUsageCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageStencilUsageCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStencilUsage">
      <argument name="stencilUsage_" type="vk::ImageUsageFlags" />
    </method>
    <conversion_function name="operator const VkImageStencilUsageCreateInfo &amp;" />
    <conversion_function name="operator VkImageStencilUsageCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageStencilUsageCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageStencilUsageCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stencilUsage" />
  </struct>
  <type_alias name="ImageStencilUsageCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImageStencilUsageCreateInfo" />
  <struct name="MemoryOpaqueCaptureAddressAllocateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryOpaqueCaptureAddressAllocateInfo">
      <argument name="opaqueCaptureAddress_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryOpaqueCaptureAddressAllocateInfo">
      <argument name="rhs" type="const MemoryOpaqueCaptureAddressAllocateInfo &amp;" />
    </constructor>
    <constructor name="MemoryOpaqueCaptureAddressAllocateInfo">
      <argument name="rhs" type="const VkMemoryOpaqueCaptureAddressAllocateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryOpaqueCaptureAddressAllocateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryOpaqueCaptureAddressAllocateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setOpaqueCaptureAddress">
      <argument name="opaqueCaptureAddress_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkMemoryOpaqueCaptureAddressAllocateInfo &amp;" />
    <conversion_function name="operator VkMemoryOpaqueCaptureAddressAllocateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryOpaqueCaptureAddressAllocateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryOpaqueCaptureAddressAllocateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="opaqueCaptureAddress" />
  </struct>
  <type_alias name="MemoryOpaqueCaptureAddressAllocateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="MemoryOpaqueCaptureAddressAllocateInfo" />
  <struct name="PhysicalDevice8BitStorageFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevice8BitStorageFeatures">
      <argument name="storageBuffer8BitAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="uniformAndStorageBuffer8BitAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="storagePushConstant8_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevice8BitStorageFeatures">
      <argument name="rhs" type="const PhysicalDevice8BitStorageFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDevice8BitStorageFeatures">
      <argument name="rhs" type="const VkPhysicalDevice8BitStorageFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevice8BitStorageFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevice8BitStorageFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setStorageBuffer8BitAccess">
      <argument name="storageBuffer8BitAccess_" type="vk::Bool32" />
    </method>
    <method name="setUniformAndStorageBuffer8BitAccess">
      <argument name="uniformAndStorageBuffer8BitAccess_" type="vk::Bool32" />
    </method>
    <method name="setStoragePushConstant8">
      <argument name="storagePushConstant8_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevice8BitStorageFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDevice8BitStorageFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevice8BitStorageFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevice8BitStorageFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="storageBuffer8BitAccess" />
    <field name="uniformAndStorageBuffer8BitAccess" />
    <field name="storagePushConstant8" />
  </struct>
  <type_alias name="PhysicalDevice8BitStorageFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDevice8BitStorageFeatures" />
  <struct name="PhysicalDeviceBufferDeviceAddressFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceBufferDeviceAddressFeatures">
      <argument name="bufferDeviceAddress_" type="vk::Bool32" default_raw="{}" />
      <argument name="bufferDeviceAddressCaptureReplay_" type="vk::Bool32" default_raw="{}" />
      <argument name="bufferDeviceAddressMultiDevice_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceBufferDeviceAddressFeatures">
      <argument name="rhs" type="const PhysicalDeviceBufferDeviceAddressFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceBufferDeviceAddressFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceBufferDeviceAddressFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceBufferDeviceAddressFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceBufferDeviceAddressFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setBufferDeviceAddress">
      <argument name="bufferDeviceAddress_" type="vk::Bool32" />
    </method>
    <method name="setBufferDeviceAddressCaptureReplay">
      <argument name="bufferDeviceAddressCaptureReplay_" type="vk::Bool32" />
    </method>
    <method name="setBufferDeviceAddressMultiDevice">
      <argument name="bufferDeviceAddressMultiDevice_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceBufferDeviceAddressFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceBufferDeviceAddressFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceBufferDeviceAddressFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceBufferDeviceAddressFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="bufferDeviceAddress" />
    <field name="bufferDeviceAddressCaptureReplay" />
    <field name="bufferDeviceAddressMultiDevice" />
  </struct>
  <type_alias name="PhysicalDeviceBufferDeviceAddressFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceBufferDeviceAddressFeatures" />
  <struct name="PhysicalDeviceDepthStencilResolveProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDepthStencilResolveProperties">
      <argument name="supportedDepthResolveModes_" type="vk::ResolveModeFlags" default_raw="{}" />
      <argument name="supportedStencilResolveModes_" type="vk::ResolveModeFlags" default_raw="{}" />
      <argument name="independentResolveNone_" type="vk::Bool32" default_raw="{}" />
      <argument name="independentResolve_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDepthStencilResolveProperties">
      <argument name="rhs" type="const PhysicalDeviceDepthStencilResolveProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDepthStencilResolveProperties">
      <argument name="rhs" type="const VkPhysicalDeviceDepthStencilResolveProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDepthStencilResolveProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDepthStencilResolveProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDepthStencilResolveProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDepthStencilResolveProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDepthStencilResolveProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDepthStencilResolveProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="supportedDepthResolveModes" />
    <field name="supportedStencilResolveModes" />
    <field name="independentResolveNone" />
    <field name="independentResolve" />
  </struct>
  <type_alias name="PhysicalDeviceDepthStencilResolvePropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceDepthStencilResolveProperties" />
  <struct name="PhysicalDeviceDescriptorIndexingFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDescriptorIndexingFeatures">
      <argument name="shaderInputAttachmentArrayDynamicIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderUniformTexelBufferArrayDynamicIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageTexelBufferArrayDynamicIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderUniformBufferArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSampledImageArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageBufferArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageImageArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderInputAttachmentArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderUniformTexelBufferArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageTexelBufferArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingUniformBufferUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingSampledImageUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingStorageImageUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingStorageBufferUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingUniformTexelBufferUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingStorageTexelBufferUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingUpdateUnusedWhilePending_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingPartiallyBound_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingVariableDescriptorCount_" type="vk::Bool32" default_raw="{}" />
      <argument name="runtimeDescriptorArray_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorIndexingFeatures">
      <argument name="rhs" type="const PhysicalDeviceDescriptorIndexingFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorIndexingFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorIndexingFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorIndexingFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorIndexingFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderInputAttachmentArrayDynamicIndexing">
      <argument name="shaderInputAttachmentArrayDynamicIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderUniformTexelBufferArrayDynamicIndexing">
      <argument name="shaderUniformTexelBufferArrayDynamicIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageTexelBufferArrayDynamicIndexing">
      <argument name="shaderStorageTexelBufferArrayDynamicIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderUniformBufferArrayNonUniformIndexing">
      <argument name="shaderUniformBufferArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderSampledImageArrayNonUniformIndexing">
      <argument name="shaderSampledImageArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageBufferArrayNonUniformIndexing">
      <argument name="shaderStorageBufferArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageImageArrayNonUniformIndexing">
      <argument name="shaderStorageImageArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderInputAttachmentArrayNonUniformIndexing">
      <argument name="shaderInputAttachmentArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderUniformTexelBufferArrayNonUniformIndexing">
      <argument name="shaderUniformTexelBufferArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageTexelBufferArrayNonUniformIndexing">
      <argument name="shaderStorageTexelBufferArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingUniformBufferUpdateAfterBind">
      <argument name="descriptorBindingUniformBufferUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingSampledImageUpdateAfterBind">
      <argument name="descriptorBindingSampledImageUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingStorageImageUpdateAfterBind">
      <argument name="descriptorBindingStorageImageUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingStorageBufferUpdateAfterBind">
      <argument name="descriptorBindingStorageBufferUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingUniformTexelBufferUpdateAfterBind">
      <argument name="descriptorBindingUniformTexelBufferUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingStorageTexelBufferUpdateAfterBind">
      <argument name="descriptorBindingStorageTexelBufferUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingUpdateUnusedWhilePending">
      <argument name="descriptorBindingUpdateUnusedWhilePending_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingPartiallyBound">
      <argument name="descriptorBindingPartiallyBound_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingVariableDescriptorCount">
      <argument name="descriptorBindingVariableDescriptorCount_" type="vk::Bool32" />
    </method>
    <method name="setRuntimeDescriptorArray">
      <argument name="runtimeDescriptorArray_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDescriptorIndexingFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDescriptorIndexingFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDescriptorIndexingFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorIndexingFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderInputAttachmentArrayDynamicIndexing" />
    <field name="shaderUniformTexelBufferArrayDynamicIndexing" />
    <field name="shaderStorageTexelBufferArrayDynamicIndexing" />
    <field name="shaderUniformBufferArrayNonUniformIndexing" />
    <field name="shaderSampledImageArrayNonUniformIndexing" />
    <field name="shaderStorageBufferArrayNonUniformIndexing" />
    <field name="shaderStorageImageArrayNonUniformIndexing" />
    <field name="shaderInputAttachmentArrayNonUniformIndexing" />
    <field name="shaderUniformTexelBufferArrayNonUniformIndexing" />
    <field name="shaderStorageTexelBufferArrayNonUniformIndexing" />
    <field name="descriptorBindingUniformBufferUpdateAfterBind" />
    <field name="descriptorBindingSampledImageUpdateAfterBind" />
    <field name="descriptorBindingStorageImageUpdateAfterBind" />
    <field name="descriptorBindingStorageBufferUpdateAfterBind" />
    <field name="descriptorBindingUniformTexelBufferUpdateAfterBind" />
    <field name="descriptorBindingStorageTexelBufferUpdateAfterBind" />
    <field name="descriptorBindingUpdateUnusedWhilePending" />
    <field name="descriptorBindingPartiallyBound" />
    <field name="descriptorBindingVariableDescriptorCount" />
    <field name="runtimeDescriptorArray" />
  </struct>
  <type_alias name="PhysicalDeviceDescriptorIndexingFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceDescriptorIndexingFeatures" />
  <struct name="PhysicalDeviceDescriptorIndexingProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDescriptorIndexingProperties">
      <argument name="maxUpdateAfterBindDescriptorsInAllPools_" type="uint32_t" default_raw="{}" />
      <argument name="shaderUniformBufferArrayNonUniformIndexingNative_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSampledImageArrayNonUniformIndexingNative_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageBufferArrayNonUniformIndexingNative_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageImageArrayNonUniformIndexingNative_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderInputAttachmentArrayNonUniformIndexingNative_" type="vk::Bool32" default_raw="{}" />
      <argument name="robustBufferAccessUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="quadDivergentImplicitLod_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindSamplers_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindUniformBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindStorageBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindSampledImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindStorageImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindInputAttachments_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageUpdateAfterBindResources_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindSamplers_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindUniformBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindUniformBuffersDynamic_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindStorageBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindStorageBuffersDynamic_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindSampledImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindStorageImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindInputAttachments_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorIndexingProperties">
      <argument name="rhs" type="const PhysicalDeviceDescriptorIndexingProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorIndexingProperties">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorIndexingProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorIndexingProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorIndexingProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDescriptorIndexingProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDescriptorIndexingProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDescriptorIndexingProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorIndexingProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxUpdateAfterBindDescriptorsInAllPools" />
    <field name="shaderUniformBufferArrayNonUniformIndexingNative" />
    <field name="shaderSampledImageArrayNonUniformIndexingNative" />
    <field name="shaderStorageBufferArrayNonUniformIndexingNative" />
    <field name="shaderStorageImageArrayNonUniformIndexingNative" />
    <field name="shaderInputAttachmentArrayNonUniformIndexingNative" />
    <field name="robustBufferAccessUpdateAfterBind" />
    <field name="quadDivergentImplicitLod" />
    <field name="maxPerStageDescriptorUpdateAfterBindSamplers" />
    <field name="maxPerStageDescriptorUpdateAfterBindUniformBuffers" />
    <field name="maxPerStageDescriptorUpdateAfterBindStorageBuffers" />
    <field name="maxPerStageDescriptorUpdateAfterBindSampledImages" />
    <field name="maxPerStageDescriptorUpdateAfterBindStorageImages" />
    <field name="maxPerStageDescriptorUpdateAfterBindInputAttachments" />
    <field name="maxPerStageUpdateAfterBindResources" />
    <field name="maxDescriptorSetUpdateAfterBindSamplers" />
    <field name="maxDescriptorSetUpdateAfterBindUniformBuffers" />
    <field name="maxDescriptorSetUpdateAfterBindUniformBuffersDynamic" />
    <field name="maxDescriptorSetUpdateAfterBindStorageBuffers" />
    <field name="maxDescriptorSetUpdateAfterBindStorageBuffersDynamic" />
    <field name="maxDescriptorSetUpdateAfterBindSampledImages" />
    <field name="maxDescriptorSetUpdateAfterBindStorageImages" />
    <field name="maxDescriptorSetUpdateAfterBindInputAttachments" />
  </struct>
  <type_alias name="PhysicalDeviceDescriptorIndexingPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceDescriptorIndexingProperties" />
  <struct name="PhysicalDeviceDriverProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDriverProperties">
      <argument name="driverID_" type="vk::DriverId" default_raw="VULKAN_HPP_NAMESPACE::DriverId::eAmdProprietary" />
      <argument name="driverName_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="driverInfo_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="conformanceVersion_" type="vk::ConformanceVersion" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDriverProperties">
      <argument name="rhs" type="const PhysicalDeviceDriverProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDriverProperties">
      <argument name="rhs" type="const VkPhysicalDeviceDriverProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDriverProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDriverProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDriverProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDriverProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDriverProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDriverProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="driverID" />
    <field name="driverName" />
    <field name="driverInfo" />
    <field name="conformanceVersion" />
  </struct>
  <type_alias name="PhysicalDeviceDriverPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceDriverProperties" />
  <type_alias name="PhysicalDeviceFloat16Int8FeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceShaderFloat16Int8Features" />
  <struct name="PhysicalDeviceFloatControlsProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFloatControlsProperties">
      <argument name="denormBehaviorIndependence_" type="vk::ShaderFloatControlsIndependence" default_raw="VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence::e32BitOnly" />
      <argument name="roundingModeIndependence_" type="vk::ShaderFloatControlsIndependence" default_raw="VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence::e32BitOnly" />
      <argument name="shaderSignedZeroInfNanPreserveFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSignedZeroInfNanPreserveFloat32_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSignedZeroInfNanPreserveFloat64_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormPreserveFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormPreserveFloat32_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormPreserveFloat64_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormFlushToZeroFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormFlushToZeroFloat32_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormFlushToZeroFloat64_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTEFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTEFloat32_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTEFloat64_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTZFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTZFloat32_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTZFloat64_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFloatControlsProperties">
      <argument name="rhs" type="const PhysicalDeviceFloatControlsProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFloatControlsProperties">
      <argument name="rhs" type="const VkPhysicalDeviceFloatControlsProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFloatControlsProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFloatControlsProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFloatControlsProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFloatControlsProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFloatControlsProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFloatControlsProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="denormBehaviorIndependence" />
    <field name="roundingModeIndependence" />
    <field name="shaderSignedZeroInfNanPreserveFloat16" />
    <field name="shaderSignedZeroInfNanPreserveFloat32" />
    <field name="shaderSignedZeroInfNanPreserveFloat64" />
    <field name="shaderDenormPreserveFloat16" />
    <field name="shaderDenormPreserveFloat32" />
    <field name="shaderDenormPreserveFloat64" />
    <field name="shaderDenormFlushToZeroFloat16" />
    <field name="shaderDenormFlushToZeroFloat32" />
    <field name="shaderDenormFlushToZeroFloat64" />
    <field name="shaderRoundingModeRTEFloat16" />
    <field name="shaderRoundingModeRTEFloat32" />
    <field name="shaderRoundingModeRTEFloat64" />
    <field name="shaderRoundingModeRTZFloat16" />
    <field name="shaderRoundingModeRTZFloat32" />
    <field name="shaderRoundingModeRTZFloat64" />
  </struct>
  <type_alias name="PhysicalDeviceFloatControlsPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceFloatControlsProperties" />
  <struct name="PhysicalDeviceHostQueryResetFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceHostQueryResetFeatures">
      <argument name="hostQueryReset_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceHostQueryResetFeatures">
      <argument name="rhs" type="const PhysicalDeviceHostQueryResetFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceHostQueryResetFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceHostQueryResetFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceHostQueryResetFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceHostQueryResetFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setHostQueryReset">
      <argument name="hostQueryReset_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceHostQueryResetFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceHostQueryResetFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceHostQueryResetFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceHostQueryResetFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="hostQueryReset" />
  </struct>
  <type_alias name="PhysicalDeviceHostQueryResetFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceHostQueryResetFeatures" />
  <struct name="PhysicalDeviceImagelessFramebufferFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImagelessFramebufferFeatures">
      <argument name="imagelessFramebuffer_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImagelessFramebufferFeatures">
      <argument name="rhs" type="const PhysicalDeviceImagelessFramebufferFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImagelessFramebufferFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceImagelessFramebufferFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImagelessFramebufferFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImagelessFramebufferFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setImagelessFramebuffer">
      <argument name="imagelessFramebuffer_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImagelessFramebufferFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImagelessFramebufferFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImagelessFramebufferFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImagelessFramebufferFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imagelessFramebuffer" />
  </struct>
  <type_alias name="PhysicalDeviceImagelessFramebufferFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceImagelessFramebufferFeatures" />
  <struct name="PhysicalDeviceSamplerFilterMinmaxProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSamplerFilterMinmaxProperties">
      <argument name="filterMinmaxSingleComponentFormats_" type="vk::Bool32" default_raw="{}" />
      <argument name="filterMinmaxImageComponentMapping_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSamplerFilterMinmaxProperties">
      <argument name="rhs" type="const PhysicalDeviceSamplerFilterMinmaxProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSamplerFilterMinmaxProperties">
      <argument name="rhs" type="const VkPhysicalDeviceSamplerFilterMinmaxProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSamplerFilterMinmaxProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSamplerFilterMinmaxProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSamplerFilterMinmaxProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSamplerFilterMinmaxProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSamplerFilterMinmaxProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSamplerFilterMinmaxProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="filterMinmaxSingleComponentFormats" />
    <field name="filterMinmaxImageComponentMapping" />
  </struct>
  <type_alias name="PhysicalDeviceSamplerFilterMinmaxPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceSamplerFilterMinmaxProperties" />
  <struct name="PhysicalDeviceScalarBlockLayoutFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceScalarBlockLayoutFeatures">
      <argument name="scalarBlockLayout_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceScalarBlockLayoutFeatures">
      <argument name="rhs" type="const PhysicalDeviceScalarBlockLayoutFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceScalarBlockLayoutFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceScalarBlockLayoutFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceScalarBlockLayoutFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceScalarBlockLayoutFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setScalarBlockLayout">
      <argument name="scalarBlockLayout_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceScalarBlockLayoutFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceScalarBlockLayoutFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceScalarBlockLayoutFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceScalarBlockLayoutFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="scalarBlockLayout" />
  </struct>
  <type_alias name="PhysicalDeviceScalarBlockLayoutFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceScalarBlockLayoutFeatures" />
  <struct name="PhysicalDeviceSeparateDepthStencilLayoutsFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSeparateDepthStencilLayoutsFeatures">
      <argument name="separateDepthStencilLayouts_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSeparateDepthStencilLayoutsFeatures">
      <argument name="rhs" type="const PhysicalDeviceSeparateDepthStencilLayoutsFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSeparateDepthStencilLayoutsFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSeparateDepthStencilLayoutsFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSeparateDepthStencilLayouts">
      <argument name="separateDepthStencilLayouts_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSeparateDepthStencilLayoutsFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSeparateDepthStencilLayoutsFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="separateDepthStencilLayouts" />
  </struct>
  <type_alias name="PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceSeparateDepthStencilLayoutsFeatures" />
  <struct name="PhysicalDeviceShaderAtomicInt64Features" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderAtomicInt64Features">
      <argument name="shaderBufferInt64Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSharedInt64Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderAtomicInt64Features">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicInt64Features &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderAtomicInt64Features">
      <argument name="rhs" type="const VkPhysicalDeviceShaderAtomicInt64Features &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicInt64Features &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderAtomicInt64Features &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderBufferInt64Atomics">
      <argument name="shaderBufferInt64Atomics_" type="vk::Bool32" />
    </method>
    <method name="setShaderSharedInt64Atomics">
      <argument name="shaderSharedInt64Atomics_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderAtomicInt64Features &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderAtomicInt64Features &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicInt64Features &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicInt64Features &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderBufferInt64Atomics" />
    <field name="shaderSharedInt64Atomics" />
  </struct>
  <type_alias name="PhysicalDeviceShaderAtomicInt64FeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceShaderAtomicInt64Features" />
  <struct name="PhysicalDeviceShaderFloat16Int8Features" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderFloat16Int8Features">
      <argument name="shaderFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderInt8_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderFloat16Int8Features">
      <argument name="rhs" type="const PhysicalDeviceShaderFloat16Int8Features &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderFloat16Int8Features">
      <argument name="rhs" type="const VkPhysicalDeviceShaderFloat16Int8Features &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderFloat16Int8Features &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderFloat16Int8Features &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderFloat16">
      <argument name="shaderFloat16_" type="vk::Bool32" />
    </method>
    <method name="setShaderInt8">
      <argument name="shaderInt8_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderFloat16Int8Features &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderFloat16Int8Features &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderFloat16Int8Features &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderFloat16Int8Features &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderFloat16" />
    <field name="shaderInt8" />
  </struct>
  <type_alias name="PhysicalDeviceShaderFloat16Int8FeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceShaderFloat16Int8Features" />
  <struct name="PhysicalDeviceShaderSubgroupExtendedTypesFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderSubgroupExtendedTypesFeatures">
      <argument name="shaderSubgroupExtendedTypes_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderSubgroupExtendedTypesFeatures">
      <argument name="rhs" type="const PhysicalDeviceShaderSubgroupExtendedTypesFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderSubgroupExtendedTypesFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderSubgroupExtendedTypesFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderSubgroupExtendedTypes">
      <argument name="shaderSubgroupExtendedTypes_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderSubgroupExtendedTypesFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderSubgroupExtendedTypesFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderSubgroupExtendedTypes" />
  </struct>
  <type_alias name="PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceShaderSubgroupExtendedTypesFeatures" />
  <struct name="PhysicalDeviceTimelineSemaphoreFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceTimelineSemaphoreFeatures">
      <argument name="timelineSemaphore_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceTimelineSemaphoreFeatures">
      <argument name="rhs" type="const PhysicalDeviceTimelineSemaphoreFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceTimelineSemaphoreFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceTimelineSemaphoreFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceTimelineSemaphoreFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceTimelineSemaphoreFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTimelineSemaphore">
      <argument name="timelineSemaphore_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceTimelineSemaphoreFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceTimelineSemaphoreFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceTimelineSemaphoreFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceTimelineSemaphoreFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="timelineSemaphore" />
  </struct>
  <type_alias name="PhysicalDeviceTimelineSemaphoreFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceTimelineSemaphoreFeatures" />
  <struct name="PhysicalDeviceTimelineSemaphoreProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceTimelineSemaphoreProperties">
      <argument name="maxTimelineSemaphoreValueDifference_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceTimelineSemaphoreProperties">
      <argument name="rhs" type="const PhysicalDeviceTimelineSemaphoreProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceTimelineSemaphoreProperties">
      <argument name="rhs" type="const VkPhysicalDeviceTimelineSemaphoreProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceTimelineSemaphoreProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceTimelineSemaphoreProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceTimelineSemaphoreProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceTimelineSemaphoreProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceTimelineSemaphoreProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceTimelineSemaphoreProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxTimelineSemaphoreValueDifference" />
  </struct>
  <type_alias name="PhysicalDeviceTimelineSemaphorePropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceTimelineSemaphoreProperties" />
  <struct name="PhysicalDeviceUniformBufferStandardLayoutFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceUniformBufferStandardLayoutFeatures">
      <argument name="uniformBufferStandardLayout_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceUniformBufferStandardLayoutFeatures">
      <argument name="rhs" type="const PhysicalDeviceUniformBufferStandardLayoutFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceUniformBufferStandardLayoutFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceUniformBufferStandardLayoutFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceUniformBufferStandardLayoutFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceUniformBufferStandardLayoutFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setUniformBufferStandardLayout">
      <argument name="uniformBufferStandardLayout_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceUniformBufferStandardLayoutFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceUniformBufferStandardLayoutFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceUniformBufferStandardLayoutFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceUniformBufferStandardLayoutFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="uniformBufferStandardLayout" />
  </struct>
  <type_alias name="PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceUniformBufferStandardLayoutFeatures" />
  <struct name="PhysicalDeviceVulkan11Features" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVulkan11Features">
      <argument name="storageBuffer16BitAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="uniformAndStorageBuffer16BitAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="storagePushConstant16_" type="vk::Bool32" default_raw="{}" />
      <argument name="storageInputOutput16_" type="vk::Bool32" default_raw="{}" />
      <argument name="multiview_" type="vk::Bool32" default_raw="{}" />
      <argument name="multiviewGeometryShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="multiviewTessellationShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="variablePointersStorageBuffer_" type="vk::Bool32" default_raw="{}" />
      <argument name="variablePointers_" type="vk::Bool32" default_raw="{}" />
      <argument name="protectedMemory_" type="vk::Bool32" default_raw="{}" />
      <argument name="samplerYcbcrConversion_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDrawParameters_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan11Features">
      <argument name="rhs" type="const PhysicalDeviceVulkan11Features &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan11Features">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan11Features &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVulkan11Features &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan11Features &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setStorageBuffer16BitAccess">
      <argument name="storageBuffer16BitAccess_" type="vk::Bool32" />
    </method>
    <method name="setUniformAndStorageBuffer16BitAccess">
      <argument name="uniformAndStorageBuffer16BitAccess_" type="vk::Bool32" />
    </method>
    <method name="setStoragePushConstant16">
      <argument name="storagePushConstant16_" type="vk::Bool32" />
    </method>
    <method name="setStorageInputOutput16">
      <argument name="storageInputOutput16_" type="vk::Bool32" />
    </method>
    <method name="setMultiview">
      <argument name="multiview_" type="vk::Bool32" />
    </method>
    <method name="setMultiviewGeometryShader">
      <argument name="multiviewGeometryShader_" type="vk::Bool32" />
    </method>
    <method name="setMultiviewTessellationShader">
      <argument name="multiviewTessellationShader_" type="vk::Bool32" />
    </method>
    <method name="setVariablePointersStorageBuffer">
      <argument name="variablePointersStorageBuffer_" type="vk::Bool32" />
    </method>
    <method name="setVariablePointers">
      <argument name="variablePointers_" type="vk::Bool32" />
    </method>
    <method name="setProtectedMemory">
      <argument name="protectedMemory_" type="vk::Bool32" />
    </method>
    <method name="setSamplerYcbcrConversion">
      <argument name="samplerYcbcrConversion_" type="vk::Bool32" />
    </method>
    <method name="setShaderDrawParameters">
      <argument name="shaderDrawParameters_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVulkan11Features &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVulkan11Features &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVulkan11Features &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVulkan11Features &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="storageBuffer16BitAccess" />
    <field name="uniformAndStorageBuffer16BitAccess" />
    <field name="storagePushConstant16" />
    <field name="storageInputOutput16" />
    <field name="multiview" />
    <field name="multiviewGeometryShader" />
    <field name="multiviewTessellationShader" />
    <field name="variablePointersStorageBuffer" />
    <field name="variablePointers" />
    <field name="protectedMemory" />
    <field name="samplerYcbcrConversion" />
    <field name="shaderDrawParameters" />
  </struct>
  <struct name="PhysicalDeviceVulkan11Properties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVulkan11Properties">
      <argument name="deviceUUID_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="driverUUID_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="deviceLUID_" type="const std::array&lt;uint8_t, 8U&gt; &amp;" default_raw="{}" />
      <argument name="deviceNodeMask_" type="uint32_t" default_raw="{}" />
      <argument name="deviceLUIDValid_" type="vk::Bool32" default_raw="{}" />
      <argument name="subgroupSize_" type="uint32_t" default_raw="{}" />
      <argument name="subgroupSupportedStages_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="subgroupSupportedOperations_" type="vk::SubgroupFeatureFlags" default_raw="{}" />
      <argument name="subgroupQuadOperationsInAllStages_" type="vk::Bool32" default_raw="{}" />
      <argument name="pointClippingBehavior_" type="vk::PointClippingBehavior" default_raw="VULKAN_HPP_NAMESPACE::PointClippingBehavior::eAllClipPlanes" />
      <argument name="maxMultiviewViewCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxMultiviewInstanceIndex_" type="uint32_t" default_raw="{}" />
      <argument name="protectedNoFault_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxPerSetDescriptors_" type="uint32_t" default_raw="{}" />
      <argument name="maxMemoryAllocationSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan11Properties">
      <argument name="rhs" type="const PhysicalDeviceVulkan11Properties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan11Properties">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan11Properties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVulkan11Properties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan11Properties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVulkan11Properties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVulkan11Properties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVulkan11Properties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVulkan11Properties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceUUID" />
    <field name="driverUUID" />
    <field name="deviceLUID" />
    <field name="deviceNodeMask" />
    <field name="deviceLUIDValid" />
    <field name="subgroupSize" />
    <field name="subgroupSupportedStages" />
    <field name="subgroupSupportedOperations" />
    <field name="subgroupQuadOperationsInAllStages" />
    <field name="pointClippingBehavior" />
    <field name="maxMultiviewViewCount" />
    <field name="maxMultiviewInstanceIndex" />
    <field name="protectedNoFault" />
    <field name="maxPerSetDescriptors" />
    <field name="maxMemoryAllocationSize" />
  </struct>
  <struct name="PhysicalDeviceVulkan12Features" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVulkan12Features">
      <argument name="samplerMirrorClampToEdge_" type="vk::Bool32" default_raw="{}" />
      <argument name="drawIndirectCount_" type="vk::Bool32" default_raw="{}" />
      <argument name="storageBuffer8BitAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="uniformAndStorageBuffer8BitAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="storagePushConstant8_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderBufferInt64Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSharedInt64Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderInt8_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderInputAttachmentArrayDynamicIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderUniformTexelBufferArrayDynamicIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageTexelBufferArrayDynamicIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderUniformBufferArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSampledImageArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageBufferArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageImageArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderInputAttachmentArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderUniformTexelBufferArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageTexelBufferArrayNonUniformIndexing_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingUniformBufferUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingSampledImageUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingStorageImageUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingStorageBufferUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingUniformTexelBufferUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingStorageTexelBufferUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingUpdateUnusedWhilePending_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingPartiallyBound_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingVariableDescriptorCount_" type="vk::Bool32" default_raw="{}" />
      <argument name="runtimeDescriptorArray_" type="vk::Bool32" default_raw="{}" />
      <argument name="samplerFilterMinmax_" type="vk::Bool32" default_raw="{}" />
      <argument name="scalarBlockLayout_" type="vk::Bool32" default_raw="{}" />
      <argument name="imagelessFramebuffer_" type="vk::Bool32" default_raw="{}" />
      <argument name="uniformBufferStandardLayout_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSubgroupExtendedTypes_" type="vk::Bool32" default_raw="{}" />
      <argument name="separateDepthStencilLayouts_" type="vk::Bool32" default_raw="{}" />
      <argument name="hostQueryReset_" type="vk::Bool32" default_raw="{}" />
      <argument name="timelineSemaphore_" type="vk::Bool32" default_raw="{}" />
      <argument name="bufferDeviceAddress_" type="vk::Bool32" default_raw="{}" />
      <argument name="bufferDeviceAddressCaptureReplay_" type="vk::Bool32" default_raw="{}" />
      <argument name="bufferDeviceAddressMultiDevice_" type="vk::Bool32" default_raw="{}" />
      <argument name="vulkanMemoryModel_" type="vk::Bool32" default_raw="{}" />
      <argument name="vulkanMemoryModelDeviceScope_" type="vk::Bool32" default_raw="{}" />
      <argument name="vulkanMemoryModelAvailabilityVisibilityChains_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderOutputViewportIndex_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderOutputLayer_" type="vk::Bool32" default_raw="{}" />
      <argument name="subgroupBroadcastDynamicId_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan12Features">
      <argument name="rhs" type="const PhysicalDeviceVulkan12Features &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan12Features">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan12Features &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVulkan12Features &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan12Features &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSamplerMirrorClampToEdge">
      <argument name="samplerMirrorClampToEdge_" type="vk::Bool32" />
    </method>
    <method name="setDrawIndirectCount">
      <argument name="drawIndirectCount_" type="vk::Bool32" />
    </method>
    <method name="setStorageBuffer8BitAccess">
      <argument name="storageBuffer8BitAccess_" type="vk::Bool32" />
    </method>
    <method name="setUniformAndStorageBuffer8BitAccess">
      <argument name="uniformAndStorageBuffer8BitAccess_" type="vk::Bool32" />
    </method>
    <method name="setStoragePushConstant8">
      <argument name="storagePushConstant8_" type="vk::Bool32" />
    </method>
    <method name="setShaderBufferInt64Atomics">
      <argument name="shaderBufferInt64Atomics_" type="vk::Bool32" />
    </method>
    <method name="setShaderSharedInt64Atomics">
      <argument name="shaderSharedInt64Atomics_" type="vk::Bool32" />
    </method>
    <method name="setShaderFloat16">
      <argument name="shaderFloat16_" type="vk::Bool32" />
    </method>
    <method name="setShaderInt8">
      <argument name="shaderInt8_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorIndexing">
      <argument name="descriptorIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderInputAttachmentArrayDynamicIndexing">
      <argument name="shaderInputAttachmentArrayDynamicIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderUniformTexelBufferArrayDynamicIndexing">
      <argument name="shaderUniformTexelBufferArrayDynamicIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageTexelBufferArrayDynamicIndexing">
      <argument name="shaderStorageTexelBufferArrayDynamicIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderUniformBufferArrayNonUniformIndexing">
      <argument name="shaderUniformBufferArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderSampledImageArrayNonUniformIndexing">
      <argument name="shaderSampledImageArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageBufferArrayNonUniformIndexing">
      <argument name="shaderStorageBufferArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageImageArrayNonUniformIndexing">
      <argument name="shaderStorageImageArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderInputAttachmentArrayNonUniformIndexing">
      <argument name="shaderInputAttachmentArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderUniformTexelBufferArrayNonUniformIndexing">
      <argument name="shaderUniformTexelBufferArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setShaderStorageTexelBufferArrayNonUniformIndexing">
      <argument name="shaderStorageTexelBufferArrayNonUniformIndexing_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingUniformBufferUpdateAfterBind">
      <argument name="descriptorBindingUniformBufferUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingSampledImageUpdateAfterBind">
      <argument name="descriptorBindingSampledImageUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingStorageImageUpdateAfterBind">
      <argument name="descriptorBindingStorageImageUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingStorageBufferUpdateAfterBind">
      <argument name="descriptorBindingStorageBufferUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingUniformTexelBufferUpdateAfterBind">
      <argument name="descriptorBindingUniformTexelBufferUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingStorageTexelBufferUpdateAfterBind">
      <argument name="descriptorBindingStorageTexelBufferUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingUpdateUnusedWhilePending">
      <argument name="descriptorBindingUpdateUnusedWhilePending_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingPartiallyBound">
      <argument name="descriptorBindingPartiallyBound_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingVariableDescriptorCount">
      <argument name="descriptorBindingVariableDescriptorCount_" type="vk::Bool32" />
    </method>
    <method name="setRuntimeDescriptorArray">
      <argument name="runtimeDescriptorArray_" type="vk::Bool32" />
    </method>
    <method name="setSamplerFilterMinmax">
      <argument name="samplerFilterMinmax_" type="vk::Bool32" />
    </method>
    <method name="setScalarBlockLayout">
      <argument name="scalarBlockLayout_" type="vk::Bool32" />
    </method>
    <method name="setImagelessFramebuffer">
      <argument name="imagelessFramebuffer_" type="vk::Bool32" />
    </method>
    <method name="setUniformBufferStandardLayout">
      <argument name="uniformBufferStandardLayout_" type="vk::Bool32" />
    </method>
    <method name="setShaderSubgroupExtendedTypes">
      <argument name="shaderSubgroupExtendedTypes_" type="vk::Bool32" />
    </method>
    <method name="setSeparateDepthStencilLayouts">
      <argument name="separateDepthStencilLayouts_" type="vk::Bool32" />
    </method>
    <method name="setHostQueryReset">
      <argument name="hostQueryReset_" type="vk::Bool32" />
    </method>
    <method name="setTimelineSemaphore">
      <argument name="timelineSemaphore_" type="vk::Bool32" />
    </method>
    <method name="setBufferDeviceAddress">
      <argument name="bufferDeviceAddress_" type="vk::Bool32" />
    </method>
    <method name="setBufferDeviceAddressCaptureReplay">
      <argument name="bufferDeviceAddressCaptureReplay_" type="vk::Bool32" />
    </method>
    <method name="setBufferDeviceAddressMultiDevice">
      <argument name="bufferDeviceAddressMultiDevice_" type="vk::Bool32" />
    </method>
    <method name="setVulkanMemoryModel">
      <argument name="vulkanMemoryModel_" type="vk::Bool32" />
    </method>
    <method name="setVulkanMemoryModelDeviceScope">
      <argument name="vulkanMemoryModelDeviceScope_" type="vk::Bool32" />
    </method>
    <method name="setVulkanMemoryModelAvailabilityVisibilityChains">
      <argument name="vulkanMemoryModelAvailabilityVisibilityChains_" type="vk::Bool32" />
    </method>
    <method name="setShaderOutputViewportIndex">
      <argument name="shaderOutputViewportIndex_" type="vk::Bool32" />
    </method>
    <method name="setShaderOutputLayer">
      <argument name="shaderOutputLayer_" type="vk::Bool32" />
    </method>
    <method name="setSubgroupBroadcastDynamicId">
      <argument name="subgroupBroadcastDynamicId_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVulkan12Features &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVulkan12Features &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVulkan12Features &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVulkan12Features &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="samplerMirrorClampToEdge" />
    <field name="drawIndirectCount" />
    <field name="storageBuffer8BitAccess" />
    <field name="uniformAndStorageBuffer8BitAccess" />
    <field name="storagePushConstant8" />
    <field name="shaderBufferInt64Atomics" />
    <field name="shaderSharedInt64Atomics" />
    <field name="shaderFloat16" />
    <field name="shaderInt8" />
    <field name="descriptorIndexing" />
    <field name="shaderInputAttachmentArrayDynamicIndexing" />
    <field name="shaderUniformTexelBufferArrayDynamicIndexing" />
    <field name="shaderStorageTexelBufferArrayDynamicIndexing" />
    <field name="shaderUniformBufferArrayNonUniformIndexing" />
    <field name="shaderSampledImageArrayNonUniformIndexing" />
    <field name="shaderStorageBufferArrayNonUniformIndexing" />
    <field name="shaderStorageImageArrayNonUniformIndexing" />
    <field name="shaderInputAttachmentArrayNonUniformIndexing" />
    <field name="shaderUniformTexelBufferArrayNonUniformIndexing" />
    <field name="shaderStorageTexelBufferArrayNonUniformIndexing" />
    <field name="descriptorBindingUniformBufferUpdateAfterBind" />
    <field name="descriptorBindingSampledImageUpdateAfterBind" />
    <field name="descriptorBindingStorageImageUpdateAfterBind" />
    <field name="descriptorBindingStorageBufferUpdateAfterBind" />
    <field name="descriptorBindingUniformTexelBufferUpdateAfterBind" />
    <field name="descriptorBindingStorageTexelBufferUpdateAfterBind" />
    <field name="descriptorBindingUpdateUnusedWhilePending" />
    <field name="descriptorBindingPartiallyBound" />
    <field name="descriptorBindingVariableDescriptorCount" />
    <field name="runtimeDescriptorArray" />
    <field name="samplerFilterMinmax" />
    <field name="scalarBlockLayout" />
    <field name="imagelessFramebuffer" />
    <field name="uniformBufferStandardLayout" />
    <field name="shaderSubgroupExtendedTypes" />
    <field name="separateDepthStencilLayouts" />
    <field name="hostQueryReset" />
    <field name="timelineSemaphore" />
    <field name="bufferDeviceAddress" />
    <field name="bufferDeviceAddressCaptureReplay" />
    <field name="bufferDeviceAddressMultiDevice" />
    <field name="vulkanMemoryModel" />
    <field name="vulkanMemoryModelDeviceScope" />
    <field name="vulkanMemoryModelAvailabilityVisibilityChains" />
    <field name="shaderOutputViewportIndex" />
    <field name="shaderOutputLayer" />
    <field name="subgroupBroadcastDynamicId" />
  </struct>
  <struct name="PhysicalDeviceVulkan12Properties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVulkan12Properties">
      <argument name="driverID_" type="vk::DriverId" default_raw="VULKAN_HPP_NAMESPACE::DriverId::eAmdProprietary" />
      <argument name="driverName_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="driverInfo_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="conformanceVersion_" type="vk::ConformanceVersion" default_raw="{}" />
      <argument name="denormBehaviorIndependence_" type="vk::ShaderFloatControlsIndependence" default_raw="VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence::e32BitOnly" />
      <argument name="roundingModeIndependence_" type="vk::ShaderFloatControlsIndependence" default_raw="VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence::e32BitOnly" />
      <argument name="shaderSignedZeroInfNanPreserveFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSignedZeroInfNanPreserveFloat32_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSignedZeroInfNanPreserveFloat64_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormPreserveFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormPreserveFloat32_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormPreserveFloat64_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormFlushToZeroFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormFlushToZeroFloat32_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDenormFlushToZeroFloat64_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTEFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTEFloat32_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTEFloat64_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTZFloat16_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTZFloat32_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderRoundingModeRTZFloat64_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxUpdateAfterBindDescriptorsInAllPools_" type="uint32_t" default_raw="{}" />
      <argument name="shaderUniformBufferArrayNonUniformIndexingNative_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSampledImageArrayNonUniformIndexingNative_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageBufferArrayNonUniformIndexingNative_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderStorageImageArrayNonUniformIndexingNative_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderInputAttachmentArrayNonUniformIndexingNative_" type="vk::Bool32" default_raw="{}" />
      <argument name="robustBufferAccessUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="quadDivergentImplicitLod_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindSamplers_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindUniformBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindStorageBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindSampledImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindStorageImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindInputAttachments_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageUpdateAfterBindResources_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindSamplers_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindUniformBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindUniformBuffersDynamic_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindStorageBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindStorageBuffersDynamic_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindSampledImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindStorageImages_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindInputAttachments_" type="uint32_t" default_raw="{}" />
      <argument name="supportedDepthResolveModes_" type="vk::ResolveModeFlags" default_raw="{}" />
      <argument name="supportedStencilResolveModes_" type="vk::ResolveModeFlags" default_raw="{}" />
      <argument name="independentResolveNone_" type="vk::Bool32" default_raw="{}" />
      <argument name="independentResolve_" type="vk::Bool32" default_raw="{}" />
      <argument name="filterMinmaxSingleComponentFormats_" type="vk::Bool32" default_raw="{}" />
      <argument name="filterMinmaxImageComponentMapping_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxTimelineSemaphoreValueDifference_" type="uint64_t" default_raw="{}" />
      <argument name="framebufferIntegerColorSampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan12Properties">
      <argument name="rhs" type="const PhysicalDeviceVulkan12Properties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan12Properties">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan12Properties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVulkan12Properties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan12Properties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVulkan12Properties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVulkan12Properties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVulkan12Properties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVulkan12Properties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="driverID" />
    <field name="driverName" />
    <field name="driverInfo" />
    <field name="conformanceVersion" />
    <field name="denormBehaviorIndependence" />
    <field name="roundingModeIndependence" />
    <field name="shaderSignedZeroInfNanPreserveFloat16" />
    <field name="shaderSignedZeroInfNanPreserveFloat32" />
    <field name="shaderSignedZeroInfNanPreserveFloat64" />
    <field name="shaderDenormPreserveFloat16" />
    <field name="shaderDenormPreserveFloat32" />
    <field name="shaderDenormPreserveFloat64" />
    <field name="shaderDenormFlushToZeroFloat16" />
    <field name="shaderDenormFlushToZeroFloat32" />
    <field name="shaderDenormFlushToZeroFloat64" />
    <field name="shaderRoundingModeRTEFloat16" />
    <field name="shaderRoundingModeRTEFloat32" />
    <field name="shaderRoundingModeRTEFloat64" />
    <field name="shaderRoundingModeRTZFloat16" />
    <field name="shaderRoundingModeRTZFloat32" />
    <field name="shaderRoundingModeRTZFloat64" />
    <field name="maxUpdateAfterBindDescriptorsInAllPools" />
    <field name="shaderUniformBufferArrayNonUniformIndexingNative" />
    <field name="shaderSampledImageArrayNonUniformIndexingNative" />
    <field name="shaderStorageBufferArrayNonUniformIndexingNative" />
    <field name="shaderStorageImageArrayNonUniformIndexingNative" />
    <field name="shaderInputAttachmentArrayNonUniformIndexingNative" />
    <field name="robustBufferAccessUpdateAfterBind" />
    <field name="quadDivergentImplicitLod" />
    <field name="maxPerStageDescriptorUpdateAfterBindSamplers" />
    <field name="maxPerStageDescriptorUpdateAfterBindUniformBuffers" />
    <field name="maxPerStageDescriptorUpdateAfterBindStorageBuffers" />
    <field name="maxPerStageDescriptorUpdateAfterBindSampledImages" />
    <field name="maxPerStageDescriptorUpdateAfterBindStorageImages" />
    <field name="maxPerStageDescriptorUpdateAfterBindInputAttachments" />
    <field name="maxPerStageUpdateAfterBindResources" />
    <field name="maxDescriptorSetUpdateAfterBindSamplers" />
    <field name="maxDescriptorSetUpdateAfterBindUniformBuffers" />
    <field name="maxDescriptorSetUpdateAfterBindUniformBuffersDynamic" />
    <field name="maxDescriptorSetUpdateAfterBindStorageBuffers" />
    <field name="maxDescriptorSetUpdateAfterBindStorageBuffersDynamic" />
    <field name="maxDescriptorSetUpdateAfterBindSampledImages" />
    <field name="maxDescriptorSetUpdateAfterBindStorageImages" />
    <field name="maxDescriptorSetUpdateAfterBindInputAttachments" />
    <field name="supportedDepthResolveModes" />
    <field name="supportedStencilResolveModes" />
    <field name="independentResolveNone" />
    <field name="independentResolve" />
    <field name="filterMinmaxSingleComponentFormats" />
    <field name="filterMinmaxImageComponentMapping" />
    <field name="maxTimelineSemaphoreValueDifference" />
    <field name="framebufferIntegerColorSampleCounts" />
  </struct>
  <struct name="PhysicalDeviceVulkanMemoryModelFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVulkanMemoryModelFeatures">
      <argument name="vulkanMemoryModel_" type="vk::Bool32" default_raw="{}" />
      <argument name="vulkanMemoryModelDeviceScope_" type="vk::Bool32" default_raw="{}" />
      <argument name="vulkanMemoryModelAvailabilityVisibilityChains_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVulkanMemoryModelFeatures">
      <argument name="rhs" type="const PhysicalDeviceVulkanMemoryModelFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVulkanMemoryModelFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceVulkanMemoryModelFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVulkanMemoryModelFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVulkanMemoryModelFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setVulkanMemoryModel">
      <argument name="vulkanMemoryModel_" type="vk::Bool32" />
    </method>
    <method name="setVulkanMemoryModelDeviceScope">
      <argument name="vulkanMemoryModelDeviceScope_" type="vk::Bool32" />
    </method>
    <method name="setVulkanMemoryModelAvailabilityVisibilityChains">
      <argument name="vulkanMemoryModelAvailabilityVisibilityChains_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVulkanMemoryModelFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVulkanMemoryModelFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVulkanMemoryModelFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVulkanMemoryModelFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="vulkanMemoryModel" />
    <field name="vulkanMemoryModelDeviceScope" />
    <field name="vulkanMemoryModelAvailabilityVisibilityChains" />
  </struct>
  <type_alias name="PhysicalDeviceVulkanMemoryModelFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceVulkanMemoryModelFeatures" />
  <struct name="RenderPassAttachmentBeginInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassAttachmentBeginInfo">
      <argument name="attachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pAttachments_" type="const vk::ImageView *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassAttachmentBeginInfo">
      <argument name="rhs" type="const RenderPassAttachmentBeginInfo &amp;" />
    </constructor>
    <constructor name="RenderPassAttachmentBeginInfo">
      <argument name="rhs" type="const VkRenderPassAttachmentBeginInfo &amp;" />
    </constructor>
    <constructor name="RenderPassAttachmentBeginInfo">
      <argument name="attachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageView&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassAttachmentBeginInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassAttachmentBeginInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAttachmentCount">
      <argument name="attachmentCount_" type="uint32_t" />
    </method>
    <method name="setPAttachments">
      <argument name="pAttachments_" type="const vk::ImageView *" />
    </method>
    <method name="setAttachments">
      <argument name="attachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageView&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassAttachmentBeginInfo &amp;" />
    <conversion_function name="operator VkRenderPassAttachmentBeginInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassAttachmentBeginInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassAttachmentBeginInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="attachmentCount" />
    <field name="pAttachments" />
  </struct>
  <type_alias name="RenderPassAttachmentBeginInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="RenderPassAttachmentBeginInfo" />
  <struct name="RenderPassCreateInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassCreateInfo2">
      <argument name="flags_" type="vk::RenderPassCreateFlags" default_raw="{}" />
      <argument name="attachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pAttachments_" type="const vk::AttachmentDescription2 *" default_raw="{}" />
      <argument name="subpassCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSubpasses_" type="const vk::SubpassDescription2 *" default_raw="{}" />
      <argument name="dependencyCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDependencies_" type="const vk::SubpassDependency2 *" default_raw="{}" />
      <argument name="correlatedViewMaskCount_" type="uint32_t" default_raw="{}" />
      <argument name="pCorrelatedViewMasks_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassCreateInfo2">
      <argument name="rhs" type="const RenderPassCreateInfo2 &amp;" />
    </constructor>
    <constructor name="RenderPassCreateInfo2">
      <argument name="rhs" type="const VkRenderPassCreateInfo2 &amp;" />
    </constructor>
    <constructor name="RenderPassCreateInfo2">
      <argument name="flags_" type="vk::RenderPassCreateFlags" />
      <argument name="attachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentDescription2&gt; &amp;" />
      <argument name="subpasses_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubpassDescription2&gt; &amp;" default_raw="{}" />
      <argument name="dependencies_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubpassDependency2&gt; &amp;" default_raw="{}" />
      <argument name="correlatedViewMasks_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassCreateInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassCreateInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::RenderPassCreateFlags" />
    </method>
    <method name="setAttachmentCount">
      <argument name="attachmentCount_" type="uint32_t" />
    </method>
    <method name="setPAttachments">
      <argument name="pAttachments_" type="const vk::AttachmentDescription2 *" />
    </method>
    <method name="setAttachments">
      <argument name="attachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentDescription2&gt; &amp;" />
    </method>
    <method name="setSubpassCount">
      <argument name="subpassCount_" type="uint32_t" />
    </method>
    <method name="setPSubpasses">
      <argument name="pSubpasses_" type="const vk::SubpassDescription2 *" />
    </method>
    <method name="setSubpasses">
      <argument name="subpasses_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubpassDescription2&gt; &amp;" />
    </method>
    <method name="setDependencyCount">
      <argument name="dependencyCount_" type="uint32_t" />
    </method>
    <method name="setPDependencies">
      <argument name="pDependencies_" type="const vk::SubpassDependency2 *" />
    </method>
    <method name="setDependencies">
      <argument name="dependencies_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubpassDependency2&gt; &amp;" />
    </method>
    <method name="setCorrelatedViewMaskCount">
      <argument name="correlatedViewMaskCount_" type="uint32_t" />
    </method>
    <method name="setPCorrelatedViewMasks">
      <argument name="pCorrelatedViewMasks_" type="const uint32_t *" />
    </method>
    <method name="setCorrelatedViewMasks">
      <argument name="correlatedViewMasks_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassCreateInfo2 &amp;" />
    <conversion_function name="operator VkRenderPassCreateInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassCreateInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassCreateInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="attachmentCount" />
    <field name="pAttachments" />
    <field name="subpassCount" />
    <field name="pSubpasses" />
    <field name="dependencyCount" />
    <field name="pDependencies" />
    <field name="correlatedViewMaskCount" />
    <field name="pCorrelatedViewMasks" />
  </struct>
  <type_alias name="RenderPassCreateInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="RenderPassCreateInfo2" />
  <struct name="SamplerReductionModeCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SamplerReductionModeCreateInfo">
      <argument name="reductionMode_" type="vk::SamplerReductionMode" default_raw="VULKAN_HPP_NAMESPACE::SamplerReductionMode::eWeightedAverage" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SamplerReductionModeCreateInfo">
      <argument name="rhs" type="const SamplerReductionModeCreateInfo &amp;" />
    </constructor>
    <constructor name="SamplerReductionModeCreateInfo">
      <argument name="rhs" type="const VkSamplerReductionModeCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SamplerReductionModeCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSamplerReductionModeCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setReductionMode">
      <argument name="reductionMode_" type="vk::SamplerReductionMode" />
    </method>
    <conversion_function name="operator const VkSamplerReductionModeCreateInfo &amp;" />
    <conversion_function name="operator VkSamplerReductionModeCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SamplerReductionModeCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SamplerReductionModeCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="reductionMode" />
  </struct>
  <type_alias name="SamplerReductionModeCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SamplerReductionModeCreateInfo" />
  <struct name="SemaphoreSignalInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SemaphoreSignalInfo">
      <argument name="semaphore_" type="vk::Semaphore" default_raw="{}" />
      <argument name="value_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SemaphoreSignalInfo">
      <argument name="rhs" type="const SemaphoreSignalInfo &amp;" />
    </constructor>
    <constructor name="SemaphoreSignalInfo">
      <argument name="rhs" type="const VkSemaphoreSignalInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SemaphoreSignalInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSemaphoreSignalInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSemaphore">
      <argument name="semaphore_" type="vk::Semaphore" />
    </method>
    <method name="setValue">
      <argument name="value_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkSemaphoreSignalInfo &amp;" />
    <conversion_function name="operator VkSemaphoreSignalInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SemaphoreSignalInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SemaphoreSignalInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="semaphore" />
    <field name="value" />
  </struct>
  <type_alias name="SemaphoreSignalInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SemaphoreSignalInfo" />
  <struct name="SemaphoreTypeCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SemaphoreTypeCreateInfo">
      <argument name="semaphoreType_" type="vk::SemaphoreType" default_raw="VULKAN_HPP_NAMESPACE::SemaphoreType::eBinary" />
      <argument name="initialValue_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SemaphoreTypeCreateInfo">
      <argument name="rhs" type="const SemaphoreTypeCreateInfo &amp;" />
    </constructor>
    <constructor name="SemaphoreTypeCreateInfo">
      <argument name="rhs" type="const VkSemaphoreTypeCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SemaphoreTypeCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSemaphoreTypeCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSemaphoreType">
      <argument name="semaphoreType_" type="vk::SemaphoreType" />
    </method>
    <method name="setInitialValue">
      <argument name="initialValue_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkSemaphoreTypeCreateInfo &amp;" />
    <conversion_function name="operator VkSemaphoreTypeCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SemaphoreTypeCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SemaphoreTypeCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="semaphoreType" />
    <field name="initialValue" />
  </struct>
  <type_alias name="SemaphoreTypeCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SemaphoreTypeCreateInfo" />
  <struct name="SemaphoreWaitInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SemaphoreWaitInfo">
      <argument name="flags_" type="vk::SemaphoreWaitFlags" default_raw="{}" />
      <argument name="semaphoreCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSemaphores_" type="const vk::Semaphore *" default_raw="{}" />
      <argument name="pValues_" type="const uint64_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SemaphoreWaitInfo">
      <argument name="rhs" type="const SemaphoreWaitInfo &amp;" />
    </constructor>
    <constructor name="SemaphoreWaitInfo">
      <argument name="rhs" type="const VkSemaphoreWaitInfo &amp;" />
    </constructor>
    <constructor name="SemaphoreWaitInfo">
      <argument name="flags_" type="vk::SemaphoreWaitFlags" />
      <argument name="semaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" />
      <argument name="values_" type="const vk::ArrayProxyNoTemporaries&lt;const uint64_t&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SemaphoreWaitInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSemaphoreWaitInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::SemaphoreWaitFlags" />
    </method>
    <method name="setSemaphoreCount">
      <argument name="semaphoreCount_" type="uint32_t" />
    </method>
    <method name="setPSemaphores">
      <argument name="pSemaphores_" type="const vk::Semaphore *" />
    </method>
    <method name="setSemaphores">
      <argument name="semaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" />
    </method>
    <method name="setPValues">
      <argument name="pValues_" type="const uint64_t *" />
    </method>
    <method name="setValues">
      <argument name="values_" type="const vk::ArrayProxyNoTemporaries&lt;const uint64_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSemaphoreWaitInfo &amp;" />
    <conversion_function name="operator VkSemaphoreWaitInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SemaphoreWaitInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SemaphoreWaitInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="semaphoreCount" />
    <field name="pSemaphores" />
    <field name="pValues" />
  </struct>
  <type_alias name="SemaphoreWaitInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SemaphoreWaitInfo" />
  <struct name="SubpassBeginInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubpassBeginInfo">
      <argument name="contents_" type="vk::SubpassContents" default_raw="VULKAN_HPP_NAMESPACE::SubpassContents::eInline" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubpassBeginInfo">
      <argument name="rhs" type="const SubpassBeginInfo &amp;" />
    </constructor>
    <constructor name="SubpassBeginInfo">
      <argument name="rhs" type="const VkSubpassBeginInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubpassBeginInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubpassBeginInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setContents">
      <argument name="contents_" type="vk::SubpassContents" />
    </method>
    <conversion_function name="operator const VkSubpassBeginInfo &amp;" />
    <conversion_function name="operator VkSubpassBeginInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubpassBeginInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubpassBeginInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="contents" />
  </struct>
  <type_alias name="SubpassBeginInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SubpassBeginInfo" />
  <struct name="SubpassDependency2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubpassDependency2">
      <argument name="srcSubpass_" type="uint32_t" default_raw="{}" />
      <argument name="dstSubpass_" type="uint32_t" default_raw="{}" />
      <argument name="srcStageMask_" type="vk::PipelineStageFlags" default_raw="{}" />
      <argument name="dstStageMask_" type="vk::PipelineStageFlags" default_raw="{}" />
      <argument name="srcAccessMask_" type="vk::AccessFlags" default_raw="{}" />
      <argument name="dstAccessMask_" type="vk::AccessFlags" default_raw="{}" />
      <argument name="dependencyFlags_" type="vk::DependencyFlags" default_raw="{}" />
      <argument name="viewOffset_" type="int32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubpassDependency2">
      <argument name="rhs" type="const SubpassDependency2 &amp;" />
    </constructor>
    <constructor name="SubpassDependency2">
      <argument name="rhs" type="const VkSubpassDependency2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubpassDependency2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubpassDependency2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcSubpass">
      <argument name="srcSubpass_" type="uint32_t" />
    </method>
    <method name="setDstSubpass">
      <argument name="dstSubpass_" type="uint32_t" />
    </method>
    <method name="setSrcStageMask">
      <argument name="srcStageMask_" type="vk::PipelineStageFlags" />
    </method>
    <method name="setDstStageMask">
      <argument name="dstStageMask_" type="vk::PipelineStageFlags" />
    </method>
    <method name="setSrcAccessMask">
      <argument name="srcAccessMask_" type="vk::AccessFlags" />
    </method>
    <method name="setDstAccessMask">
      <argument name="dstAccessMask_" type="vk::AccessFlags" />
    </method>
    <method name="setDependencyFlags">
      <argument name="dependencyFlags_" type="vk::DependencyFlags" />
    </method>
    <method name="setViewOffset">
      <argument name="viewOffset_" type="int32_t" />
    </method>
    <conversion_function name="operator const VkSubpassDependency2 &amp;" />
    <conversion_function name="operator VkSubpassDependency2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubpassDependency2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubpassDependency2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcSubpass" />
    <field name="dstSubpass" />
    <field name="srcStageMask" />
    <field name="dstStageMask" />
    <field name="srcAccessMask" />
    <field name="dstAccessMask" />
    <field name="dependencyFlags" />
    <field name="viewOffset" />
  </struct>
  <type_alias name="SubpassDependency2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SubpassDependency2" />
  <struct name="SubpassDescription2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubpassDescription2">
      <argument name="flags_" type="vk::SubpassDescriptionFlags" default_raw="{}" />
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" default_raw="VULKAN_HPP_NAMESPACE::PipelineBindPoint::eGraphics" />
      <argument name="viewMask_" type="uint32_t" default_raw="{}" />
      <argument name="inputAttachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pInputAttachments_" type="const vk::AttachmentReference2 *" default_raw="{}" />
      <argument name="colorAttachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pColorAttachments_" type="const vk::AttachmentReference2 *" default_raw="{}" />
      <argument name="pResolveAttachments_" type="const vk::AttachmentReference2 *" default_raw="{}" />
      <argument name="pDepthStencilAttachment_" type="const vk::AttachmentReference2 *" default_raw="{}" />
      <argument name="preserveAttachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPreserveAttachments_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubpassDescription2">
      <argument name="rhs" type="const SubpassDescription2 &amp;" />
    </constructor>
    <constructor name="SubpassDescription2">
      <argument name="rhs" type="const VkSubpassDescription2 &amp;" />
    </constructor>
    <constructor name="SubpassDescription2">
      <argument name="flags_" type="vk::SubpassDescriptionFlags" />
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" />
      <argument name="viewMask_" type="uint32_t" />
      <argument name="inputAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference2&gt; &amp;" />
      <argument name="colorAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference2&gt; &amp;" default_raw="{}" />
      <argument name="resolveAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference2&gt; &amp;" default_raw="{}" />
      <argument name="pDepthStencilAttachment_" type="const vk::AttachmentReference2 *" default_raw="{}" />
      <argument name="preserveAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubpassDescription2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubpassDescription2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::SubpassDescriptionFlags" />
    </method>
    <method name="setPipelineBindPoint">
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" />
    </method>
    <method name="setViewMask">
      <argument name="viewMask_" type="uint32_t" />
    </method>
    <method name="setInputAttachmentCount">
      <argument name="inputAttachmentCount_" type="uint32_t" />
    </method>
    <method name="setPInputAttachments">
      <argument name="pInputAttachments_" type="const vk::AttachmentReference2 *" />
    </method>
    <method name="setInputAttachments">
      <argument name="inputAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference2&gt; &amp;" />
    </method>
    <method name="setColorAttachmentCount">
      <argument name="colorAttachmentCount_" type="uint32_t" />
    </method>
    <method name="setPColorAttachments">
      <argument name="pColorAttachments_" type="const vk::AttachmentReference2 *" />
    </method>
    <method name="setColorAttachments">
      <argument name="colorAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference2&gt; &amp;" />
    </method>
    <method name="setPResolveAttachments">
      <argument name="pResolveAttachments_" type="const vk::AttachmentReference2 *" />
    </method>
    <method name="setResolveAttachments">
      <argument name="resolveAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentReference2&gt; &amp;" />
    </method>
    <method name="setPDepthStencilAttachment">
      <argument name="pDepthStencilAttachment_" type="const vk::AttachmentReference2 *" />
    </method>
    <method name="setPreserveAttachmentCount">
      <argument name="preserveAttachmentCount_" type="uint32_t" />
    </method>
    <method name="setPPreserveAttachments">
      <argument name="pPreserveAttachments_" type="const uint32_t *" />
    </method>
    <method name="setPreserveAttachments">
      <argument name="preserveAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSubpassDescription2 &amp;" />
    <conversion_function name="operator VkSubpassDescription2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubpassDescription2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubpassDescription2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="pipelineBindPoint" />
    <field name="viewMask" />
    <field name="inputAttachmentCount" />
    <field name="pInputAttachments" />
    <field name="colorAttachmentCount" />
    <field name="pColorAttachments" />
    <field name="pResolveAttachments" />
    <field name="pDepthStencilAttachment" />
    <field name="preserveAttachmentCount" />
    <field name="pPreserveAttachments" />
  </struct>
  <type_alias name="SubpassDescription2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SubpassDescription2" />
  <struct name="SubpassDescriptionDepthStencilResolve" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubpassDescriptionDepthStencilResolve">
      <argument name="depthResolveMode_" type="vk::ResolveModeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ResolveModeFlagBits::eNone" />
      <argument name="stencilResolveMode_" type="vk::ResolveModeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ResolveModeFlagBits::eNone" />
      <argument name="pDepthStencilResolveAttachment_" type="const vk::AttachmentReference2 *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubpassDescriptionDepthStencilResolve">
      <argument name="rhs" type="const SubpassDescriptionDepthStencilResolve &amp;" />
    </constructor>
    <constructor name="SubpassDescriptionDepthStencilResolve">
      <argument name="rhs" type="const VkSubpassDescriptionDepthStencilResolve &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubpassDescriptionDepthStencilResolve &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubpassDescriptionDepthStencilResolve &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDepthResolveMode">
      <argument name="depthResolveMode_" type="vk::ResolveModeFlagBits" />
    </method>
    <method name="setStencilResolveMode">
      <argument name="stencilResolveMode_" type="vk::ResolveModeFlagBits" />
    </method>
    <method name="setPDepthStencilResolveAttachment">
      <argument name="pDepthStencilResolveAttachment_" type="const vk::AttachmentReference2 *" />
    </method>
    <conversion_function name="operator const VkSubpassDescriptionDepthStencilResolve &amp;" />
    <conversion_function name="operator VkSubpassDescriptionDepthStencilResolve &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubpassDescriptionDepthStencilResolve &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubpassDescriptionDepthStencilResolve &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="depthResolveMode" />
    <field name="stencilResolveMode" />
    <field name="pDepthStencilResolveAttachment" />
  </struct>
  <type_alias name="SubpassDescriptionDepthStencilResolveKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SubpassDescriptionDepthStencilResolve" />
  <struct name="SubpassEndInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubpassEndInfo">
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubpassEndInfo">
      <argument name="rhs" type="const SubpassEndInfo &amp;" />
    </constructor>
    <constructor name="SubpassEndInfo">
      <argument name="rhs" type="const VkSubpassEndInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubpassEndInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubpassEndInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <conversion_function name="operator const VkSubpassEndInfo &amp;" />
    <conversion_function name="operator VkSubpassEndInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubpassEndInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubpassEndInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
  </struct>
  <type_alias name="SubpassEndInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SubpassEndInfo" />
  <struct name="TimelineSemaphoreSubmitInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="TimelineSemaphoreSubmitInfo">
      <argument name="waitSemaphoreValueCount_" type="uint32_t" default_raw="{}" />
      <argument name="pWaitSemaphoreValues_" type="const uint64_t *" default_raw="{}" />
      <argument name="signalSemaphoreValueCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSignalSemaphoreValues_" type="const uint64_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="TimelineSemaphoreSubmitInfo">
      <argument name="rhs" type="const TimelineSemaphoreSubmitInfo &amp;" />
    </constructor>
    <constructor name="TimelineSemaphoreSubmitInfo">
      <argument name="rhs" type="const VkTimelineSemaphoreSubmitInfo &amp;" />
    </constructor>
    <constructor name="TimelineSemaphoreSubmitInfo">
      <argument name="waitSemaphoreValues_" type="const vk::ArrayProxyNoTemporaries&lt;const uint64_t&gt; &amp;" />
      <argument name="signalSemaphoreValues_" type="const vk::ArrayProxyNoTemporaries&lt;const uint64_t&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const TimelineSemaphoreSubmitInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkTimelineSemaphoreSubmitInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setWaitSemaphoreValueCount">
      <argument name="waitSemaphoreValueCount_" type="uint32_t" />
    </method>
    <method name="setPWaitSemaphoreValues">
      <argument name="pWaitSemaphoreValues_" type="const uint64_t *" />
    </method>
    <method name="setWaitSemaphoreValues">
      <argument name="waitSemaphoreValues_" type="const vk::ArrayProxyNoTemporaries&lt;const uint64_t&gt; &amp;" />
    </method>
    <method name="setSignalSemaphoreValueCount">
      <argument name="signalSemaphoreValueCount_" type="uint32_t" />
    </method>
    <method name="setPSignalSemaphoreValues">
      <argument name="pSignalSemaphoreValues_" type="const uint64_t *" />
    </method>
    <method name="setSignalSemaphoreValues">
      <argument name="signalSemaphoreValues_" type="const vk::ArrayProxyNoTemporaries&lt;const uint64_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkTimelineSemaphoreSubmitInfo &amp;" />
    <conversion_function name="operator VkTimelineSemaphoreSubmitInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const TimelineSemaphoreSubmitInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const TimelineSemaphoreSubmitInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="waitSemaphoreValueCount" />
    <field name="pWaitSemaphoreValues" />
    <field name="signalSemaphoreValueCount" />
    <field name="pSignalSemaphoreValues" />
  </struct>
  <type_alias name="TimelineSemaphoreSubmitInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="TimelineSemaphoreSubmitInfo" />
  <struct name="BlitImageInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BlitImageInfo2">
      <argument name="srcImage_" type="vk::Image" default_raw="{}" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="dstImage_" type="vk::Image" default_raw="{}" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="regionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRegions_" type="const vk::ImageBlit2 *" default_raw="{}" />
      <argument name="filter_" type="vk::Filter" default_raw="VULKAN_HPP_NAMESPACE::Filter::eNearest" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BlitImageInfo2">
      <argument name="rhs" type="const BlitImageInfo2 &amp;" />
    </constructor>
    <constructor name="BlitImageInfo2">
      <argument name="rhs" type="const VkBlitImageInfo2 &amp;" />
    </constructor>
    <constructor name="BlitImageInfo2">
      <argument name="srcImage_" type="vk::Image" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
      <argument name="dstImage_" type="vk::Image" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageBlit2&gt; &amp;" />
      <argument name="filter_" type="vk::Filter" default_raw="VULKAN_HPP_NAMESPACE::Filter::eNearest" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BlitImageInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBlitImageInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcImage">
      <argument name="srcImage_" type="vk::Image" />
    </method>
    <method name="setSrcImageLayout">
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setDstImage">
      <argument name="dstImage_" type="vk::Image" />
    </method>
    <method name="setDstImageLayout">
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setRegionCount">
      <argument name="regionCount_" type="uint32_t" />
    </method>
    <method name="setPRegions">
      <argument name="pRegions_" type="const vk::ImageBlit2 *" />
    </method>
    <method name="setRegions">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageBlit2&gt; &amp;" />
    </method>
    <method name="setFilter">
      <argument name="filter_" type="vk::Filter" />
    </method>
    <conversion_function name="operator const VkBlitImageInfo2 &amp;" />
    <conversion_function name="operator VkBlitImageInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BlitImageInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BlitImageInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcImage" />
    <field name="srcImageLayout" />
    <field name="dstImage" />
    <field name="dstImageLayout" />
    <field name="regionCount" />
    <field name="pRegions" />
    <field name="filter" />
  </struct>
  <type_alias name="BlitImageInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BlitImageInfo2" />
  <struct name="BufferCopy2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferCopy2">
      <argument name="srcOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="dstOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferCopy2">
      <argument name="rhs" type="const BufferCopy2 &amp;" />
    </constructor>
    <constructor name="BufferCopy2">
      <argument name="rhs" type="const VkBufferCopy2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferCopy2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferCopy2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcOffset">
      <argument name="srcOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setDstOffset">
      <argument name="dstOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkBufferCopy2 &amp;" />
    <conversion_function name="operator VkBufferCopy2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferCopy2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferCopy2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcOffset" />
    <field name="dstOffset" />
    <field name="size" />
  </struct>
  <type_alias name="BufferCopy2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BufferCopy2" />
  <struct name="BufferImageCopy2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferImageCopy2">
      <argument name="bufferOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="bufferRowLength_" type="uint32_t" default_raw="{}" />
      <argument name="bufferImageHeight_" type="uint32_t" default_raw="{}" />
      <argument name="imageSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="imageOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="imageExtent_" type="vk::Extent3D" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferImageCopy2">
      <argument name="rhs" type="const BufferImageCopy2 &amp;" />
    </constructor>
    <constructor name="BufferImageCopy2">
      <argument name="rhs" type="const VkBufferImageCopy2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferImageCopy2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferImageCopy2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setBufferOffset">
      <argument name="bufferOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setBufferRowLength">
      <argument name="bufferRowLength_" type="uint32_t" />
    </method>
    <method name="setBufferImageHeight">
      <argument name="bufferImageHeight_" type="uint32_t" />
    </method>
    <method name="setImageSubresource">
      <argument name="imageSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setImageOffset">
      <argument name="imageOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setImageExtent">
      <argument name="imageExtent_" type="const vk::Extent3D &amp;" />
    </method>
    <conversion_function name="operator const VkBufferImageCopy2 &amp;" />
    <conversion_function name="operator VkBufferImageCopy2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferImageCopy2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferImageCopy2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="bufferOffset" />
    <field name="bufferRowLength" />
    <field name="bufferImageHeight" />
    <field name="imageSubresource" />
    <field name="imageOffset" />
    <field name="imageExtent" />
  </struct>
  <type_alias name="BufferImageCopy2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BufferImageCopy2" />
  <struct name="BufferMemoryBarrier2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferMemoryBarrier2">
      <argument name="srcStageMask_" type="vk::PipelineStageFlags2" default_raw="{}" />
      <argument name="srcAccessMask_" type="vk::AccessFlags2" default_raw="{}" />
      <argument name="dstStageMask_" type="vk::PipelineStageFlags2" default_raw="{}" />
      <argument name="dstAccessMask_" type="vk::AccessFlags2" default_raw="{}" />
      <argument name="srcQueueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="dstQueueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferMemoryBarrier2">
      <argument name="rhs" type="const BufferMemoryBarrier2 &amp;" />
    </constructor>
    <constructor name="BufferMemoryBarrier2">
      <argument name="rhs" type="const VkBufferMemoryBarrier2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferMemoryBarrier2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferMemoryBarrier2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcStageMask">
      <argument name="srcStageMask_" type="vk::PipelineStageFlags2" />
    </method>
    <method name="setSrcAccessMask">
      <argument name="srcAccessMask_" type="vk::AccessFlags2" />
    </method>
    <method name="setDstStageMask">
      <argument name="dstStageMask_" type="vk::PipelineStageFlags2" />
    </method>
    <method name="setDstAccessMask">
      <argument name="dstAccessMask_" type="vk::AccessFlags2" />
    </method>
    <method name="setSrcQueueFamilyIndex">
      <argument name="srcQueueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setDstQueueFamilyIndex">
      <argument name="dstQueueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkBufferMemoryBarrier2 &amp;" />
    <conversion_function name="operator VkBufferMemoryBarrier2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferMemoryBarrier2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferMemoryBarrier2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcStageMask" />
    <field name="srcAccessMask" />
    <field name="dstStageMask" />
    <field name="dstAccessMask" />
    <field name="srcQueueFamilyIndex" />
    <field name="dstQueueFamilyIndex" />
    <field name="buffer" />
    <field name="offset" />
    <field name="size" />
  </struct>
  <type_alias name="BufferMemoryBarrier2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="BufferMemoryBarrier2" />
  <struct name="CommandBufferInheritanceRenderingInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CommandBufferInheritanceRenderingInfo">
      <argument name="flags_" type="vk::RenderingFlags" default_raw="{}" />
      <argument name="viewMask_" type="uint32_t" default_raw="{}" />
      <argument name="colorAttachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pColorAttachmentFormats_" type="const vk::Format *" default_raw="{}" />
      <argument name="depthAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="stencilAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="rasterizationSamples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CommandBufferInheritanceRenderingInfo">
      <argument name="rhs" type="const CommandBufferInheritanceRenderingInfo &amp;" />
    </constructor>
    <constructor name="CommandBufferInheritanceRenderingInfo">
      <argument name="rhs" type="const VkCommandBufferInheritanceRenderingInfo &amp;" />
    </constructor>
    <constructor name="CommandBufferInheritanceRenderingInfo">
      <argument name="flags_" type="vk::RenderingFlags" />
      <argument name="viewMask_" type="uint32_t" />
      <argument name="colorAttachmentFormats_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Format&gt; &amp;" />
      <argument name="depthAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="stencilAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="rasterizationSamples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CommandBufferInheritanceRenderingInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCommandBufferInheritanceRenderingInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::RenderingFlags" />
    </method>
    <method name="setViewMask">
      <argument name="viewMask_" type="uint32_t" />
    </method>
    <method name="setColorAttachmentCount">
      <argument name="colorAttachmentCount_" type="uint32_t" />
    </method>
    <method name="setPColorAttachmentFormats">
      <argument name="pColorAttachmentFormats_" type="const vk::Format *" />
    </method>
    <method name="setColorAttachmentFormats">
      <argument name="colorAttachmentFormats_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Format&gt; &amp;" />
    </method>
    <method name="setDepthAttachmentFormat">
      <argument name="depthAttachmentFormat_" type="vk::Format" />
    </method>
    <method name="setStencilAttachmentFormat">
      <argument name="stencilAttachmentFormat_" type="vk::Format" />
    </method>
    <method name="setRasterizationSamples">
      <argument name="rasterizationSamples_" type="vk::SampleCountFlagBits" />
    </method>
    <conversion_function name="operator const VkCommandBufferInheritanceRenderingInfo &amp;" />
    <conversion_function name="operator VkCommandBufferInheritanceRenderingInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CommandBufferInheritanceRenderingInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CommandBufferInheritanceRenderingInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="viewMask" />
    <field name="colorAttachmentCount" />
    <field name="pColorAttachmentFormats" />
    <field name="depthAttachmentFormat" />
    <field name="stencilAttachmentFormat" />
    <field name="rasterizationSamples" />
  </struct>
  <type_alias name="CommandBufferInheritanceRenderingInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="CommandBufferInheritanceRenderingInfo" />
  <struct name="CommandBufferSubmitInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CommandBufferSubmitInfo">
      <argument name="commandBuffer_" type="vk::CommandBuffer" default_raw="{}" />
      <argument name="deviceMask_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CommandBufferSubmitInfo">
      <argument name="rhs" type="const CommandBufferSubmitInfo &amp;" />
    </constructor>
    <constructor name="CommandBufferSubmitInfo">
      <argument name="rhs" type="const VkCommandBufferSubmitInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CommandBufferSubmitInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCommandBufferSubmitInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setCommandBuffer">
      <argument name="commandBuffer_" type="vk::CommandBuffer" />
    </method>
    <method name="setDeviceMask">
      <argument name="deviceMask_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkCommandBufferSubmitInfo &amp;" />
    <conversion_function name="operator VkCommandBufferSubmitInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CommandBufferSubmitInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CommandBufferSubmitInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="commandBuffer" />
    <field name="deviceMask" />
  </struct>
  <type_alias name="CommandBufferSubmitInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="CommandBufferSubmitInfo" />
  <struct name="CopyBufferInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyBufferInfo2">
      <argument name="srcBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="dstBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="regionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRegions_" type="const vk::BufferCopy2 *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyBufferInfo2">
      <argument name="rhs" type="const CopyBufferInfo2 &amp;" />
    </constructor>
    <constructor name="CopyBufferInfo2">
      <argument name="rhs" type="const VkCopyBufferInfo2 &amp;" />
    </constructor>
    <constructor name="CopyBufferInfo2">
      <argument name="srcBuffer_" type="vk::Buffer" />
      <argument name="dstBuffer_" type="vk::Buffer" />
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::BufferCopy2&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyBufferInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyBufferInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcBuffer">
      <argument name="srcBuffer_" type="vk::Buffer" />
    </method>
    <method name="setDstBuffer">
      <argument name="dstBuffer_" type="vk::Buffer" />
    </method>
    <method name="setRegionCount">
      <argument name="regionCount_" type="uint32_t" />
    </method>
    <method name="setPRegions">
      <argument name="pRegions_" type="const vk::BufferCopy2 *" />
    </method>
    <method name="setRegions">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::BufferCopy2&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkCopyBufferInfo2 &amp;" />
    <conversion_function name="operator VkCopyBufferInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyBufferInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyBufferInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcBuffer" />
    <field name="dstBuffer" />
    <field name="regionCount" />
    <field name="pRegions" />
  </struct>
  <type_alias name="CopyBufferInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="CopyBufferInfo2" />
  <struct name="CopyBufferToImageInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyBufferToImageInfo2">
      <argument name="srcBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="dstImage_" type="vk::Image" default_raw="{}" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="regionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRegions_" type="const vk::BufferImageCopy2 *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyBufferToImageInfo2">
      <argument name="rhs" type="const CopyBufferToImageInfo2 &amp;" />
    </constructor>
    <constructor name="CopyBufferToImageInfo2">
      <argument name="rhs" type="const VkCopyBufferToImageInfo2 &amp;" />
    </constructor>
    <constructor name="CopyBufferToImageInfo2">
      <argument name="srcBuffer_" type="vk::Buffer" />
      <argument name="dstImage_" type="vk::Image" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::BufferImageCopy2&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyBufferToImageInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyBufferToImageInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcBuffer">
      <argument name="srcBuffer_" type="vk::Buffer" />
    </method>
    <method name="setDstImage">
      <argument name="dstImage_" type="vk::Image" />
    </method>
    <method name="setDstImageLayout">
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setRegionCount">
      <argument name="regionCount_" type="uint32_t" />
    </method>
    <method name="setPRegions">
      <argument name="pRegions_" type="const vk::BufferImageCopy2 *" />
    </method>
    <method name="setRegions">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::BufferImageCopy2&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkCopyBufferToImageInfo2 &amp;" />
    <conversion_function name="operator VkCopyBufferToImageInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyBufferToImageInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyBufferToImageInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcBuffer" />
    <field name="dstImage" />
    <field name="dstImageLayout" />
    <field name="regionCount" />
    <field name="pRegions" />
  </struct>
  <type_alias name="CopyBufferToImageInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="CopyBufferToImageInfo2" />
  <struct name="CopyImageInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyImageInfo2">
      <argument name="srcImage_" type="vk::Image" default_raw="{}" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="dstImage_" type="vk::Image" default_raw="{}" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="regionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRegions_" type="const vk::ImageCopy2 *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyImageInfo2">
      <argument name="rhs" type="const CopyImageInfo2 &amp;" />
    </constructor>
    <constructor name="CopyImageInfo2">
      <argument name="rhs" type="const VkCopyImageInfo2 &amp;" />
    </constructor>
    <constructor name="CopyImageInfo2">
      <argument name="srcImage_" type="vk::Image" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
      <argument name="dstImage_" type="vk::Image" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageCopy2&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyImageInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyImageInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcImage">
      <argument name="srcImage_" type="vk::Image" />
    </method>
    <method name="setSrcImageLayout">
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setDstImage">
      <argument name="dstImage_" type="vk::Image" />
    </method>
    <method name="setDstImageLayout">
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setRegionCount">
      <argument name="regionCount_" type="uint32_t" />
    </method>
    <method name="setPRegions">
      <argument name="pRegions_" type="const vk::ImageCopy2 *" />
    </method>
    <method name="setRegions">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageCopy2&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkCopyImageInfo2 &amp;" />
    <conversion_function name="operator VkCopyImageInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyImageInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyImageInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcImage" />
    <field name="srcImageLayout" />
    <field name="dstImage" />
    <field name="dstImageLayout" />
    <field name="regionCount" />
    <field name="pRegions" />
  </struct>
  <type_alias name="CopyImageInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="CopyImageInfo2" />
  <struct name="CopyImageToBufferInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyImageToBufferInfo2">
      <argument name="srcImage_" type="vk::Image" default_raw="{}" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="dstBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="regionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRegions_" type="const vk::BufferImageCopy2 *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyImageToBufferInfo2">
      <argument name="rhs" type="const CopyImageToBufferInfo2 &amp;" />
    </constructor>
    <constructor name="CopyImageToBufferInfo2">
      <argument name="rhs" type="const VkCopyImageToBufferInfo2 &amp;" />
    </constructor>
    <constructor name="CopyImageToBufferInfo2">
      <argument name="srcImage_" type="vk::Image" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
      <argument name="dstBuffer_" type="vk::Buffer" />
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::BufferImageCopy2&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyImageToBufferInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyImageToBufferInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcImage">
      <argument name="srcImage_" type="vk::Image" />
    </method>
    <method name="setSrcImageLayout">
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setDstBuffer">
      <argument name="dstBuffer_" type="vk::Buffer" />
    </method>
    <method name="setRegionCount">
      <argument name="regionCount_" type="uint32_t" />
    </method>
    <method name="setPRegions">
      <argument name="pRegions_" type="const vk::BufferImageCopy2 *" />
    </method>
    <method name="setRegions">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::BufferImageCopy2&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkCopyImageToBufferInfo2 &amp;" />
    <conversion_function name="operator VkCopyImageToBufferInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyImageToBufferInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyImageToBufferInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcImage" />
    <field name="srcImageLayout" />
    <field name="dstBuffer" />
    <field name="regionCount" />
    <field name="pRegions" />
  </struct>
  <type_alias name="CopyImageToBufferInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="CopyImageToBufferInfo2" />
  <struct name="DependencyInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DependencyInfo">
      <argument name="dependencyFlags_" type="vk::DependencyFlags" default_raw="{}" />
      <argument name="memoryBarrierCount_" type="uint32_t" default_raw="{}" />
      <argument name="pMemoryBarriers_" type="const vk::MemoryBarrier2 *" default_raw="{}" />
      <argument name="bufferMemoryBarrierCount_" type="uint32_t" default_raw="{}" />
      <argument name="pBufferMemoryBarriers_" type="const vk::BufferMemoryBarrier2 *" default_raw="{}" />
      <argument name="imageMemoryBarrierCount_" type="uint32_t" default_raw="{}" />
      <argument name="pImageMemoryBarriers_" type="const vk::ImageMemoryBarrier2 *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DependencyInfo">
      <argument name="rhs" type="const DependencyInfo &amp;" />
    </constructor>
    <constructor name="DependencyInfo">
      <argument name="rhs" type="const VkDependencyInfo &amp;" />
    </constructor>
    <constructor name="DependencyInfo">
      <argument name="dependencyFlags_" type="vk::DependencyFlags" />
      <argument name="memoryBarriers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MemoryBarrier2&gt; &amp;" />
      <argument name="bufferMemoryBarriers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::BufferMemoryBarrier2&gt; &amp;" default_raw="{}" />
      <argument name="imageMemoryBarriers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageMemoryBarrier2&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DependencyInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDependencyInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDependencyFlags">
      <argument name="dependencyFlags_" type="vk::DependencyFlags" />
    </method>
    <method name="setMemoryBarrierCount">
      <argument name="memoryBarrierCount_" type="uint32_t" />
    </method>
    <method name="setPMemoryBarriers">
      <argument name="pMemoryBarriers_" type="const vk::MemoryBarrier2 *" />
    </method>
    <method name="setMemoryBarriers">
      <argument name="memoryBarriers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MemoryBarrier2&gt; &amp;" />
    </method>
    <method name="setBufferMemoryBarrierCount">
      <argument name="bufferMemoryBarrierCount_" type="uint32_t" />
    </method>
    <method name="setPBufferMemoryBarriers">
      <argument name="pBufferMemoryBarriers_" type="const vk::BufferMemoryBarrier2 *" />
    </method>
    <method name="setBufferMemoryBarriers">
      <argument name="bufferMemoryBarriers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::BufferMemoryBarrier2&gt; &amp;" />
    </method>
    <method name="setImageMemoryBarrierCount">
      <argument name="imageMemoryBarrierCount_" type="uint32_t" />
    </method>
    <method name="setPImageMemoryBarriers">
      <argument name="pImageMemoryBarriers_" type="const vk::ImageMemoryBarrier2 *" />
    </method>
    <method name="setImageMemoryBarriers">
      <argument name="imageMemoryBarriers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageMemoryBarrier2&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDependencyInfo &amp;" />
    <conversion_function name="operator VkDependencyInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DependencyInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DependencyInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="dependencyFlags" />
    <field name="memoryBarrierCount" />
    <field name="pMemoryBarriers" />
    <field name="bufferMemoryBarrierCount" />
    <field name="pBufferMemoryBarriers" />
    <field name="imageMemoryBarrierCount" />
    <field name="pImageMemoryBarriers" />
  </struct>
  <type_alias name="DependencyInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DependencyInfo" />
  <struct name="DescriptorPoolInlineUniformBlockCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorPoolInlineUniformBlockCreateInfo">
      <argument name="maxInlineUniformBlockBindings_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorPoolInlineUniformBlockCreateInfo">
      <argument name="rhs" type="const DescriptorPoolInlineUniformBlockCreateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorPoolInlineUniformBlockCreateInfo">
      <argument name="rhs" type="const VkDescriptorPoolInlineUniformBlockCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorPoolInlineUniformBlockCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorPoolInlineUniformBlockCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMaxInlineUniformBlockBindings">
      <argument name="maxInlineUniformBlockBindings_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDescriptorPoolInlineUniformBlockCreateInfo &amp;" />
    <conversion_function name="operator VkDescriptorPoolInlineUniformBlockCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorPoolInlineUniformBlockCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorPoolInlineUniformBlockCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxInlineUniformBlockBindings" />
  </struct>
  <type_alias name="DescriptorPoolInlineUniformBlockCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DescriptorPoolInlineUniformBlockCreateInfo" />
  <struct name="DeviceBufferMemoryRequirements" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceBufferMemoryRequirements">
      <argument name="pCreateInfo_" type="const vk::BufferCreateInfo *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceBufferMemoryRequirements">
      <argument name="rhs" type="const DeviceBufferMemoryRequirements &amp;" />
    </constructor>
    <constructor name="DeviceBufferMemoryRequirements">
      <argument name="rhs" type="const VkDeviceBufferMemoryRequirements &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceBufferMemoryRequirements &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceBufferMemoryRequirements &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPCreateInfo">
      <argument name="pCreateInfo_" type="const vk::BufferCreateInfo *" />
    </method>
    <conversion_function name="operator const VkDeviceBufferMemoryRequirements &amp;" />
    <conversion_function name="operator VkDeviceBufferMemoryRequirements &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceBufferMemoryRequirements &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceBufferMemoryRequirements &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pCreateInfo" />
  </struct>
  <type_alias name="DeviceBufferMemoryRequirementsKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DeviceBufferMemoryRequirements" />
  <struct name="DeviceImageMemoryRequirements" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceImageMemoryRequirements">
      <argument name="pCreateInfo_" type="const vk::ImageCreateInfo *" default_raw="{}" />
      <argument name="planeAspect_" type="vk::ImageAspectFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ImageAspectFlagBits::eColor" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceImageMemoryRequirements">
      <argument name="rhs" type="const DeviceImageMemoryRequirements &amp;" />
    </constructor>
    <constructor name="DeviceImageMemoryRequirements">
      <argument name="rhs" type="const VkDeviceImageMemoryRequirements &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceImageMemoryRequirements &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceImageMemoryRequirements &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPCreateInfo">
      <argument name="pCreateInfo_" type="const vk::ImageCreateInfo *" />
    </method>
    <method name="setPlaneAspect">
      <argument name="planeAspect_" type="vk::ImageAspectFlagBits" />
    </method>
    <conversion_function name="operator const VkDeviceImageMemoryRequirements &amp;" />
    <conversion_function name="operator VkDeviceImageMemoryRequirements &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceImageMemoryRequirements &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceImageMemoryRequirements &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pCreateInfo" />
    <field name="planeAspect" />
  </struct>
  <type_alias name="DeviceImageMemoryRequirementsKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DeviceImageMemoryRequirements" />
  <struct name="DevicePrivateDataCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DevicePrivateDataCreateInfo">
      <argument name="privateDataSlotRequestCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DevicePrivateDataCreateInfo">
      <argument name="rhs" type="const DevicePrivateDataCreateInfo &amp;" />
    </constructor>
    <constructor name="DevicePrivateDataCreateInfo">
      <argument name="rhs" type="const VkDevicePrivateDataCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DevicePrivateDataCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDevicePrivateDataCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPrivateDataSlotRequestCount">
      <argument name="privateDataSlotRequestCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDevicePrivateDataCreateInfo &amp;" />
    <conversion_function name="operator VkDevicePrivateDataCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DevicePrivateDataCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DevicePrivateDataCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="privateDataSlotRequestCount" />
  </struct>
  <type_alias name="DevicePrivateDataCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DevicePrivateDataCreateInfo" />
  <struct name="FormatProperties3" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FormatProperties3">
      <argument name="linearTilingFeatures_" type="vk::FormatFeatureFlags2" default_raw="{}" />
      <argument name="optimalTilingFeatures_" type="vk::FormatFeatureFlags2" default_raw="{}" />
      <argument name="bufferFeatures_" type="vk::FormatFeatureFlags2" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="FormatProperties3">
      <argument name="rhs" type="const FormatProperties3 &amp;" />
    </constructor>
    <constructor name="FormatProperties3">
      <argument name="rhs" type="const VkFormatProperties3 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const FormatProperties3 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFormatProperties3 &amp;" />
    </method>
    <conversion_function name="operator const VkFormatProperties3 &amp;" />
    <conversion_function name="operator VkFormatProperties3 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FormatProperties3 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FormatProperties3 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="linearTilingFeatures" />
    <field name="optimalTilingFeatures" />
    <field name="bufferFeatures" />
  </struct>
  <type_alias name="FormatProperties3KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="FormatProperties3" />
  <struct name="ImageBlit2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageBlit2">
      <argument name="srcSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="srcOffsets_" type="const std::array&lt;vk::Offset3D, 2&gt; &amp;" default_raw="{}" />
      <argument name="dstSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="dstOffsets_" type="const std::array&lt;vk::Offset3D, 2&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageBlit2">
      <argument name="rhs" type="const ImageBlit2 &amp;" />
    </constructor>
    <constructor name="ImageBlit2">
      <argument name="rhs" type="const VkImageBlit2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageBlit2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageBlit2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcSubresource">
      <argument name="srcSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setSrcOffsets">
      <argument name="srcOffsets_" type="const std::array&lt;vk::Offset3D, 2&gt; &amp;" />
    </method>
    <method name="setDstSubresource">
      <argument name="dstSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setDstOffsets">
      <argument name="dstOffsets_" type="const std::array&lt;vk::Offset3D, 2&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkImageBlit2 &amp;" />
    <conversion_function name="operator VkImageBlit2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageBlit2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageBlit2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcSubresource" />
    <field name="srcOffsets" />
    <field name="dstSubresource" />
    <field name="dstOffsets" />
  </struct>
  <type_alias name="ImageBlit2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImageBlit2" />
  <struct name="ImageCopy2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageCopy2">
      <argument name="srcSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="srcOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="dstSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="dstOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="extent_" type="vk::Extent3D" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageCopy2">
      <argument name="rhs" type="const ImageCopy2 &amp;" />
    </constructor>
    <constructor name="ImageCopy2">
      <argument name="rhs" type="const VkImageCopy2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageCopy2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageCopy2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcSubresource">
      <argument name="srcSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setSrcOffset">
      <argument name="srcOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setDstSubresource">
      <argument name="dstSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setDstOffset">
      <argument name="dstOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setExtent">
      <argument name="extent_" type="const vk::Extent3D &amp;" />
    </method>
    <conversion_function name="operator const VkImageCopy2 &amp;" />
    <conversion_function name="operator VkImageCopy2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageCopy2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageCopy2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcSubresource" />
    <field name="srcOffset" />
    <field name="dstSubresource" />
    <field name="dstOffset" />
    <field name="extent" />
  </struct>
  <type_alias name="ImageCopy2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImageCopy2" />
  <struct name="ImageMemoryBarrier2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageMemoryBarrier2">
      <argument name="srcStageMask_" type="vk::PipelineStageFlags2" default_raw="{}" />
      <argument name="srcAccessMask_" type="vk::AccessFlags2" default_raw="{}" />
      <argument name="dstStageMask_" type="vk::PipelineStageFlags2" default_raw="{}" />
      <argument name="dstAccessMask_" type="vk::AccessFlags2" default_raw="{}" />
      <argument name="oldLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="newLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="srcQueueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="dstQueueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="subresourceRange_" type="vk::ImageSubresourceRange" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageMemoryBarrier2">
      <argument name="rhs" type="const ImageMemoryBarrier2 &amp;" />
    </constructor>
    <constructor name="ImageMemoryBarrier2">
      <argument name="rhs" type="const VkImageMemoryBarrier2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageMemoryBarrier2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageMemoryBarrier2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcStageMask">
      <argument name="srcStageMask_" type="vk::PipelineStageFlags2" />
    </method>
    <method name="setSrcAccessMask">
      <argument name="srcAccessMask_" type="vk::AccessFlags2" />
    </method>
    <method name="setDstStageMask">
      <argument name="dstStageMask_" type="vk::PipelineStageFlags2" />
    </method>
    <method name="setDstAccessMask">
      <argument name="dstAccessMask_" type="vk::AccessFlags2" />
    </method>
    <method name="setOldLayout">
      <argument name="oldLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setNewLayout">
      <argument name="newLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setSrcQueueFamilyIndex">
      <argument name="srcQueueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setDstQueueFamilyIndex">
      <argument name="dstQueueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <method name="setSubresourceRange">
      <argument name="subresourceRange_" type="const vk::ImageSubresourceRange &amp;" />
    </method>
    <conversion_function name="operator const VkImageMemoryBarrier2 &amp;" />
    <conversion_function name="operator VkImageMemoryBarrier2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageMemoryBarrier2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageMemoryBarrier2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcStageMask" />
    <field name="srcAccessMask" />
    <field name="dstStageMask" />
    <field name="dstAccessMask" />
    <field name="oldLayout" />
    <field name="newLayout" />
    <field name="srcQueueFamilyIndex" />
    <field name="dstQueueFamilyIndex" />
    <field name="image" />
    <field name="subresourceRange" />
  </struct>
  <type_alias name="ImageMemoryBarrier2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImageMemoryBarrier2" />
  <struct name="ImageResolve2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageResolve2">
      <argument name="srcSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="srcOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="dstSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="dstOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="extent_" type="vk::Extent3D" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageResolve2">
      <argument name="rhs" type="const ImageResolve2 &amp;" />
    </constructor>
    <constructor name="ImageResolve2">
      <argument name="rhs" type="const VkImageResolve2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageResolve2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageResolve2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcSubresource">
      <argument name="srcSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setSrcOffset">
      <argument name="srcOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setDstSubresource">
      <argument name="dstSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setDstOffset">
      <argument name="dstOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setExtent">
      <argument name="extent_" type="const vk::Extent3D &amp;" />
    </method>
    <conversion_function name="operator const VkImageResolve2 &amp;" />
    <conversion_function name="operator VkImageResolve2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageResolve2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageResolve2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcSubresource" />
    <field name="srcOffset" />
    <field name="dstSubresource" />
    <field name="dstOffset" />
    <field name="extent" />
  </struct>
  <type_alias name="ImageResolve2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImageResolve2" />
  <struct name="MemoryBarrier2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryBarrier2">
      <argument name="srcStageMask_" type="vk::PipelineStageFlags2" default_raw="{}" />
      <argument name="srcAccessMask_" type="vk::AccessFlags2" default_raw="{}" />
      <argument name="dstStageMask_" type="vk::PipelineStageFlags2" default_raw="{}" />
      <argument name="dstAccessMask_" type="vk::AccessFlags2" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryBarrier2">
      <argument name="rhs" type="const MemoryBarrier2 &amp;" />
    </constructor>
    <constructor name="MemoryBarrier2">
      <argument name="rhs" type="const VkMemoryBarrier2 &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryBarrier2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryBarrier2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcStageMask">
      <argument name="srcStageMask_" type="vk::PipelineStageFlags2" />
    </method>
    <method name="setSrcAccessMask">
      <argument name="srcAccessMask_" type="vk::AccessFlags2" />
    </method>
    <method name="setDstStageMask">
      <argument name="dstStageMask_" type="vk::PipelineStageFlags2" />
    </method>
    <method name="setDstAccessMask">
      <argument name="dstAccessMask_" type="vk::AccessFlags2" />
    </method>
    <conversion_function name="operator const VkMemoryBarrier2 &amp;" />
    <conversion_function name="operator VkMemoryBarrier2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryBarrier2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryBarrier2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcStageMask" />
    <field name="srcAccessMask" />
    <field name="dstStageMask" />
    <field name="dstAccessMask" />
  </struct>
  <type_alias name="MemoryBarrier2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="MemoryBarrier2" />
  <struct name="PhysicalDeviceDynamicRenderingFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDynamicRenderingFeatures">
      <argument name="dynamicRendering_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDynamicRenderingFeatures">
      <argument name="rhs" type="const PhysicalDeviceDynamicRenderingFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDynamicRenderingFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceDynamicRenderingFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDynamicRenderingFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDynamicRenderingFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDynamicRendering">
      <argument name="dynamicRendering_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDynamicRenderingFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDynamicRenderingFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDynamicRenderingFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDynamicRenderingFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="dynamicRendering" />
  </struct>
  <type_alias name="PhysicalDeviceDynamicRenderingFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceDynamicRenderingFeatures" />
  <struct name="PhysicalDeviceImageRobustnessFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageRobustnessFeatures">
      <argument name="robustImageAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageRobustnessFeatures">
      <argument name="rhs" type="const PhysicalDeviceImageRobustnessFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageRobustnessFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceImageRobustnessFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageRobustnessFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageRobustnessFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRobustImageAccess">
      <argument name="robustImageAccess_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageRobustnessFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageRobustnessFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageRobustnessFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageRobustnessFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="robustImageAccess" />
  </struct>
  <type_alias name="PhysicalDeviceImageRobustnessFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceImageRobustnessFeatures" />
  <struct name="PhysicalDeviceInlineUniformBlockFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceInlineUniformBlockFeatures">
      <argument name="inlineUniformBlock_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingInlineUniformBlockUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceInlineUniformBlockFeatures">
      <argument name="rhs" type="const PhysicalDeviceInlineUniformBlockFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceInlineUniformBlockFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceInlineUniformBlockFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceInlineUniformBlockFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceInlineUniformBlockFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setInlineUniformBlock">
      <argument name="inlineUniformBlock_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingInlineUniformBlockUpdateAfterBind">
      <argument name="descriptorBindingInlineUniformBlockUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceInlineUniformBlockFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceInlineUniformBlockFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceInlineUniformBlockFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceInlineUniformBlockFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="inlineUniformBlock" />
    <field name="descriptorBindingInlineUniformBlockUpdateAfterBind" />
  </struct>
  <type_alias name="PhysicalDeviceInlineUniformBlockFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceInlineUniformBlockFeatures" />
  <struct name="PhysicalDeviceInlineUniformBlockProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceInlineUniformBlockProperties">
      <argument name="maxInlineUniformBlockSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorInlineUniformBlocks_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetInlineUniformBlocks_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindInlineUniformBlocks_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceInlineUniformBlockProperties">
      <argument name="rhs" type="const PhysicalDeviceInlineUniformBlockProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceInlineUniformBlockProperties">
      <argument name="rhs" type="const VkPhysicalDeviceInlineUniformBlockProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceInlineUniformBlockProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceInlineUniformBlockProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceInlineUniformBlockProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceInlineUniformBlockProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceInlineUniformBlockProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceInlineUniformBlockProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxInlineUniformBlockSize" />
    <field name="maxPerStageDescriptorInlineUniformBlocks" />
    <field name="maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks" />
    <field name="maxDescriptorSetInlineUniformBlocks" />
    <field name="maxDescriptorSetUpdateAfterBindInlineUniformBlocks" />
  </struct>
  <type_alias name="PhysicalDeviceInlineUniformBlockPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceInlineUniformBlockProperties" />
  <struct name="PhysicalDeviceMaintenance4Features" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMaintenance4Features">
      <argument name="maintenance4_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance4Features">
      <argument name="rhs" type="const PhysicalDeviceMaintenance4Features &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance4Features">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance4Features &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance4Features &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance4Features &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMaintenance4">
      <argument name="maintenance4_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMaintenance4Features &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMaintenance4Features &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMaintenance4Features &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance4Features &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maintenance4" />
  </struct>
  <type_alias name="PhysicalDeviceMaintenance4FeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceMaintenance4Features" />
  <struct name="PhysicalDeviceMaintenance4Properties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMaintenance4Properties">
      <argument name="maxBufferSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance4Properties">
      <argument name="rhs" type="const PhysicalDeviceMaintenance4Properties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance4Properties">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance4Properties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance4Properties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance4Properties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMaintenance4Properties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMaintenance4Properties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMaintenance4Properties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance4Properties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxBufferSize" />
  </struct>
  <type_alias name="PhysicalDeviceMaintenance4PropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceMaintenance4Properties" />
  <struct name="PhysicalDevicePipelineCreationCacheControlFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePipelineCreationCacheControlFeatures">
      <argument name="pipelineCreationCacheControl_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePipelineCreationCacheControlFeatures">
      <argument name="rhs" type="const PhysicalDevicePipelineCreationCacheControlFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePipelineCreationCacheControlFeatures">
      <argument name="rhs" type="const VkPhysicalDevicePipelineCreationCacheControlFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePipelineCreationCacheControlFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePipelineCreationCacheControlFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPipelineCreationCacheControl">
      <argument name="pipelineCreationCacheControl_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePipelineCreationCacheControlFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDevicePipelineCreationCacheControlFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePipelineCreationCacheControlFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePipelineCreationCacheControlFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipelineCreationCacheControl" />
  </struct>
  <type_alias name="PhysicalDevicePipelineCreationCacheControlFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDevicePipelineCreationCacheControlFeatures" />
  <struct name="PhysicalDevicePrivateDataFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePrivateDataFeatures">
      <argument name="privateData_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePrivateDataFeatures">
      <argument name="rhs" type="const PhysicalDevicePrivateDataFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePrivateDataFeatures">
      <argument name="rhs" type="const VkPhysicalDevicePrivateDataFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePrivateDataFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePrivateDataFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPrivateData">
      <argument name="privateData_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePrivateDataFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDevicePrivateDataFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePrivateDataFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePrivateDataFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="privateData" />
  </struct>
  <type_alias name="PhysicalDevicePrivateDataFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDevicePrivateDataFeatures" />
  <struct name="PhysicalDeviceShaderDemoteToHelperInvocationFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderDemoteToHelperInvocationFeatures">
      <argument name="shaderDemoteToHelperInvocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderDemoteToHelperInvocationFeatures">
      <argument name="rhs" type="const PhysicalDeviceShaderDemoteToHelperInvocationFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderDemoteToHelperInvocationFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderDemoteToHelperInvocationFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderDemoteToHelperInvocation">
      <argument name="shaderDemoteToHelperInvocation_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderDemoteToHelperInvocationFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderDemoteToHelperInvocationFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderDemoteToHelperInvocation" />
  </struct>
  <type_alias name="PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceShaderDemoteToHelperInvocationFeatures" />
  <struct name="PhysicalDeviceShaderIntegerDotProductFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderIntegerDotProductFeatures">
      <argument name="shaderIntegerDotProduct_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderIntegerDotProductFeatures">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerDotProductFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderIntegerDotProductFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceShaderIntegerDotProductFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerDotProductFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderIntegerDotProductFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderIntegerDotProduct">
      <argument name="shaderIntegerDotProduct_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderIntegerDotProductFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderIntegerDotProductFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerDotProductFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerDotProductFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderIntegerDotProduct" />
  </struct>
  <type_alias name="PhysicalDeviceShaderIntegerDotProductFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceShaderIntegerDotProductFeatures" />
  <struct name="PhysicalDeviceShaderIntegerDotProductProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderIntegerDotProductProperties">
      <argument name="integerDotProduct8BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct8BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct8BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct4x8BitPackedUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct4x8BitPackedSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct4x8BitPackedMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct16BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct16BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct16BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct32BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct32BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct32BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct64BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct64BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct64BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating8BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating8BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating16BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating16BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating32BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating32BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating64BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating64BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderIntegerDotProductProperties">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerDotProductProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderIntegerDotProductProperties">
      <argument name="rhs" type="const VkPhysicalDeviceShaderIntegerDotProductProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerDotProductProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderIntegerDotProductProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderIntegerDotProductProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderIntegerDotProductProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerDotProductProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerDotProductProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="integerDotProduct8BitUnsignedAccelerated" />
    <field name="integerDotProduct8BitSignedAccelerated" />
    <field name="integerDotProduct8BitMixedSignednessAccelerated" />
    <field name="integerDotProduct4x8BitPackedUnsignedAccelerated" />
    <field name="integerDotProduct4x8BitPackedSignedAccelerated" />
    <field name="integerDotProduct4x8BitPackedMixedSignednessAccelerated" />
    <field name="integerDotProduct16BitUnsignedAccelerated" />
    <field name="integerDotProduct16BitSignedAccelerated" />
    <field name="integerDotProduct16BitMixedSignednessAccelerated" />
    <field name="integerDotProduct32BitUnsignedAccelerated" />
    <field name="integerDotProduct32BitSignedAccelerated" />
    <field name="integerDotProduct32BitMixedSignednessAccelerated" />
    <field name="integerDotProduct64BitUnsignedAccelerated" />
    <field name="integerDotProduct64BitSignedAccelerated" />
    <field name="integerDotProduct64BitMixedSignednessAccelerated" />
    <field name="integerDotProductAccumulatingSaturating8BitUnsignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating8BitSignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated" />
    <field name="integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated" />
    <field name="integerDotProductAccumulatingSaturating16BitUnsignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating16BitSignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated" />
    <field name="integerDotProductAccumulatingSaturating32BitUnsignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating32BitSignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated" />
    <field name="integerDotProductAccumulatingSaturating64BitUnsignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating64BitSignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated" />
  </struct>
  <type_alias name="PhysicalDeviceShaderIntegerDotProductPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceShaderIntegerDotProductProperties" />
  <struct name="PhysicalDeviceShaderTerminateInvocationFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderTerminateInvocationFeatures">
      <argument name="shaderTerminateInvocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderTerminateInvocationFeatures">
      <argument name="rhs" type="const PhysicalDeviceShaderTerminateInvocationFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderTerminateInvocationFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceShaderTerminateInvocationFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderTerminateInvocationFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderTerminateInvocationFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderTerminateInvocation">
      <argument name="shaderTerminateInvocation_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderTerminateInvocationFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderTerminateInvocationFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderTerminateInvocationFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderTerminateInvocationFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderTerminateInvocation" />
  </struct>
  <type_alias name="PhysicalDeviceShaderTerminateInvocationFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceShaderTerminateInvocationFeatures" />
  <struct name="PhysicalDeviceSubgroupSizeControlFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSubgroupSizeControlFeatures">
      <argument name="subgroupSizeControl_" type="vk::Bool32" default_raw="{}" />
      <argument name="computeFullSubgroups_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSubgroupSizeControlFeatures">
      <argument name="rhs" type="const PhysicalDeviceSubgroupSizeControlFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSubgroupSizeControlFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceSubgroupSizeControlFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSubgroupSizeControlFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSubgroupSizeControlFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSubgroupSizeControl">
      <argument name="subgroupSizeControl_" type="vk::Bool32" />
    </method>
    <method name="setComputeFullSubgroups">
      <argument name="computeFullSubgroups_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSubgroupSizeControlFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSubgroupSizeControlFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSubgroupSizeControlFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSubgroupSizeControlFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="subgroupSizeControl" />
    <field name="computeFullSubgroups" />
  </struct>
  <type_alias name="PhysicalDeviceSubgroupSizeControlFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceSubgroupSizeControlFeatures" />
  <struct name="PhysicalDeviceSubgroupSizeControlProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSubgroupSizeControlProperties">
      <argument name="minSubgroupSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxSubgroupSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxComputeWorkgroupSubgroups_" type="uint32_t" default_raw="{}" />
      <argument name="requiredSubgroupSizeStages_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSubgroupSizeControlProperties">
      <argument name="rhs" type="const PhysicalDeviceSubgroupSizeControlProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSubgroupSizeControlProperties">
      <argument name="rhs" type="const VkPhysicalDeviceSubgroupSizeControlProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSubgroupSizeControlProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSubgroupSizeControlProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSubgroupSizeControlProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSubgroupSizeControlProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSubgroupSizeControlProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSubgroupSizeControlProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="minSubgroupSize" />
    <field name="maxSubgroupSize" />
    <field name="maxComputeWorkgroupSubgroups" />
    <field name="requiredSubgroupSizeStages" />
  </struct>
  <type_alias name="PhysicalDeviceSubgroupSizeControlPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceSubgroupSizeControlProperties" />
  <struct name="PhysicalDeviceSynchronization2Features" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSynchronization2Features">
      <argument name="synchronization2_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSynchronization2Features">
      <argument name="rhs" type="const PhysicalDeviceSynchronization2Features &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSynchronization2Features">
      <argument name="rhs" type="const VkPhysicalDeviceSynchronization2Features &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSynchronization2Features &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSynchronization2Features &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSynchronization2">
      <argument name="synchronization2_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSynchronization2Features &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSynchronization2Features &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSynchronization2Features &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSynchronization2Features &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="synchronization2" />
  </struct>
  <type_alias name="PhysicalDeviceSynchronization2FeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceSynchronization2Features" />
  <struct name="PhysicalDeviceTexelBufferAlignmentProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceTexelBufferAlignmentProperties">
      <argument name="storageTexelBufferOffsetAlignmentBytes_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="storageTexelBufferOffsetSingleTexelAlignment_" type="vk::Bool32" default_raw="{}" />
      <argument name="uniformTexelBufferOffsetAlignmentBytes_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="uniformTexelBufferOffsetSingleTexelAlignment_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceTexelBufferAlignmentProperties">
      <argument name="rhs" type="const PhysicalDeviceTexelBufferAlignmentProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceTexelBufferAlignmentProperties">
      <argument name="rhs" type="const VkPhysicalDeviceTexelBufferAlignmentProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceTexelBufferAlignmentProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceTexelBufferAlignmentProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceTexelBufferAlignmentProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceTexelBufferAlignmentProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceTexelBufferAlignmentProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceTexelBufferAlignmentProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="storageTexelBufferOffsetAlignmentBytes" />
    <field name="storageTexelBufferOffsetSingleTexelAlignment" />
    <field name="uniformTexelBufferOffsetAlignmentBytes" />
    <field name="uniformTexelBufferOffsetSingleTexelAlignment" />
  </struct>
  <type_alias name="PhysicalDeviceTexelBufferAlignmentPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceTexelBufferAlignmentProperties" />
  <struct name="PhysicalDeviceTextureCompressionASTCHDRFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceTextureCompressionASTCHDRFeatures">
      <argument name="textureCompressionASTC_HDR_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceTextureCompressionASTCHDRFeatures">
      <argument name="rhs" type="const PhysicalDeviceTextureCompressionASTCHDRFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceTextureCompressionASTCHDRFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceTextureCompressionASTCHDRFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceTextureCompressionASTCHDRFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceTextureCompressionASTCHDRFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTextureCompressionASTC_HDR">
      <argument name="textureCompressionASTC_HDR_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceTextureCompressionASTCHDRFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceTextureCompressionASTCHDRFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceTextureCompressionASTCHDRFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceTextureCompressionASTCHDRFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="textureCompressionASTC_HDR" />
  </struct>
  <type_alias name="PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceTextureCompressionASTCHDRFeatures" />
  <struct name="PhysicalDeviceToolProperties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceToolProperties">
      <argument name="name_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="version_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="purposes_" type="vk::ToolPurposeFlags" default_raw="{}" />
      <argument name="description_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="layer_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceToolProperties">
      <argument name="rhs" type="const PhysicalDeviceToolProperties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceToolProperties">
      <argument name="rhs" type="const VkPhysicalDeviceToolProperties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceToolProperties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceToolProperties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceToolProperties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceToolProperties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceToolProperties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceToolProperties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="name" />
    <field name="version" />
    <field name="purposes" />
    <field name="description" />
    <field name="layer" />
  </struct>
  <type_alias name="PhysicalDeviceToolPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceToolProperties" />
  <struct name="PhysicalDeviceVulkan13Features" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVulkan13Features">
      <argument name="robustImageAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="inlineUniformBlock_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingInlineUniformBlockUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="pipelineCreationCacheControl_" type="vk::Bool32" default_raw="{}" />
      <argument name="privateData_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDemoteToHelperInvocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderTerminateInvocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="subgroupSizeControl_" type="vk::Bool32" default_raw="{}" />
      <argument name="computeFullSubgroups_" type="vk::Bool32" default_raw="{}" />
      <argument name="synchronization2_" type="vk::Bool32" default_raw="{}" />
      <argument name="textureCompressionASTC_HDR_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderZeroInitializeWorkgroupMemory_" type="vk::Bool32" default_raw="{}" />
      <argument name="dynamicRendering_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderIntegerDotProduct_" type="vk::Bool32" default_raw="{}" />
      <argument name="maintenance4_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan13Features">
      <argument name="rhs" type="const PhysicalDeviceVulkan13Features &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan13Features">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan13Features &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVulkan13Features &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan13Features &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRobustImageAccess">
      <argument name="robustImageAccess_" type="vk::Bool32" />
    </method>
    <method name="setInlineUniformBlock">
      <argument name="inlineUniformBlock_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingInlineUniformBlockUpdateAfterBind">
      <argument name="descriptorBindingInlineUniformBlockUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <method name="setPipelineCreationCacheControl">
      <argument name="pipelineCreationCacheControl_" type="vk::Bool32" />
    </method>
    <method name="setPrivateData">
      <argument name="privateData_" type="vk::Bool32" />
    </method>
    <method name="setShaderDemoteToHelperInvocation">
      <argument name="shaderDemoteToHelperInvocation_" type="vk::Bool32" />
    </method>
    <method name="setShaderTerminateInvocation">
      <argument name="shaderTerminateInvocation_" type="vk::Bool32" />
    </method>
    <method name="setSubgroupSizeControl">
      <argument name="subgroupSizeControl_" type="vk::Bool32" />
    </method>
    <method name="setComputeFullSubgroups">
      <argument name="computeFullSubgroups_" type="vk::Bool32" />
    </method>
    <method name="setSynchronization2">
      <argument name="synchronization2_" type="vk::Bool32" />
    </method>
    <method name="setTextureCompressionASTC_HDR">
      <argument name="textureCompressionASTC_HDR_" type="vk::Bool32" />
    </method>
    <method name="setShaderZeroInitializeWorkgroupMemory">
      <argument name="shaderZeroInitializeWorkgroupMemory_" type="vk::Bool32" />
    </method>
    <method name="setDynamicRendering">
      <argument name="dynamicRendering_" type="vk::Bool32" />
    </method>
    <method name="setShaderIntegerDotProduct">
      <argument name="shaderIntegerDotProduct_" type="vk::Bool32" />
    </method>
    <method name="setMaintenance4">
      <argument name="maintenance4_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVulkan13Features &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVulkan13Features &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVulkan13Features &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVulkan13Features &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="robustImageAccess" />
    <field name="inlineUniformBlock" />
    <field name="descriptorBindingInlineUniformBlockUpdateAfterBind" />
    <field name="pipelineCreationCacheControl" />
    <field name="privateData" />
    <field name="shaderDemoteToHelperInvocation" />
    <field name="shaderTerminateInvocation" />
    <field name="subgroupSizeControl" />
    <field name="computeFullSubgroups" />
    <field name="synchronization2" />
    <field name="textureCompressionASTC_HDR" />
    <field name="shaderZeroInitializeWorkgroupMemory" />
    <field name="dynamicRendering" />
    <field name="shaderIntegerDotProduct" />
    <field name="maintenance4" />
  </struct>
  <struct name="PhysicalDeviceVulkan13Properties" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVulkan13Properties">
      <argument name="minSubgroupSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxSubgroupSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxComputeWorkgroupSubgroups_" type="uint32_t" default_raw="{}" />
      <argument name="requiredSubgroupSizeStages_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="maxInlineUniformBlockSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorInlineUniformBlocks_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetInlineUniformBlocks_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindInlineUniformBlocks_" type="uint32_t" default_raw="{}" />
      <argument name="maxInlineUniformTotalSize_" type="uint32_t" default_raw="{}" />
      <argument name="integerDotProduct8BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct8BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct8BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct4x8BitPackedUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct4x8BitPackedSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct4x8BitPackedMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct16BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct16BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct16BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct32BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct32BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct32BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct64BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct64BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProduct64BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating8BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating8BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating16BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating16BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating32BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating32BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating64BitUnsignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating64BitSignedAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="storageTexelBufferOffsetAlignmentBytes_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="storageTexelBufferOffsetSingleTexelAlignment_" type="vk::Bool32" default_raw="{}" />
      <argument name="uniformTexelBufferOffsetAlignmentBytes_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="uniformTexelBufferOffsetSingleTexelAlignment_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxBufferSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan13Properties">
      <argument name="rhs" type="const PhysicalDeviceVulkan13Properties &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVulkan13Properties">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan13Properties &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVulkan13Properties &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVulkan13Properties &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVulkan13Properties &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVulkan13Properties &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVulkan13Properties &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVulkan13Properties &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="minSubgroupSize" />
    <field name="maxSubgroupSize" />
    <field name="maxComputeWorkgroupSubgroups" />
    <field name="requiredSubgroupSizeStages" />
    <field name="maxInlineUniformBlockSize" />
    <field name="maxPerStageDescriptorInlineUniformBlocks" />
    <field name="maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks" />
    <field name="maxDescriptorSetInlineUniformBlocks" />
    <field name="maxDescriptorSetUpdateAfterBindInlineUniformBlocks" />
    <field name="maxInlineUniformTotalSize" />
    <field name="integerDotProduct8BitUnsignedAccelerated" />
    <field name="integerDotProduct8BitSignedAccelerated" />
    <field name="integerDotProduct8BitMixedSignednessAccelerated" />
    <field name="integerDotProduct4x8BitPackedUnsignedAccelerated" />
    <field name="integerDotProduct4x8BitPackedSignedAccelerated" />
    <field name="integerDotProduct4x8BitPackedMixedSignednessAccelerated" />
    <field name="integerDotProduct16BitUnsignedAccelerated" />
    <field name="integerDotProduct16BitSignedAccelerated" />
    <field name="integerDotProduct16BitMixedSignednessAccelerated" />
    <field name="integerDotProduct32BitUnsignedAccelerated" />
    <field name="integerDotProduct32BitSignedAccelerated" />
    <field name="integerDotProduct32BitMixedSignednessAccelerated" />
    <field name="integerDotProduct64BitUnsignedAccelerated" />
    <field name="integerDotProduct64BitSignedAccelerated" />
    <field name="integerDotProduct64BitMixedSignednessAccelerated" />
    <field name="integerDotProductAccumulatingSaturating8BitUnsignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating8BitSignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated" />
    <field name="integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated" />
    <field name="integerDotProductAccumulatingSaturating16BitUnsignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating16BitSignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated" />
    <field name="integerDotProductAccumulatingSaturating32BitUnsignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating32BitSignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated" />
    <field name="integerDotProductAccumulatingSaturating64BitUnsignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating64BitSignedAccelerated" />
    <field name="integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated" />
    <field name="storageTexelBufferOffsetAlignmentBytes" />
    <field name="storageTexelBufferOffsetSingleTexelAlignment" />
    <field name="uniformTexelBufferOffsetAlignmentBytes" />
    <field name="uniformTexelBufferOffsetSingleTexelAlignment" />
    <field name="maxBufferSize" />
  </struct>
  <struct name="PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures">
      <argument name="shaderZeroInitializeWorkgroupMemory_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures">
      <argument name="rhs" type="const PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures">
      <argument name="rhs" type="const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderZeroInitializeWorkgroupMemory">
      <argument name="shaderZeroInitializeWorkgroupMemory_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &amp;" />
    <conversion_function name="operator VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderZeroInitializeWorkgroupMemory" />
  </struct>
  <type_alias name="PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures" />
  <struct name="PipelineCreationFeedback" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineCreationFeedback">
      <argument name="flags_" type="vk::PipelineCreationFeedbackFlags" default_raw="{}" />
      <argument name="duration_" type="uint64_t" default_raw="{}" />
    </constructor>
    <constructor name="PipelineCreationFeedback">
      <argument name="rhs" type="const PipelineCreationFeedback &amp;" />
    </constructor>
    <constructor name="PipelineCreationFeedback">
      <argument name="rhs" type="const VkPipelineCreationFeedback &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineCreationFeedback &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineCreationFeedback &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineCreationFeedback &amp;" />
    <conversion_function name="operator VkPipelineCreationFeedback &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineCreationFeedback &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineCreationFeedback &amp;" />
    </method>
    <field name="flags" />
    <field name="duration" />
  </struct>
  <struct name="PipelineCreationFeedbackCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineCreationFeedbackCreateInfo">
      <argument name="pPipelineCreationFeedback_" type="vk::PipelineCreationFeedback *" default_raw="{}" />
      <argument name="pipelineStageCreationFeedbackCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPipelineStageCreationFeedbacks_" type="vk::PipelineCreationFeedback *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineCreationFeedbackCreateInfo">
      <argument name="rhs" type="const PipelineCreationFeedbackCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineCreationFeedbackCreateInfo">
      <argument name="rhs" type="const VkPipelineCreationFeedbackCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineCreationFeedbackCreateInfo">
      <argument name="pPipelineCreationFeedback_" type="vk::PipelineCreationFeedback *" />
      <argument name="pipelineStageCreationFeedbacks_" type="const vk::ArrayProxyNoTemporaries&lt;vk::PipelineCreationFeedback&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineCreationFeedbackCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineCreationFeedbackCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPPipelineCreationFeedback">
      <argument name="pPipelineCreationFeedback_" type="vk::PipelineCreationFeedback *" />
    </method>
    <method name="setPipelineStageCreationFeedbackCount">
      <argument name="pipelineStageCreationFeedbackCount_" type="uint32_t" />
    </method>
    <method name="setPPipelineStageCreationFeedbacks">
      <argument name="pPipelineStageCreationFeedbacks_" type="vk::PipelineCreationFeedback *" />
    </method>
    <method name="setPipelineStageCreationFeedbacks">
      <argument name="pipelineStageCreationFeedbacks_" type="const vk::ArrayProxyNoTemporaries&lt;vk::PipelineCreationFeedback&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineCreationFeedbackCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineCreationFeedbackCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineCreationFeedbackCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineCreationFeedbackCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pPipelineCreationFeedback" />
    <field name="pipelineStageCreationFeedbackCount" />
    <field name="pPipelineStageCreationFeedbacks" />
  </struct>
  <type_alias name="PipelineCreationFeedbackCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PipelineCreationFeedbackCreateInfo" />
  <type_alias name="PipelineCreationFeedbackEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PipelineCreationFeedback" />
  <struct name="PipelineRenderingCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineRenderingCreateInfo">
      <argument name="viewMask_" type="uint32_t" default_raw="{}" />
      <argument name="colorAttachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pColorAttachmentFormats_" type="const vk::Format *" default_raw="{}" />
      <argument name="depthAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="stencilAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineRenderingCreateInfo">
      <argument name="rhs" type="const PipelineRenderingCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineRenderingCreateInfo">
      <argument name="rhs" type="const VkPipelineRenderingCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineRenderingCreateInfo">
      <argument name="viewMask_" type="uint32_t" />
      <argument name="colorAttachmentFormats_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Format&gt; &amp;" />
      <argument name="depthAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="stencilAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineRenderingCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineRenderingCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setViewMask">
      <argument name="viewMask_" type="uint32_t" />
    </method>
    <method name="setColorAttachmentCount">
      <argument name="colorAttachmentCount_" type="uint32_t" />
    </method>
    <method name="setPColorAttachmentFormats">
      <argument name="pColorAttachmentFormats_" type="const vk::Format *" />
    </method>
    <method name="setColorAttachmentFormats">
      <argument name="colorAttachmentFormats_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Format&gt; &amp;" />
    </method>
    <method name="setDepthAttachmentFormat">
      <argument name="depthAttachmentFormat_" type="vk::Format" />
    </method>
    <method name="setStencilAttachmentFormat">
      <argument name="stencilAttachmentFormat_" type="vk::Format" />
    </method>
    <conversion_function name="operator const VkPipelineRenderingCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineRenderingCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineRenderingCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineRenderingCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="viewMask" />
    <field name="colorAttachmentCount" />
    <field name="pColorAttachmentFormats" />
    <field name="depthAttachmentFormat" />
    <field name="stencilAttachmentFormat" />
  </struct>
  <type_alias name="PipelineRenderingCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PipelineRenderingCreateInfo" />
  <struct name="PipelineShaderStageRequiredSubgroupSizeCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineShaderStageRequiredSubgroupSizeCreateInfo">
      <argument name="requiredSubgroupSize_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineShaderStageRequiredSubgroupSizeCreateInfo">
      <argument name="rhs" type="const PipelineShaderStageRequiredSubgroupSizeCreateInfo &amp;" />
    </constructor>
    <constructor name="PipelineShaderStageRequiredSubgroupSizeCreateInfo">
      <argument name="rhs" type="const VkPipelineShaderStageRequiredSubgroupSizeCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineShaderStageRequiredSubgroupSizeCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineShaderStageRequiredSubgroupSizeCreateInfo &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineShaderStageRequiredSubgroupSizeCreateInfo &amp;" />
    <conversion_function name="operator VkPipelineShaderStageRequiredSubgroupSizeCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineShaderStageRequiredSubgroupSizeCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineShaderStageRequiredSubgroupSizeCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="requiredSubgroupSize" />
  </struct>
  <type_alias name="PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PipelineShaderStageRequiredSubgroupSizeCreateInfo" />
  <struct name="PrivateDataSlotCreateInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PrivateDataSlotCreateInfo">
      <argument name="flags_" type="vk::PrivateDataSlotCreateFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PrivateDataSlotCreateInfo">
      <argument name="rhs" type="const PrivateDataSlotCreateInfo &amp;" />
    </constructor>
    <constructor name="PrivateDataSlotCreateInfo">
      <argument name="rhs" type="const VkPrivateDataSlotCreateInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PrivateDataSlotCreateInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPrivateDataSlotCreateInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PrivateDataSlotCreateFlags" />
    </method>
    <conversion_function name="operator const VkPrivateDataSlotCreateInfo &amp;" />
    <conversion_function name="operator VkPrivateDataSlotCreateInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PrivateDataSlotCreateInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PrivateDataSlotCreateInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
  </struct>
  <type_alias name="PrivateDataSlotCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PrivateDataSlotCreateInfo" />
  <struct name="RenderingAttachmentInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderingAttachmentInfo">
      <argument name="imageView_" type="vk::ImageView" default_raw="{}" />
      <argument name="imageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="resolveMode_" type="vk::ResolveModeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ResolveModeFlagBits::eNone" />
      <argument name="resolveImageView_" type="vk::ImageView" default_raw="{}" />
      <argument name="resolveImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="loadOp_" type="vk::AttachmentLoadOp" default_raw="VULKAN_HPP_NAMESPACE::AttachmentLoadOp::eLoad" />
      <argument name="storeOp_" type="vk::AttachmentStoreOp" default_raw="VULKAN_HPP_NAMESPACE::AttachmentStoreOp::eStore" />
      <argument name="clearValue_" type="vk::ClearValue" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderingAttachmentInfo">
      <argument name="rhs" type="const RenderingAttachmentInfo &amp;" />
    </constructor>
    <constructor name="RenderingAttachmentInfo">
      <argument name="rhs" type="const VkRenderingAttachmentInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderingAttachmentInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderingAttachmentInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImageView">
      <argument name="imageView_" type="vk::ImageView" />
    </method>
    <method name="setImageLayout">
      <argument name="imageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setResolveMode">
      <argument name="resolveMode_" type="vk::ResolveModeFlagBits" />
    </method>
    <method name="setResolveImageView">
      <argument name="resolveImageView_" type="vk::ImageView" />
    </method>
    <method name="setResolveImageLayout">
      <argument name="resolveImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setLoadOp">
      <argument name="loadOp_" type="vk::AttachmentLoadOp" />
    </method>
    <method name="setStoreOp">
      <argument name="storeOp_" type="vk::AttachmentStoreOp" />
    </method>
    <method name="setClearValue">
      <argument name="clearValue_" type="const vk::ClearValue &amp;" />
    </method>
    <conversion_function name="operator const VkRenderingAttachmentInfo &amp;" />
    <conversion_function name="operator VkRenderingAttachmentInfo &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="imageView" />
    <field name="imageLayout" />
    <field name="resolveMode" />
    <field name="resolveImageView" />
    <field name="resolveImageLayout" />
    <field name="loadOp" />
    <field name="storeOp" />
    <field name="clearValue" />
  </struct>
  <type_alias name="RenderingAttachmentInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="RenderingAttachmentInfo" />
  <struct name="RenderingInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderingInfo">
      <argument name="flags_" type="vk::RenderingFlags" default_raw="{}" />
      <argument name="renderArea_" type="vk::Rect2D" default_raw="{}" />
      <argument name="layerCount_" type="uint32_t" default_raw="{}" />
      <argument name="viewMask_" type="uint32_t" default_raw="{}" />
      <argument name="colorAttachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pColorAttachments_" type="const vk::RenderingAttachmentInfo *" default_raw="{}" />
      <argument name="pDepthAttachment_" type="const vk::RenderingAttachmentInfo *" default_raw="{}" />
      <argument name="pStencilAttachment_" type="const vk::RenderingAttachmentInfo *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderingInfo">
      <argument name="rhs" type="const RenderingInfo &amp;" />
    </constructor>
    <constructor name="RenderingInfo">
      <argument name="rhs" type="const VkRenderingInfo &amp;" />
    </constructor>
    <constructor name="RenderingInfo">
      <argument name="flags_" type="vk::RenderingFlags" />
      <argument name="renderArea_" type="vk::Rect2D" />
      <argument name="layerCount_" type="uint32_t" />
      <argument name="viewMask_" type="uint32_t" />
      <argument name="colorAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::RenderingAttachmentInfo&gt; &amp;" />
      <argument name="pDepthAttachment_" type="const vk::RenderingAttachmentInfo *" default_raw="{}" />
      <argument name="pStencilAttachment_" type="const vk::RenderingAttachmentInfo *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderingInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderingInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::RenderingFlags" />
    </method>
    <method name="setRenderArea">
      <argument name="renderArea_" type="const vk::Rect2D &amp;" />
    </method>
    <method name="setLayerCount">
      <argument name="layerCount_" type="uint32_t" />
    </method>
    <method name="setViewMask">
      <argument name="viewMask_" type="uint32_t" />
    </method>
    <method name="setColorAttachmentCount">
      <argument name="colorAttachmentCount_" type="uint32_t" />
    </method>
    <method name="setPColorAttachments">
      <argument name="pColorAttachments_" type="const vk::RenderingAttachmentInfo *" />
    </method>
    <method name="setColorAttachments">
      <argument name="colorAttachments_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::RenderingAttachmentInfo&gt; &amp;" />
    </method>
    <method name="setPDepthAttachment">
      <argument name="pDepthAttachment_" type="const vk::RenderingAttachmentInfo *" />
    </method>
    <method name="setPStencilAttachment">
      <argument name="pStencilAttachment_" type="const vk::RenderingAttachmentInfo *" />
    </method>
    <conversion_function name="operator const VkRenderingInfo &amp;" />
    <conversion_function name="operator VkRenderingInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderingInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderingInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="renderArea" />
    <field name="layerCount" />
    <field name="viewMask" />
    <field name="colorAttachmentCount" />
    <field name="pColorAttachments" />
    <field name="pDepthAttachment" />
    <field name="pStencilAttachment" />
  </struct>
  <type_alias name="RenderingInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="RenderingInfo" />
  <struct name="ResolveImageInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ResolveImageInfo2">
      <argument name="srcImage_" type="vk::Image" default_raw="{}" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="dstImage_" type="vk::Image" default_raw="{}" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="regionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRegions_" type="const vk::ImageResolve2 *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ResolveImageInfo2">
      <argument name="rhs" type="const ResolveImageInfo2 &amp;" />
    </constructor>
    <constructor name="ResolveImageInfo2">
      <argument name="rhs" type="const VkResolveImageInfo2 &amp;" />
    </constructor>
    <constructor name="ResolveImageInfo2">
      <argument name="srcImage_" type="vk::Image" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
      <argument name="dstImage_" type="vk::Image" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageResolve2&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ResolveImageInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkResolveImageInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcImage">
      <argument name="srcImage_" type="vk::Image" />
    </method>
    <method name="setSrcImageLayout">
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setDstImage">
      <argument name="dstImage_" type="vk::Image" />
    </method>
    <method name="setDstImageLayout">
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setRegionCount">
      <argument name="regionCount_" type="uint32_t" />
    </method>
    <method name="setPRegions">
      <argument name="pRegions_" type="const vk::ImageResolve2 *" />
    </method>
    <method name="setRegions">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageResolve2&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkResolveImageInfo2 &amp;" />
    <conversion_function name="operator VkResolveImageInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ResolveImageInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ResolveImageInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcImage" />
    <field name="srcImageLayout" />
    <field name="dstImage" />
    <field name="dstImageLayout" />
    <field name="regionCount" />
    <field name="pRegions" />
  </struct>
  <type_alias name="ResolveImageInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ResolveImageInfo2" />
  <struct name="SemaphoreSubmitInfo" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SemaphoreSubmitInfo">
      <argument name="semaphore_" type="vk::Semaphore" default_raw="{}" />
      <argument name="value_" type="uint64_t" default_raw="{}" />
      <argument name="stageMask_" type="vk::PipelineStageFlags2" default_raw="{}" />
      <argument name="deviceIndex_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SemaphoreSubmitInfo">
      <argument name="rhs" type="const SemaphoreSubmitInfo &amp;" />
    </constructor>
    <constructor name="SemaphoreSubmitInfo">
      <argument name="rhs" type="const VkSemaphoreSubmitInfo &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SemaphoreSubmitInfo &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSemaphoreSubmitInfo &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSemaphore">
      <argument name="semaphore_" type="vk::Semaphore" />
    </method>
    <method name="setValue">
      <argument name="value_" type="uint64_t" />
    </method>
    <method name="setStageMask">
      <argument name="stageMask_" type="vk::PipelineStageFlags2" />
    </method>
    <method name="setDeviceIndex">
      <argument name="deviceIndex_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkSemaphoreSubmitInfo &amp;" />
    <conversion_function name="operator VkSemaphoreSubmitInfo &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SemaphoreSubmitInfo &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SemaphoreSubmitInfo &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="semaphore" />
    <field name="value" />
    <field name="stageMask" />
    <field name="deviceIndex" />
  </struct>
  <type_alias name="SemaphoreSubmitInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SemaphoreSubmitInfo" />
  <type_alias name="ShaderRequiredSubgroupSizeCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PipelineShaderStageRequiredSubgroupSizeCreateInfo" />
  <struct name="SubmitInfo2" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubmitInfo2">
      <argument name="flags_" type="vk::SubmitFlags" default_raw="{}" />
      <argument name="waitSemaphoreInfoCount_" type="uint32_t" default_raw="{}" />
      <argument name="pWaitSemaphoreInfos_" type="const vk::SemaphoreSubmitInfo *" default_raw="{}" />
      <argument name="commandBufferInfoCount_" type="uint32_t" default_raw="{}" />
      <argument name="pCommandBufferInfos_" type="const vk::CommandBufferSubmitInfo *" default_raw="{}" />
      <argument name="signalSemaphoreInfoCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSignalSemaphoreInfos_" type="const vk::SemaphoreSubmitInfo *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubmitInfo2">
      <argument name="rhs" type="const SubmitInfo2 &amp;" />
    </constructor>
    <constructor name="SubmitInfo2">
      <argument name="rhs" type="const VkSubmitInfo2 &amp;" />
    </constructor>
    <constructor name="SubmitInfo2">
      <argument name="flags_" type="vk::SubmitFlags" />
      <argument name="waitSemaphoreInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SemaphoreSubmitInfo&gt; &amp;" />
      <argument name="commandBufferInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::CommandBufferSubmitInfo&gt; &amp;" default_raw="{}" />
      <argument name="signalSemaphoreInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SemaphoreSubmitInfo&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubmitInfo2 &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubmitInfo2 &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::SubmitFlags" />
    </method>
    <method name="setWaitSemaphoreInfoCount">
      <argument name="waitSemaphoreInfoCount_" type="uint32_t" />
    </method>
    <method name="setPWaitSemaphoreInfos">
      <argument name="pWaitSemaphoreInfos_" type="const vk::SemaphoreSubmitInfo *" />
    </method>
    <method name="setWaitSemaphoreInfos">
      <argument name="waitSemaphoreInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SemaphoreSubmitInfo&gt; &amp;" />
    </method>
    <method name="setCommandBufferInfoCount">
      <argument name="commandBufferInfoCount_" type="uint32_t" />
    </method>
    <method name="setPCommandBufferInfos">
      <argument name="pCommandBufferInfos_" type="const vk::CommandBufferSubmitInfo *" />
    </method>
    <method name="setCommandBufferInfos">
      <argument name="commandBufferInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::CommandBufferSubmitInfo&gt; &amp;" />
    </method>
    <method name="setSignalSemaphoreInfoCount">
      <argument name="signalSemaphoreInfoCount_" type="uint32_t" />
    </method>
    <method name="setPSignalSemaphoreInfos">
      <argument name="pSignalSemaphoreInfos_" type="const vk::SemaphoreSubmitInfo *" />
    </method>
    <method name="setSignalSemaphoreInfos">
      <argument name="signalSemaphoreInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SemaphoreSubmitInfo&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSubmitInfo2 &amp;" />
    <conversion_function name="operator VkSubmitInfo2 &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubmitInfo2 &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubmitInfo2 &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="waitSemaphoreInfoCount" />
    <field name="pWaitSemaphoreInfos" />
    <field name="commandBufferInfoCount" />
    <field name="pCommandBufferInfos" />
    <field name="signalSemaphoreInfoCount" />
    <field name="pSignalSemaphoreInfos" />
  </struct>
  <type_alias name="SubmitInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SubmitInfo2" />
  <struct name="WriteDescriptorSetInlineUniformBlock" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="WriteDescriptorSetInlineUniformBlock">
      <argument name="dataSize_" type="uint32_t" default_raw="{}" />
      <argument name="pData_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="WriteDescriptorSetInlineUniformBlock">
      <argument name="rhs" type="const WriteDescriptorSetInlineUniformBlock &amp;" />
    </constructor>
    <constructor name="WriteDescriptorSetInlineUniformBlock">
      <argument name="rhs" type="const VkWriteDescriptorSetInlineUniformBlock &amp;" />
    </constructor>
    <method name="WriteDescriptorSetInlineUniformBlock" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const WriteDescriptorSetInlineUniformBlock &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkWriteDescriptorSetInlineUniformBlock &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDataSize">
      <argument name="dataSize_" type="uint32_t" />
    </method>
    <method name="setPData">
      <argument name="pData_" type="const void *" />
    </method>
    <method name="setData" template_raw="template &lt;typename T&gt;" />
    <conversion_function name="operator const VkWriteDescriptorSetInlineUniformBlock &amp;" />
    <conversion_function name="operator VkWriteDescriptorSetInlineUniformBlock &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const WriteDescriptorSetInlineUniformBlock &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const WriteDescriptorSetInlineUniformBlock &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="dataSize" />
    <field name="pData" />
  </struct>
  <type_alias name="WriteDescriptorSetInlineUniformBlockEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="WriteDescriptorSetInlineUniformBlock" />
  <struct name="SurfaceCapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SurfaceCapabilitiesKHR">
      <argument name="minImageCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxImageCount_" type="uint32_t" default_raw="{}" />
      <argument name="currentExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="minImageExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxImageExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxImageArrayLayers_" type="uint32_t" default_raw="{}" />
      <argument name="supportedTransforms_" type="vk::SurfaceTransformFlagsKHR" default_raw="{}" />
      <argument name="currentTransform_" type="vk::SurfaceTransformFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::SurfaceTransformFlagBitsKHR::eIdentity" />
      <argument name="supportedCompositeAlpha_" type="vk::CompositeAlphaFlagsKHR" default_raw="{}" />
      <argument name="supportedUsageFlags_" type="vk::ImageUsageFlags" default_raw="{}" />
    </constructor>
    <constructor name="SurfaceCapabilitiesKHR">
      <argument name="rhs" type="const SurfaceCapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="SurfaceCapabilitiesKHR">
      <argument name="rhs" type="const VkSurfaceCapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SurfaceCapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSurfaceCapabilitiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkSurfaceCapabilitiesKHR &amp;" />
    <conversion_function name="operator VkSurfaceCapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SurfaceCapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SurfaceCapabilitiesKHR &amp;" />
    </method>
    <field name="minImageCount" />
    <field name="maxImageCount" />
    <field name="currentExtent" />
    <field name="minImageExtent" />
    <field name="maxImageExtent" />
    <field name="maxImageArrayLayers" />
    <field name="supportedTransforms" />
    <field name="currentTransform" />
    <field name="supportedCompositeAlpha" />
    <field name="supportedUsageFlags" />
  </struct>
  <struct name="SurfaceFormatKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SurfaceFormatKHR">
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="colorSpace_" type="vk::ColorSpaceKHR" default_raw="VULKAN_HPP_NAMESPACE::ColorSpaceKHR::eSrgbNonlinear" />
    </constructor>
    <constructor name="SurfaceFormatKHR">
      <argument name="rhs" type="const SurfaceFormatKHR &amp;" />
    </constructor>
    <constructor name="SurfaceFormatKHR">
      <argument name="rhs" type="const VkSurfaceFormatKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SurfaceFormatKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSurfaceFormatKHR &amp;" />
    </method>
    <conversion_function name="operator const VkSurfaceFormatKHR &amp;" />
    <conversion_function name="operator VkSurfaceFormatKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SurfaceFormatKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SurfaceFormatKHR &amp;" />
    </method>
    <field name="format" />
    <field name="colorSpace" />
  </struct>
  <struct name="AcquireNextImageInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AcquireNextImageInfoKHR">
      <argument name="swapchain_" type="vk::SwapchainKHR" default_raw="{}" />
      <argument name="timeout_" type="uint64_t" default_raw="{}" />
      <argument name="semaphore_" type="vk::Semaphore" default_raw="{}" />
      <argument name="fence_" type="vk::Fence" default_raw="{}" />
      <argument name="deviceMask_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AcquireNextImageInfoKHR">
      <argument name="rhs" type="const AcquireNextImageInfoKHR &amp;" />
    </constructor>
    <constructor name="AcquireNextImageInfoKHR">
      <argument name="rhs" type="const VkAcquireNextImageInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AcquireNextImageInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAcquireNextImageInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSwapchain">
      <argument name="swapchain_" type="vk::SwapchainKHR" />
    </method>
    <method name="setTimeout">
      <argument name="timeout_" type="uint64_t" />
    </method>
    <method name="setSemaphore">
      <argument name="semaphore_" type="vk::Semaphore" />
    </method>
    <method name="setFence">
      <argument name="fence_" type="vk::Fence" />
    </method>
    <method name="setDeviceMask">
      <argument name="deviceMask_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkAcquireNextImageInfoKHR &amp;" />
    <conversion_function name="operator VkAcquireNextImageInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AcquireNextImageInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AcquireNextImageInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="swapchain" />
    <field name="timeout" />
    <field name="semaphore" />
    <field name="fence" />
    <field name="deviceMask" />
  </struct>
  <struct name="BindImageMemorySwapchainInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindImageMemorySwapchainInfoKHR">
      <argument name="swapchain_" type="vk::SwapchainKHR" default_raw="{}" />
      <argument name="imageIndex_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindImageMemorySwapchainInfoKHR">
      <argument name="rhs" type="const BindImageMemorySwapchainInfoKHR &amp;" />
    </constructor>
    <constructor name="BindImageMemorySwapchainInfoKHR">
      <argument name="rhs" type="const VkBindImageMemorySwapchainInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindImageMemorySwapchainInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindImageMemorySwapchainInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSwapchain">
      <argument name="swapchain_" type="vk::SwapchainKHR" />
    </method>
    <method name="setImageIndex">
      <argument name="imageIndex_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkBindImageMemorySwapchainInfoKHR &amp;" />
    <conversion_function name="operator VkBindImageMemorySwapchainInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindImageMemorySwapchainInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindImageMemorySwapchainInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="swapchain" />
    <field name="imageIndex" />
  </struct>
  <struct name="DeviceGroupPresentCapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceGroupPresentCapabilitiesKHR">
      <argument name="presentMask_" type="const std::array&lt;uint32_t, 32U&gt; &amp;" default_raw="{}" />
      <argument name="modes_" type="vk::DeviceGroupPresentModeFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceGroupPresentCapabilitiesKHR">
      <argument name="rhs" type="const DeviceGroupPresentCapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="DeviceGroupPresentCapabilitiesKHR">
      <argument name="rhs" type="const VkDeviceGroupPresentCapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceGroupPresentCapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceGroupPresentCapabilitiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkDeviceGroupPresentCapabilitiesKHR &amp;" />
    <conversion_function name="operator VkDeviceGroupPresentCapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceGroupPresentCapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceGroupPresentCapabilitiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentMask" />
    <field name="modes" />
  </struct>
  <struct name="DeviceGroupPresentInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceGroupPresentInfoKHR">
      <argument name="swapchainCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDeviceMasks_" type="const uint32_t *" default_raw="{}" />
      <argument name="mode_" type="vk::DeviceGroupPresentModeFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::DeviceGroupPresentModeFlagBitsKHR::eLocal" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceGroupPresentInfoKHR">
      <argument name="rhs" type="const DeviceGroupPresentInfoKHR &amp;" />
    </constructor>
    <constructor name="DeviceGroupPresentInfoKHR">
      <argument name="rhs" type="const VkDeviceGroupPresentInfoKHR &amp;" />
    </constructor>
    <constructor name="DeviceGroupPresentInfoKHR">
      <argument name="deviceMasks_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="mode_" type="vk::DeviceGroupPresentModeFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::DeviceGroupPresentModeFlagBitsKHR::eLocal" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceGroupPresentInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceGroupPresentInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSwapchainCount">
      <argument name="swapchainCount_" type="uint32_t" />
    </method>
    <method name="setPDeviceMasks">
      <argument name="pDeviceMasks_" type="const uint32_t *" />
    </method>
    <method name="setDeviceMasks">
      <argument name="deviceMasks_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <method name="setMode">
      <argument name="mode_" type="vk::DeviceGroupPresentModeFlagBitsKHR" />
    </method>
    <conversion_function name="operator const VkDeviceGroupPresentInfoKHR &amp;" />
    <conversion_function name="operator VkDeviceGroupPresentInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceGroupPresentInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceGroupPresentInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="swapchainCount" />
    <field name="pDeviceMasks" />
    <field name="mode" />
  </struct>
  <struct name="DeviceGroupSwapchainCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceGroupSwapchainCreateInfoKHR">
      <argument name="modes_" type="vk::DeviceGroupPresentModeFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceGroupSwapchainCreateInfoKHR">
      <argument name="rhs" type="const DeviceGroupSwapchainCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="DeviceGroupSwapchainCreateInfoKHR">
      <argument name="rhs" type="const VkDeviceGroupSwapchainCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceGroupSwapchainCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceGroupSwapchainCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setModes">
      <argument name="modes_" type="vk::DeviceGroupPresentModeFlagsKHR" />
    </method>
    <conversion_function name="operator const VkDeviceGroupSwapchainCreateInfoKHR &amp;" />
    <conversion_function name="operator VkDeviceGroupSwapchainCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceGroupSwapchainCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceGroupSwapchainCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="modes" />
  </struct>
  <struct name="ImageSwapchainCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageSwapchainCreateInfoKHR">
      <argument name="swapchain_" type="vk::SwapchainKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageSwapchainCreateInfoKHR">
      <argument name="rhs" type="const ImageSwapchainCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="ImageSwapchainCreateInfoKHR">
      <argument name="rhs" type="const VkImageSwapchainCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageSwapchainCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageSwapchainCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSwapchain">
      <argument name="swapchain_" type="vk::SwapchainKHR" />
    </method>
    <conversion_function name="operator const VkImageSwapchainCreateInfoKHR &amp;" />
    <conversion_function name="operator VkImageSwapchainCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageSwapchainCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageSwapchainCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="swapchain" />
  </struct>
  <struct name="PresentInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PresentInfoKHR">
      <argument name="waitSemaphoreCount_" type="uint32_t" default_raw="{}" />
      <argument name="pWaitSemaphores_" type="const vk::Semaphore *" default_raw="{}" />
      <argument name="swapchainCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSwapchains_" type="const vk::SwapchainKHR *" default_raw="{}" />
      <argument name="pImageIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="pResults_" type="vk::Result *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PresentInfoKHR">
      <argument name="rhs" type="const PresentInfoKHR &amp;" />
    </constructor>
    <constructor name="PresentInfoKHR">
      <argument name="rhs" type="const VkPresentInfoKHR &amp;" />
    </constructor>
    <constructor name="PresentInfoKHR">
      <argument name="waitSemaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" />
      <argument name="swapchains_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SwapchainKHR&gt; &amp;" default_raw="{}" />
      <argument name="imageIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" default_raw="{}" />
      <argument name="results_" type="const vk::ArrayProxyNoTemporaries&lt;vk::Result&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PresentInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPresentInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setWaitSemaphoreCount">
      <argument name="waitSemaphoreCount_" type="uint32_t" />
    </method>
    <method name="setPWaitSemaphores">
      <argument name="pWaitSemaphores_" type="const vk::Semaphore *" />
    </method>
    <method name="setWaitSemaphores">
      <argument name="waitSemaphores_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Semaphore&gt; &amp;" />
    </method>
    <method name="setSwapchainCount">
      <argument name="swapchainCount_" type="uint32_t" />
    </method>
    <method name="setPSwapchains">
      <argument name="pSwapchains_" type="const vk::SwapchainKHR *" />
    </method>
    <method name="setSwapchains">
      <argument name="swapchains_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SwapchainKHR&gt; &amp;" />
    </method>
    <method name="setPImageIndices">
      <argument name="pImageIndices_" type="const uint32_t *" />
    </method>
    <method name="setImageIndices">
      <argument name="imageIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <method name="setPResults">
      <argument name="pResults_" type="vk::Result *" />
    </method>
    <method name="setResults">
      <argument name="results_" type="const vk::ArrayProxyNoTemporaries&lt;vk::Result&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPresentInfoKHR &amp;" />
    <conversion_function name="operator VkPresentInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PresentInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PresentInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="waitSemaphoreCount" />
    <field name="pWaitSemaphores" />
    <field name="swapchainCount" />
    <field name="pSwapchains" />
    <field name="pImageIndices" />
    <field name="pResults" />
  </struct>
  <struct name="SwapchainCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SwapchainCreateInfoKHR">
      <argument name="flags_" type="vk::SwapchainCreateFlagsKHR" default_raw="{}" />
      <argument name="surface_" type="vk::SurfaceKHR" default_raw="{}" />
      <argument name="minImageCount_" type="uint32_t" default_raw="{}" />
      <argument name="imageFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="imageColorSpace_" type="vk::ColorSpaceKHR" default_raw="VULKAN_HPP_NAMESPACE::ColorSpaceKHR::eSrgbNonlinear" />
      <argument name="imageExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="imageArrayLayers_" type="uint32_t" default_raw="{}" />
      <argument name="imageUsage_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="imageSharingMode_" type="vk::SharingMode" default_raw="VULKAN_HPP_NAMESPACE::SharingMode::eExclusive" />
      <argument name="queueFamilyIndexCount_" type="uint32_t" default_raw="{}" />
      <argument name="pQueueFamilyIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="preTransform_" type="vk::SurfaceTransformFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::SurfaceTransformFlagBitsKHR::eIdentity" />
      <argument name="compositeAlpha_" type="vk::CompositeAlphaFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::CompositeAlphaFlagBitsKHR::eOpaque" />
      <argument name="presentMode_" type="vk::PresentModeKHR" default_raw="VULKAN_HPP_NAMESPACE::PresentModeKHR::eImmediate" />
      <argument name="clipped_" type="vk::Bool32" default_raw="{}" />
      <argument name="oldSwapchain_" type="vk::SwapchainKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SwapchainCreateInfoKHR">
      <argument name="rhs" type="const SwapchainCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="SwapchainCreateInfoKHR">
      <argument name="rhs" type="const VkSwapchainCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="SwapchainCreateInfoKHR">
      <argument name="flags_" type="vk::SwapchainCreateFlagsKHR" />
      <argument name="surface_" type="vk::SurfaceKHR" />
      <argument name="minImageCount_" type="uint32_t" />
      <argument name="imageFormat_" type="vk::Format" />
      <argument name="imageColorSpace_" type="vk::ColorSpaceKHR" />
      <argument name="imageExtent_" type="vk::Extent2D" />
      <argument name="imageArrayLayers_" type="uint32_t" />
      <argument name="imageUsage_" type="vk::ImageUsageFlags" />
      <argument name="imageSharingMode_" type="vk::SharingMode" />
      <argument name="queueFamilyIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="preTransform_" type="vk::SurfaceTransformFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::SurfaceTransformFlagBitsKHR::eIdentity" />
      <argument name="compositeAlpha_" type="vk::CompositeAlphaFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::CompositeAlphaFlagBitsKHR::eOpaque" />
      <argument name="presentMode_" type="vk::PresentModeKHR" default_raw="VULKAN_HPP_NAMESPACE::PresentModeKHR::eImmediate" />
      <argument name="clipped_" type="vk::Bool32" default_raw="{}" />
      <argument name="oldSwapchain_" type="vk::SwapchainKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SwapchainCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSwapchainCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::SwapchainCreateFlagsKHR" />
    </method>
    <method name="setSurface">
      <argument name="surface_" type="vk::SurfaceKHR" />
    </method>
    <method name="setMinImageCount">
      <argument name="minImageCount_" type="uint32_t" />
    </method>
    <method name="setImageFormat">
      <argument name="imageFormat_" type="vk::Format" />
    </method>
    <method name="setImageColorSpace">
      <argument name="imageColorSpace_" type="vk::ColorSpaceKHR" />
    </method>
    <method name="setImageExtent">
      <argument name="imageExtent_" type="const vk::Extent2D &amp;" />
    </method>
    <method name="setImageArrayLayers">
      <argument name="imageArrayLayers_" type="uint32_t" />
    </method>
    <method name="setImageUsage">
      <argument name="imageUsage_" type="vk::ImageUsageFlags" />
    </method>
    <method name="setImageSharingMode">
      <argument name="imageSharingMode_" type="vk::SharingMode" />
    </method>
    <method name="setQueueFamilyIndexCount">
      <argument name="queueFamilyIndexCount_" type="uint32_t" />
    </method>
    <method name="setPQueueFamilyIndices">
      <argument name="pQueueFamilyIndices_" type="const uint32_t *" />
    </method>
    <method name="setQueueFamilyIndices">
      <argument name="queueFamilyIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <method name="setPreTransform">
      <argument name="preTransform_" type="vk::SurfaceTransformFlagBitsKHR" />
    </method>
    <method name="setCompositeAlpha">
      <argument name="compositeAlpha_" type="vk::CompositeAlphaFlagBitsKHR" />
    </method>
    <method name="setPresentMode">
      <argument name="presentMode_" type="vk::PresentModeKHR" />
    </method>
    <method name="setClipped">
      <argument name="clipped_" type="vk::Bool32" />
    </method>
    <method name="setOldSwapchain">
      <argument name="oldSwapchain_" type="vk::SwapchainKHR" />
    </method>
    <conversion_function name="operator const VkSwapchainCreateInfoKHR &amp;" />
    <conversion_function name="operator VkSwapchainCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SwapchainCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SwapchainCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="surface" />
    <field name="minImageCount" />
    <field name="imageFormat" />
    <field name="imageColorSpace" />
    <field name="imageExtent" />
    <field name="imageArrayLayers" />
    <field name="imageUsage" />
    <field name="imageSharingMode" />
    <field name="queueFamilyIndexCount" />
    <field name="pQueueFamilyIndices" />
    <field name="preTransform" />
    <field name="compositeAlpha" />
    <field name="presentMode" />
    <field name="clipped" />
    <field name="oldSwapchain" />
  </struct>
  <struct name="DisplayModeCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayModeCreateInfoKHR">
      <argument name="flags_" type="vk::DisplayModeCreateFlagsKHR" default_raw="{}" />
      <argument name="parameters_" type="vk::DisplayModeParametersKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DisplayModeCreateInfoKHR">
      <argument name="rhs" type="const DisplayModeCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="DisplayModeCreateInfoKHR">
      <argument name="rhs" type="const VkDisplayModeCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayModeCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayModeCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DisplayModeCreateFlagsKHR" />
    </method>
    <method name="setParameters">
      <argument name="parameters_" type="const vk::DisplayModeParametersKHR &amp;" />
    </method>
    <conversion_function name="operator const VkDisplayModeCreateInfoKHR &amp;" />
    <conversion_function name="operator VkDisplayModeCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayModeCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayModeCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="parameters" />
  </struct>
  <struct name="DisplayModeParametersKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayModeParametersKHR">
      <argument name="visibleRegion_" type="vk::Extent2D" default_raw="{}" />
      <argument name="refreshRate_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="DisplayModeParametersKHR">
      <argument name="rhs" type="const DisplayModeParametersKHR &amp;" />
    </constructor>
    <constructor name="DisplayModeParametersKHR">
      <argument name="rhs" type="const VkDisplayModeParametersKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayModeParametersKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayModeParametersKHR &amp;" />
    </method>
    <method name="setVisibleRegion">
      <argument name="visibleRegion_" type="const vk::Extent2D &amp;" />
    </method>
    <method name="setRefreshRate">
      <argument name="refreshRate_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDisplayModeParametersKHR &amp;" />
    <conversion_function name="operator VkDisplayModeParametersKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayModeParametersKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayModeParametersKHR &amp;" />
    </method>
    <field name="visibleRegion" />
    <field name="refreshRate" />
  </struct>
  <struct name="DisplayModePropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayModePropertiesKHR">
      <argument name="displayMode_" type="vk::DisplayModeKHR" default_raw="{}" />
      <argument name="parameters_" type="vk::DisplayModeParametersKHR" default_raw="{}" />
    </constructor>
    <constructor name="DisplayModePropertiesKHR">
      <argument name="rhs" type="const DisplayModePropertiesKHR &amp;" />
    </constructor>
    <constructor name="DisplayModePropertiesKHR">
      <argument name="rhs" type="const VkDisplayModePropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayModePropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayModePropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkDisplayModePropertiesKHR &amp;" />
    <conversion_function name="operator VkDisplayModePropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayModePropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayModePropertiesKHR &amp;" />
    </method>
    <field name="displayMode" />
    <field name="parameters" />
  </struct>
  <struct name="DisplayPlaneCapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayPlaneCapabilitiesKHR">
      <argument name="supportedAlpha_" type="vk::DisplayPlaneAlphaFlagsKHR" default_raw="{}" />
      <argument name="minSrcPosition_" type="vk::Offset2D" default_raw="{}" />
      <argument name="maxSrcPosition_" type="vk::Offset2D" default_raw="{}" />
      <argument name="minSrcExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxSrcExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="minDstPosition_" type="vk::Offset2D" default_raw="{}" />
      <argument name="maxDstPosition_" type="vk::Offset2D" default_raw="{}" />
      <argument name="minDstExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxDstExtent_" type="vk::Extent2D" default_raw="{}" />
    </constructor>
    <constructor name="DisplayPlaneCapabilitiesKHR">
      <argument name="rhs" type="const DisplayPlaneCapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="DisplayPlaneCapabilitiesKHR">
      <argument name="rhs" type="const VkDisplayPlaneCapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayPlaneCapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayPlaneCapabilitiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkDisplayPlaneCapabilitiesKHR &amp;" />
    <conversion_function name="operator VkDisplayPlaneCapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayPlaneCapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayPlaneCapabilitiesKHR &amp;" />
    </method>
    <field name="supportedAlpha" />
    <field name="minSrcPosition" />
    <field name="maxSrcPosition" />
    <field name="minSrcExtent" />
    <field name="maxSrcExtent" />
    <field name="minDstPosition" />
    <field name="maxDstPosition" />
    <field name="minDstExtent" />
    <field name="maxDstExtent" />
  </struct>
  <struct name="DisplayPlanePropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayPlanePropertiesKHR">
      <argument name="currentDisplay_" type="vk::DisplayKHR" default_raw="{}" />
      <argument name="currentStackIndex_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="DisplayPlanePropertiesKHR">
      <argument name="rhs" type="const DisplayPlanePropertiesKHR &amp;" />
    </constructor>
    <constructor name="DisplayPlanePropertiesKHR">
      <argument name="rhs" type="const VkDisplayPlanePropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayPlanePropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayPlanePropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkDisplayPlanePropertiesKHR &amp;" />
    <conversion_function name="operator VkDisplayPlanePropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayPlanePropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayPlanePropertiesKHR &amp;" />
    </method>
    <field name="currentDisplay" />
    <field name="currentStackIndex" />
  </struct>
  <struct name="DisplayPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayPropertiesKHR">
      <argument name="display_" type="vk::DisplayKHR" default_raw="{}" />
      <argument name="displayName_" type="const char *" default_raw="{}" />
      <argument name="physicalDimensions_" type="vk::Extent2D" default_raw="{}" />
      <argument name="physicalResolution_" type="vk::Extent2D" default_raw="{}" />
      <argument name="supportedTransforms_" type="vk::SurfaceTransformFlagsKHR" default_raw="{}" />
      <argument name="planeReorderPossible_" type="vk::Bool32" default_raw="{}" />
      <argument name="persistentContent_" type="vk::Bool32" default_raw="{}" />
    </constructor>
    <constructor name="DisplayPropertiesKHR">
      <argument name="rhs" type="const DisplayPropertiesKHR &amp;" />
    </constructor>
    <constructor name="DisplayPropertiesKHR">
      <argument name="rhs" type="const VkDisplayPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkDisplayPropertiesKHR &amp;" />
    <conversion_function name="operator VkDisplayPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayPropertiesKHR &amp;" />
    </method>
    <field name="display" />
    <field name="displayName" />
    <field name="physicalDimensions" />
    <field name="physicalResolution" />
    <field name="supportedTransforms" />
    <field name="planeReorderPossible" />
    <field name="persistentContent" />
  </struct>
  <struct name="DisplaySurfaceCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplaySurfaceCreateInfoKHR">
      <argument name="flags_" type="vk::DisplaySurfaceCreateFlagsKHR" default_raw="{}" />
      <argument name="displayMode_" type="vk::DisplayModeKHR" default_raw="{}" />
      <argument name="planeIndex_" type="uint32_t" default_raw="{}" />
      <argument name="planeStackIndex_" type="uint32_t" default_raw="{}" />
      <argument name="transform_" type="vk::SurfaceTransformFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::SurfaceTransformFlagBitsKHR::eIdentity" />
      <argument name="globalAlpha_" type="float" default_raw="{}" />
      <argument name="alphaMode_" type="vk::DisplayPlaneAlphaFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::DisplayPlaneAlphaFlagBitsKHR::eOpaque" />
      <argument name="imageExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DisplaySurfaceCreateInfoKHR">
      <argument name="rhs" type="const DisplaySurfaceCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="DisplaySurfaceCreateInfoKHR">
      <argument name="rhs" type="const VkDisplaySurfaceCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplaySurfaceCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplaySurfaceCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DisplaySurfaceCreateFlagsKHR" />
    </method>
    <method name="setDisplayMode">
      <argument name="displayMode_" type="vk::DisplayModeKHR" />
    </method>
    <method name="setPlaneIndex">
      <argument name="planeIndex_" type="uint32_t" />
    </method>
    <method name="setPlaneStackIndex">
      <argument name="planeStackIndex_" type="uint32_t" />
    </method>
    <method name="setTransform">
      <argument name="transform_" type="vk::SurfaceTransformFlagBitsKHR" />
    </method>
    <method name="setGlobalAlpha">
      <argument name="globalAlpha_" type="float" />
    </method>
    <method name="setAlphaMode">
      <argument name="alphaMode_" type="vk::DisplayPlaneAlphaFlagBitsKHR" />
    </method>
    <method name="setImageExtent">
      <argument name="imageExtent_" type="const vk::Extent2D &amp;" />
    </method>
    <conversion_function name="operator const VkDisplaySurfaceCreateInfoKHR &amp;" />
    <conversion_function name="operator VkDisplaySurfaceCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplaySurfaceCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplaySurfaceCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="displayMode" />
    <field name="planeIndex" />
    <field name="planeStackIndex" />
    <field name="transform" />
    <field name="globalAlpha" />
    <field name="alphaMode" />
    <field name="imageExtent" />
  </struct>
  <struct name="DisplayPresentInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayPresentInfoKHR">
      <argument name="srcRect_" type="vk::Rect2D" default_raw="{}" />
      <argument name="dstRect_" type="vk::Rect2D" default_raw="{}" />
      <argument name="persistent_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DisplayPresentInfoKHR">
      <argument name="rhs" type="const DisplayPresentInfoKHR &amp;" />
    </constructor>
    <constructor name="DisplayPresentInfoKHR">
      <argument name="rhs" type="const VkDisplayPresentInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayPresentInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayPresentInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcRect">
      <argument name="srcRect_" type="const vk::Rect2D &amp;" />
    </method>
    <method name="setDstRect">
      <argument name="dstRect_" type="const vk::Rect2D &amp;" />
    </method>
    <method name="setPersistent">
      <argument name="persistent_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkDisplayPresentInfoKHR &amp;" />
    <conversion_function name="operator VkDisplayPresentInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayPresentInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayPresentInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcRect" />
    <field name="dstRect" />
    <field name="persistent" />
  </struct>
  <struct name="DebugReportCallbackCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DebugReportCallbackCreateInfoEXT">
      <argument name="flags_" type="vk::DebugReportFlagsEXT" default_raw="{}" />
      <argument name="pfnCallback_" type="PFN_vkDebugReportCallbackEXT" default_raw="{}" />
      <argument name="pUserData_" type="void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DebugReportCallbackCreateInfoEXT">
      <argument name="rhs" type="const DebugReportCallbackCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="DebugReportCallbackCreateInfoEXT">
      <argument name="rhs" type="const VkDebugReportCallbackCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DebugReportCallbackCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDebugReportCallbackCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DebugReportFlagsEXT" />
    </method>
    <method name="setPfnCallback">
      <argument name="pfnCallback_" type="PFN_vkDebugReportCallbackEXT" />
    </method>
    <method name="setPUserData">
      <argument name="pUserData_" type="void *" />
    </method>
    <conversion_function name="operator const VkDebugReportCallbackCreateInfoEXT &amp;" />
    <conversion_function name="operator VkDebugReportCallbackCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DebugReportCallbackCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DebugReportCallbackCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="pfnCallback" />
    <field name="pUserData" />
  </struct>
  <struct name="PipelineRasterizationStateRasterizationOrderAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineRasterizationStateRasterizationOrderAMD">
      <argument name="rasterizationOrder_" type="vk::RasterizationOrderAMD" default_raw="VULKAN_HPP_NAMESPACE::RasterizationOrderAMD::eStrict" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineRasterizationStateRasterizationOrderAMD">
      <argument name="rhs" type="const PipelineRasterizationStateRasterizationOrderAMD &amp;" />
    </constructor>
    <constructor name="PipelineRasterizationStateRasterizationOrderAMD">
      <argument name="rhs" type="const VkPipelineRasterizationStateRasterizationOrderAMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineRasterizationStateRasterizationOrderAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineRasterizationStateRasterizationOrderAMD &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setRasterizationOrder">
      <argument name="rasterizationOrder_" type="vk::RasterizationOrderAMD" />
    </method>
    <conversion_function name="operator const VkPipelineRasterizationStateRasterizationOrderAMD &amp;" />
    <conversion_function name="operator VkPipelineRasterizationStateRasterizationOrderAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineRasterizationStateRasterizationOrderAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineRasterizationStateRasterizationOrderAMD &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="rasterizationOrder" />
  </struct>
  <struct name="DebugMarkerMarkerInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DebugMarkerMarkerInfoEXT">
      <argument name="pMarkerName_" type="const char *" default_raw="{}" />
      <argument name="color_" type="const std::array&lt;float, 4&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DebugMarkerMarkerInfoEXT">
      <argument name="rhs" type="const DebugMarkerMarkerInfoEXT &amp;" />
    </constructor>
    <constructor name="DebugMarkerMarkerInfoEXT">
      <argument name="rhs" type="const VkDebugMarkerMarkerInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DebugMarkerMarkerInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDebugMarkerMarkerInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPMarkerName">
      <argument name="pMarkerName_" type="const char *" />
    </method>
    <method name="setColor">
      <argument name="color_" type="std::array&lt;float, 4&gt;" />
    </method>
    <conversion_function name="operator const VkDebugMarkerMarkerInfoEXT &amp;" />
    <conversion_function name="operator VkDebugMarkerMarkerInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DebugMarkerMarkerInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DebugMarkerMarkerInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pMarkerName" />
    <field name="color" />
  </struct>
  <struct name="DebugMarkerObjectNameInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DebugMarkerObjectNameInfoEXT">
      <argument name="objectType_" type="vk::DebugReportObjectTypeEXT" default_raw="VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eUnknown" />
      <argument name="object_" type="uint64_t" default_raw="{}" />
      <argument name="pObjectName_" type="const char *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DebugMarkerObjectNameInfoEXT">
      <argument name="rhs" type="const DebugMarkerObjectNameInfoEXT &amp;" />
    </constructor>
    <constructor name="DebugMarkerObjectNameInfoEXT">
      <argument name="rhs" type="const VkDebugMarkerObjectNameInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DebugMarkerObjectNameInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDebugMarkerObjectNameInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setObjectType">
      <argument name="objectType_" type="vk::DebugReportObjectTypeEXT" />
    </method>
    <method name="setObject">
      <argument name="object_" type="uint64_t" />
    </method>
    <method name="setPObjectName">
      <argument name="pObjectName_" type="const char *" />
    </method>
    <conversion_function name="operator const VkDebugMarkerObjectNameInfoEXT &amp;" />
    <conversion_function name="operator VkDebugMarkerObjectNameInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DebugMarkerObjectNameInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DebugMarkerObjectNameInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="objectType" />
    <field name="object" />
    <field name="pObjectName" />
  </struct>
  <struct name="DebugMarkerObjectTagInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DebugMarkerObjectTagInfoEXT">
      <argument name="objectType_" type="vk::DebugReportObjectTypeEXT" default_raw="VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eUnknown" />
      <argument name="object_" type="uint64_t" default_raw="{}" />
      <argument name="tagName_" type="uint64_t" default_raw="{}" />
      <argument name="tagSize_" type="size_t" default_raw="{}" />
      <argument name="pTag_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DebugMarkerObjectTagInfoEXT">
      <argument name="rhs" type="const DebugMarkerObjectTagInfoEXT &amp;" />
    </constructor>
    <constructor name="DebugMarkerObjectTagInfoEXT">
      <argument name="rhs" type="const VkDebugMarkerObjectTagInfoEXT &amp;" />
    </constructor>
    <method name="DebugMarkerObjectTagInfoEXT" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const DebugMarkerObjectTagInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDebugMarkerObjectTagInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setObjectType">
      <argument name="objectType_" type="vk::DebugReportObjectTypeEXT" />
    </method>
    <method name="setObject">
      <argument name="object_" type="uint64_t" />
    </method>
    <method name="setTagName">
      <argument name="tagName_" type="uint64_t" />
    </method>
    <method name="setTagSize">
      <argument name="tagSize_" type="size_t" />
    </method>
    <method name="setPTag">
      <argument name="pTag_" type="const void *" />
    </method>
    <method name="setTag" template_raw="template &lt;typename T&gt;" />
    <conversion_function name="operator const VkDebugMarkerObjectTagInfoEXT &amp;" />
    <conversion_function name="operator VkDebugMarkerObjectTagInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DebugMarkerObjectTagInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DebugMarkerObjectTagInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="objectType" />
    <field name="object" />
    <field name="tagName" />
    <field name="tagSize" />
    <field name="pTag" />
  </struct>
  <struct name="BindVideoSessionMemoryInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindVideoSessionMemoryInfoKHR">
      <argument name="memoryBindIndex_" type="uint32_t" default_raw="{}" />
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="memoryOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="memorySize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindVideoSessionMemoryInfoKHR">
      <argument name="rhs" type="const BindVideoSessionMemoryInfoKHR &amp;" />
    </constructor>
    <constructor name="BindVideoSessionMemoryInfoKHR">
      <argument name="rhs" type="const VkBindVideoSessionMemoryInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindVideoSessionMemoryInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindVideoSessionMemoryInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMemoryBindIndex">
      <argument name="memoryBindIndex_" type="uint32_t" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <method name="setMemoryOffset">
      <argument name="memoryOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setMemorySize">
      <argument name="memorySize_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkBindVideoSessionMemoryInfoKHR &amp;" />
    <conversion_function name="operator VkBindVideoSessionMemoryInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindVideoSessionMemoryInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindVideoSessionMemoryInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memoryBindIndex" />
    <field name="memory" />
    <field name="memoryOffset" />
    <field name="memorySize" />
  </struct>
  <struct name="PhysicalDeviceVideoFormatInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVideoFormatInfoKHR">
      <argument name="imageUsage_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVideoFormatInfoKHR">
      <argument name="rhs" type="const PhysicalDeviceVideoFormatInfoKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVideoFormatInfoKHR">
      <argument name="rhs" type="const VkPhysicalDeviceVideoFormatInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVideoFormatInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVideoFormatInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImageUsage">
      <argument name="imageUsage_" type="vk::ImageUsageFlags" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVideoFormatInfoKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVideoFormatInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVideoFormatInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVideoFormatInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageUsage" />
  </struct>
  <struct name="QueueFamilyQueryResultStatusPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueueFamilyQueryResultStatusPropertiesKHR">
      <argument name="queryResultStatusSupport_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="QueueFamilyQueryResultStatusPropertiesKHR">
      <argument name="rhs" type="const QueueFamilyQueryResultStatusPropertiesKHR &amp;" />
    </constructor>
    <constructor name="QueueFamilyQueryResultStatusPropertiesKHR">
      <argument name="rhs" type="const VkQueueFamilyQueryResultStatusPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueueFamilyQueryResultStatusPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueueFamilyQueryResultStatusPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkQueueFamilyQueryResultStatusPropertiesKHR &amp;" />
    <conversion_function name="operator VkQueueFamilyQueryResultStatusPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueueFamilyQueryResultStatusPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueueFamilyQueryResultStatusPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="queryResultStatusSupport" />
  </struct>
  <struct name="QueueFamilyVideoPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueueFamilyVideoPropertiesKHR">
      <argument name="videoCodecOperations_" type="vk::VideoCodecOperationFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="QueueFamilyVideoPropertiesKHR">
      <argument name="rhs" type="const QueueFamilyVideoPropertiesKHR &amp;" />
    </constructor>
    <constructor name="QueueFamilyVideoPropertiesKHR">
      <argument name="rhs" type="const VkQueueFamilyVideoPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueueFamilyVideoPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueueFamilyVideoPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkQueueFamilyVideoPropertiesKHR &amp;" />
    <conversion_function name="operator VkQueueFamilyVideoPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueueFamilyVideoPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueueFamilyVideoPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="videoCodecOperations" />
  </struct>
  <struct name="VideoBeginCodingInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoBeginCodingInfoKHR">
      <argument name="flags_" type="vk::VideoBeginCodingFlagsKHR" default_raw="{}" />
      <argument name="videoSession_" type="vk::VideoSessionKHR" default_raw="{}" />
      <argument name="videoSessionParameters_" type="vk::VideoSessionParametersKHR" default_raw="{}" />
      <argument name="referenceSlotCount_" type="uint32_t" default_raw="{}" />
      <argument name="pReferenceSlots_" type="const vk::VideoReferenceSlotInfoKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoBeginCodingInfoKHR">
      <argument name="rhs" type="const VideoBeginCodingInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoBeginCodingInfoKHR">
      <argument name="rhs" type="const VkVideoBeginCodingInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoBeginCodingInfoKHR">
      <argument name="flags_" type="vk::VideoBeginCodingFlagsKHR" />
      <argument name="videoSession_" type="vk::VideoSessionKHR" />
      <argument name="videoSessionParameters_" type="vk::VideoSessionParametersKHR" />
      <argument name="referenceSlots_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoReferenceSlotInfoKHR&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoBeginCodingInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoBeginCodingInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::VideoBeginCodingFlagsKHR" />
    </method>
    <method name="setVideoSession">
      <argument name="videoSession_" type="vk::VideoSessionKHR" />
    </method>
    <method name="setVideoSessionParameters">
      <argument name="videoSessionParameters_" type="vk::VideoSessionParametersKHR" />
    </method>
    <method name="setReferenceSlotCount">
      <argument name="referenceSlotCount_" type="uint32_t" />
    </method>
    <method name="setPReferenceSlots">
      <argument name="pReferenceSlots_" type="const vk::VideoReferenceSlotInfoKHR *" />
    </method>
    <method name="setReferenceSlots">
      <argument name="referenceSlots_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoReferenceSlotInfoKHR&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkVideoBeginCodingInfoKHR &amp;" />
    <conversion_function name="operator VkVideoBeginCodingInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoBeginCodingInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoBeginCodingInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="videoSession" />
    <field name="videoSessionParameters" />
    <field name="referenceSlotCount" />
    <field name="pReferenceSlots" />
  </struct>
  <struct name="VideoCapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoCapabilitiesKHR">
      <argument name="flags_" type="vk::VideoCapabilityFlagsKHR" default_raw="{}" />
      <argument name="minBitstreamBufferOffsetAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="minBitstreamBufferSizeAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pictureAccessGranularity_" type="vk::Extent2D" default_raw="{}" />
      <argument name="minCodedExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxCodedExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxDpbSlots_" type="uint32_t" default_raw="{}" />
      <argument name="maxActiveReferencePictures_" type="uint32_t" default_raw="{}" />
      <argument name="stdHeaderVersion_" type="vk::ExtensionProperties" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoCapabilitiesKHR">
      <argument name="rhs" type="const VideoCapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="VideoCapabilitiesKHR">
      <argument name="rhs" type="const VkVideoCapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoCapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoCapabilitiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoCapabilitiesKHR &amp;" />
    <conversion_function name="operator VkVideoCapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoCapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoCapabilitiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="minBitstreamBufferOffsetAlignment" />
    <field name="minBitstreamBufferSizeAlignment" />
    <field name="pictureAccessGranularity" />
    <field name="minCodedExtent" />
    <field name="maxCodedExtent" />
    <field name="maxDpbSlots" />
    <field name="maxActiveReferencePictures" />
    <field name="stdHeaderVersion" />
  </struct>
  <struct name="VideoCodingControlInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoCodingControlInfoKHR">
      <argument name="flags_" type="vk::VideoCodingControlFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoCodingControlInfoKHR">
      <argument name="rhs" type="const VideoCodingControlInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoCodingControlInfoKHR">
      <argument name="rhs" type="const VkVideoCodingControlInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoCodingControlInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoCodingControlInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::VideoCodingControlFlagsKHR" />
    </method>
    <conversion_function name="operator const VkVideoCodingControlInfoKHR &amp;" />
    <conversion_function name="operator VkVideoCodingControlInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoCodingControlInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoCodingControlInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
  </struct>
  <struct name="VideoEndCodingInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEndCodingInfoKHR">
      <argument name="flags_" type="vk::VideoEndCodingFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEndCodingInfoKHR">
      <argument name="rhs" type="const VideoEndCodingInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEndCodingInfoKHR">
      <argument name="rhs" type="const VkVideoEndCodingInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEndCodingInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEndCodingInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::VideoEndCodingFlagsKHR" />
    </method>
    <conversion_function name="operator const VkVideoEndCodingInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEndCodingInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEndCodingInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEndCodingInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
  </struct>
  <struct name="VideoFormatPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoFormatPropertiesKHR">
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="componentMapping_" type="vk::ComponentMapping" default_raw="{}" />
      <argument name="imageCreateFlags_" type="vk::ImageCreateFlags" default_raw="{}" />
      <argument name="imageType_" type="vk::ImageType" default_raw="VULKAN_HPP_NAMESPACE::ImageType::e1D" />
      <argument name="imageTiling_" type="vk::ImageTiling" default_raw="VULKAN_HPP_NAMESPACE::ImageTiling::eOptimal" />
      <argument name="imageUsageFlags_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoFormatPropertiesKHR">
      <argument name="rhs" type="const VideoFormatPropertiesKHR &amp;" />
    </constructor>
    <constructor name="VideoFormatPropertiesKHR">
      <argument name="rhs" type="const VkVideoFormatPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoFormatPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoFormatPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoFormatPropertiesKHR &amp;" />
    <conversion_function name="operator VkVideoFormatPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoFormatPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoFormatPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="format" />
    <field name="componentMapping" />
    <field name="imageCreateFlags" />
    <field name="imageType" />
    <field name="imageTiling" />
    <field name="imageUsageFlags" />
  </struct>
  <struct name="VideoPictureResourceInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoPictureResourceInfoKHR">
      <argument name="codedOffset_" type="vk::Offset2D" default_raw="{}" />
      <argument name="codedExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="baseArrayLayer_" type="uint32_t" default_raw="{}" />
      <argument name="imageViewBinding_" type="vk::ImageView" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoPictureResourceInfoKHR">
      <argument name="rhs" type="const VideoPictureResourceInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoPictureResourceInfoKHR">
      <argument name="rhs" type="const VkVideoPictureResourceInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoPictureResourceInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoPictureResourceInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setCodedOffset">
      <argument name="codedOffset_" type="const vk::Offset2D &amp;" />
    </method>
    <method name="setCodedExtent">
      <argument name="codedExtent_" type="const vk::Extent2D &amp;" />
    </method>
    <method name="setBaseArrayLayer">
      <argument name="baseArrayLayer_" type="uint32_t" />
    </method>
    <method name="setImageViewBinding">
      <argument name="imageViewBinding_" type="vk::ImageView" />
    </method>
    <conversion_function name="operator const VkVideoPictureResourceInfoKHR &amp;" />
    <conversion_function name="operator VkVideoPictureResourceInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoPictureResourceInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoPictureResourceInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="codedOffset" />
    <field name="codedExtent" />
    <field name="baseArrayLayer" />
    <field name="imageViewBinding" />
  </struct>
  <struct name="VideoProfileInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoProfileInfoKHR">
      <argument name="videoCodecOperation_" type="vk::VideoCodecOperationFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::VideoCodecOperationFlagBitsKHR::eNone" />
      <argument name="chromaSubsampling_" type="vk::VideoChromaSubsamplingFlagsKHR" default_raw="{}" />
      <argument name="lumaBitDepth_" type="vk::VideoComponentBitDepthFlagsKHR" default_raw="{}" />
      <argument name="chromaBitDepth_" type="vk::VideoComponentBitDepthFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoProfileInfoKHR">
      <argument name="rhs" type="const VideoProfileInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoProfileInfoKHR">
      <argument name="rhs" type="const VkVideoProfileInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoProfileInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoProfileInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setVideoCodecOperation">
      <argument name="videoCodecOperation_" type="vk::VideoCodecOperationFlagBitsKHR" />
    </method>
    <method name="setChromaSubsampling">
      <argument name="chromaSubsampling_" type="vk::VideoChromaSubsamplingFlagsKHR" />
    </method>
    <method name="setLumaBitDepth">
      <argument name="lumaBitDepth_" type="vk::VideoComponentBitDepthFlagsKHR" />
    </method>
    <method name="setChromaBitDepth">
      <argument name="chromaBitDepth_" type="vk::VideoComponentBitDepthFlagsKHR" />
    </method>
    <conversion_function name="operator const VkVideoProfileInfoKHR &amp;" />
    <conversion_function name="operator VkVideoProfileInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoProfileInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoProfileInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="videoCodecOperation" />
    <field name="chromaSubsampling" />
    <field name="lumaBitDepth" />
    <field name="chromaBitDepth" />
  </struct>
  <struct name="VideoProfileListInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoProfileListInfoKHR">
      <argument name="profileCount_" type="uint32_t" default_raw="{}" />
      <argument name="pProfiles_" type="const vk::VideoProfileInfoKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoProfileListInfoKHR">
      <argument name="rhs" type="const VideoProfileListInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoProfileListInfoKHR">
      <argument name="rhs" type="const VkVideoProfileListInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoProfileListInfoKHR">
      <argument name="profiles_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoProfileInfoKHR&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoProfileListInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoProfileListInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setProfileCount">
      <argument name="profileCount_" type="uint32_t" />
    </method>
    <method name="setPProfiles">
      <argument name="pProfiles_" type="const vk::VideoProfileInfoKHR *" />
    </method>
    <method name="setProfiles">
      <argument name="profiles_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoProfileInfoKHR&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkVideoProfileListInfoKHR &amp;" />
    <conversion_function name="operator VkVideoProfileListInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoProfileListInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoProfileListInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="profileCount" />
    <field name="pProfiles" />
  </struct>
  <struct name="VideoReferenceSlotInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoReferenceSlotInfoKHR">
      <argument name="slotIndex_" type="int32_t" default_raw="{}" />
      <argument name="pPictureResource_" type="const vk::VideoPictureResourceInfoKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoReferenceSlotInfoKHR">
      <argument name="rhs" type="const VideoReferenceSlotInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoReferenceSlotInfoKHR">
      <argument name="rhs" type="const VkVideoReferenceSlotInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoReferenceSlotInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoReferenceSlotInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSlotIndex">
      <argument name="slotIndex_" type="int32_t" />
    </method>
    <method name="setPPictureResource">
      <argument name="pPictureResource_" type="const vk::VideoPictureResourceInfoKHR *" />
    </method>
    <conversion_function name="operator const VkVideoReferenceSlotInfoKHR &amp;" />
    <conversion_function name="operator VkVideoReferenceSlotInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoReferenceSlotInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoReferenceSlotInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="slotIndex" />
    <field name="pPictureResource" />
  </struct>
  <struct name="VideoSessionCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoSessionCreateInfoKHR">
      <argument name="queueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="flags_" type="vk::VideoSessionCreateFlagsKHR" default_raw="{}" />
      <argument name="pVideoProfile_" type="const vk::VideoProfileInfoKHR *" default_raw="{}" />
      <argument name="pictureFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="maxCodedExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="referencePictureFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="maxDpbSlots_" type="uint32_t" default_raw="{}" />
      <argument name="maxActiveReferencePictures_" type="uint32_t" default_raw="{}" />
      <argument name="pStdHeaderVersion_" type="const vk::ExtensionProperties *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoSessionCreateInfoKHR">
      <argument name="rhs" type="const VideoSessionCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoSessionCreateInfoKHR">
      <argument name="rhs" type="const VkVideoSessionCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoSessionCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoSessionCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setQueueFamilyIndex">
      <argument name="queueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::VideoSessionCreateFlagsKHR" />
    </method>
    <method name="setPVideoProfile">
      <argument name="pVideoProfile_" type="const vk::VideoProfileInfoKHR *" />
    </method>
    <method name="setPictureFormat">
      <argument name="pictureFormat_" type="vk::Format" />
    </method>
    <method name="setMaxCodedExtent">
      <argument name="maxCodedExtent_" type="const vk::Extent2D &amp;" />
    </method>
    <method name="setReferencePictureFormat">
      <argument name="referencePictureFormat_" type="vk::Format" />
    </method>
    <method name="setMaxDpbSlots">
      <argument name="maxDpbSlots_" type="uint32_t" />
    </method>
    <method name="setMaxActiveReferencePictures">
      <argument name="maxActiveReferencePictures_" type="uint32_t" />
    </method>
    <method name="setPStdHeaderVersion">
      <argument name="pStdHeaderVersion_" type="const vk::ExtensionProperties *" />
    </method>
    <conversion_function name="operator const VkVideoSessionCreateInfoKHR &amp;" />
    <conversion_function name="operator VkVideoSessionCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoSessionCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoSessionCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="queueFamilyIndex" />
    <field name="flags" />
    <field name="pVideoProfile" />
    <field name="pictureFormat" />
    <field name="maxCodedExtent" />
    <field name="referencePictureFormat" />
    <field name="maxDpbSlots" />
    <field name="maxActiveReferencePictures" />
    <field name="pStdHeaderVersion" />
  </struct>
  <struct name="VideoSessionMemoryRequirementsKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoSessionMemoryRequirementsKHR">
      <argument name="memoryBindIndex_" type="uint32_t" default_raw="{}" />
      <argument name="memoryRequirements_" type="vk::MemoryRequirements" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoSessionMemoryRequirementsKHR">
      <argument name="rhs" type="const VideoSessionMemoryRequirementsKHR &amp;" />
    </constructor>
    <constructor name="VideoSessionMemoryRequirementsKHR">
      <argument name="rhs" type="const VkVideoSessionMemoryRequirementsKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoSessionMemoryRequirementsKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoSessionMemoryRequirementsKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoSessionMemoryRequirementsKHR &amp;" />
    <conversion_function name="operator VkVideoSessionMemoryRequirementsKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoSessionMemoryRequirementsKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoSessionMemoryRequirementsKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memoryBindIndex" />
    <field name="memoryRequirements" />
  </struct>
  <struct name="VideoSessionParametersCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoSessionParametersCreateInfoKHR">
      <argument name="flags_" type="vk::VideoSessionParametersCreateFlagsKHR" default_raw="{}" />
      <argument name="videoSessionParametersTemplate_" type="vk::VideoSessionParametersKHR" default_raw="{}" />
      <argument name="videoSession_" type="vk::VideoSessionKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoSessionParametersCreateInfoKHR">
      <argument name="rhs" type="const VideoSessionParametersCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoSessionParametersCreateInfoKHR">
      <argument name="rhs" type="const VkVideoSessionParametersCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoSessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoSessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::VideoSessionParametersCreateFlagsKHR" />
    </method>
    <method name="setVideoSessionParametersTemplate">
      <argument name="videoSessionParametersTemplate_" type="vk::VideoSessionParametersKHR" />
    </method>
    <method name="setVideoSession">
      <argument name="videoSession_" type="vk::VideoSessionKHR" />
    </method>
    <conversion_function name="operator const VkVideoSessionParametersCreateInfoKHR &amp;" />
    <conversion_function name="operator VkVideoSessionParametersCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoSessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoSessionParametersCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="videoSessionParametersTemplate" />
    <field name="videoSession" />
  </struct>
  <struct name="VideoSessionParametersUpdateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoSessionParametersUpdateInfoKHR">
      <argument name="updateSequenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoSessionParametersUpdateInfoKHR">
      <argument name="rhs" type="const VideoSessionParametersUpdateInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoSessionParametersUpdateInfoKHR">
      <argument name="rhs" type="const VkVideoSessionParametersUpdateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoSessionParametersUpdateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoSessionParametersUpdateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setUpdateSequenceCount">
      <argument name="updateSequenceCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoSessionParametersUpdateInfoKHR &amp;" />
    <conversion_function name="operator VkVideoSessionParametersUpdateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoSessionParametersUpdateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoSessionParametersUpdateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="updateSequenceCount" />
  </struct>
  <struct name="VideoDecodeCapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeCapabilitiesKHR">
      <argument name="flags_" type="vk::VideoDecodeCapabilityFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeCapabilitiesKHR">
      <argument name="rhs" type="const VideoDecodeCapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeCapabilitiesKHR">
      <argument name="rhs" type="const VkVideoDecodeCapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeCapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeCapabilitiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoDecodeCapabilitiesKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeCapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeCapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeCapabilitiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
  </struct>
  <struct name="VideoDecodeInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeInfoKHR">
      <argument name="flags_" type="vk::VideoDecodeFlagsKHR" default_raw="{}" />
      <argument name="srcBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="srcBufferOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="srcBufferRange_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="dstPictureResource_" type="vk::VideoPictureResourceInfoKHR" default_raw="{}" />
      <argument name="pSetupReferenceSlot_" type="const vk::VideoReferenceSlotInfoKHR *" default_raw="{}" />
      <argument name="referenceSlotCount_" type="uint32_t" default_raw="{}" />
      <argument name="pReferenceSlots_" type="const vk::VideoReferenceSlotInfoKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeInfoKHR">
      <argument name="rhs" type="const VideoDecodeInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeInfoKHR">
      <argument name="flags_" type="vk::VideoDecodeFlagsKHR" />
      <argument name="srcBuffer_" type="vk::Buffer" />
      <argument name="srcBufferOffset_" type="vk::DeviceSize" />
      <argument name="srcBufferRange_" type="vk::DeviceSize" />
      <argument name="dstPictureResource_" type="vk::VideoPictureResourceInfoKHR" />
      <argument name="pSetupReferenceSlot_" type="const vk::VideoReferenceSlotInfoKHR *" />
      <argument name="referenceSlots_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoReferenceSlotInfoKHR&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::VideoDecodeFlagsKHR" />
    </method>
    <method name="setSrcBuffer">
      <argument name="srcBuffer_" type="vk::Buffer" />
    </method>
    <method name="setSrcBufferOffset">
      <argument name="srcBufferOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setSrcBufferRange">
      <argument name="srcBufferRange_" type="vk::DeviceSize" />
    </method>
    <method name="setDstPictureResource">
      <argument name="dstPictureResource_" type="const vk::VideoPictureResourceInfoKHR &amp;" />
    </method>
    <method name="setPSetupReferenceSlot">
      <argument name="pSetupReferenceSlot_" type="const vk::VideoReferenceSlotInfoKHR *" />
    </method>
    <method name="setReferenceSlotCount">
      <argument name="referenceSlotCount_" type="uint32_t" />
    </method>
    <method name="setPReferenceSlots">
      <argument name="pReferenceSlots_" type="const vk::VideoReferenceSlotInfoKHR *" />
    </method>
    <method name="setReferenceSlots">
      <argument name="referenceSlots_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoReferenceSlotInfoKHR&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkVideoDecodeInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="srcBuffer" />
    <field name="srcBufferOffset" />
    <field name="srcBufferRange" />
    <field name="dstPictureResource" />
    <field name="pSetupReferenceSlot" />
    <field name="referenceSlotCount" />
    <field name="pReferenceSlots" />
  </struct>
  <struct name="VideoDecodeUsageInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeUsageInfoKHR">
      <argument name="videoUsageHints_" type="vk::VideoDecodeUsageFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeUsageInfoKHR">
      <argument name="rhs" type="const VideoDecodeUsageInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeUsageInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeUsageInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeUsageInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeUsageInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setVideoUsageHints">
      <argument name="videoUsageHints_" type="vk::VideoDecodeUsageFlagsKHR" />
    </method>
    <conversion_function name="operator const VkVideoDecodeUsageInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeUsageInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeUsageInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeUsageInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="videoUsageHints" />
  </struct>
  <struct name="DedicatedAllocationBufferCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DedicatedAllocationBufferCreateInfoNV">
      <argument name="dedicatedAllocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DedicatedAllocationBufferCreateInfoNV">
      <argument name="rhs" type="const DedicatedAllocationBufferCreateInfoNV &amp;" />
    </constructor>
    <constructor name="DedicatedAllocationBufferCreateInfoNV">
      <argument name="rhs" type="const VkDedicatedAllocationBufferCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DedicatedAllocationBufferCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDedicatedAllocationBufferCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDedicatedAllocation">
      <argument name="dedicatedAllocation_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkDedicatedAllocationBufferCreateInfoNV &amp;" />
    <conversion_function name="operator VkDedicatedAllocationBufferCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DedicatedAllocationBufferCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DedicatedAllocationBufferCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="dedicatedAllocation" />
  </struct>
  <struct name="DedicatedAllocationImageCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DedicatedAllocationImageCreateInfoNV">
      <argument name="dedicatedAllocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DedicatedAllocationImageCreateInfoNV">
      <argument name="rhs" type="const DedicatedAllocationImageCreateInfoNV &amp;" />
    </constructor>
    <constructor name="DedicatedAllocationImageCreateInfoNV">
      <argument name="rhs" type="const VkDedicatedAllocationImageCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DedicatedAllocationImageCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDedicatedAllocationImageCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDedicatedAllocation">
      <argument name="dedicatedAllocation_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkDedicatedAllocationImageCreateInfoNV &amp;" />
    <conversion_function name="operator VkDedicatedAllocationImageCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DedicatedAllocationImageCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DedicatedAllocationImageCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="dedicatedAllocation" />
  </struct>
  <struct name="DedicatedAllocationMemoryAllocateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DedicatedAllocationMemoryAllocateInfoNV">
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DedicatedAllocationMemoryAllocateInfoNV">
      <argument name="rhs" type="const DedicatedAllocationMemoryAllocateInfoNV &amp;" />
    </constructor>
    <constructor name="DedicatedAllocationMemoryAllocateInfoNV">
      <argument name="rhs" type="const VkDedicatedAllocationMemoryAllocateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DedicatedAllocationMemoryAllocateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDedicatedAllocationMemoryAllocateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <conversion_function name="operator const VkDedicatedAllocationMemoryAllocateInfoNV &amp;" />
    <conversion_function name="operator VkDedicatedAllocationMemoryAllocateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DedicatedAllocationMemoryAllocateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DedicatedAllocationMemoryAllocateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="image" />
    <field name="buffer" />
  </struct>
  <struct name="PhysicalDeviceTransformFeedbackFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceTransformFeedbackFeaturesEXT">
      <argument name="transformFeedback_" type="vk::Bool32" default_raw="{}" />
      <argument name="geometryStreams_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceTransformFeedbackFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceTransformFeedbackFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceTransformFeedbackFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceTransformFeedbackFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceTransformFeedbackFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceTransformFeedbackFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTransformFeedback">
      <argument name="transformFeedback_" type="vk::Bool32" />
    </method>
    <method name="setGeometryStreams">
      <argument name="geometryStreams_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceTransformFeedbackFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceTransformFeedbackFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceTransformFeedbackFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceTransformFeedbackFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="transformFeedback" />
    <field name="geometryStreams" />
  </struct>
  <struct name="PhysicalDeviceTransformFeedbackPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceTransformFeedbackPropertiesEXT">
      <argument name="maxTransformFeedbackStreams_" type="uint32_t" default_raw="{}" />
      <argument name="maxTransformFeedbackBuffers_" type="uint32_t" default_raw="{}" />
      <argument name="maxTransformFeedbackBufferSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="maxTransformFeedbackStreamDataSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxTransformFeedbackBufferDataSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxTransformFeedbackBufferDataStride_" type="uint32_t" default_raw="{}" />
      <argument name="transformFeedbackQueries_" type="vk::Bool32" default_raw="{}" />
      <argument name="transformFeedbackStreamsLinesTriangles_" type="vk::Bool32" default_raw="{}" />
      <argument name="transformFeedbackRasterizationStreamSelect_" type="vk::Bool32" default_raw="{}" />
      <argument name="transformFeedbackDraw_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceTransformFeedbackPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceTransformFeedbackPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceTransformFeedbackPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceTransformFeedbackPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceTransformFeedbackPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceTransformFeedbackPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceTransformFeedbackPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceTransformFeedbackPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceTransformFeedbackPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceTransformFeedbackPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxTransformFeedbackStreams" />
    <field name="maxTransformFeedbackBuffers" />
    <field name="maxTransformFeedbackBufferSize" />
    <field name="maxTransformFeedbackStreamDataSize" />
    <field name="maxTransformFeedbackBufferDataSize" />
    <field name="maxTransformFeedbackBufferDataStride" />
    <field name="transformFeedbackQueries" />
    <field name="transformFeedbackStreamsLinesTriangles" />
    <field name="transformFeedbackRasterizationStreamSelect" />
    <field name="transformFeedbackDraw" />
  </struct>
  <struct name="PipelineRasterizationStateStreamCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineRasterizationStateStreamCreateInfoEXT">
      <argument name="flags_" type="vk::PipelineRasterizationStateStreamCreateFlagsEXT" default_raw="{}" />
      <argument name="rasterizationStream_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineRasterizationStateStreamCreateInfoEXT">
      <argument name="rhs" type="const PipelineRasterizationStateStreamCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineRasterizationStateStreamCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineRasterizationStateStreamCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineRasterizationStateStreamCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineRasterizationStateStreamCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineRasterizationStateStreamCreateFlagsEXT" />
    </method>
    <method name="setRasterizationStream">
      <argument name="rasterizationStream_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkPipelineRasterizationStateStreamCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineRasterizationStateStreamCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineRasterizationStateStreamCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineRasterizationStateStreamCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="rasterizationStream" />
  </struct>
  <struct name="CuFunctionCreateInfoNVX" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CuFunctionCreateInfoNVX">
      <argument name="module_" type="vk::CuModuleNVX" default_raw="{}" />
      <argument name="pName_" type="const char *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CuFunctionCreateInfoNVX">
      <argument name="rhs" type="const CuFunctionCreateInfoNVX &amp;" />
    </constructor>
    <constructor name="CuFunctionCreateInfoNVX">
      <argument name="rhs" type="const VkCuFunctionCreateInfoNVX &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CuFunctionCreateInfoNVX &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCuFunctionCreateInfoNVX &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setModule">
      <argument name="module_" type="vk::CuModuleNVX" />
    </method>
    <method name="setPName">
      <argument name="pName_" type="const char *" />
    </method>
    <conversion_function name="operator const VkCuFunctionCreateInfoNVX &amp;" />
    <conversion_function name="operator VkCuFunctionCreateInfoNVX &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CuFunctionCreateInfoNVX &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CuFunctionCreateInfoNVX &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="module" />
    <field name="pName" />
  </struct>
  <struct name="CuLaunchInfoNVX" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CuLaunchInfoNVX">
      <argument name="function_" type="vk::CuFunctionNVX" default_raw="{}" />
      <argument name="gridDimX_" type="uint32_t" default_raw="{}" />
      <argument name="gridDimY_" type="uint32_t" default_raw="{}" />
      <argument name="gridDimZ_" type="uint32_t" default_raw="{}" />
      <argument name="blockDimX_" type="uint32_t" default_raw="{}" />
      <argument name="blockDimY_" type="uint32_t" default_raw="{}" />
      <argument name="blockDimZ_" type="uint32_t" default_raw="{}" />
      <argument name="sharedMemBytes_" type="uint32_t" default_raw="{}" />
      <argument name="paramCount_" type="size_t" default_raw="{}" />
      <argument name="pParams_" type="const void *const *" default_raw="{}" />
      <argument name="extraCount_" type="size_t" default_raw="{}" />
      <argument name="pExtras_" type="const void *const *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CuLaunchInfoNVX">
      <argument name="rhs" type="const CuLaunchInfoNVX &amp;" />
    </constructor>
    <constructor name="CuLaunchInfoNVX">
      <argument name="rhs" type="const VkCuLaunchInfoNVX &amp;" />
    </constructor>
    <constructor name="CuLaunchInfoNVX">
      <argument name="function_" type="vk::CuFunctionNVX" />
      <argument name="gridDimX_" type="uint32_t" />
      <argument name="gridDimY_" type="uint32_t" />
      <argument name="gridDimZ_" type="uint32_t" />
      <argument name="blockDimX_" type="uint32_t" />
      <argument name="blockDimY_" type="uint32_t" />
      <argument name="blockDimZ_" type="uint32_t" />
      <argument name="sharedMemBytes_" type="uint32_t" />
      <argument name="params_" type="const vk::ArrayProxyNoTemporaries&lt;const void *const&gt; &amp;" />
      <argument name="extras_" type="const vk::ArrayProxyNoTemporaries&lt;const void *const&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CuLaunchInfoNVX &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCuLaunchInfoNVX &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFunction">
      <argument name="function_" type="vk::CuFunctionNVX" />
    </method>
    <method name="setGridDimX">
      <argument name="gridDimX_" type="uint32_t" />
    </method>
    <method name="setGridDimY">
      <argument name="gridDimY_" type="uint32_t" />
    </method>
    <method name="setGridDimZ">
      <argument name="gridDimZ_" type="uint32_t" />
    </method>
    <method name="setBlockDimX">
      <argument name="blockDimX_" type="uint32_t" />
    </method>
    <method name="setBlockDimY">
      <argument name="blockDimY_" type="uint32_t" />
    </method>
    <method name="setBlockDimZ">
      <argument name="blockDimZ_" type="uint32_t" />
    </method>
    <method name="setSharedMemBytes">
      <argument name="sharedMemBytes_" type="uint32_t" />
    </method>
    <method name="setParamCount">
      <argument name="paramCount_" type="size_t" />
    </method>
    <method name="setPParams">
      <argument name="pParams_" type="const void *const *" />
    </method>
    <method name="setParams">
      <argument name="params_" type="const vk::ArrayProxyNoTemporaries&lt;const void *const&gt; &amp;" />
    </method>
    <method name="setExtraCount">
      <argument name="extraCount_" type="size_t" />
    </method>
    <method name="setPExtras">
      <argument name="pExtras_" type="const void *const *" />
    </method>
    <method name="setExtras">
      <argument name="extras_" type="const vk::ArrayProxyNoTemporaries&lt;const void *const&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkCuLaunchInfoNVX &amp;" />
    <conversion_function name="operator VkCuLaunchInfoNVX &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CuLaunchInfoNVX &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CuLaunchInfoNVX &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="function" />
    <field name="gridDimX" />
    <field name="gridDimY" />
    <field name="gridDimZ" />
    <field name="blockDimX" />
    <field name="blockDimY" />
    <field name="blockDimZ" />
    <field name="sharedMemBytes" />
    <field name="paramCount" />
    <field name="pParams" />
    <field name="extraCount" />
    <field name="pExtras" />
  </struct>
  <struct name="CuModuleCreateInfoNVX" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CuModuleCreateInfoNVX">
      <argument name="dataSize_" type="size_t" default_raw="{}" />
      <argument name="pData_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CuModuleCreateInfoNVX">
      <argument name="rhs" type="const CuModuleCreateInfoNVX &amp;" />
    </constructor>
    <constructor name="CuModuleCreateInfoNVX">
      <argument name="rhs" type="const VkCuModuleCreateInfoNVX &amp;" />
    </constructor>
    <method name="CuModuleCreateInfoNVX" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const CuModuleCreateInfoNVX &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCuModuleCreateInfoNVX &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDataSize">
      <argument name="dataSize_" type="size_t" />
    </method>
    <method name="setPData">
      <argument name="pData_" type="const void *" />
    </method>
    <method name="setData" template_raw="template &lt;typename T&gt;" />
    <conversion_function name="operator const VkCuModuleCreateInfoNVX &amp;" />
    <conversion_function name="operator VkCuModuleCreateInfoNVX &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CuModuleCreateInfoNVX &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CuModuleCreateInfoNVX &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="dataSize" />
    <field name="pData" />
  </struct>
  <struct name="ImageViewAddressPropertiesNVX" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageViewAddressPropertiesNVX">
      <argument name="deviceAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageViewAddressPropertiesNVX">
      <argument name="rhs" type="const ImageViewAddressPropertiesNVX &amp;" />
    </constructor>
    <constructor name="ImageViewAddressPropertiesNVX">
      <argument name="rhs" type="const VkImageViewAddressPropertiesNVX &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageViewAddressPropertiesNVX &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageViewAddressPropertiesNVX &amp;" />
    </method>
    <conversion_function name="operator const VkImageViewAddressPropertiesNVX &amp;" />
    <conversion_function name="operator VkImageViewAddressPropertiesNVX &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageViewAddressPropertiesNVX &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageViewAddressPropertiesNVX &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceAddress" />
    <field name="size" />
  </struct>
  <struct name="ImageViewHandleInfoNVX" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageViewHandleInfoNVX">
      <argument name="imageView_" type="vk::ImageView" default_raw="{}" />
      <argument name="descriptorType_" type="vk::DescriptorType" default_raw="VULKAN_HPP_NAMESPACE::DescriptorType::eSampler" />
      <argument name="sampler_" type="vk::Sampler" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageViewHandleInfoNVX">
      <argument name="rhs" type="const ImageViewHandleInfoNVX &amp;" />
    </constructor>
    <constructor name="ImageViewHandleInfoNVX">
      <argument name="rhs" type="const VkImageViewHandleInfoNVX &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageViewHandleInfoNVX &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageViewHandleInfoNVX &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImageView">
      <argument name="imageView_" type="vk::ImageView" />
    </method>
    <method name="setDescriptorType">
      <argument name="descriptorType_" type="vk::DescriptorType" />
    </method>
    <method name="setSampler">
      <argument name="sampler_" type="vk::Sampler" />
    </method>
    <conversion_function name="operator const VkImageViewHandleInfoNVX &amp;" />
    <conversion_function name="operator VkImageViewHandleInfoNVX &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageViewHandleInfoNVX &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageViewHandleInfoNVX &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageView" />
    <field name="descriptorType" />
    <field name="sampler" />
  </struct>
  <struct name="VideoEncodeH264CapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264CapabilitiesKHR">
      <argument name="flags_" type="vk::VideoEncodeH264CapabilityFlagsKHR" default_raw="{}" />
      <argument name="maxLevelIdc_" type="int" default_raw="{}" />
      <argument name="maxSliceCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxPPictureL0ReferenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxBPictureL0ReferenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxL1ReferenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxTemporalLayerCount_" type="uint32_t" default_raw="{}" />
      <argument name="expectDyadicTemporalLayerPattern_" type="vk::Bool32" default_raw="{}" />
      <argument name="minQp_" type="int32_t" default_raw="{}" />
      <argument name="maxQp_" type="int32_t" default_raw="{}" />
      <argument name="prefersGopRemainingFrames_" type="vk::Bool32" default_raw="{}" />
      <argument name="requiresGopRemainingFrames_" type="vk::Bool32" default_raw="{}" />
      <argument name="stdSyntaxFlags_" type="vk::VideoEncodeH264StdFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264CapabilitiesKHR">
      <argument name="rhs" type="const VideoEncodeH264CapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264CapabilitiesKHR">
      <argument name="rhs" type="const VkVideoEncodeH264CapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264CapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264CapabilitiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264CapabilitiesKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264CapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264CapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264CapabilitiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="maxLevelIdc" />
    <field name="maxSliceCount" />
    <field name="maxPPictureL0ReferenceCount" />
    <field name="maxBPictureL0ReferenceCount" />
    <field name="maxL1ReferenceCount" />
    <field name="maxTemporalLayerCount" />
    <field name="expectDyadicTemporalLayerPattern" />
    <field name="minQp" />
    <field name="maxQp" />
    <field name="prefersGopRemainingFrames" />
    <field name="requiresGopRemainingFrames" />
    <field name="stdSyntaxFlags" />
  </struct>
  <struct name="VideoEncodeH264DpbSlotInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264DpbSlotInfoKHR">
      <argument name="pStdReferenceInfo_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264DpbSlotInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264DpbSlotInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264DpbSlotInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264DpbSlotInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264DpbSlotInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264DpbSlotInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPStdReferenceInfo">
      <argument name="pStdReferenceInfo_" type="const int *" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264DpbSlotInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264DpbSlotInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264DpbSlotInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264DpbSlotInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pStdReferenceInfo" />
  </struct>
  <struct name="VideoEncodeH264FrameSizeKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264FrameSizeKHR">
      <argument name="frameISize_" type="uint32_t" default_raw="{}" />
      <argument name="framePSize_" type="uint32_t" default_raw="{}" />
      <argument name="frameBSize_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="VideoEncodeH264FrameSizeKHR">
      <argument name="rhs" type="const VideoEncodeH264FrameSizeKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264FrameSizeKHR">
      <argument name="rhs" type="const VkVideoEncodeH264FrameSizeKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264FrameSizeKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264FrameSizeKHR &amp;" />
    </method>
    <method name="setFrameISize">
      <argument name="frameISize_" type="uint32_t" />
    </method>
    <method name="setFramePSize">
      <argument name="framePSize_" type="uint32_t" />
    </method>
    <method name="setFrameBSize">
      <argument name="frameBSize_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264FrameSizeKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264FrameSizeKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264FrameSizeKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264FrameSizeKHR &amp;" />
    </method>
    <field name="frameISize" />
    <field name="framePSize" />
    <field name="frameBSize" />
  </struct>
  <struct name="VideoEncodeH264GopRemainingFrameInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264GopRemainingFrameInfoKHR">
      <argument name="useGopRemainingFrames_" type="vk::Bool32" default_raw="{}" />
      <argument name="gopRemainingI_" type="uint32_t" default_raw="{}" />
      <argument name="gopRemainingP_" type="uint32_t" default_raw="{}" />
      <argument name="gopRemainingB_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264GopRemainingFrameInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264GopRemainingFrameInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264GopRemainingFrameInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264GopRemainingFrameInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264GopRemainingFrameInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264GopRemainingFrameInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setUseGopRemainingFrames">
      <argument name="useGopRemainingFrames_" type="vk::Bool32" />
    </method>
    <method name="setGopRemainingI">
      <argument name="gopRemainingI_" type="uint32_t" />
    </method>
    <method name="setGopRemainingP">
      <argument name="gopRemainingP_" type="uint32_t" />
    </method>
    <method name="setGopRemainingB">
      <argument name="gopRemainingB_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264GopRemainingFrameInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264GopRemainingFrameInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264GopRemainingFrameInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264GopRemainingFrameInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="useGopRemainingFrames" />
    <field name="gopRemainingI" />
    <field name="gopRemainingP" />
    <field name="gopRemainingB" />
  </struct>
  <struct name="VideoEncodeH264NaluSliceInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264NaluSliceInfoKHR">
      <argument name="constantQp_" type="int32_t" default_raw="{}" />
      <argument name="pStdSliceHeader_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264NaluSliceInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264NaluSliceInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264NaluSliceInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264NaluSliceInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264NaluSliceInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264NaluSliceInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setConstantQp">
      <argument name="constantQp_" type="int32_t" />
    </method>
    <method name="setPStdSliceHeader">
      <argument name="pStdSliceHeader_" type="const int *" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264NaluSliceInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264NaluSliceInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264NaluSliceInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264NaluSliceInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="constantQp" />
    <field name="pStdSliceHeader" />
  </struct>
  <struct name="VideoEncodeH264PictureInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264PictureInfoKHR">
      <argument name="naluSliceEntryCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNaluSliceEntries_" type="const vk::VideoEncodeH264NaluSliceInfoKHR *" default_raw="{}" />
      <argument name="pStdPictureInfo_" type="const int *" default_raw="{}" />
      <argument name="generatePrefixNalu_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264PictureInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264PictureInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264PictureInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264PictureInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264PictureInfoKHR">
      <argument name="naluSliceEntries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoEncodeH264NaluSliceInfoKHR&gt; &amp;" />
      <argument name="pStdPictureInfo_" type="const int *" default_raw="{}" />
      <argument name="generatePrefixNalu_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264PictureInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264PictureInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setNaluSliceEntryCount">
      <argument name="naluSliceEntryCount_" type="uint32_t" />
    </method>
    <method name="setPNaluSliceEntries">
      <argument name="pNaluSliceEntries_" type="const vk::VideoEncodeH264NaluSliceInfoKHR *" />
    </method>
    <method name="setNaluSliceEntries">
      <argument name="naluSliceEntries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoEncodeH264NaluSliceInfoKHR&gt; &amp;" />
    </method>
    <method name="setPStdPictureInfo">
      <argument name="pStdPictureInfo_" type="const int *" />
    </method>
    <method name="setGeneratePrefixNalu">
      <argument name="generatePrefixNalu_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264PictureInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264PictureInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264PictureInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264PictureInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="naluSliceEntryCount" />
    <field name="pNaluSliceEntries" />
    <field name="pStdPictureInfo" />
    <field name="generatePrefixNalu" />
  </struct>
  <struct name="VideoEncodeH264ProfileInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264ProfileInfoKHR">
      <argument name="stdProfileIdc_" type="int" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264ProfileInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264ProfileInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264ProfileInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264ProfileInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264ProfileInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264ProfileInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStdProfileIdc">
      <argument name="stdProfileIdc_" type="int" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264ProfileInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264ProfileInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264ProfileInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264ProfileInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stdProfileIdc" />
  </struct>
  <struct name="VideoEncodeH264QpKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264QpKHR">
      <argument name="qpI_" type="int32_t" default_raw="{}" />
      <argument name="qpP_" type="int32_t" default_raw="{}" />
      <argument name="qpB_" type="int32_t" default_raw="{}" />
    </constructor>
    <constructor name="VideoEncodeH264QpKHR">
      <argument name="rhs" type="const VideoEncodeH264QpKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264QpKHR">
      <argument name="rhs" type="const VkVideoEncodeH264QpKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264QpKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264QpKHR &amp;" />
    </method>
    <method name="setQpI">
      <argument name="qpI_" type="int32_t" />
    </method>
    <method name="setQpP">
      <argument name="qpP_" type="int32_t" />
    </method>
    <method name="setQpB">
      <argument name="qpB_" type="int32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264QpKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264QpKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264QpKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264QpKHR &amp;" />
    </method>
    <field name="qpI" />
    <field name="qpP" />
    <field name="qpB" />
  </struct>
  <struct name="VideoEncodeH264QualityLevelPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264QualityLevelPropertiesKHR">
      <argument name="preferredRateControlFlags_" type="vk::VideoEncodeH264RateControlFlagsKHR" default_raw="{}" />
      <argument name="preferredGopFrameCount_" type="uint32_t" default_raw="{}" />
      <argument name="preferredIdrPeriod_" type="uint32_t" default_raw="{}" />
      <argument name="preferredConsecutiveBFrameCount_" type="uint32_t" default_raw="{}" />
      <argument name="preferredTemporalLayerCount_" type="uint32_t" default_raw="{}" />
      <argument name="preferredConstantQp_" type="vk::VideoEncodeH264QpKHR" default_raw="{}" />
      <argument name="preferredMaxL0ReferenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="preferredMaxL1ReferenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="preferredStdEntropyCodingModeFlag_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264QualityLevelPropertiesKHR">
      <argument name="rhs" type="const VideoEncodeH264QualityLevelPropertiesKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264QualityLevelPropertiesKHR">
      <argument name="rhs" type="const VkVideoEncodeH264QualityLevelPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264QualityLevelPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264QualityLevelPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264QualityLevelPropertiesKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264QualityLevelPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264QualityLevelPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264QualityLevelPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="preferredRateControlFlags" />
    <field name="preferredGopFrameCount" />
    <field name="preferredIdrPeriod" />
    <field name="preferredConsecutiveBFrameCount" />
    <field name="preferredTemporalLayerCount" />
    <field name="preferredConstantQp" />
    <field name="preferredMaxL0ReferenceCount" />
    <field name="preferredMaxL1ReferenceCount" />
    <field name="preferredStdEntropyCodingModeFlag" />
  </struct>
  <struct name="VideoEncodeH264RateControlInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264RateControlInfoKHR">
      <argument name="flags_" type="vk::VideoEncodeH264RateControlFlagsKHR" default_raw="{}" />
      <argument name="gopFrameCount_" type="uint32_t" default_raw="{}" />
      <argument name="idrPeriod_" type="uint32_t" default_raw="{}" />
      <argument name="consecutiveBFrameCount_" type="uint32_t" default_raw="{}" />
      <argument name="temporalLayerCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264RateControlInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264RateControlInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264RateControlInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264RateControlInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264RateControlInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264RateControlInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::VideoEncodeH264RateControlFlagsKHR" />
    </method>
    <method name="setGopFrameCount">
      <argument name="gopFrameCount_" type="uint32_t" />
    </method>
    <method name="setIdrPeriod">
      <argument name="idrPeriod_" type="uint32_t" />
    </method>
    <method name="setConsecutiveBFrameCount">
      <argument name="consecutiveBFrameCount_" type="uint32_t" />
    </method>
    <method name="setTemporalLayerCount">
      <argument name="temporalLayerCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264RateControlInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264RateControlInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264RateControlInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264RateControlInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="gopFrameCount" />
    <field name="idrPeriod" />
    <field name="consecutiveBFrameCount" />
    <field name="temporalLayerCount" />
  </struct>
  <struct name="VideoEncodeH264RateControlLayerInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264RateControlLayerInfoKHR">
      <argument name="useMinQp_" type="vk::Bool32" default_raw="{}" />
      <argument name="minQp_" type="vk::VideoEncodeH264QpKHR" default_raw="{}" />
      <argument name="useMaxQp_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxQp_" type="vk::VideoEncodeH264QpKHR" default_raw="{}" />
      <argument name="useMaxFrameSize_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxFrameSize_" type="vk::VideoEncodeH264FrameSizeKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264RateControlLayerInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264RateControlLayerInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264RateControlLayerInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264RateControlLayerInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264RateControlLayerInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264RateControlLayerInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setUseMinQp">
      <argument name="useMinQp_" type="vk::Bool32" />
    </method>
    <method name="setMinQp">
      <argument name="minQp_" type="const vk::VideoEncodeH264QpKHR &amp;" />
    </method>
    <method name="setUseMaxQp">
      <argument name="useMaxQp_" type="vk::Bool32" />
    </method>
    <method name="setMaxQp">
      <argument name="maxQp_" type="const vk::VideoEncodeH264QpKHR &amp;" />
    </method>
    <method name="setUseMaxFrameSize">
      <argument name="useMaxFrameSize_" type="vk::Bool32" />
    </method>
    <method name="setMaxFrameSize">
      <argument name="maxFrameSize_" type="const vk::VideoEncodeH264FrameSizeKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264RateControlLayerInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264RateControlLayerInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264RateControlLayerInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264RateControlLayerInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="useMinQp" />
    <field name="minQp" />
    <field name="useMaxQp" />
    <field name="maxQp" />
    <field name="useMaxFrameSize" />
    <field name="maxFrameSize" />
  </struct>
  <struct name="VideoEncodeH264SessionCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264SessionCreateInfoKHR">
      <argument name="useMaxLevelIdc_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxLevelIdc_" type="int" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264SessionCreateInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264SessionCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264SessionCreateInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264SessionCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264SessionCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264SessionCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setUseMaxLevelIdc">
      <argument name="useMaxLevelIdc_" type="vk::Bool32" />
    </method>
    <method name="setMaxLevelIdc">
      <argument name="maxLevelIdc_" type="int" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264SessionCreateInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264SessionCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264SessionCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264SessionCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="useMaxLevelIdc" />
    <field name="maxLevelIdc" />
  </struct>
  <struct name="VideoEncodeH264SessionParametersAddInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264SessionParametersAddInfoKHR">
      <argument name="stdSPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStdSPSs_" type="const int *" default_raw="{}" />
      <argument name="stdPPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStdPPSs_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264SessionParametersAddInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersAddInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264SessionParametersAddInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264SessionParametersAddInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264SessionParametersAddInfoKHR">
      <argument name="stdSPSs_" type="const int &amp;" />
      <argument name="stdPPSs_" type="const int &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStdSPSCount">
      <argument name="stdSPSCount_" type="uint32_t" />
    </method>
    <method name="setPStdSPSs">
      <argument name="pStdSPSs_" type="const int *" />
    </method>
    <method name="setStdSPSs">
      <argument name="stdSPSs_" type="const int &amp;" />
    </method>
    <method name="setStdPPSCount">
      <argument name="stdPPSCount_" type="uint32_t" />
    </method>
    <method name="setPStdPPSs">
      <argument name="pStdPPSs_" type="const int *" />
    </method>
    <method name="setStdPPSs">
      <argument name="stdPPSs_" type="const int &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264SessionParametersAddInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264SessionParametersAddInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersAddInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stdSPSCount" />
    <field name="pStdSPSs" />
    <field name="stdPPSCount" />
    <field name="pStdPPSs" />
  </struct>
  <struct name="VideoEncodeH264SessionParametersCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264SessionParametersCreateInfoKHR">
      <argument name="maxStdSPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxStdPPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pParametersAddInfo_" type="const vk::VideoEncodeH264SessionParametersAddInfoKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264SessionParametersCreateInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264SessionParametersCreateInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264SessionParametersCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMaxStdSPSCount">
      <argument name="maxStdSPSCount_" type="uint32_t" />
    </method>
    <method name="setMaxStdPPSCount">
      <argument name="maxStdPPSCount_" type="uint32_t" />
    </method>
    <method name="setPParametersAddInfo">
      <argument name="pParametersAddInfo_" type="const vk::VideoEncodeH264SessionParametersAddInfoKHR *" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264SessionParametersCreateInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264SessionParametersCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxStdSPSCount" />
    <field name="maxStdPPSCount" />
    <field name="pParametersAddInfo" />
  </struct>
  <struct name="VideoEncodeH264SessionParametersFeedbackInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264SessionParametersFeedbackInfoKHR">
      <argument name="hasStdSPSOverrides_" type="vk::Bool32" default_raw="{}" />
      <argument name="hasStdPPSOverrides_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264SessionParametersFeedbackInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersFeedbackInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264SessionParametersFeedbackInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264SessionParametersFeedbackInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264SessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264SessionParametersFeedbackInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264SessionParametersFeedbackInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="hasStdSPSOverrides" />
    <field name="hasStdPPSOverrides" />
  </struct>
  <struct name="VideoEncodeH264SessionParametersGetInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH264SessionParametersGetInfoKHR">
      <argument name="writeStdSPS_" type="vk::Bool32" default_raw="{}" />
      <argument name="writeStdPPS_" type="vk::Bool32" default_raw="{}" />
      <argument name="stdSPSId_" type="uint32_t" default_raw="{}" />
      <argument name="stdPPSId_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH264SessionParametersGetInfoKHR">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersGetInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH264SessionParametersGetInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH264SessionParametersGetInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersGetInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH264SessionParametersGetInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setWriteStdSPS">
      <argument name="writeStdSPS_" type="vk::Bool32" />
    </method>
    <method name="setWriteStdPPS">
      <argument name="writeStdPPS_" type="vk::Bool32" />
    </method>
    <method name="setStdSPSId">
      <argument name="stdSPSId_" type="uint32_t" />
    </method>
    <method name="setStdPPSId">
      <argument name="stdPPSId_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH264SessionParametersGetInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH264SessionParametersGetInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersGetInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH264SessionParametersGetInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="writeStdSPS" />
    <field name="writeStdPPS" />
    <field name="stdSPSId" />
    <field name="stdPPSId" />
  </struct>
  <struct name="VideoEncodeH265CapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265CapabilitiesKHR">
      <argument name="flags_" type="vk::VideoEncodeH265CapabilityFlagsKHR" default_raw="{}" />
      <argument name="maxLevelIdc_" type="int" default_raw="{}" />
      <argument name="maxSliceSegmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxTiles_" type="vk::Extent2D" default_raw="{}" />
      <argument name="ctbSizes_" type="vk::VideoEncodeH265CtbSizeFlagsKHR" default_raw="{}" />
      <argument name="transformBlockSizes_" type="vk::VideoEncodeH265TransformBlockSizeFlagsKHR" default_raw="{}" />
      <argument name="maxPPictureL0ReferenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxBPictureL0ReferenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxL1ReferenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxSubLayerCount_" type="uint32_t" default_raw="{}" />
      <argument name="expectDyadicTemporalSubLayerPattern_" type="vk::Bool32" default_raw="{}" />
      <argument name="minQp_" type="int32_t" default_raw="{}" />
      <argument name="maxQp_" type="int32_t" default_raw="{}" />
      <argument name="prefersGopRemainingFrames_" type="vk::Bool32" default_raw="{}" />
      <argument name="requiresGopRemainingFrames_" type="vk::Bool32" default_raw="{}" />
      <argument name="stdSyntaxFlags_" type="vk::VideoEncodeH265StdFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265CapabilitiesKHR">
      <argument name="rhs" type="const VideoEncodeH265CapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265CapabilitiesKHR">
      <argument name="rhs" type="const VkVideoEncodeH265CapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265CapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265CapabilitiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265CapabilitiesKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265CapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265CapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265CapabilitiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="maxLevelIdc" />
    <field name="maxSliceSegmentCount" />
    <field name="maxTiles" />
    <field name="ctbSizes" />
    <field name="transformBlockSizes" />
    <field name="maxPPictureL0ReferenceCount" />
    <field name="maxBPictureL0ReferenceCount" />
    <field name="maxL1ReferenceCount" />
    <field name="maxSubLayerCount" />
    <field name="expectDyadicTemporalSubLayerPattern" />
    <field name="minQp" />
    <field name="maxQp" />
    <field name="prefersGopRemainingFrames" />
    <field name="requiresGopRemainingFrames" />
    <field name="stdSyntaxFlags" />
  </struct>
  <struct name="VideoEncodeH265DpbSlotInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265DpbSlotInfoKHR">
      <argument name="pStdReferenceInfo_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265DpbSlotInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265DpbSlotInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265DpbSlotInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265DpbSlotInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265DpbSlotInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265DpbSlotInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPStdReferenceInfo">
      <argument name="pStdReferenceInfo_" type="const int *" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265DpbSlotInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265DpbSlotInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265DpbSlotInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265DpbSlotInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pStdReferenceInfo" />
  </struct>
  <struct name="VideoEncodeH265FrameSizeKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265FrameSizeKHR">
      <argument name="frameISize_" type="uint32_t" default_raw="{}" />
      <argument name="framePSize_" type="uint32_t" default_raw="{}" />
      <argument name="frameBSize_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="VideoEncodeH265FrameSizeKHR">
      <argument name="rhs" type="const VideoEncodeH265FrameSizeKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265FrameSizeKHR">
      <argument name="rhs" type="const VkVideoEncodeH265FrameSizeKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265FrameSizeKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265FrameSizeKHR &amp;" />
    </method>
    <method name="setFrameISize">
      <argument name="frameISize_" type="uint32_t" />
    </method>
    <method name="setFramePSize">
      <argument name="framePSize_" type="uint32_t" />
    </method>
    <method name="setFrameBSize">
      <argument name="frameBSize_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265FrameSizeKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265FrameSizeKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265FrameSizeKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265FrameSizeKHR &amp;" />
    </method>
    <field name="frameISize" />
    <field name="framePSize" />
    <field name="frameBSize" />
  </struct>
  <struct name="VideoEncodeH265GopRemainingFrameInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265GopRemainingFrameInfoKHR">
      <argument name="useGopRemainingFrames_" type="vk::Bool32" default_raw="{}" />
      <argument name="gopRemainingI_" type="uint32_t" default_raw="{}" />
      <argument name="gopRemainingP_" type="uint32_t" default_raw="{}" />
      <argument name="gopRemainingB_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265GopRemainingFrameInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265GopRemainingFrameInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265GopRemainingFrameInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265GopRemainingFrameInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265GopRemainingFrameInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265GopRemainingFrameInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setUseGopRemainingFrames">
      <argument name="useGopRemainingFrames_" type="vk::Bool32" />
    </method>
    <method name="setGopRemainingI">
      <argument name="gopRemainingI_" type="uint32_t" />
    </method>
    <method name="setGopRemainingP">
      <argument name="gopRemainingP_" type="uint32_t" />
    </method>
    <method name="setGopRemainingB">
      <argument name="gopRemainingB_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265GopRemainingFrameInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265GopRemainingFrameInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265GopRemainingFrameInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265GopRemainingFrameInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="useGopRemainingFrames" />
    <field name="gopRemainingI" />
    <field name="gopRemainingP" />
    <field name="gopRemainingB" />
  </struct>
  <struct name="VideoEncodeH265NaluSliceSegmentInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265NaluSliceSegmentInfoKHR">
      <argument name="constantQp_" type="int32_t" default_raw="{}" />
      <argument name="pStdSliceSegmentHeader_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265NaluSliceSegmentInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265NaluSliceSegmentInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265NaluSliceSegmentInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265NaluSliceSegmentInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265NaluSliceSegmentInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265NaluSliceSegmentInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setConstantQp">
      <argument name="constantQp_" type="int32_t" />
    </method>
    <method name="setPStdSliceSegmentHeader">
      <argument name="pStdSliceSegmentHeader_" type="const int *" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265NaluSliceSegmentInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265NaluSliceSegmentInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265NaluSliceSegmentInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265NaluSliceSegmentInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="constantQp" />
    <field name="pStdSliceSegmentHeader" />
  </struct>
  <struct name="VideoEncodeH265PictureInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265PictureInfoKHR">
      <argument name="naluSliceSegmentEntryCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNaluSliceSegmentEntries_" type="const vk::VideoEncodeH265NaluSliceSegmentInfoKHR *" default_raw="{}" />
      <argument name="pStdPictureInfo_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265PictureInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265PictureInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265PictureInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265PictureInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265PictureInfoKHR">
      <argument name="naluSliceSegmentEntries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoEncodeH265NaluSliceSegmentInfoKHR&gt; &amp;" />
      <argument name="pStdPictureInfo_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265PictureInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265PictureInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setNaluSliceSegmentEntryCount">
      <argument name="naluSliceSegmentEntryCount_" type="uint32_t" />
    </method>
    <method name="setPNaluSliceSegmentEntries">
      <argument name="pNaluSliceSegmentEntries_" type="const vk::VideoEncodeH265NaluSliceSegmentInfoKHR *" />
    </method>
    <method name="setNaluSliceSegmentEntries">
      <argument name="naluSliceSegmentEntries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoEncodeH265NaluSliceSegmentInfoKHR&gt; &amp;" />
    </method>
    <method name="setPStdPictureInfo">
      <argument name="pStdPictureInfo_" type="const int *" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265PictureInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265PictureInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265PictureInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265PictureInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="naluSliceSegmentEntryCount" />
    <field name="pNaluSliceSegmentEntries" />
    <field name="pStdPictureInfo" />
  </struct>
  <struct name="VideoEncodeH265ProfileInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265ProfileInfoKHR">
      <argument name="stdProfileIdc_" type="int" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265ProfileInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265ProfileInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265ProfileInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265ProfileInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265ProfileInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265ProfileInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStdProfileIdc">
      <argument name="stdProfileIdc_" type="int" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265ProfileInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265ProfileInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265ProfileInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265ProfileInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stdProfileIdc" />
  </struct>
  <struct name="VideoEncodeH265QpKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265QpKHR">
      <argument name="qpI_" type="int32_t" default_raw="{}" />
      <argument name="qpP_" type="int32_t" default_raw="{}" />
      <argument name="qpB_" type="int32_t" default_raw="{}" />
    </constructor>
    <constructor name="VideoEncodeH265QpKHR">
      <argument name="rhs" type="const VideoEncodeH265QpKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265QpKHR">
      <argument name="rhs" type="const VkVideoEncodeH265QpKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265QpKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265QpKHR &amp;" />
    </method>
    <method name="setQpI">
      <argument name="qpI_" type="int32_t" />
    </method>
    <method name="setQpP">
      <argument name="qpP_" type="int32_t" />
    </method>
    <method name="setQpB">
      <argument name="qpB_" type="int32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265QpKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265QpKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265QpKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265QpKHR &amp;" />
    </method>
    <field name="qpI" />
    <field name="qpP" />
    <field name="qpB" />
  </struct>
  <struct name="VideoEncodeH265QualityLevelPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265QualityLevelPropertiesKHR">
      <argument name="preferredRateControlFlags_" type="vk::VideoEncodeH265RateControlFlagsKHR" default_raw="{}" />
      <argument name="preferredGopFrameCount_" type="uint32_t" default_raw="{}" />
      <argument name="preferredIdrPeriod_" type="uint32_t" default_raw="{}" />
      <argument name="preferredConsecutiveBFrameCount_" type="uint32_t" default_raw="{}" />
      <argument name="preferredSubLayerCount_" type="uint32_t" default_raw="{}" />
      <argument name="preferredConstantQp_" type="vk::VideoEncodeH265QpKHR" default_raw="{}" />
      <argument name="preferredMaxL0ReferenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="preferredMaxL1ReferenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265QualityLevelPropertiesKHR">
      <argument name="rhs" type="const VideoEncodeH265QualityLevelPropertiesKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265QualityLevelPropertiesKHR">
      <argument name="rhs" type="const VkVideoEncodeH265QualityLevelPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265QualityLevelPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265QualityLevelPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265QualityLevelPropertiesKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265QualityLevelPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265QualityLevelPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265QualityLevelPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="preferredRateControlFlags" />
    <field name="preferredGopFrameCount" />
    <field name="preferredIdrPeriod" />
    <field name="preferredConsecutiveBFrameCount" />
    <field name="preferredSubLayerCount" />
    <field name="preferredConstantQp" />
    <field name="preferredMaxL0ReferenceCount" />
    <field name="preferredMaxL1ReferenceCount" />
  </struct>
  <struct name="VideoEncodeH265RateControlInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265RateControlInfoKHR">
      <argument name="flags_" type="vk::VideoEncodeH265RateControlFlagsKHR" default_raw="{}" />
      <argument name="gopFrameCount_" type="uint32_t" default_raw="{}" />
      <argument name="idrPeriod_" type="uint32_t" default_raw="{}" />
      <argument name="consecutiveBFrameCount_" type="uint32_t" default_raw="{}" />
      <argument name="subLayerCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265RateControlInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265RateControlInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265RateControlInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265RateControlInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265RateControlInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265RateControlInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::VideoEncodeH265RateControlFlagsKHR" />
    </method>
    <method name="setGopFrameCount">
      <argument name="gopFrameCount_" type="uint32_t" />
    </method>
    <method name="setIdrPeriod">
      <argument name="idrPeriod_" type="uint32_t" />
    </method>
    <method name="setConsecutiveBFrameCount">
      <argument name="consecutiveBFrameCount_" type="uint32_t" />
    </method>
    <method name="setSubLayerCount">
      <argument name="subLayerCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265RateControlInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265RateControlInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265RateControlInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265RateControlInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="gopFrameCount" />
    <field name="idrPeriod" />
    <field name="consecutiveBFrameCount" />
    <field name="subLayerCount" />
  </struct>
  <struct name="VideoEncodeH265RateControlLayerInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265RateControlLayerInfoKHR">
      <argument name="useMinQp_" type="vk::Bool32" default_raw="{}" />
      <argument name="minQp_" type="vk::VideoEncodeH265QpKHR" default_raw="{}" />
      <argument name="useMaxQp_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxQp_" type="vk::VideoEncodeH265QpKHR" default_raw="{}" />
      <argument name="useMaxFrameSize_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxFrameSize_" type="vk::VideoEncodeH265FrameSizeKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265RateControlLayerInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265RateControlLayerInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265RateControlLayerInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265RateControlLayerInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265RateControlLayerInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265RateControlLayerInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setUseMinQp">
      <argument name="useMinQp_" type="vk::Bool32" />
    </method>
    <method name="setMinQp">
      <argument name="minQp_" type="const vk::VideoEncodeH265QpKHR &amp;" />
    </method>
    <method name="setUseMaxQp">
      <argument name="useMaxQp_" type="vk::Bool32" />
    </method>
    <method name="setMaxQp">
      <argument name="maxQp_" type="const vk::VideoEncodeH265QpKHR &amp;" />
    </method>
    <method name="setUseMaxFrameSize">
      <argument name="useMaxFrameSize_" type="vk::Bool32" />
    </method>
    <method name="setMaxFrameSize">
      <argument name="maxFrameSize_" type="const vk::VideoEncodeH265FrameSizeKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265RateControlLayerInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265RateControlLayerInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265RateControlLayerInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265RateControlLayerInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="useMinQp" />
    <field name="minQp" />
    <field name="useMaxQp" />
    <field name="maxQp" />
    <field name="useMaxFrameSize" />
    <field name="maxFrameSize" />
  </struct>
  <struct name="VideoEncodeH265SessionCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265SessionCreateInfoKHR">
      <argument name="useMaxLevelIdc_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxLevelIdc_" type="int" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265SessionCreateInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265SessionCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265SessionCreateInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265SessionCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265SessionCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265SessionCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setUseMaxLevelIdc">
      <argument name="useMaxLevelIdc_" type="vk::Bool32" />
    </method>
    <method name="setMaxLevelIdc">
      <argument name="maxLevelIdc_" type="int" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265SessionCreateInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265SessionCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265SessionCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265SessionCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="useMaxLevelIdc" />
    <field name="maxLevelIdc" />
  </struct>
  <struct name="VideoEncodeH265SessionParametersAddInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265SessionParametersAddInfoKHR">
      <argument name="stdVPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStdVPSs_" type="const int *" default_raw="{}" />
      <argument name="stdSPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStdSPSs_" type="const int *" default_raw="{}" />
      <argument name="stdPPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStdPPSs_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265SessionParametersAddInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersAddInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265SessionParametersAddInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265SessionParametersAddInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265SessionParametersAddInfoKHR">
      <argument name="stdVPSs_" type="const int &amp;" />
      <argument name="stdSPSs_" type="const int &amp;" default_raw="{}" />
      <argument name="stdPPSs_" type="const int &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStdVPSCount">
      <argument name="stdVPSCount_" type="uint32_t" />
    </method>
    <method name="setPStdVPSs">
      <argument name="pStdVPSs_" type="const int *" />
    </method>
    <method name="setStdVPSs">
      <argument name="stdVPSs_" type="const int &amp;" />
    </method>
    <method name="setStdSPSCount">
      <argument name="stdSPSCount_" type="uint32_t" />
    </method>
    <method name="setPStdSPSs">
      <argument name="pStdSPSs_" type="const int *" />
    </method>
    <method name="setStdSPSs">
      <argument name="stdSPSs_" type="const int &amp;" />
    </method>
    <method name="setStdPPSCount">
      <argument name="stdPPSCount_" type="uint32_t" />
    </method>
    <method name="setPStdPPSs">
      <argument name="pStdPPSs_" type="const int *" />
    </method>
    <method name="setStdPPSs">
      <argument name="stdPPSs_" type="const int &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265SessionParametersAddInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265SessionParametersAddInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersAddInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stdVPSCount" />
    <field name="pStdVPSs" />
    <field name="stdSPSCount" />
    <field name="pStdSPSs" />
    <field name="stdPPSCount" />
    <field name="pStdPPSs" />
  </struct>
  <struct name="VideoEncodeH265SessionParametersCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265SessionParametersCreateInfoKHR">
      <argument name="maxStdVPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxStdSPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxStdPPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pParametersAddInfo_" type="const vk::VideoEncodeH265SessionParametersAddInfoKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265SessionParametersCreateInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265SessionParametersCreateInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265SessionParametersCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMaxStdVPSCount">
      <argument name="maxStdVPSCount_" type="uint32_t" />
    </method>
    <method name="setMaxStdSPSCount">
      <argument name="maxStdSPSCount_" type="uint32_t" />
    </method>
    <method name="setMaxStdPPSCount">
      <argument name="maxStdPPSCount_" type="uint32_t" />
    </method>
    <method name="setPParametersAddInfo">
      <argument name="pParametersAddInfo_" type="const vk::VideoEncodeH265SessionParametersAddInfoKHR *" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265SessionParametersCreateInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265SessionParametersCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxStdVPSCount" />
    <field name="maxStdSPSCount" />
    <field name="maxStdPPSCount" />
    <field name="pParametersAddInfo" />
  </struct>
  <struct name="VideoEncodeH265SessionParametersFeedbackInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265SessionParametersFeedbackInfoKHR">
      <argument name="hasStdVPSOverrides_" type="vk::Bool32" default_raw="{}" />
      <argument name="hasStdSPSOverrides_" type="vk::Bool32" default_raw="{}" />
      <argument name="hasStdPPSOverrides_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265SessionParametersFeedbackInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersFeedbackInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265SessionParametersFeedbackInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265SessionParametersFeedbackInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265SessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265SessionParametersFeedbackInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265SessionParametersFeedbackInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="hasStdVPSOverrides" />
    <field name="hasStdSPSOverrides" />
    <field name="hasStdPPSOverrides" />
  </struct>
  <struct name="VideoEncodeH265SessionParametersGetInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeH265SessionParametersGetInfoKHR">
      <argument name="writeStdVPS_" type="vk::Bool32" default_raw="{}" />
      <argument name="writeStdSPS_" type="vk::Bool32" default_raw="{}" />
      <argument name="writeStdPPS_" type="vk::Bool32" default_raw="{}" />
      <argument name="stdVPSId_" type="uint32_t" default_raw="{}" />
      <argument name="stdSPSId_" type="uint32_t" default_raw="{}" />
      <argument name="stdPPSId_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeH265SessionParametersGetInfoKHR">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersGetInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeH265SessionParametersGetInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeH265SessionParametersGetInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersGetInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeH265SessionParametersGetInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setWriteStdVPS">
      <argument name="writeStdVPS_" type="vk::Bool32" />
    </method>
    <method name="setWriteStdSPS">
      <argument name="writeStdSPS_" type="vk::Bool32" />
    </method>
    <method name="setWriteStdPPS">
      <argument name="writeStdPPS_" type="vk::Bool32" />
    </method>
    <method name="setStdVPSId">
      <argument name="stdVPSId_" type="uint32_t" />
    </method>
    <method name="setStdSPSId">
      <argument name="stdSPSId_" type="uint32_t" />
    </method>
    <method name="setStdPPSId">
      <argument name="stdPPSId_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeH265SessionParametersGetInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeH265SessionParametersGetInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersGetInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeH265SessionParametersGetInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="writeStdVPS" />
    <field name="writeStdSPS" />
    <field name="writeStdPPS" />
    <field name="stdVPSId" />
    <field name="stdSPSId" />
    <field name="stdPPSId" />
  </struct>
  <struct name="VideoDecodeH264CapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH264CapabilitiesKHR">
      <argument name="maxLevelIdc_" type="int" default_raw="{}" />
      <argument name="fieldOffsetGranularity_" type="vk::Offset2D" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH264CapabilitiesKHR">
      <argument name="rhs" type="const VideoDecodeH264CapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH264CapabilitiesKHR">
      <argument name="rhs" type="const VkVideoDecodeH264CapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH264CapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH264CapabilitiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH264CapabilitiesKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH264CapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH264CapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH264CapabilitiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxLevelIdc" />
    <field name="fieldOffsetGranularity" />
  </struct>
  <struct name="VideoDecodeH264DpbSlotInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH264DpbSlotInfoKHR">
      <argument name="pStdReferenceInfo_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH264DpbSlotInfoKHR">
      <argument name="rhs" type="const VideoDecodeH264DpbSlotInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH264DpbSlotInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeH264DpbSlotInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH264DpbSlotInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH264DpbSlotInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPStdReferenceInfo">
      <argument name="pStdReferenceInfo_" type="const int *" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH264DpbSlotInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH264DpbSlotInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH264DpbSlotInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH264DpbSlotInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pStdReferenceInfo" />
  </struct>
  <struct name="VideoDecodeH264PictureInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH264PictureInfoKHR">
      <argument name="pStdPictureInfo_" type="const int *" default_raw="{}" />
      <argument name="sliceCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSliceOffsets_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH264PictureInfoKHR">
      <argument name="rhs" type="const VideoDecodeH264PictureInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH264PictureInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeH264PictureInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH264PictureInfoKHR">
      <argument name="pStdPictureInfo_" type="const int *" />
      <argument name="sliceOffsets_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH264PictureInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH264PictureInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPStdPictureInfo">
      <argument name="pStdPictureInfo_" type="const int *" />
    </method>
    <method name="setSliceCount">
      <argument name="sliceCount_" type="uint32_t" />
    </method>
    <method name="setPSliceOffsets">
      <argument name="pSliceOffsets_" type="const uint32_t *" />
    </method>
    <method name="setSliceOffsets">
      <argument name="sliceOffsets_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH264PictureInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH264PictureInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH264PictureInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH264PictureInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pStdPictureInfo" />
    <field name="sliceCount" />
    <field name="pSliceOffsets" />
  </struct>
  <struct name="VideoDecodeH264ProfileInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH264ProfileInfoKHR">
      <argument name="stdProfileIdc_" type="int" default_raw="{}" />
      <argument name="pictureLayout_" type="vk::VideoDecodeH264PictureLayoutFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::VideoDecodeH264PictureLayoutFlagBitsKHR::eProgressive" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH264ProfileInfoKHR">
      <argument name="rhs" type="const VideoDecodeH264ProfileInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH264ProfileInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeH264ProfileInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH264ProfileInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH264ProfileInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStdProfileIdc">
      <argument name="stdProfileIdc_" type="int" />
    </method>
    <method name="setPictureLayout">
      <argument name="pictureLayout_" type="vk::VideoDecodeH264PictureLayoutFlagBitsKHR" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH264ProfileInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH264ProfileInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH264ProfileInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH264ProfileInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stdProfileIdc" />
    <field name="pictureLayout" />
  </struct>
  <struct name="VideoDecodeH264SessionParametersAddInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH264SessionParametersAddInfoKHR">
      <argument name="stdSPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStdSPSs_" type="const int *" default_raw="{}" />
      <argument name="stdPPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStdPPSs_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH264SessionParametersAddInfoKHR">
      <argument name="rhs" type="const VideoDecodeH264SessionParametersAddInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH264SessionParametersAddInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeH264SessionParametersAddInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH264SessionParametersAddInfoKHR">
      <argument name="stdSPSs_" type="const int &amp;" />
      <argument name="stdPPSs_" type="const int &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH264SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH264SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStdSPSCount">
      <argument name="stdSPSCount_" type="uint32_t" />
    </method>
    <method name="setPStdSPSs">
      <argument name="pStdSPSs_" type="const int *" />
    </method>
    <method name="setStdSPSs">
      <argument name="stdSPSs_" type="const int &amp;" />
    </method>
    <method name="setStdPPSCount">
      <argument name="stdPPSCount_" type="uint32_t" />
    </method>
    <method name="setPStdPPSs">
      <argument name="pStdPPSs_" type="const int *" />
    </method>
    <method name="setStdPPSs">
      <argument name="stdPPSs_" type="const int &amp;" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH264SessionParametersAddInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH264SessionParametersAddInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH264SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH264SessionParametersAddInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stdSPSCount" />
    <field name="pStdSPSs" />
    <field name="stdPPSCount" />
    <field name="pStdPPSs" />
  </struct>
  <struct name="VideoDecodeH264SessionParametersCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH264SessionParametersCreateInfoKHR">
      <argument name="maxStdSPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxStdPPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pParametersAddInfo_" type="const vk::VideoDecodeH264SessionParametersAddInfoKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH264SessionParametersCreateInfoKHR">
      <argument name="rhs" type="const VideoDecodeH264SessionParametersCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH264SessionParametersCreateInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeH264SessionParametersCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH264SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH264SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMaxStdSPSCount">
      <argument name="maxStdSPSCount_" type="uint32_t" />
    </method>
    <method name="setMaxStdPPSCount">
      <argument name="maxStdPPSCount_" type="uint32_t" />
    </method>
    <method name="setPParametersAddInfo">
      <argument name="pParametersAddInfo_" type="const vk::VideoDecodeH264SessionParametersAddInfoKHR *" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH264SessionParametersCreateInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH264SessionParametersCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH264SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH264SessionParametersCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxStdSPSCount" />
    <field name="maxStdPPSCount" />
    <field name="pParametersAddInfo" />
  </struct>
  <struct name="TextureLODGatherFormatPropertiesAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="TextureLODGatherFormatPropertiesAMD">
      <argument name="supportsTextureGatherLODBiasAMD_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="TextureLODGatherFormatPropertiesAMD">
      <argument name="rhs" type="const TextureLODGatherFormatPropertiesAMD &amp;" />
    </constructor>
    <constructor name="TextureLODGatherFormatPropertiesAMD">
      <argument name="rhs" type="const VkTextureLODGatherFormatPropertiesAMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const TextureLODGatherFormatPropertiesAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkTextureLODGatherFormatPropertiesAMD &amp;" />
    </method>
    <conversion_function name="operator const VkTextureLODGatherFormatPropertiesAMD &amp;" />
    <conversion_function name="operator VkTextureLODGatherFormatPropertiesAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const TextureLODGatherFormatPropertiesAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const TextureLODGatherFormatPropertiesAMD &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="supportsTextureGatherLODBiasAMD" />
  </struct>
  <struct name="ShaderResourceUsageAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ShaderResourceUsageAMD">
      <argument name="numUsedVgprs_" type="uint32_t" default_raw="{}" />
      <argument name="numUsedSgprs_" type="uint32_t" default_raw="{}" />
      <argument name="ldsSizePerLocalWorkGroup_" type="uint32_t" default_raw="{}" />
      <argument name="ldsUsageSizeInBytes_" type="size_t" default_raw="{}" />
      <argument name="scratchMemUsageInBytes_" type="size_t" default_raw="{}" />
    </constructor>
    <constructor name="ShaderResourceUsageAMD">
      <argument name="rhs" type="const ShaderResourceUsageAMD &amp;" />
    </constructor>
    <constructor name="ShaderResourceUsageAMD">
      <argument name="rhs" type="const VkShaderResourceUsageAMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ShaderResourceUsageAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkShaderResourceUsageAMD &amp;" />
    </method>
    <conversion_function name="operator const VkShaderResourceUsageAMD &amp;" />
    <conversion_function name="operator VkShaderResourceUsageAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ShaderResourceUsageAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ShaderResourceUsageAMD &amp;" />
    </method>
    <field name="numUsedVgprs" />
    <field name="numUsedSgprs" />
    <field name="ldsSizePerLocalWorkGroup" />
    <field name="ldsUsageSizeInBytes" />
    <field name="scratchMemUsageInBytes" />
  </struct>
  <struct name="ShaderStatisticsInfoAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ShaderStatisticsInfoAMD">
      <argument name="shaderStageMask_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="resourceUsage_" type="vk::ShaderResourceUsageAMD" default_raw="{}" />
      <argument name="numPhysicalVgprs_" type="uint32_t" default_raw="{}" />
      <argument name="numPhysicalSgprs_" type="uint32_t" default_raw="{}" />
      <argument name="numAvailableVgprs_" type="uint32_t" default_raw="{}" />
      <argument name="numAvailableSgprs_" type="uint32_t" default_raw="{}" />
      <argument name="computeWorkGroupSize_" type="const std::array&lt;uint32_t, 3&gt; &amp;" default_raw="{}" />
    </constructor>
    <constructor name="ShaderStatisticsInfoAMD">
      <argument name="rhs" type="const ShaderStatisticsInfoAMD &amp;" />
    </constructor>
    <constructor name="ShaderStatisticsInfoAMD">
      <argument name="rhs" type="const VkShaderStatisticsInfoAMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ShaderStatisticsInfoAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkShaderStatisticsInfoAMD &amp;" />
    </method>
    <conversion_function name="operator const VkShaderStatisticsInfoAMD &amp;" />
    <conversion_function name="operator VkShaderStatisticsInfoAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ShaderStatisticsInfoAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ShaderStatisticsInfoAMD &amp;" />
    </method>
    <field name="shaderStageMask" />
    <field name="resourceUsage" />
    <field name="numPhysicalVgprs" />
    <field name="numPhysicalSgprs" />
    <field name="numAvailableVgprs" />
    <field name="numAvailableSgprs" />
    <field name="computeWorkGroupSize" />
  </struct>
  <struct name="AttachmentSampleCountInfoAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AttachmentSampleCountInfoAMD">
      <argument name="colorAttachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pColorAttachmentSamples_" type="const vk::SampleCountFlagBits *" default_raw="{}" />
      <argument name="depthStencilAttachmentSamples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AttachmentSampleCountInfoAMD">
      <argument name="rhs" type="const AttachmentSampleCountInfoAMD &amp;" />
    </constructor>
    <constructor name="AttachmentSampleCountInfoAMD">
      <argument name="rhs" type="const VkAttachmentSampleCountInfoAMD &amp;" />
    </constructor>
    <constructor name="AttachmentSampleCountInfoAMD">
      <argument name="colorAttachmentSamples_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SampleCountFlagBits&gt; &amp;" />
      <argument name="depthStencilAttachmentSamples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AttachmentSampleCountInfoAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAttachmentSampleCountInfoAMD &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setColorAttachmentCount">
      <argument name="colorAttachmentCount_" type="uint32_t" />
    </method>
    <method name="setPColorAttachmentSamples">
      <argument name="pColorAttachmentSamples_" type="const vk::SampleCountFlagBits *" />
    </method>
    <method name="setColorAttachmentSamples">
      <argument name="colorAttachmentSamples_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SampleCountFlagBits&gt; &amp;" />
    </method>
    <method name="setDepthStencilAttachmentSamples">
      <argument name="depthStencilAttachmentSamples_" type="vk::SampleCountFlagBits" />
    </method>
    <conversion_function name="operator const VkAttachmentSampleCountInfoAMD &amp;" />
    <conversion_function name="operator VkAttachmentSampleCountInfoAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AttachmentSampleCountInfoAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AttachmentSampleCountInfoAMD &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="colorAttachmentCount" />
    <field name="pColorAttachmentSamples" />
    <field name="depthStencilAttachmentSamples" />
  </struct>
  <type_alias name="AttachmentSampleCountInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="AttachmentSampleCountInfoAMD" />
  <struct name="MultiviewPerViewAttributesInfoNVX" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MultiviewPerViewAttributesInfoNVX">
      <argument name="perViewAttributes_" type="vk::Bool32" default_raw="{}" />
      <argument name="perViewAttributesPositionXOnly_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MultiviewPerViewAttributesInfoNVX">
      <argument name="rhs" type="const MultiviewPerViewAttributesInfoNVX &amp;" />
    </constructor>
    <constructor name="MultiviewPerViewAttributesInfoNVX">
      <argument name="rhs" type="const VkMultiviewPerViewAttributesInfoNVX &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MultiviewPerViewAttributesInfoNVX &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMultiviewPerViewAttributesInfoNVX &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPerViewAttributes">
      <argument name="perViewAttributes_" type="vk::Bool32" />
    </method>
    <method name="setPerViewAttributesPositionXOnly">
      <argument name="perViewAttributesPositionXOnly_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkMultiviewPerViewAttributesInfoNVX &amp;" />
    <conversion_function name="operator VkMultiviewPerViewAttributesInfoNVX &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MultiviewPerViewAttributesInfoNVX &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MultiviewPerViewAttributesInfoNVX &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="perViewAttributes" />
    <field name="perViewAttributesPositionXOnly" />
  </struct>
  <struct name="RenderingFragmentDensityMapAttachmentInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderingFragmentDensityMapAttachmentInfoEXT">
      <argument name="imageView_" type="vk::ImageView" default_raw="{}" />
      <argument name="imageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderingFragmentDensityMapAttachmentInfoEXT">
      <argument name="rhs" type="const RenderingFragmentDensityMapAttachmentInfoEXT &amp;" />
    </constructor>
    <constructor name="RenderingFragmentDensityMapAttachmentInfoEXT">
      <argument name="rhs" type="const VkRenderingFragmentDensityMapAttachmentInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderingFragmentDensityMapAttachmentInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderingFragmentDensityMapAttachmentInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImageView">
      <argument name="imageView_" type="vk::ImageView" />
    </method>
    <method name="setImageLayout">
      <argument name="imageLayout_" type="vk::ImageLayout" />
    </method>
    <conversion_function name="operator const VkRenderingFragmentDensityMapAttachmentInfoEXT &amp;" />
    <conversion_function name="operator VkRenderingFragmentDensityMapAttachmentInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderingFragmentDensityMapAttachmentInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderingFragmentDensityMapAttachmentInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageView" />
    <field name="imageLayout" />
  </struct>
  <struct name="RenderingFragmentShadingRateAttachmentInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderingFragmentShadingRateAttachmentInfoKHR">
      <argument name="imageView_" type="vk::ImageView" default_raw="{}" />
      <argument name="imageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="shadingRateAttachmentTexelSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderingFragmentShadingRateAttachmentInfoKHR">
      <argument name="rhs" type="const RenderingFragmentShadingRateAttachmentInfoKHR &amp;" />
    </constructor>
    <constructor name="RenderingFragmentShadingRateAttachmentInfoKHR">
      <argument name="rhs" type="const VkRenderingFragmentShadingRateAttachmentInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderingFragmentShadingRateAttachmentInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderingFragmentShadingRateAttachmentInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImageView">
      <argument name="imageView_" type="vk::ImageView" />
    </method>
    <method name="setImageLayout">
      <argument name="imageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setShadingRateAttachmentTexelSize">
      <argument name="shadingRateAttachmentTexelSize_" type="const vk::Extent2D &amp;" />
    </method>
    <conversion_function name="operator const VkRenderingFragmentShadingRateAttachmentInfoKHR &amp;" />
    <conversion_function name="operator VkRenderingFragmentShadingRateAttachmentInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderingFragmentShadingRateAttachmentInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderingFragmentShadingRateAttachmentInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageView" />
    <field name="imageLayout" />
    <field name="shadingRateAttachmentTexelSize" />
  </struct>
  <struct name="PhysicalDeviceCornerSampledImageFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCornerSampledImageFeaturesNV">
      <argument name="cornerSampledImage_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCornerSampledImageFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceCornerSampledImageFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCornerSampledImageFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceCornerSampledImageFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCornerSampledImageFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCornerSampledImageFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setCornerSampledImage">
      <argument name="cornerSampledImage_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCornerSampledImageFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCornerSampledImageFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCornerSampledImageFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCornerSampledImageFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="cornerSampledImage" />
  </struct>
  <struct name="ExternalImageFormatPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExternalImageFormatPropertiesNV">
      <argument name="imageFormatProperties_" type="vk::ImageFormatProperties" default_raw="{}" />
      <argument name="externalMemoryFeatures_" type="vk::ExternalMemoryFeatureFlagsNV" default_raw="{}" />
      <argument name="exportFromImportedHandleTypes_" type="vk::ExternalMemoryHandleTypeFlagsNV" default_raw="{}" />
      <argument name="compatibleHandleTypes_" type="vk::ExternalMemoryHandleTypeFlagsNV" default_raw="{}" />
    </constructor>
    <constructor name="ExternalImageFormatPropertiesNV">
      <argument name="rhs" type="const ExternalImageFormatPropertiesNV &amp;" />
    </constructor>
    <constructor name="ExternalImageFormatPropertiesNV">
      <argument name="rhs" type="const VkExternalImageFormatPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExternalImageFormatPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExternalImageFormatPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkExternalImageFormatPropertiesNV &amp;" />
    <conversion_function name="operator VkExternalImageFormatPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExternalImageFormatPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExternalImageFormatPropertiesNV &amp;" />
    </method>
    <field name="imageFormatProperties" />
    <field name="externalMemoryFeatures" />
    <field name="exportFromImportedHandleTypes" />
    <field name="compatibleHandleTypes" />
  </struct>
  <struct name="ExportMemoryAllocateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExportMemoryAllocateInfoNV">
      <argument name="handleTypes_" type="vk::ExternalMemoryHandleTypeFlagsNV" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExportMemoryAllocateInfoNV">
      <argument name="rhs" type="const ExportMemoryAllocateInfoNV &amp;" />
    </constructor>
    <constructor name="ExportMemoryAllocateInfoNV">
      <argument name="rhs" type="const VkExportMemoryAllocateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExportMemoryAllocateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExportMemoryAllocateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleTypes">
      <argument name="handleTypes_" type="vk::ExternalMemoryHandleTypeFlagsNV" />
    </method>
    <conversion_function name="operator const VkExportMemoryAllocateInfoNV &amp;" />
    <conversion_function name="operator VkExportMemoryAllocateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExportMemoryAllocateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExportMemoryAllocateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleTypes" />
  </struct>
  <struct name="ExternalMemoryImageCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExternalMemoryImageCreateInfoNV">
      <argument name="handleTypes_" type="vk::ExternalMemoryHandleTypeFlagsNV" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExternalMemoryImageCreateInfoNV">
      <argument name="rhs" type="const ExternalMemoryImageCreateInfoNV &amp;" />
    </constructor>
    <constructor name="ExternalMemoryImageCreateInfoNV">
      <argument name="rhs" type="const VkExternalMemoryImageCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExternalMemoryImageCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExternalMemoryImageCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleTypes">
      <argument name="handleTypes_" type="vk::ExternalMemoryHandleTypeFlagsNV" />
    </method>
    <conversion_function name="operator const VkExternalMemoryImageCreateInfoNV &amp;" />
    <conversion_function name="operator VkExternalMemoryImageCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExternalMemoryImageCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExternalMemoryImageCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleTypes" />
  </struct>
  <struct name="ValidationFlagsEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ValidationFlagsEXT">
      <argument name="disabledValidationCheckCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDisabledValidationChecks_" type="const vk::ValidationCheckEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ValidationFlagsEXT">
      <argument name="rhs" type="const ValidationFlagsEXT &amp;" />
    </constructor>
    <constructor name="ValidationFlagsEXT">
      <argument name="rhs" type="const VkValidationFlagsEXT &amp;" />
    </constructor>
    <constructor name="ValidationFlagsEXT">
      <argument name="disabledValidationChecks_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ValidationCheckEXT&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ValidationFlagsEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkValidationFlagsEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDisabledValidationCheckCount">
      <argument name="disabledValidationCheckCount_" type="uint32_t" />
    </method>
    <method name="setPDisabledValidationChecks">
      <argument name="pDisabledValidationChecks_" type="const vk::ValidationCheckEXT *" />
    </method>
    <method name="setDisabledValidationChecks">
      <argument name="disabledValidationChecks_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ValidationCheckEXT&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkValidationFlagsEXT &amp;" />
    <conversion_function name="operator VkValidationFlagsEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ValidationFlagsEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ValidationFlagsEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="disabledValidationCheckCount" />
    <field name="pDisabledValidationChecks" />
  </struct>
  <struct name="ImageViewASTCDecodeModeEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageViewASTCDecodeModeEXT">
      <argument name="decodeMode_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageViewASTCDecodeModeEXT">
      <argument name="rhs" type="const ImageViewASTCDecodeModeEXT &amp;" />
    </constructor>
    <constructor name="ImageViewASTCDecodeModeEXT">
      <argument name="rhs" type="const VkImageViewASTCDecodeModeEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageViewASTCDecodeModeEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageViewASTCDecodeModeEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDecodeMode">
      <argument name="decodeMode_" type="vk::Format" />
    </method>
    <conversion_function name="operator const VkImageViewASTCDecodeModeEXT &amp;" />
    <conversion_function name="operator VkImageViewASTCDecodeModeEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageViewASTCDecodeModeEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageViewASTCDecodeModeEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="decodeMode" />
  </struct>
  <struct name="PhysicalDeviceASTCDecodeFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceASTCDecodeFeaturesEXT">
      <argument name="decodeModeSharedExponent_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceASTCDecodeFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceASTCDecodeFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceASTCDecodeFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceASTCDecodeFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceASTCDecodeFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceASTCDecodeFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDecodeModeSharedExponent">
      <argument name="decodeModeSharedExponent_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceASTCDecodeFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceASTCDecodeFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceASTCDecodeFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceASTCDecodeFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="decodeModeSharedExponent" />
  </struct>
  <struct name="PhysicalDevicePipelineRobustnessFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePipelineRobustnessFeaturesEXT">
      <argument name="pipelineRobustness_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePipelineRobustnessFeaturesEXT">
      <argument name="rhs" type="const PhysicalDevicePipelineRobustnessFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePipelineRobustnessFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDevicePipelineRobustnessFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePipelineRobustnessFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePipelineRobustnessFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPipelineRobustness">
      <argument name="pipelineRobustness_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePipelineRobustnessFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDevicePipelineRobustnessFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePipelineRobustnessFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePipelineRobustnessFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipelineRobustness" />
  </struct>
  <struct name="PhysicalDevicePipelineRobustnessPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePipelineRobustnessPropertiesEXT">
      <argument name="defaultRobustnessStorageBuffers_" type="vk::PipelineRobustnessBufferBehaviorEXT" default_raw="VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT::eDeviceDefault" />
      <argument name="defaultRobustnessUniformBuffers_" type="vk::PipelineRobustnessBufferBehaviorEXT" default_raw="VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT::eDeviceDefault" />
      <argument name="defaultRobustnessVertexInputs_" type="vk::PipelineRobustnessBufferBehaviorEXT" default_raw="VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT::eDeviceDefault" />
      <argument name="defaultRobustnessImages_" type="vk::PipelineRobustnessImageBehaviorEXT" default_raw="VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT::eDeviceDefault" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePipelineRobustnessPropertiesEXT">
      <argument name="rhs" type="const PhysicalDevicePipelineRobustnessPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePipelineRobustnessPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDevicePipelineRobustnessPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePipelineRobustnessPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePipelineRobustnessPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePipelineRobustnessPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDevicePipelineRobustnessPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePipelineRobustnessPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePipelineRobustnessPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="defaultRobustnessStorageBuffers" />
    <field name="defaultRobustnessUniformBuffers" />
    <field name="defaultRobustnessVertexInputs" />
    <field name="defaultRobustnessImages" />
  </struct>
  <struct name="PipelineRobustnessCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineRobustnessCreateInfoEXT">
      <argument name="storageBuffers_" type="vk::PipelineRobustnessBufferBehaviorEXT" default_raw="VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT::eDeviceDefault" />
      <argument name="uniformBuffers_" type="vk::PipelineRobustnessBufferBehaviorEXT" default_raw="VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT::eDeviceDefault" />
      <argument name="vertexInputs_" type="vk::PipelineRobustnessBufferBehaviorEXT" default_raw="VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT::eDeviceDefault" />
      <argument name="images_" type="vk::PipelineRobustnessImageBehaviorEXT" default_raw="VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT::eDeviceDefault" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineRobustnessCreateInfoEXT">
      <argument name="rhs" type="const PipelineRobustnessCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineRobustnessCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineRobustnessCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineRobustnessCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineRobustnessCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStorageBuffers">
      <argument name="storageBuffers_" type="vk::PipelineRobustnessBufferBehaviorEXT" />
    </method>
    <method name="setUniformBuffers">
      <argument name="uniformBuffers_" type="vk::PipelineRobustnessBufferBehaviorEXT" />
    </method>
    <method name="setVertexInputs">
      <argument name="vertexInputs_" type="vk::PipelineRobustnessBufferBehaviorEXT" />
    </method>
    <method name="setImages">
      <argument name="images_" type="vk::PipelineRobustnessImageBehaviorEXT" />
    </method>
    <conversion_function name="operator const VkPipelineRobustnessCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineRobustnessCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineRobustnessCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineRobustnessCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="storageBuffers" />
    <field name="uniformBuffers" />
    <field name="vertexInputs" />
    <field name="images" />
  </struct>
  <struct name="ImportMemoryFdInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImportMemoryFdInfoKHR">
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalMemoryHandleTypeFlagBits::eOpaqueFd" />
      <argument name="fd_" type="int" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImportMemoryFdInfoKHR">
      <argument name="rhs" type="const ImportMemoryFdInfoKHR &amp;" />
    </constructor>
    <constructor name="ImportMemoryFdInfoKHR">
      <argument name="rhs" type="const VkImportMemoryFdInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImportMemoryFdInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImportMemoryFdInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" />
    </method>
    <method name="setFd">
      <argument name="fd_" type="int" />
    </method>
    <conversion_function name="operator const VkImportMemoryFdInfoKHR &amp;" />
    <conversion_function name="operator VkImportMemoryFdInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImportMemoryFdInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImportMemoryFdInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleType" />
    <field name="fd" />
  </struct>
  <struct name="MemoryFdPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryFdPropertiesKHR">
      <argument name="memoryTypeBits_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryFdPropertiesKHR">
      <argument name="rhs" type="const MemoryFdPropertiesKHR &amp;" />
    </constructor>
    <constructor name="MemoryFdPropertiesKHR">
      <argument name="rhs" type="const VkMemoryFdPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryFdPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryFdPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkMemoryFdPropertiesKHR &amp;" />
    <conversion_function name="operator VkMemoryFdPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryFdPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryFdPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memoryTypeBits" />
  </struct>
  <struct name="MemoryGetFdInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryGetFdInfoKHR">
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalMemoryHandleTypeFlagBits::eOpaqueFd" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryGetFdInfoKHR">
      <argument name="rhs" type="const MemoryGetFdInfoKHR &amp;" />
    </constructor>
    <constructor name="MemoryGetFdInfoKHR">
      <argument name="rhs" type="const VkMemoryGetFdInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryGetFdInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryGetFdInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" />
    </method>
    <conversion_function name="operator const VkMemoryGetFdInfoKHR &amp;" />
    <conversion_function name="operator VkMemoryGetFdInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryGetFdInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryGetFdInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memory" />
    <field name="handleType" />
  </struct>
  <struct name="ImportSemaphoreFdInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImportSemaphoreFdInfoKHR">
      <argument name="semaphore_" type="vk::Semaphore" default_raw="{}" />
      <argument name="flags_" type="vk::SemaphoreImportFlags" default_raw="{}" />
      <argument name="handleType_" type="vk::ExternalSemaphoreHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalSemaphoreHandleTypeFlagBits::eOpaqueFd" />
      <argument name="fd_" type="int" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImportSemaphoreFdInfoKHR">
      <argument name="rhs" type="const ImportSemaphoreFdInfoKHR &amp;" />
    </constructor>
    <constructor name="ImportSemaphoreFdInfoKHR">
      <argument name="rhs" type="const VkImportSemaphoreFdInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImportSemaphoreFdInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImportSemaphoreFdInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSemaphore">
      <argument name="semaphore_" type="vk::Semaphore" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::SemaphoreImportFlags" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalSemaphoreHandleTypeFlagBits" />
    </method>
    <method name="setFd">
      <argument name="fd_" type="int" />
    </method>
    <conversion_function name="operator const VkImportSemaphoreFdInfoKHR &amp;" />
    <conversion_function name="operator VkImportSemaphoreFdInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImportSemaphoreFdInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImportSemaphoreFdInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="semaphore" />
    <field name="flags" />
    <field name="handleType" />
    <field name="fd" />
  </struct>
  <struct name="SemaphoreGetFdInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SemaphoreGetFdInfoKHR">
      <argument name="semaphore_" type="vk::Semaphore" default_raw="{}" />
      <argument name="handleType_" type="vk::ExternalSemaphoreHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalSemaphoreHandleTypeFlagBits::eOpaqueFd" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SemaphoreGetFdInfoKHR">
      <argument name="rhs" type="const SemaphoreGetFdInfoKHR &amp;" />
    </constructor>
    <constructor name="SemaphoreGetFdInfoKHR">
      <argument name="rhs" type="const VkSemaphoreGetFdInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SemaphoreGetFdInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSemaphoreGetFdInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSemaphore">
      <argument name="semaphore_" type="vk::Semaphore" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalSemaphoreHandleTypeFlagBits" />
    </method>
    <conversion_function name="operator const VkSemaphoreGetFdInfoKHR &amp;" />
    <conversion_function name="operator VkSemaphoreGetFdInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SemaphoreGetFdInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SemaphoreGetFdInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="semaphore" />
    <field name="handleType" />
  </struct>
  <struct name="PhysicalDevicePushDescriptorPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePushDescriptorPropertiesKHR">
      <argument name="maxPushDescriptors_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePushDescriptorPropertiesKHR">
      <argument name="rhs" type="const PhysicalDevicePushDescriptorPropertiesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePushDescriptorPropertiesKHR">
      <argument name="rhs" type="const VkPhysicalDevicePushDescriptorPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePushDescriptorPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePushDescriptorPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePushDescriptorPropertiesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDevicePushDescriptorPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePushDescriptorPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePushDescriptorPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxPushDescriptors" />
  </struct>
  <struct name="CommandBufferInheritanceConditionalRenderingInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CommandBufferInheritanceConditionalRenderingInfoEXT">
      <argument name="conditionalRenderingEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CommandBufferInheritanceConditionalRenderingInfoEXT">
      <argument name="rhs" type="const CommandBufferInheritanceConditionalRenderingInfoEXT &amp;" />
    </constructor>
    <constructor name="CommandBufferInheritanceConditionalRenderingInfoEXT">
      <argument name="rhs" type="const VkCommandBufferInheritanceConditionalRenderingInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CommandBufferInheritanceConditionalRenderingInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCommandBufferInheritanceConditionalRenderingInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setConditionalRenderingEnable">
      <argument name="conditionalRenderingEnable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkCommandBufferInheritanceConditionalRenderingInfoEXT &amp;" />
    <conversion_function name="operator VkCommandBufferInheritanceConditionalRenderingInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CommandBufferInheritanceConditionalRenderingInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CommandBufferInheritanceConditionalRenderingInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="conditionalRenderingEnable" />
  </struct>
  <struct name="ConditionalRenderingBeginInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ConditionalRenderingBeginInfoEXT">
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="flags_" type="vk::ConditionalRenderingFlagsEXT" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ConditionalRenderingBeginInfoEXT">
      <argument name="rhs" type="const ConditionalRenderingBeginInfoEXT &amp;" />
    </constructor>
    <constructor name="ConditionalRenderingBeginInfoEXT">
      <argument name="rhs" type="const VkConditionalRenderingBeginInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ConditionalRenderingBeginInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkConditionalRenderingBeginInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::ConditionalRenderingFlagsEXT" />
    </method>
    <conversion_function name="operator const VkConditionalRenderingBeginInfoEXT &amp;" />
    <conversion_function name="operator VkConditionalRenderingBeginInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ConditionalRenderingBeginInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ConditionalRenderingBeginInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="buffer" />
    <field name="offset" />
    <field name="flags" />
  </struct>
  <struct name="PhysicalDeviceConditionalRenderingFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceConditionalRenderingFeaturesEXT">
      <argument name="conditionalRendering_" type="vk::Bool32" default_raw="{}" />
      <argument name="inheritedConditionalRendering_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceConditionalRenderingFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceConditionalRenderingFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceConditionalRenderingFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceConditionalRenderingFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceConditionalRenderingFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceConditionalRenderingFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setConditionalRendering">
      <argument name="conditionalRendering_" type="vk::Bool32" />
    </method>
    <method name="setInheritedConditionalRendering">
      <argument name="inheritedConditionalRendering_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceConditionalRenderingFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceConditionalRenderingFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceConditionalRenderingFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceConditionalRenderingFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="conditionalRendering" />
    <field name="inheritedConditionalRendering" />
  </struct>
  <struct name="PresentRegionKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PresentRegionKHR">
      <argument name="rectangleCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRectangles_" type="const vk::RectLayerKHR *" default_raw="{}" />
    </constructor>
    <constructor name="PresentRegionKHR">
      <argument name="rhs" type="const PresentRegionKHR &amp;" />
    </constructor>
    <constructor name="PresentRegionKHR">
      <argument name="rhs" type="const VkPresentRegionKHR &amp;" />
    </constructor>
    <constructor name="PresentRegionKHR">
      <argument name="rectangles_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::RectLayerKHR&gt; &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PresentRegionKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPresentRegionKHR &amp;" />
    </method>
    <method name="setRectangleCount">
      <argument name="rectangleCount_" type="uint32_t" />
    </method>
    <method name="setPRectangles">
      <argument name="pRectangles_" type="const vk::RectLayerKHR *" />
    </method>
    <method name="setRectangles">
      <argument name="rectangles_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::RectLayerKHR&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPresentRegionKHR &amp;" />
    <conversion_function name="operator VkPresentRegionKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PresentRegionKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PresentRegionKHR &amp;" />
    </method>
    <field name="rectangleCount" />
    <field name="pRectangles" />
  </struct>
  <struct name="PresentRegionsKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PresentRegionsKHR">
      <argument name="swapchainCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRegions_" type="const vk::PresentRegionKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PresentRegionsKHR">
      <argument name="rhs" type="const PresentRegionsKHR &amp;" />
    </constructor>
    <constructor name="PresentRegionsKHR">
      <argument name="rhs" type="const VkPresentRegionsKHR &amp;" />
    </constructor>
    <constructor name="PresentRegionsKHR">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PresentRegionKHR&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PresentRegionsKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPresentRegionsKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSwapchainCount">
      <argument name="swapchainCount_" type="uint32_t" />
    </method>
    <method name="setPRegions">
      <argument name="pRegions_" type="const vk::PresentRegionKHR *" />
    </method>
    <method name="setRegions">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PresentRegionKHR&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPresentRegionsKHR &amp;" />
    <conversion_function name="operator VkPresentRegionsKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PresentRegionsKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PresentRegionsKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="swapchainCount" />
    <field name="pRegions" />
  </struct>
  <struct name="RectLayerKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RectLayerKHR">
      <argument name="offset_" type="vk::Offset2D" default_raw="{}" />
      <argument name="extent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="layer_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="RectLayerKHR">
      <argument name="rhs" type="const RectLayerKHR &amp;" />
    </constructor>
    <constructor name="RectLayerKHR">
      <argument name="rhs" type="const VkRectLayerKHR &amp;" />
    </constructor>
    <constructor name="RectLayerKHR">
      <argument name="rect2D" type="const Rect2D &amp;" />
      <argument name="layer_" type="uint32_t" default_raw="{}" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RectLayerKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRectLayerKHR &amp;" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="const vk::Offset2D &amp;" />
    </method>
    <method name="setExtent">
      <argument name="extent_" type="const vk::Extent2D &amp;" />
    </method>
    <method name="setLayer">
      <argument name="layer_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkRectLayerKHR &amp;" />
    <conversion_function name="operator VkRectLayerKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RectLayerKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RectLayerKHR &amp;" />
    </method>
    <field name="offset" />
    <field name="extent" />
    <field name="layer" />
  </struct>
  <struct name="PipelineViewportWScalingStateCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineViewportWScalingStateCreateInfoNV">
      <argument name="viewportWScalingEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="viewportCount_" type="uint32_t" default_raw="{}" />
      <argument name="pViewportWScalings_" type="const vk::ViewportWScalingNV *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineViewportWScalingStateCreateInfoNV">
      <argument name="rhs" type="const PipelineViewportWScalingStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineViewportWScalingStateCreateInfoNV">
      <argument name="rhs" type="const VkPipelineViewportWScalingStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineViewportWScalingStateCreateInfoNV">
      <argument name="viewportWScalingEnable_" type="vk::Bool32" />
      <argument name="viewportWScalings_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ViewportWScalingNV&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineViewportWScalingStateCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineViewportWScalingStateCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setViewportWScalingEnable">
      <argument name="viewportWScalingEnable_" type="vk::Bool32" />
    </method>
    <method name="setViewportCount">
      <argument name="viewportCount_" type="uint32_t" />
    </method>
    <method name="setPViewportWScalings">
      <argument name="pViewportWScalings_" type="const vk::ViewportWScalingNV *" />
    </method>
    <method name="setViewportWScalings">
      <argument name="viewportWScalings_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ViewportWScalingNV&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineViewportWScalingStateCreateInfoNV &amp;" />
    <conversion_function name="operator VkPipelineViewportWScalingStateCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineViewportWScalingStateCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineViewportWScalingStateCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="viewportWScalingEnable" />
    <field name="viewportCount" />
    <field name="pViewportWScalings" />
  </struct>
  <struct name="ViewportWScalingNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ViewportWScalingNV">
      <argument name="xcoeff_" type="float" default_raw="{}" />
      <argument name="ycoeff_" type="float" default_raw="{}" />
    </constructor>
    <constructor name="ViewportWScalingNV">
      <argument name="rhs" type="const ViewportWScalingNV &amp;" />
    </constructor>
    <constructor name="ViewportWScalingNV">
      <argument name="rhs" type="const VkViewportWScalingNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ViewportWScalingNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkViewportWScalingNV &amp;" />
    </method>
    <method name="setXcoeff">
      <argument name="xcoeff_" type="float" />
    </method>
    <method name="setYcoeff">
      <argument name="ycoeff_" type="float" />
    </method>
    <conversion_function name="operator const VkViewportWScalingNV &amp;" />
    <conversion_function name="operator VkViewportWScalingNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ViewportWScalingNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ViewportWScalingNV &amp;" />
    </method>
    <field name="xcoeff" />
    <field name="ycoeff" />
  </struct>
  <struct name="SurfaceCapabilities2EXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SurfaceCapabilities2EXT">
      <argument name="minImageCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxImageCount_" type="uint32_t" default_raw="{}" />
      <argument name="currentExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="minImageExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxImageExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxImageArrayLayers_" type="uint32_t" default_raw="{}" />
      <argument name="supportedTransforms_" type="vk::SurfaceTransformFlagsKHR" default_raw="{}" />
      <argument name="currentTransform_" type="vk::SurfaceTransformFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::SurfaceTransformFlagBitsKHR::eIdentity" />
      <argument name="supportedCompositeAlpha_" type="vk::CompositeAlphaFlagsKHR" default_raw="{}" />
      <argument name="supportedUsageFlags_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="supportedSurfaceCounters_" type="vk::SurfaceCounterFlagsEXT" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SurfaceCapabilities2EXT">
      <argument name="rhs" type="const SurfaceCapabilities2EXT &amp;" />
    </constructor>
    <constructor name="SurfaceCapabilities2EXT">
      <argument name="rhs" type="const VkSurfaceCapabilities2EXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SurfaceCapabilities2EXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSurfaceCapabilities2EXT &amp;" />
    </method>
    <conversion_function name="operator const VkSurfaceCapabilities2EXT &amp;" />
    <conversion_function name="operator VkSurfaceCapabilities2EXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SurfaceCapabilities2EXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SurfaceCapabilities2EXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="minImageCount" />
    <field name="maxImageCount" />
    <field name="currentExtent" />
    <field name="minImageExtent" />
    <field name="maxImageExtent" />
    <field name="maxImageArrayLayers" />
    <field name="supportedTransforms" />
    <field name="currentTransform" />
    <field name="supportedCompositeAlpha" />
    <field name="supportedUsageFlags" />
    <field name="supportedSurfaceCounters" />
  </struct>
  <struct name="DeviceEventInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceEventInfoEXT">
      <argument name="deviceEvent_" type="vk::DeviceEventTypeEXT" default_raw="VULKAN_HPP_NAMESPACE::DeviceEventTypeEXT::eDisplayHotplug" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceEventInfoEXT">
      <argument name="rhs" type="const DeviceEventInfoEXT &amp;" />
    </constructor>
    <constructor name="DeviceEventInfoEXT">
      <argument name="rhs" type="const VkDeviceEventInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceEventInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceEventInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDeviceEvent">
      <argument name="deviceEvent_" type="vk::DeviceEventTypeEXT" />
    </method>
    <conversion_function name="operator const VkDeviceEventInfoEXT &amp;" />
    <conversion_function name="operator VkDeviceEventInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceEventInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceEventInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceEvent" />
  </struct>
  <struct name="DisplayEventInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayEventInfoEXT">
      <argument name="displayEvent_" type="vk::DisplayEventTypeEXT" default_raw="VULKAN_HPP_NAMESPACE::DisplayEventTypeEXT::eFirstPixelOut" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DisplayEventInfoEXT">
      <argument name="rhs" type="const DisplayEventInfoEXT &amp;" />
    </constructor>
    <constructor name="DisplayEventInfoEXT">
      <argument name="rhs" type="const VkDisplayEventInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayEventInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayEventInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDisplayEvent">
      <argument name="displayEvent_" type="vk::DisplayEventTypeEXT" />
    </method>
    <conversion_function name="operator const VkDisplayEventInfoEXT &amp;" />
    <conversion_function name="operator VkDisplayEventInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayEventInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayEventInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="displayEvent" />
  </struct>
  <struct name="DisplayPowerInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayPowerInfoEXT">
      <argument name="powerState_" type="vk::DisplayPowerStateEXT" default_raw="VULKAN_HPP_NAMESPACE::DisplayPowerStateEXT::eOff" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DisplayPowerInfoEXT">
      <argument name="rhs" type="const DisplayPowerInfoEXT &amp;" />
    </constructor>
    <constructor name="DisplayPowerInfoEXT">
      <argument name="rhs" type="const VkDisplayPowerInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayPowerInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayPowerInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPowerState">
      <argument name="powerState_" type="vk::DisplayPowerStateEXT" />
    </method>
    <conversion_function name="operator const VkDisplayPowerInfoEXT &amp;" />
    <conversion_function name="operator VkDisplayPowerInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayPowerInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayPowerInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="powerState" />
  </struct>
  <struct name="SwapchainCounterCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SwapchainCounterCreateInfoEXT">
      <argument name="surfaceCounters_" type="vk::SurfaceCounterFlagsEXT" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SwapchainCounterCreateInfoEXT">
      <argument name="rhs" type="const SwapchainCounterCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="SwapchainCounterCreateInfoEXT">
      <argument name="rhs" type="const VkSwapchainCounterCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SwapchainCounterCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSwapchainCounterCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSurfaceCounters">
      <argument name="surfaceCounters_" type="vk::SurfaceCounterFlagsEXT" />
    </method>
    <conversion_function name="operator const VkSwapchainCounterCreateInfoEXT &amp;" />
    <conversion_function name="operator VkSwapchainCounterCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SwapchainCounterCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SwapchainCounterCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="surfaceCounters" />
  </struct>
  <struct name="PastPresentationTimingGOOGLE" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PastPresentationTimingGOOGLE">
      <argument name="presentID_" type="uint32_t" default_raw="{}" />
      <argument name="desiredPresentTime_" type="uint64_t" default_raw="{}" />
      <argument name="actualPresentTime_" type="uint64_t" default_raw="{}" />
      <argument name="earliestPresentTime_" type="uint64_t" default_raw="{}" />
      <argument name="presentMargin_" type="uint64_t" default_raw="{}" />
    </constructor>
    <constructor name="PastPresentationTimingGOOGLE">
      <argument name="rhs" type="const PastPresentationTimingGOOGLE &amp;" />
    </constructor>
    <constructor name="PastPresentationTimingGOOGLE">
      <argument name="rhs" type="const VkPastPresentationTimingGOOGLE &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PastPresentationTimingGOOGLE &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPastPresentationTimingGOOGLE &amp;" />
    </method>
    <conversion_function name="operator const VkPastPresentationTimingGOOGLE &amp;" />
    <conversion_function name="operator VkPastPresentationTimingGOOGLE &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PastPresentationTimingGOOGLE &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PastPresentationTimingGOOGLE &amp;" />
    </method>
    <field name="presentID" />
    <field name="desiredPresentTime" />
    <field name="actualPresentTime" />
    <field name="earliestPresentTime" />
    <field name="presentMargin" />
  </struct>
  <struct name="PresentTimeGOOGLE" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PresentTimeGOOGLE">
      <argument name="presentID_" type="uint32_t" default_raw="{}" />
      <argument name="desiredPresentTime_" type="uint64_t" default_raw="{}" />
    </constructor>
    <constructor name="PresentTimeGOOGLE">
      <argument name="rhs" type="const PresentTimeGOOGLE &amp;" />
    </constructor>
    <constructor name="PresentTimeGOOGLE">
      <argument name="rhs" type="const VkPresentTimeGOOGLE &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PresentTimeGOOGLE &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPresentTimeGOOGLE &amp;" />
    </method>
    <method name="setPresentID">
      <argument name="presentID_" type="uint32_t" />
    </method>
    <method name="setDesiredPresentTime">
      <argument name="desiredPresentTime_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkPresentTimeGOOGLE &amp;" />
    <conversion_function name="operator VkPresentTimeGOOGLE &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PresentTimeGOOGLE &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PresentTimeGOOGLE &amp;" />
    </method>
    <field name="presentID" />
    <field name="desiredPresentTime" />
  </struct>
  <struct name="PresentTimesInfoGOOGLE" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PresentTimesInfoGOOGLE">
      <argument name="swapchainCount_" type="uint32_t" default_raw="{}" />
      <argument name="pTimes_" type="const vk::PresentTimeGOOGLE *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PresentTimesInfoGOOGLE">
      <argument name="rhs" type="const PresentTimesInfoGOOGLE &amp;" />
    </constructor>
    <constructor name="PresentTimesInfoGOOGLE">
      <argument name="rhs" type="const VkPresentTimesInfoGOOGLE &amp;" />
    </constructor>
    <constructor name="PresentTimesInfoGOOGLE">
      <argument name="times_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PresentTimeGOOGLE&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PresentTimesInfoGOOGLE &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPresentTimesInfoGOOGLE &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSwapchainCount">
      <argument name="swapchainCount_" type="uint32_t" />
    </method>
    <method name="setPTimes">
      <argument name="pTimes_" type="const vk::PresentTimeGOOGLE *" />
    </method>
    <method name="setTimes">
      <argument name="times_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PresentTimeGOOGLE&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPresentTimesInfoGOOGLE &amp;" />
    <conversion_function name="operator VkPresentTimesInfoGOOGLE &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PresentTimesInfoGOOGLE &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PresentTimesInfoGOOGLE &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="swapchainCount" />
    <field name="pTimes" />
  </struct>
  <struct name="RefreshCycleDurationGOOGLE" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RefreshCycleDurationGOOGLE">
      <argument name="refreshDuration_" type="uint64_t" default_raw="{}" />
    </constructor>
    <constructor name="RefreshCycleDurationGOOGLE">
      <argument name="rhs" type="const RefreshCycleDurationGOOGLE &amp;" />
    </constructor>
    <constructor name="RefreshCycleDurationGOOGLE">
      <argument name="rhs" type="const VkRefreshCycleDurationGOOGLE &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RefreshCycleDurationGOOGLE &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRefreshCycleDurationGOOGLE &amp;" />
    </method>
    <conversion_function name="operator const VkRefreshCycleDurationGOOGLE &amp;" />
    <conversion_function name="operator VkRefreshCycleDurationGOOGLE &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RefreshCycleDurationGOOGLE &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RefreshCycleDurationGOOGLE &amp;" />
    </method>
    <field name="refreshDuration" />
  </struct>
  <struct name="PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX">
      <argument name="perViewPositionAllComponents_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX">
      <argument name="rhs" type="const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="perViewPositionAllComponents" />
  </struct>
  <struct name="PipelineViewportSwizzleStateCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineViewportSwizzleStateCreateInfoNV">
      <argument name="flags_" type="vk::PipelineViewportSwizzleStateCreateFlagsNV" default_raw="{}" />
      <argument name="viewportCount_" type="uint32_t" default_raw="{}" />
      <argument name="pViewportSwizzles_" type="const vk::ViewportSwizzleNV *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineViewportSwizzleStateCreateInfoNV">
      <argument name="rhs" type="const PipelineViewportSwizzleStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineViewportSwizzleStateCreateInfoNV">
      <argument name="rhs" type="const VkPipelineViewportSwizzleStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineViewportSwizzleStateCreateInfoNV">
      <argument name="flags_" type="vk::PipelineViewportSwizzleStateCreateFlagsNV" />
      <argument name="viewportSwizzles_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ViewportSwizzleNV&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineViewportSwizzleStateCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineViewportSwizzleStateCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineViewportSwizzleStateCreateFlagsNV" />
    </method>
    <method name="setViewportCount">
      <argument name="viewportCount_" type="uint32_t" />
    </method>
    <method name="setPViewportSwizzles">
      <argument name="pViewportSwizzles_" type="const vk::ViewportSwizzleNV *" />
    </method>
    <method name="setViewportSwizzles">
      <argument name="viewportSwizzles_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ViewportSwizzleNV&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineViewportSwizzleStateCreateInfoNV &amp;" />
    <conversion_function name="operator VkPipelineViewportSwizzleStateCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineViewportSwizzleStateCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineViewportSwizzleStateCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="viewportCount" />
    <field name="pViewportSwizzles" />
  </struct>
  <struct name="ViewportSwizzleNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ViewportSwizzleNV">
      <argument name="x_" type="vk::ViewportCoordinateSwizzleNV" default_raw="VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::ePositiveX" />
      <argument name="y_" type="vk::ViewportCoordinateSwizzleNV" default_raw="VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::ePositiveX" />
      <argument name="z_" type="vk::ViewportCoordinateSwizzleNV" default_raw="VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::ePositiveX" />
      <argument name="w_" type="vk::ViewportCoordinateSwizzleNV" default_raw="VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::ePositiveX" />
    </constructor>
    <constructor name="ViewportSwizzleNV">
      <argument name="rhs" type="const ViewportSwizzleNV &amp;" />
    </constructor>
    <constructor name="ViewportSwizzleNV">
      <argument name="rhs" type="const VkViewportSwizzleNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ViewportSwizzleNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkViewportSwizzleNV &amp;" />
    </method>
    <method name="setX">
      <argument name="x_" type="vk::ViewportCoordinateSwizzleNV" />
    </method>
    <method name="setY">
      <argument name="y_" type="vk::ViewportCoordinateSwizzleNV" />
    </method>
    <method name="setZ">
      <argument name="z_" type="vk::ViewportCoordinateSwizzleNV" />
    </method>
    <method name="setW">
      <argument name="w_" type="vk::ViewportCoordinateSwizzleNV" />
    </method>
    <conversion_function name="operator const VkViewportSwizzleNV &amp;" />
    <conversion_function name="operator VkViewportSwizzleNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ViewportSwizzleNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ViewportSwizzleNV &amp;" />
    </method>
    <field name="x" />
    <field name="y" />
    <field name="z" />
    <field name="w" />
  </struct>
  <struct name="PhysicalDeviceDiscardRectanglePropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDiscardRectanglePropertiesEXT">
      <argument name="maxDiscardRectangles_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDiscardRectanglePropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceDiscardRectanglePropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDiscardRectanglePropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceDiscardRectanglePropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDiscardRectanglePropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDiscardRectanglePropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDiscardRectanglePropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDiscardRectanglePropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDiscardRectanglePropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDiscardRectanglePropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxDiscardRectangles" />
  </struct>
  <struct name="PipelineDiscardRectangleStateCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineDiscardRectangleStateCreateInfoEXT">
      <argument name="flags_" type="vk::PipelineDiscardRectangleStateCreateFlagsEXT" default_raw="{}" />
      <argument name="discardRectangleMode_" type="vk::DiscardRectangleModeEXT" default_raw="VULKAN_HPP_NAMESPACE::DiscardRectangleModeEXT::eInclusive" />
      <argument name="discardRectangleCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDiscardRectangles_" type="const vk::Rect2D *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineDiscardRectangleStateCreateInfoEXT">
      <argument name="rhs" type="const PipelineDiscardRectangleStateCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineDiscardRectangleStateCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineDiscardRectangleStateCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineDiscardRectangleStateCreateInfoEXT">
      <argument name="flags_" type="vk::PipelineDiscardRectangleStateCreateFlagsEXT" />
      <argument name="discardRectangleMode_" type="vk::DiscardRectangleModeEXT" />
      <argument name="discardRectangles_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineDiscardRectangleStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineDiscardRectangleStateCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineDiscardRectangleStateCreateFlagsEXT" />
    </method>
    <method name="setDiscardRectangleMode">
      <argument name="discardRectangleMode_" type="vk::DiscardRectangleModeEXT" />
    </method>
    <method name="setDiscardRectangleCount">
      <argument name="discardRectangleCount_" type="uint32_t" />
    </method>
    <method name="setPDiscardRectangles">
      <argument name="pDiscardRectangles_" type="const vk::Rect2D *" />
    </method>
    <method name="setDiscardRectangles">
      <argument name="discardRectangles_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineDiscardRectangleStateCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineDiscardRectangleStateCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineDiscardRectangleStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineDiscardRectangleStateCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="discardRectangleMode" />
    <field name="discardRectangleCount" />
    <field name="pDiscardRectangles" />
  </struct>
  <struct name="PhysicalDeviceConservativeRasterizationPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceConservativeRasterizationPropertiesEXT">
      <argument name="primitiveOverestimationSize_" type="float" default_raw="{}" />
      <argument name="maxExtraPrimitiveOverestimationSize_" type="float" default_raw="{}" />
      <argument name="extraPrimitiveOverestimationSizeGranularity_" type="float" default_raw="{}" />
      <argument name="primitiveUnderestimation_" type="vk::Bool32" default_raw="{}" />
      <argument name="conservativePointAndLineRasterization_" type="vk::Bool32" default_raw="{}" />
      <argument name="degenerateTrianglesRasterized_" type="vk::Bool32" default_raw="{}" />
      <argument name="degenerateLinesRasterized_" type="vk::Bool32" default_raw="{}" />
      <argument name="fullyCoveredFragmentShaderInputVariable_" type="vk::Bool32" default_raw="{}" />
      <argument name="conservativeRasterizationPostDepthCoverage_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceConservativeRasterizationPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceConservativeRasterizationPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceConservativeRasterizationPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceConservativeRasterizationPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceConservativeRasterizationPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceConservativeRasterizationPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceConservativeRasterizationPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceConservativeRasterizationPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceConservativeRasterizationPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceConservativeRasterizationPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="primitiveOverestimationSize" />
    <field name="maxExtraPrimitiveOverestimationSize" />
    <field name="extraPrimitiveOverestimationSizeGranularity" />
    <field name="primitiveUnderestimation" />
    <field name="conservativePointAndLineRasterization" />
    <field name="degenerateTrianglesRasterized" />
    <field name="degenerateLinesRasterized" />
    <field name="fullyCoveredFragmentShaderInputVariable" />
    <field name="conservativeRasterizationPostDepthCoverage" />
  </struct>
  <struct name="PipelineRasterizationConservativeStateCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineRasterizationConservativeStateCreateInfoEXT">
      <argument name="flags_" type="vk::PipelineRasterizationConservativeStateCreateFlagsEXT" default_raw="{}" />
      <argument name="conservativeRasterizationMode_" type="vk::ConservativeRasterizationModeEXT" default_raw="VULKAN_HPP_NAMESPACE::ConservativeRasterizationModeEXT::eDisabled" />
      <argument name="extraPrimitiveOverestimationSize_" type="float" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineRasterizationConservativeStateCreateInfoEXT">
      <argument name="rhs" type="const PipelineRasterizationConservativeStateCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineRasterizationConservativeStateCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineRasterizationConservativeStateCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineRasterizationConservativeStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineRasterizationConservativeStateCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineRasterizationConservativeStateCreateFlagsEXT" />
    </method>
    <method name="setConservativeRasterizationMode">
      <argument name="conservativeRasterizationMode_" type="vk::ConservativeRasterizationModeEXT" />
    </method>
    <method name="setExtraPrimitiveOverestimationSize">
      <argument name="extraPrimitiveOverestimationSize_" type="float" />
    </method>
    <conversion_function name="operator const VkPipelineRasterizationConservativeStateCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineRasterizationConservativeStateCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineRasterizationConservativeStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineRasterizationConservativeStateCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="conservativeRasterizationMode" />
    <field name="extraPrimitiveOverestimationSize" />
  </struct>
  <struct name="PhysicalDeviceDepthClipEnableFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDepthClipEnableFeaturesEXT">
      <argument name="depthClipEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDepthClipEnableFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceDepthClipEnableFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDepthClipEnableFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceDepthClipEnableFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDepthClipEnableFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDepthClipEnableFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDepthClipEnable">
      <argument name="depthClipEnable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDepthClipEnableFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDepthClipEnableFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDepthClipEnableFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDepthClipEnableFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="depthClipEnable" />
  </struct>
  <struct name="PipelineRasterizationDepthClipStateCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineRasterizationDepthClipStateCreateInfoEXT">
      <argument name="flags_" type="vk::PipelineRasterizationDepthClipStateCreateFlagsEXT" default_raw="{}" />
      <argument name="depthClipEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineRasterizationDepthClipStateCreateInfoEXT">
      <argument name="rhs" type="const PipelineRasterizationDepthClipStateCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineRasterizationDepthClipStateCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineRasterizationDepthClipStateCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineRasterizationDepthClipStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineRasterizationDepthClipStateCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineRasterizationDepthClipStateCreateFlagsEXT" />
    </method>
    <method name="setDepthClipEnable">
      <argument name="depthClipEnable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPipelineRasterizationDepthClipStateCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineRasterizationDepthClipStateCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineRasterizationDepthClipStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineRasterizationDepthClipStateCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="depthClipEnable" />
  </struct>
  <struct name="HdrMetadataEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="HdrMetadataEXT">
      <argument name="displayPrimaryRed_" type="vk::XYColorEXT" default_raw="{}" />
      <argument name="displayPrimaryGreen_" type="vk::XYColorEXT" default_raw="{}" />
      <argument name="displayPrimaryBlue_" type="vk::XYColorEXT" default_raw="{}" />
      <argument name="whitePoint_" type="vk::XYColorEXT" default_raw="{}" />
      <argument name="maxLuminance_" type="float" default_raw="{}" />
      <argument name="minLuminance_" type="float" default_raw="{}" />
      <argument name="maxContentLightLevel_" type="float" default_raw="{}" />
      <argument name="maxFrameAverageLightLevel_" type="float" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="HdrMetadataEXT">
      <argument name="rhs" type="const HdrMetadataEXT &amp;" />
    </constructor>
    <constructor name="HdrMetadataEXT">
      <argument name="rhs" type="const VkHdrMetadataEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const HdrMetadataEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkHdrMetadataEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDisplayPrimaryRed">
      <argument name="displayPrimaryRed_" type="const vk::XYColorEXT &amp;" />
    </method>
    <method name="setDisplayPrimaryGreen">
      <argument name="displayPrimaryGreen_" type="const vk::XYColorEXT &amp;" />
    </method>
    <method name="setDisplayPrimaryBlue">
      <argument name="displayPrimaryBlue_" type="const vk::XYColorEXT &amp;" />
    </method>
    <method name="setWhitePoint">
      <argument name="whitePoint_" type="const vk::XYColorEXT &amp;" />
    </method>
    <method name="setMaxLuminance">
      <argument name="maxLuminance_" type="float" />
    </method>
    <method name="setMinLuminance">
      <argument name="minLuminance_" type="float" />
    </method>
    <method name="setMaxContentLightLevel">
      <argument name="maxContentLightLevel_" type="float" />
    </method>
    <method name="setMaxFrameAverageLightLevel">
      <argument name="maxFrameAverageLightLevel_" type="float" />
    </method>
    <conversion_function name="operator const VkHdrMetadataEXT &amp;" />
    <conversion_function name="operator VkHdrMetadataEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const HdrMetadataEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const HdrMetadataEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="displayPrimaryRed" />
    <field name="displayPrimaryGreen" />
    <field name="displayPrimaryBlue" />
    <field name="whitePoint" />
    <field name="maxLuminance" />
    <field name="minLuminance" />
    <field name="maxContentLightLevel" />
    <field name="maxFrameAverageLightLevel" />
  </struct>
  <struct name="XYColorEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="XYColorEXT">
      <argument name="x_" type="float" default_raw="{}" />
      <argument name="y_" type="float" default_raw="{}" />
    </constructor>
    <constructor name="XYColorEXT">
      <argument name="rhs" type="const XYColorEXT &amp;" />
    </constructor>
    <constructor name="XYColorEXT">
      <argument name="rhs" type="const VkXYColorEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const XYColorEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkXYColorEXT &amp;" />
    </method>
    <method name="setX">
      <argument name="x_" type="float" />
    </method>
    <method name="setY">
      <argument name="y_" type="float" />
    </method>
    <conversion_function name="operator const VkXYColorEXT &amp;" />
    <conversion_function name="operator VkXYColorEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const XYColorEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const XYColorEXT &amp;" />
    </method>
    <field name="x" />
    <field name="y" />
  </struct>
  <struct name="PhysicalDeviceRelaxedLineRasterizationFeaturesIMG" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRelaxedLineRasterizationFeaturesIMG">
      <argument name="relaxedLineRasterization_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRelaxedLineRasterizationFeaturesIMG">
      <argument name="rhs" type="const PhysicalDeviceRelaxedLineRasterizationFeaturesIMG &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRelaxedLineRasterizationFeaturesIMG">
      <argument name="rhs" type="const VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRelaxedLineRasterizationFeaturesIMG &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRelaxedLineRasterization">
      <argument name="relaxedLineRasterization_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRelaxedLineRasterizationFeaturesIMG &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRelaxedLineRasterizationFeaturesIMG &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="relaxedLineRasterization" />
  </struct>
  <struct name="SharedPresentSurfaceCapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SharedPresentSurfaceCapabilitiesKHR">
      <argument name="sharedPresentSupportedUsageFlags_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SharedPresentSurfaceCapabilitiesKHR">
      <argument name="rhs" type="const SharedPresentSurfaceCapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="SharedPresentSurfaceCapabilitiesKHR">
      <argument name="rhs" type="const VkSharedPresentSurfaceCapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SharedPresentSurfaceCapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSharedPresentSurfaceCapabilitiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkSharedPresentSurfaceCapabilitiesKHR &amp;" />
    <conversion_function name="operator VkSharedPresentSurfaceCapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SharedPresentSurfaceCapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SharedPresentSurfaceCapabilitiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="sharedPresentSupportedUsageFlags" />
  </struct>
  <struct name="FenceGetFdInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FenceGetFdInfoKHR">
      <argument name="fence_" type="vk::Fence" default_raw="{}" />
      <argument name="handleType_" type="vk::ExternalFenceHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalFenceHandleTypeFlagBits::eOpaqueFd" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="FenceGetFdInfoKHR">
      <argument name="rhs" type="const FenceGetFdInfoKHR &amp;" />
    </constructor>
    <constructor name="FenceGetFdInfoKHR">
      <argument name="rhs" type="const VkFenceGetFdInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const FenceGetFdInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFenceGetFdInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFence">
      <argument name="fence_" type="vk::Fence" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalFenceHandleTypeFlagBits" />
    </method>
    <conversion_function name="operator const VkFenceGetFdInfoKHR &amp;" />
    <conversion_function name="operator VkFenceGetFdInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FenceGetFdInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FenceGetFdInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fence" />
    <field name="handleType" />
  </struct>
  <struct name="ImportFenceFdInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImportFenceFdInfoKHR">
      <argument name="fence_" type="vk::Fence" default_raw="{}" />
      <argument name="flags_" type="vk::FenceImportFlags" default_raw="{}" />
      <argument name="handleType_" type="vk::ExternalFenceHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalFenceHandleTypeFlagBits::eOpaqueFd" />
      <argument name="fd_" type="int" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImportFenceFdInfoKHR">
      <argument name="rhs" type="const ImportFenceFdInfoKHR &amp;" />
    </constructor>
    <constructor name="ImportFenceFdInfoKHR">
      <argument name="rhs" type="const VkImportFenceFdInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImportFenceFdInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImportFenceFdInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFence">
      <argument name="fence_" type="vk::Fence" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::FenceImportFlags" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalFenceHandleTypeFlagBits" />
    </method>
    <method name="setFd">
      <argument name="fd_" type="int" />
    </method>
    <conversion_function name="operator const VkImportFenceFdInfoKHR &amp;" />
    <conversion_function name="operator VkImportFenceFdInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImportFenceFdInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImportFenceFdInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fence" />
    <field name="flags" />
    <field name="handleType" />
    <field name="fd" />
  </struct>
  <struct name="AcquireProfilingLockInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AcquireProfilingLockInfoKHR">
      <argument name="flags_" type="vk::AcquireProfilingLockFlagsKHR" default_raw="{}" />
      <argument name="timeout_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AcquireProfilingLockInfoKHR">
      <argument name="rhs" type="const AcquireProfilingLockInfoKHR &amp;" />
    </constructor>
    <constructor name="AcquireProfilingLockInfoKHR">
      <argument name="rhs" type="const VkAcquireProfilingLockInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AcquireProfilingLockInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAcquireProfilingLockInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::AcquireProfilingLockFlagsKHR" />
    </method>
    <method name="setTimeout">
      <argument name="timeout_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkAcquireProfilingLockInfoKHR &amp;" />
    <conversion_function name="operator VkAcquireProfilingLockInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AcquireProfilingLockInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AcquireProfilingLockInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="timeout" />
  </struct>
  <struct name="PerformanceCounterDescriptionKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PerformanceCounterDescriptionKHR">
      <argument name="flags_" type="vk::PerformanceCounterDescriptionFlagsKHR" default_raw="{}" />
      <argument name="name_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="category_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="description_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PerformanceCounterDescriptionKHR">
      <argument name="rhs" type="const PerformanceCounterDescriptionKHR &amp;" />
    </constructor>
    <constructor name="PerformanceCounterDescriptionKHR">
      <argument name="rhs" type="const VkPerformanceCounterDescriptionKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PerformanceCounterDescriptionKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPerformanceCounterDescriptionKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPerformanceCounterDescriptionKHR &amp;" />
    <conversion_function name="operator VkPerformanceCounterDescriptionKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PerformanceCounterDescriptionKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PerformanceCounterDescriptionKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="name" />
    <field name="category" />
    <field name="description" />
  </struct>
  <struct name="PerformanceCounterKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PerformanceCounterKHR">
      <argument name="unit_" type="vk::PerformanceCounterUnitKHR" default_raw="VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::eGeneric" />
      <argument name="scope_" type="vk::PerformanceCounterScopeKHR" default_raw="VULKAN_HPP_NAMESPACE::PerformanceCounterScopeKHR::eCommandBuffer" />
      <argument name="storage_" type="vk::PerformanceCounterStorageKHR" default_raw="VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR::eInt32" />
      <argument name="uuid_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PerformanceCounterKHR">
      <argument name="rhs" type="const PerformanceCounterKHR &amp;" />
    </constructor>
    <constructor name="PerformanceCounterKHR">
      <argument name="rhs" type="const VkPerformanceCounterKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PerformanceCounterKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPerformanceCounterKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPerformanceCounterKHR &amp;" />
    <conversion_function name="operator VkPerformanceCounterKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PerformanceCounterKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PerformanceCounterKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="unit" />
    <field name="scope" />
    <field name="storage" />
    <field name="uuid" />
  </struct>
  <union name="PerformanceCounterResultKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PerformanceCounterResultKHR">
      <argument name="int32_" type="int32_t" default_raw="{}" />
    </constructor>
    <constructor name="PerformanceCounterResultKHR">
      <argument name="int64_" type="int64_t" />
    </constructor>
    <constructor name="PerformanceCounterResultKHR">
      <argument name="uint32_" type="uint32_t" />
    </constructor>
    <constructor name="PerformanceCounterResultKHR">
      <argument name="uint64_" type="uint64_t" />
    </constructor>
    <constructor name="PerformanceCounterResultKHR">
      <argument name="float32_" type="float" />
    </constructor>
    <constructor name="PerformanceCounterResultKHR">
      <argument name="float64_" type="double" />
    </constructor>
    <method name="setInt32">
      <argument name="int32_" type="int32_t" />
    </method>
    <method name="setInt64">
      <argument name="int64_" type="int64_t" />
    </method>
    <method name="setUint32">
      <argument name="uint32_" type="uint32_t" />
    </method>
    <method name="setUint64">
      <argument name="uint64_" type="uint64_t" />
    </method>
    <method name="setFloat32">
      <argument name="float32_" type="float" />
    </method>
    <method name="setFloat64">
      <argument name="float64_" type="double" />
    </method>
    <conversion_function name="operator const VkPerformanceCounterResultKHR &amp;" />
    <conversion_function name="operator VkPerformanceCounterResultKHR &amp;" />
    <field name="int32" />
    <field name="int64" />
    <field name="uint32" />
    <field name="uint64" />
    <field name="float32" />
    <field name="float64" />
  </union>
  <struct name="PerformanceQuerySubmitInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PerformanceQuerySubmitInfoKHR">
      <argument name="counterPassIndex_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PerformanceQuerySubmitInfoKHR">
      <argument name="rhs" type="const PerformanceQuerySubmitInfoKHR &amp;" />
    </constructor>
    <constructor name="PerformanceQuerySubmitInfoKHR">
      <argument name="rhs" type="const VkPerformanceQuerySubmitInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PerformanceQuerySubmitInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPerformanceQuerySubmitInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setCounterPassIndex">
      <argument name="counterPassIndex_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkPerformanceQuerySubmitInfoKHR &amp;" />
    <conversion_function name="operator VkPerformanceQuerySubmitInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PerformanceQuerySubmitInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PerformanceQuerySubmitInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="counterPassIndex" />
  </struct>
  <struct name="PhysicalDevicePerformanceQueryFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePerformanceQueryFeaturesKHR">
      <argument name="performanceCounterQueryPools_" type="vk::Bool32" default_raw="{}" />
      <argument name="performanceCounterMultipleQueryPools_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePerformanceQueryFeaturesKHR">
      <argument name="rhs" type="const PhysicalDevicePerformanceQueryFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePerformanceQueryFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDevicePerformanceQueryFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePerformanceQueryFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePerformanceQueryFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPerformanceCounterQueryPools">
      <argument name="performanceCounterQueryPools_" type="vk::Bool32" />
    </method>
    <method name="setPerformanceCounterMultipleQueryPools">
      <argument name="performanceCounterMultipleQueryPools_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePerformanceQueryFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDevicePerformanceQueryFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePerformanceQueryFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePerformanceQueryFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="performanceCounterQueryPools" />
    <field name="performanceCounterMultipleQueryPools" />
  </struct>
  <struct name="PhysicalDevicePerformanceQueryPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePerformanceQueryPropertiesKHR">
      <argument name="allowCommandBufferQueryCopies_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePerformanceQueryPropertiesKHR">
      <argument name="rhs" type="const PhysicalDevicePerformanceQueryPropertiesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePerformanceQueryPropertiesKHR">
      <argument name="rhs" type="const VkPhysicalDevicePerformanceQueryPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePerformanceQueryPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePerformanceQueryPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePerformanceQueryPropertiesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDevicePerformanceQueryPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePerformanceQueryPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePerformanceQueryPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="allowCommandBufferQueryCopies" />
  </struct>
  <struct name="QueryPoolPerformanceCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueryPoolPerformanceCreateInfoKHR">
      <argument name="queueFamilyIndex_" type="uint32_t" default_raw="{}" />
      <argument name="counterIndexCount_" type="uint32_t" default_raw="{}" />
      <argument name="pCounterIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="QueryPoolPerformanceCreateInfoKHR">
      <argument name="rhs" type="const QueryPoolPerformanceCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="QueryPoolPerformanceCreateInfoKHR">
      <argument name="rhs" type="const VkQueryPoolPerformanceCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="QueryPoolPerformanceCreateInfoKHR">
      <argument name="queueFamilyIndex_" type="uint32_t" />
      <argument name="counterIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueryPoolPerformanceCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueryPoolPerformanceCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setQueueFamilyIndex">
      <argument name="queueFamilyIndex_" type="uint32_t" />
    </method>
    <method name="setCounterIndexCount">
      <argument name="counterIndexCount_" type="uint32_t" />
    </method>
    <method name="setPCounterIndices">
      <argument name="pCounterIndices_" type="const uint32_t *" />
    </method>
    <method name="setCounterIndices">
      <argument name="counterIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkQueryPoolPerformanceCreateInfoKHR &amp;" />
    <conversion_function name="operator VkQueryPoolPerformanceCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueryPoolPerformanceCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueryPoolPerformanceCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="queueFamilyIndex" />
    <field name="counterIndexCount" />
    <field name="pCounterIndices" />
  </struct>
  <struct name="PhysicalDeviceSurfaceInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSurfaceInfo2KHR">
      <argument name="surface_" type="vk::SurfaceKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSurfaceInfo2KHR">
      <argument name="rhs" type="const PhysicalDeviceSurfaceInfo2KHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSurfaceInfo2KHR">
      <argument name="rhs" type="const VkPhysicalDeviceSurfaceInfo2KHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSurfaceInfo2KHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSurfaceInfo2KHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSurface">
      <argument name="surface_" type="vk::SurfaceKHR" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSurfaceInfo2KHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSurfaceInfo2KHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSurfaceInfo2KHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSurfaceInfo2KHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="surface" />
  </struct>
  <struct name="SurfaceCapabilities2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SurfaceCapabilities2KHR">
      <argument name="surfaceCapabilities_" type="vk::SurfaceCapabilitiesKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SurfaceCapabilities2KHR">
      <argument name="rhs" type="const SurfaceCapabilities2KHR &amp;" />
    </constructor>
    <constructor name="SurfaceCapabilities2KHR">
      <argument name="rhs" type="const VkSurfaceCapabilities2KHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SurfaceCapabilities2KHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSurfaceCapabilities2KHR &amp;" />
    </method>
    <conversion_function name="operator const VkSurfaceCapabilities2KHR &amp;" />
    <conversion_function name="operator VkSurfaceCapabilities2KHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SurfaceCapabilities2KHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SurfaceCapabilities2KHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="surfaceCapabilities" />
  </struct>
  <struct name="SurfaceFormat2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SurfaceFormat2KHR">
      <argument name="surfaceFormat_" type="vk::SurfaceFormatKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SurfaceFormat2KHR">
      <argument name="rhs" type="const SurfaceFormat2KHR &amp;" />
    </constructor>
    <constructor name="SurfaceFormat2KHR">
      <argument name="rhs" type="const VkSurfaceFormat2KHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SurfaceFormat2KHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSurfaceFormat2KHR &amp;" />
    </method>
    <conversion_function name="operator const VkSurfaceFormat2KHR &amp;" />
    <conversion_function name="operator VkSurfaceFormat2KHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SurfaceFormat2KHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SurfaceFormat2KHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="surfaceFormat" />
  </struct>
  <struct name="DisplayModeProperties2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayModeProperties2KHR">
      <argument name="displayModeProperties_" type="vk::DisplayModePropertiesKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DisplayModeProperties2KHR">
      <argument name="rhs" type="const DisplayModeProperties2KHR &amp;" />
    </constructor>
    <constructor name="DisplayModeProperties2KHR">
      <argument name="rhs" type="const VkDisplayModeProperties2KHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayModeProperties2KHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayModeProperties2KHR &amp;" />
    </method>
    <conversion_function name="operator const VkDisplayModeProperties2KHR &amp;" />
    <conversion_function name="operator VkDisplayModeProperties2KHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayModeProperties2KHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayModeProperties2KHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="displayModeProperties" />
  </struct>
  <struct name="DisplayPlaneCapabilities2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayPlaneCapabilities2KHR">
      <argument name="capabilities_" type="vk::DisplayPlaneCapabilitiesKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DisplayPlaneCapabilities2KHR">
      <argument name="rhs" type="const DisplayPlaneCapabilities2KHR &amp;" />
    </constructor>
    <constructor name="DisplayPlaneCapabilities2KHR">
      <argument name="rhs" type="const VkDisplayPlaneCapabilities2KHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayPlaneCapabilities2KHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayPlaneCapabilities2KHR &amp;" />
    </method>
    <conversion_function name="operator const VkDisplayPlaneCapabilities2KHR &amp;" />
    <conversion_function name="operator VkDisplayPlaneCapabilities2KHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayPlaneCapabilities2KHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayPlaneCapabilities2KHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="capabilities" />
  </struct>
  <struct name="DisplayPlaneInfo2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayPlaneInfo2KHR">
      <argument name="mode_" type="vk::DisplayModeKHR" default_raw="{}" />
      <argument name="planeIndex_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DisplayPlaneInfo2KHR">
      <argument name="rhs" type="const DisplayPlaneInfo2KHR &amp;" />
    </constructor>
    <constructor name="DisplayPlaneInfo2KHR">
      <argument name="rhs" type="const VkDisplayPlaneInfo2KHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayPlaneInfo2KHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayPlaneInfo2KHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMode">
      <argument name="mode_" type="vk::DisplayModeKHR" />
    </method>
    <method name="setPlaneIndex">
      <argument name="planeIndex_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDisplayPlaneInfo2KHR &amp;" />
    <conversion_function name="operator VkDisplayPlaneInfo2KHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayPlaneInfo2KHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayPlaneInfo2KHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="mode" />
    <field name="planeIndex" />
  </struct>
  <struct name="DisplayPlaneProperties2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayPlaneProperties2KHR">
      <argument name="displayPlaneProperties_" type="vk::DisplayPlanePropertiesKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DisplayPlaneProperties2KHR">
      <argument name="rhs" type="const DisplayPlaneProperties2KHR &amp;" />
    </constructor>
    <constructor name="DisplayPlaneProperties2KHR">
      <argument name="rhs" type="const VkDisplayPlaneProperties2KHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayPlaneProperties2KHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayPlaneProperties2KHR &amp;" />
    </method>
    <conversion_function name="operator const VkDisplayPlaneProperties2KHR &amp;" />
    <conversion_function name="operator VkDisplayPlaneProperties2KHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayPlaneProperties2KHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayPlaneProperties2KHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="displayPlaneProperties" />
  </struct>
  <struct name="DisplayProperties2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayProperties2KHR">
      <argument name="displayProperties_" type="vk::DisplayPropertiesKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DisplayProperties2KHR">
      <argument name="rhs" type="const DisplayProperties2KHR &amp;" />
    </constructor>
    <constructor name="DisplayProperties2KHR">
      <argument name="rhs" type="const VkDisplayProperties2KHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayProperties2KHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayProperties2KHR &amp;" />
    </method>
    <conversion_function name="operator const VkDisplayProperties2KHR &amp;" />
    <conversion_function name="operator VkDisplayProperties2KHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayProperties2KHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayProperties2KHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="displayProperties" />
  </struct>
  <struct name="DebugUtilsLabelEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DebugUtilsLabelEXT">
      <argument name="pLabelName_" type="const char *" default_raw="{}" />
      <argument name="color_" type="const std::array&lt;float, 4&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DebugUtilsLabelEXT">
      <argument name="rhs" type="const DebugUtilsLabelEXT &amp;" />
    </constructor>
    <constructor name="DebugUtilsLabelEXT">
      <argument name="rhs" type="const VkDebugUtilsLabelEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DebugUtilsLabelEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDebugUtilsLabelEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPLabelName">
      <argument name="pLabelName_" type="const char *" />
    </method>
    <method name="setColor">
      <argument name="color_" type="std::array&lt;float, 4&gt;" />
    </method>
    <conversion_function name="operator const VkDebugUtilsLabelEXT &amp;" />
    <conversion_function name="operator VkDebugUtilsLabelEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DebugUtilsLabelEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DebugUtilsLabelEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pLabelName" />
    <field name="color" />
  </struct>
  <struct name="DebugUtilsMessengerCallbackDataEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DebugUtilsMessengerCallbackDataEXT">
      <argument name="flags_" type="vk::DebugUtilsMessengerCallbackDataFlagsEXT" default_raw="{}" />
      <argument name="pMessageIdName_" type="const char *" default_raw="{}" />
      <argument name="messageIdNumber_" type="int32_t" default_raw="{}" />
      <argument name="pMessage_" type="const char *" default_raw="{}" />
      <argument name="queueLabelCount_" type="uint32_t" default_raw="{}" />
      <argument name="pQueueLabels_" type="const vk::DebugUtilsLabelEXT *" default_raw="{}" />
      <argument name="cmdBufLabelCount_" type="uint32_t" default_raw="{}" />
      <argument name="pCmdBufLabels_" type="const vk::DebugUtilsLabelEXT *" default_raw="{}" />
      <argument name="objectCount_" type="uint32_t" default_raw="{}" />
      <argument name="pObjects_" type="const vk::DebugUtilsObjectNameInfoEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DebugUtilsMessengerCallbackDataEXT">
      <argument name="rhs" type="const DebugUtilsMessengerCallbackDataEXT &amp;" />
    </constructor>
    <constructor name="DebugUtilsMessengerCallbackDataEXT">
      <argument name="rhs" type="const VkDebugUtilsMessengerCallbackDataEXT &amp;" />
    </constructor>
    <constructor name="DebugUtilsMessengerCallbackDataEXT">
      <argument name="flags_" type="vk::DebugUtilsMessengerCallbackDataFlagsEXT" />
      <argument name="pMessageIdName_" type="const char *" />
      <argument name="messageIdNumber_" type="int32_t" />
      <argument name="pMessage_" type="const char *" />
      <argument name="queueLabels_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DebugUtilsLabelEXT&gt; &amp;" />
      <argument name="cmdBufLabels_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DebugUtilsLabelEXT&gt; &amp;" default_raw="{}" />
      <argument name="objects_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DebugUtilsObjectNameInfoEXT&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DebugUtilsMessengerCallbackDataEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDebugUtilsMessengerCallbackDataEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DebugUtilsMessengerCallbackDataFlagsEXT" />
    </method>
    <method name="setPMessageIdName">
      <argument name="pMessageIdName_" type="const char *" />
    </method>
    <method name="setMessageIdNumber">
      <argument name="messageIdNumber_" type="int32_t" />
    </method>
    <method name="setPMessage">
      <argument name="pMessage_" type="const char *" />
    </method>
    <method name="setQueueLabelCount">
      <argument name="queueLabelCount_" type="uint32_t" />
    </method>
    <method name="setPQueueLabels">
      <argument name="pQueueLabels_" type="const vk::DebugUtilsLabelEXT *" />
    </method>
    <method name="setQueueLabels">
      <argument name="queueLabels_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DebugUtilsLabelEXT&gt; &amp;" />
    </method>
    <method name="setCmdBufLabelCount">
      <argument name="cmdBufLabelCount_" type="uint32_t" />
    </method>
    <method name="setPCmdBufLabels">
      <argument name="pCmdBufLabels_" type="const vk::DebugUtilsLabelEXT *" />
    </method>
    <method name="setCmdBufLabels">
      <argument name="cmdBufLabels_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DebugUtilsLabelEXT&gt; &amp;" />
    </method>
    <method name="setObjectCount">
      <argument name="objectCount_" type="uint32_t" />
    </method>
    <method name="setPObjects">
      <argument name="pObjects_" type="const vk::DebugUtilsObjectNameInfoEXT *" />
    </method>
    <method name="setObjects">
      <argument name="objects_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DebugUtilsObjectNameInfoEXT&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDebugUtilsMessengerCallbackDataEXT &amp;" />
    <conversion_function name="operator VkDebugUtilsMessengerCallbackDataEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DebugUtilsMessengerCallbackDataEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DebugUtilsMessengerCallbackDataEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="pMessageIdName" />
    <field name="messageIdNumber" />
    <field name="pMessage" />
    <field name="queueLabelCount" />
    <field name="pQueueLabels" />
    <field name="cmdBufLabelCount" />
    <field name="pCmdBufLabels" />
    <field name="objectCount" />
    <field name="pObjects" />
  </struct>
  <struct name="DebugUtilsMessengerCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DebugUtilsMessengerCreateInfoEXT">
      <argument name="flags_" type="vk::DebugUtilsMessengerCreateFlagsEXT" default_raw="{}" />
      <argument name="messageSeverity_" type="vk::DebugUtilsMessageSeverityFlagsEXT" default_raw="{}" />
      <argument name="messageType_" type="vk::DebugUtilsMessageTypeFlagsEXT" default_raw="{}" />
      <argument name="pfnUserCallback_" type="PFN_vkDebugUtilsMessengerCallbackEXT" default_raw="{}" />
      <argument name="pUserData_" type="void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DebugUtilsMessengerCreateInfoEXT">
      <argument name="rhs" type="const DebugUtilsMessengerCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="DebugUtilsMessengerCreateInfoEXT">
      <argument name="rhs" type="const VkDebugUtilsMessengerCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DebugUtilsMessengerCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDebugUtilsMessengerCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DebugUtilsMessengerCreateFlagsEXT" />
    </method>
    <method name="setMessageSeverity">
      <argument name="messageSeverity_" type="vk::DebugUtilsMessageSeverityFlagsEXT" />
    </method>
    <method name="setMessageType">
      <argument name="messageType_" type="vk::DebugUtilsMessageTypeFlagsEXT" />
    </method>
    <method name="setPfnUserCallback">
      <argument name="pfnUserCallback_" type="PFN_vkDebugUtilsMessengerCallbackEXT" />
    </method>
    <method name="setPUserData">
      <argument name="pUserData_" type="void *" />
    </method>
    <conversion_function name="operator const VkDebugUtilsMessengerCreateInfoEXT &amp;" />
    <conversion_function name="operator VkDebugUtilsMessengerCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DebugUtilsMessengerCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DebugUtilsMessengerCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="messageSeverity" />
    <field name="messageType" />
    <field name="pfnUserCallback" />
    <field name="pUserData" />
  </struct>
  <struct name="DebugUtilsObjectNameInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DebugUtilsObjectNameInfoEXT">
      <argument name="objectType_" type="vk::ObjectType" default_raw="VULKAN_HPP_NAMESPACE::ObjectType::eUnknown" />
      <argument name="objectHandle_" type="uint64_t" default_raw="{}" />
      <argument name="pObjectName_" type="const char *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DebugUtilsObjectNameInfoEXT">
      <argument name="rhs" type="const DebugUtilsObjectNameInfoEXT &amp;" />
    </constructor>
    <constructor name="DebugUtilsObjectNameInfoEXT">
      <argument name="rhs" type="const VkDebugUtilsObjectNameInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DebugUtilsObjectNameInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDebugUtilsObjectNameInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setObjectType">
      <argument name="objectType_" type="vk::ObjectType" />
    </method>
    <method name="setObjectHandle">
      <argument name="objectHandle_" type="uint64_t" />
    </method>
    <method name="setPObjectName">
      <argument name="pObjectName_" type="const char *" />
    </method>
    <conversion_function name="operator const VkDebugUtilsObjectNameInfoEXT &amp;" />
    <conversion_function name="operator VkDebugUtilsObjectNameInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DebugUtilsObjectNameInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DebugUtilsObjectNameInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="objectType" />
    <field name="objectHandle" />
    <field name="pObjectName" />
  </struct>
  <struct name="DebugUtilsObjectTagInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DebugUtilsObjectTagInfoEXT">
      <argument name="objectType_" type="vk::ObjectType" default_raw="VULKAN_HPP_NAMESPACE::ObjectType::eUnknown" />
      <argument name="objectHandle_" type="uint64_t" default_raw="{}" />
      <argument name="tagName_" type="uint64_t" default_raw="{}" />
      <argument name="tagSize_" type="size_t" default_raw="{}" />
      <argument name="pTag_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DebugUtilsObjectTagInfoEXT">
      <argument name="rhs" type="const DebugUtilsObjectTagInfoEXT &amp;" />
    </constructor>
    <constructor name="DebugUtilsObjectTagInfoEXT">
      <argument name="rhs" type="const VkDebugUtilsObjectTagInfoEXT &amp;" />
    </constructor>
    <method name="DebugUtilsObjectTagInfoEXT" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const DebugUtilsObjectTagInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDebugUtilsObjectTagInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setObjectType">
      <argument name="objectType_" type="vk::ObjectType" />
    </method>
    <method name="setObjectHandle">
      <argument name="objectHandle_" type="uint64_t" />
    </method>
    <method name="setTagName">
      <argument name="tagName_" type="uint64_t" />
    </method>
    <method name="setTagSize">
      <argument name="tagSize_" type="size_t" />
    </method>
    <method name="setPTag">
      <argument name="pTag_" type="const void *" />
    </method>
    <method name="setTag" template_raw="template &lt;typename T&gt;" />
    <conversion_function name="operator const VkDebugUtilsObjectTagInfoEXT &amp;" />
    <conversion_function name="operator VkDebugUtilsObjectTagInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DebugUtilsObjectTagInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DebugUtilsObjectTagInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="objectType" />
    <field name="objectHandle" />
    <field name="tagName" />
    <field name="tagSize" />
    <field name="pTag" />
  </struct>
  <struct name="AttachmentSampleLocationsEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AttachmentSampleLocationsEXT">
      <argument name="attachmentIndex_" type="uint32_t" default_raw="{}" />
      <argument name="sampleLocationsInfo_" type="vk::SampleLocationsInfoEXT" default_raw="{}" />
    </constructor>
    <constructor name="AttachmentSampleLocationsEXT">
      <argument name="rhs" type="const AttachmentSampleLocationsEXT &amp;" />
    </constructor>
    <constructor name="AttachmentSampleLocationsEXT">
      <argument name="rhs" type="const VkAttachmentSampleLocationsEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AttachmentSampleLocationsEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAttachmentSampleLocationsEXT &amp;" />
    </method>
    <method name="setAttachmentIndex">
      <argument name="attachmentIndex_" type="uint32_t" />
    </method>
    <method name="setSampleLocationsInfo">
      <argument name="sampleLocationsInfo_" type="const vk::SampleLocationsInfoEXT &amp;" />
    </method>
    <conversion_function name="operator const VkAttachmentSampleLocationsEXT &amp;" />
    <conversion_function name="operator VkAttachmentSampleLocationsEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AttachmentSampleLocationsEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AttachmentSampleLocationsEXT &amp;" />
    </method>
    <field name="attachmentIndex" />
    <field name="sampleLocationsInfo" />
  </struct>
  <struct name="MultisamplePropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MultisamplePropertiesEXT">
      <argument name="maxSampleLocationGridSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MultisamplePropertiesEXT">
      <argument name="rhs" type="const MultisamplePropertiesEXT &amp;" />
    </constructor>
    <constructor name="MultisamplePropertiesEXT">
      <argument name="rhs" type="const VkMultisamplePropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MultisamplePropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMultisamplePropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkMultisamplePropertiesEXT &amp;" />
    <conversion_function name="operator VkMultisamplePropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MultisamplePropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MultisamplePropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxSampleLocationGridSize" />
  </struct>
  <struct name="PhysicalDeviceSampleLocationsPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSampleLocationsPropertiesEXT">
      <argument name="sampleLocationSampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="maxSampleLocationGridSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="sampleLocationCoordinateRange_" type="const std::array&lt;float, 2&gt; &amp;" default_raw="{}" />
      <argument name="sampleLocationSubPixelBits_" type="uint32_t" default_raw="{}" />
      <argument name="variableSampleLocations_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSampleLocationsPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceSampleLocationsPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSampleLocationsPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceSampleLocationsPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSampleLocationsPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSampleLocationsPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSampleLocationsPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSampleLocationsPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSampleLocationsPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSampleLocationsPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="sampleLocationSampleCounts" />
    <field name="maxSampleLocationGridSize" />
    <field name="sampleLocationCoordinateRange" />
    <field name="sampleLocationSubPixelBits" />
    <field name="variableSampleLocations" />
  </struct>
  <struct name="PipelineSampleLocationsStateCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineSampleLocationsStateCreateInfoEXT">
      <argument name="sampleLocationsEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="sampleLocationsInfo_" type="vk::SampleLocationsInfoEXT" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineSampleLocationsStateCreateInfoEXT">
      <argument name="rhs" type="const PipelineSampleLocationsStateCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineSampleLocationsStateCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineSampleLocationsStateCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineSampleLocationsStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineSampleLocationsStateCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSampleLocationsEnable">
      <argument name="sampleLocationsEnable_" type="vk::Bool32" />
    </method>
    <method name="setSampleLocationsInfo">
      <argument name="sampleLocationsInfo_" type="const vk::SampleLocationsInfoEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineSampleLocationsStateCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineSampleLocationsStateCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineSampleLocationsStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineSampleLocationsStateCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="sampleLocationsEnable" />
    <field name="sampleLocationsInfo" />
  </struct>
  <struct name="RenderPassSampleLocationsBeginInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassSampleLocationsBeginInfoEXT">
      <argument name="attachmentInitialSampleLocationsCount_" type="uint32_t" default_raw="{}" />
      <argument name="pAttachmentInitialSampleLocations_" type="const vk::AttachmentSampleLocationsEXT *" default_raw="{}" />
      <argument name="postSubpassSampleLocationsCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPostSubpassSampleLocations_" type="const vk::SubpassSampleLocationsEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassSampleLocationsBeginInfoEXT">
      <argument name="rhs" type="const RenderPassSampleLocationsBeginInfoEXT &amp;" />
    </constructor>
    <constructor name="RenderPassSampleLocationsBeginInfoEXT">
      <argument name="rhs" type="const VkRenderPassSampleLocationsBeginInfoEXT &amp;" />
    </constructor>
    <constructor name="RenderPassSampleLocationsBeginInfoEXT">
      <argument name="attachmentInitialSampleLocations_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentSampleLocationsEXT&gt; &amp;" />
      <argument name="postSubpassSampleLocations_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubpassSampleLocationsEXT&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassSampleLocationsBeginInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassSampleLocationsBeginInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAttachmentInitialSampleLocationsCount">
      <argument name="attachmentInitialSampleLocationsCount_" type="uint32_t" />
    </method>
    <method name="setPAttachmentInitialSampleLocations">
      <argument name="pAttachmentInitialSampleLocations_" type="const vk::AttachmentSampleLocationsEXT *" />
    </method>
    <method name="setAttachmentInitialSampleLocations">
      <argument name="attachmentInitialSampleLocations_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AttachmentSampleLocationsEXT&gt; &amp;" />
    </method>
    <method name="setPostSubpassSampleLocationsCount">
      <argument name="postSubpassSampleLocationsCount_" type="uint32_t" />
    </method>
    <method name="setPPostSubpassSampleLocations">
      <argument name="pPostSubpassSampleLocations_" type="const vk::SubpassSampleLocationsEXT *" />
    </method>
    <method name="setPostSubpassSampleLocations">
      <argument name="postSubpassSampleLocations_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubpassSampleLocationsEXT&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassSampleLocationsBeginInfoEXT &amp;" />
    <conversion_function name="operator VkRenderPassSampleLocationsBeginInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassSampleLocationsBeginInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassSampleLocationsBeginInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="attachmentInitialSampleLocationsCount" />
    <field name="pAttachmentInitialSampleLocations" />
    <field name="postSubpassSampleLocationsCount" />
    <field name="pPostSubpassSampleLocations" />
  </struct>
  <struct name="SampleLocationEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SampleLocationEXT">
      <argument name="x_" type="float" default_raw="{}" />
      <argument name="y_" type="float" default_raw="{}" />
    </constructor>
    <constructor name="SampleLocationEXT">
      <argument name="rhs" type="const SampleLocationEXT &amp;" />
    </constructor>
    <constructor name="SampleLocationEXT">
      <argument name="rhs" type="const VkSampleLocationEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SampleLocationEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSampleLocationEXT &amp;" />
    </method>
    <method name="setX">
      <argument name="x_" type="float" />
    </method>
    <method name="setY">
      <argument name="y_" type="float" />
    </method>
    <conversion_function name="operator const VkSampleLocationEXT &amp;" />
    <conversion_function name="operator VkSampleLocationEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SampleLocationEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SampleLocationEXT &amp;" />
    </method>
    <field name="x" />
    <field name="y" />
  </struct>
  <struct name="SampleLocationsInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SampleLocationsInfoEXT">
      <argument name="sampleLocationsPerPixel_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="sampleLocationGridSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="sampleLocationsCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSampleLocations_" type="const vk::SampleLocationEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SampleLocationsInfoEXT">
      <argument name="rhs" type="const SampleLocationsInfoEXT &amp;" />
    </constructor>
    <constructor name="SampleLocationsInfoEXT">
      <argument name="rhs" type="const VkSampleLocationsInfoEXT &amp;" />
    </constructor>
    <constructor name="SampleLocationsInfoEXT">
      <argument name="sampleLocationsPerPixel_" type="vk::SampleCountFlagBits" />
      <argument name="sampleLocationGridSize_" type="vk::Extent2D" />
      <argument name="sampleLocations_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SampleLocationEXT&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SampleLocationsInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSampleLocationsInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSampleLocationsPerPixel">
      <argument name="sampleLocationsPerPixel_" type="vk::SampleCountFlagBits" />
    </method>
    <method name="setSampleLocationGridSize">
      <argument name="sampleLocationGridSize_" type="const vk::Extent2D &amp;" />
    </method>
    <method name="setSampleLocationsCount">
      <argument name="sampleLocationsCount_" type="uint32_t" />
    </method>
    <method name="setPSampleLocations">
      <argument name="pSampleLocations_" type="const vk::SampleLocationEXT *" />
    </method>
    <method name="setSampleLocations">
      <argument name="sampleLocations_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SampleLocationEXT&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSampleLocationsInfoEXT &amp;" />
    <conversion_function name="operator VkSampleLocationsInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SampleLocationsInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SampleLocationsInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="sampleLocationsPerPixel" />
    <field name="sampleLocationGridSize" />
    <field name="sampleLocationsCount" />
    <field name="pSampleLocations" />
  </struct>
  <struct name="SubpassSampleLocationsEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubpassSampleLocationsEXT">
      <argument name="subpassIndex_" type="uint32_t" default_raw="{}" />
      <argument name="sampleLocationsInfo_" type="vk::SampleLocationsInfoEXT" default_raw="{}" />
    </constructor>
    <constructor name="SubpassSampleLocationsEXT">
      <argument name="rhs" type="const SubpassSampleLocationsEXT &amp;" />
    </constructor>
    <constructor name="SubpassSampleLocationsEXT">
      <argument name="rhs" type="const VkSubpassSampleLocationsEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubpassSampleLocationsEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubpassSampleLocationsEXT &amp;" />
    </method>
    <method name="setSubpassIndex">
      <argument name="subpassIndex_" type="uint32_t" />
    </method>
    <method name="setSampleLocationsInfo">
      <argument name="sampleLocationsInfo_" type="const vk::SampleLocationsInfoEXT &amp;" />
    </method>
    <conversion_function name="operator const VkSubpassSampleLocationsEXT &amp;" />
    <conversion_function name="operator VkSubpassSampleLocationsEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubpassSampleLocationsEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubpassSampleLocationsEXT &amp;" />
    </method>
    <field name="subpassIndex" />
    <field name="sampleLocationsInfo" />
  </struct>
  <struct name="PhysicalDeviceBlendOperationAdvancedFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceBlendOperationAdvancedFeaturesEXT">
      <argument name="advancedBlendCoherentOperations_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceBlendOperationAdvancedFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceBlendOperationAdvancedFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceBlendOperationAdvancedFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceBlendOperationAdvancedFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setAdvancedBlendCoherentOperations">
      <argument name="advancedBlendCoherentOperations_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceBlendOperationAdvancedFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceBlendOperationAdvancedFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="advancedBlendCoherentOperations" />
  </struct>
  <struct name="PhysicalDeviceBlendOperationAdvancedPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceBlendOperationAdvancedPropertiesEXT">
      <argument name="advancedBlendMaxColorAttachments_" type="uint32_t" default_raw="{}" />
      <argument name="advancedBlendIndependentBlend_" type="vk::Bool32" default_raw="{}" />
      <argument name="advancedBlendNonPremultipliedSrcColor_" type="vk::Bool32" default_raw="{}" />
      <argument name="advancedBlendNonPremultipliedDstColor_" type="vk::Bool32" default_raw="{}" />
      <argument name="advancedBlendCorrelatedOverlap_" type="vk::Bool32" default_raw="{}" />
      <argument name="advancedBlendAllOperations_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceBlendOperationAdvancedPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceBlendOperationAdvancedPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceBlendOperationAdvancedPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceBlendOperationAdvancedPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceBlendOperationAdvancedPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceBlendOperationAdvancedPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="advancedBlendMaxColorAttachments" />
    <field name="advancedBlendIndependentBlend" />
    <field name="advancedBlendNonPremultipliedSrcColor" />
    <field name="advancedBlendNonPremultipliedDstColor" />
    <field name="advancedBlendCorrelatedOverlap" />
    <field name="advancedBlendAllOperations" />
  </struct>
  <struct name="PipelineColorBlendAdvancedStateCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineColorBlendAdvancedStateCreateInfoEXT">
      <argument name="srcPremultiplied_" type="vk::Bool32" default_raw="{}" />
      <argument name="dstPremultiplied_" type="vk::Bool32" default_raw="{}" />
      <argument name="blendOverlap_" type="vk::BlendOverlapEXT" default_raw="VULKAN_HPP_NAMESPACE::BlendOverlapEXT::eUncorrelated" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineColorBlendAdvancedStateCreateInfoEXT">
      <argument name="rhs" type="const PipelineColorBlendAdvancedStateCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineColorBlendAdvancedStateCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineColorBlendAdvancedStateCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineColorBlendAdvancedStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineColorBlendAdvancedStateCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrcPremultiplied">
      <argument name="srcPremultiplied_" type="vk::Bool32" />
    </method>
    <method name="setDstPremultiplied">
      <argument name="dstPremultiplied_" type="vk::Bool32" />
    </method>
    <method name="setBlendOverlap">
      <argument name="blendOverlap_" type="vk::BlendOverlapEXT" />
    </method>
    <conversion_function name="operator const VkPipelineColorBlendAdvancedStateCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineColorBlendAdvancedStateCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineColorBlendAdvancedStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineColorBlendAdvancedStateCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="srcPremultiplied" />
    <field name="dstPremultiplied" />
    <field name="blendOverlap" />
  </struct>
  <struct name="PipelineCoverageToColorStateCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineCoverageToColorStateCreateInfoNV">
      <argument name="flags_" type="vk::PipelineCoverageToColorStateCreateFlagsNV" default_raw="{}" />
      <argument name="coverageToColorEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="coverageToColorLocation_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineCoverageToColorStateCreateInfoNV">
      <argument name="rhs" type="const PipelineCoverageToColorStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineCoverageToColorStateCreateInfoNV">
      <argument name="rhs" type="const VkPipelineCoverageToColorStateCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineCoverageToColorStateCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineCoverageToColorStateCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineCoverageToColorStateCreateFlagsNV" />
    </method>
    <method name="setCoverageToColorEnable">
      <argument name="coverageToColorEnable_" type="vk::Bool32" />
    </method>
    <method name="setCoverageToColorLocation">
      <argument name="coverageToColorLocation_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkPipelineCoverageToColorStateCreateInfoNV &amp;" />
    <conversion_function name="operator VkPipelineCoverageToColorStateCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineCoverageToColorStateCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineCoverageToColorStateCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="coverageToColorEnable" />
    <field name="coverageToColorLocation" />
  </struct>
  <struct name="AabbPositionsKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AabbPositionsKHR">
      <argument name="minX_" type="float" default_raw="{}" />
      <argument name="minY_" type="float" default_raw="{}" />
      <argument name="minZ_" type="float" default_raw="{}" />
      <argument name="maxX_" type="float" default_raw="{}" />
      <argument name="maxY_" type="float" default_raw="{}" />
      <argument name="maxZ_" type="float" default_raw="{}" />
    </constructor>
    <constructor name="AabbPositionsKHR">
      <argument name="rhs" type="const AabbPositionsKHR &amp;" />
    </constructor>
    <constructor name="AabbPositionsKHR">
      <argument name="rhs" type="const VkAabbPositionsKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AabbPositionsKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAabbPositionsKHR &amp;" />
    </method>
    <method name="setMinX">
      <argument name="minX_" type="float" />
    </method>
    <method name="setMinY">
      <argument name="minY_" type="float" />
    </method>
    <method name="setMinZ">
      <argument name="minZ_" type="float" />
    </method>
    <method name="setMaxX">
      <argument name="maxX_" type="float" />
    </method>
    <method name="setMaxY">
      <argument name="maxY_" type="float" />
    </method>
    <method name="setMaxZ">
      <argument name="maxZ_" type="float" />
    </method>
    <conversion_function name="operator const VkAabbPositionsKHR &amp;" />
    <conversion_function name="operator VkAabbPositionsKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AabbPositionsKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AabbPositionsKHR &amp;" />
    </method>
    <field name="minX" />
    <field name="minY" />
    <field name="minZ" />
    <field name="maxX" />
    <field name="maxY" />
    <field name="maxZ" />
  </struct>
  <type_alias name="AabbPositionsNV" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="AabbPositionsKHR" />
  <struct name="AccelerationStructureBuildGeometryInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureBuildGeometryInfoKHR">
      <argument name="type_" type="vk::AccelerationStructureTypeKHR" default_raw="VULKAN_HPP_NAMESPACE::AccelerationStructureTypeKHR::eTopLevel" />
      <argument name="flags_" type="vk::BuildAccelerationStructureFlagsKHR" default_raw="{}" />
      <argument name="mode_" type="vk::BuildAccelerationStructureModeKHR" default_raw="VULKAN_HPP_NAMESPACE::BuildAccelerationStructureModeKHR::eBuild" />
      <argument name="srcAccelerationStructure_" type="vk::AccelerationStructureKHR" default_raw="{}" />
      <argument name="dstAccelerationStructure_" type="vk::AccelerationStructureKHR" default_raw="{}" />
      <argument name="geometryCount_" type="uint32_t" default_raw="{}" />
      <argument name="pGeometries_" type="const vk::AccelerationStructureGeometryKHR *" default_raw="{}" />
      <argument name="ppGeometries_" type="const vk::AccelerationStructureGeometryKHR *const *" default_raw="{}" />
      <argument name="scratchData_" type="vk::DeviceOrHostAddressKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureBuildGeometryInfoKHR">
      <argument name="rhs" type="const AccelerationStructureBuildGeometryInfoKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureBuildGeometryInfoKHR">
      <argument name="rhs" type="const VkAccelerationStructureBuildGeometryInfoKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureBuildGeometryInfoKHR">
      <argument name="type_" type="vk::AccelerationStructureTypeKHR" />
      <argument name="flags_" type="vk::BuildAccelerationStructureFlagsKHR" />
      <argument name="mode_" type="vk::BuildAccelerationStructureModeKHR" />
      <argument name="srcAccelerationStructure_" type="vk::AccelerationStructureKHR" />
      <argument name="dstAccelerationStructure_" type="vk::AccelerationStructureKHR" />
      <argument name="geometries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AccelerationStructureGeometryKHR&gt; &amp;" />
      <argument name="pGeometries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AccelerationStructureGeometryKHR *const&gt; &amp;" default_raw="{}" />
      <argument name="scratchData_" type="vk::DeviceOrHostAddressKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureBuildGeometryInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureBuildGeometryInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::AccelerationStructureTypeKHR" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::BuildAccelerationStructureFlagsKHR" />
    </method>
    <method name="setMode">
      <argument name="mode_" type="vk::BuildAccelerationStructureModeKHR" />
    </method>
    <method name="setSrcAccelerationStructure">
      <argument name="srcAccelerationStructure_" type="vk::AccelerationStructureKHR" />
    </method>
    <method name="setDstAccelerationStructure">
      <argument name="dstAccelerationStructure_" type="vk::AccelerationStructureKHR" />
    </method>
    <method name="setGeometryCount">
      <argument name="geometryCount_" type="uint32_t" />
    </method>
    <method name="setPGeometries">
      <argument name="pGeometries_" type="const vk::AccelerationStructureGeometryKHR *" />
    </method>
    <method name="setGeometries">
      <argument name="geometries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AccelerationStructureGeometryKHR&gt; &amp;" />
    </method>
    <method name="setPpGeometries">
      <argument name="ppGeometries_" type="const vk::AccelerationStructureGeometryKHR *const *" />
    </method>
    <method name="setPGeometries">
      <argument name="pGeometries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AccelerationStructureGeometryKHR *const&gt; &amp;" />
    </method>
    <method name="setScratchData">
      <argument name="scratchData_" type="const vk::DeviceOrHostAddressKHR &amp;" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureBuildGeometryInfoKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureBuildGeometryInfoKHR &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="type" />
    <field name="flags" />
    <field name="mode" />
    <field name="srcAccelerationStructure" />
    <field name="dstAccelerationStructure" />
    <field name="geometryCount" />
    <field name="pGeometries" />
    <field name="ppGeometries" />
    <field name="scratchData" />
  </struct>
  <struct name="AccelerationStructureBuildRangeInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureBuildRangeInfoKHR">
      <argument name="primitiveCount_" type="uint32_t" default_raw="{}" />
      <argument name="primitiveOffset_" type="uint32_t" default_raw="{}" />
      <argument name="firstVertex_" type="uint32_t" default_raw="{}" />
      <argument name="transformOffset_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="AccelerationStructureBuildRangeInfoKHR">
      <argument name="rhs" type="const AccelerationStructureBuildRangeInfoKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureBuildRangeInfoKHR">
      <argument name="rhs" type="const VkAccelerationStructureBuildRangeInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureBuildRangeInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureBuildRangeInfoKHR &amp;" />
    </method>
    <method name="setPrimitiveCount">
      <argument name="primitiveCount_" type="uint32_t" />
    </method>
    <method name="setPrimitiveOffset">
      <argument name="primitiveOffset_" type="uint32_t" />
    </method>
    <method name="setFirstVertex">
      <argument name="firstVertex_" type="uint32_t" />
    </method>
    <method name="setTransformOffset">
      <argument name="transformOffset_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureBuildRangeInfoKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureBuildRangeInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureBuildRangeInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureBuildRangeInfoKHR &amp;" />
    </method>
    <field name="primitiveCount" />
    <field name="primitiveOffset" />
    <field name="firstVertex" />
    <field name="transformOffset" />
  </struct>
  <struct name="AccelerationStructureBuildSizesInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureBuildSizesInfoKHR">
      <argument name="accelerationStructureSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="updateScratchSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="buildScratchSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureBuildSizesInfoKHR">
      <argument name="rhs" type="const AccelerationStructureBuildSizesInfoKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureBuildSizesInfoKHR">
      <argument name="rhs" type="const VkAccelerationStructureBuildSizesInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureBuildSizesInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureBuildSizesInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAccelerationStructureSize">
      <argument name="accelerationStructureSize_" type="vk::DeviceSize" />
    </method>
    <method name="setUpdateScratchSize">
      <argument name="updateScratchSize_" type="vk::DeviceSize" />
    </method>
    <method name="setBuildScratchSize">
      <argument name="buildScratchSize_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureBuildSizesInfoKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureBuildSizesInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureBuildSizesInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureBuildSizesInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="accelerationStructureSize" />
    <field name="updateScratchSize" />
    <field name="buildScratchSize" />
  </struct>
  <struct name="AccelerationStructureCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureCreateInfoKHR">
      <argument name="createFlags_" type="vk::AccelerationStructureCreateFlagsKHR" default_raw="{}" />
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="type_" type="vk::AccelerationStructureTypeKHR" default_raw="VULKAN_HPP_NAMESPACE::AccelerationStructureTypeKHR::eTopLevel" />
      <argument name="deviceAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureCreateInfoKHR">
      <argument name="rhs" type="const AccelerationStructureCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureCreateInfoKHR">
      <argument name="rhs" type="const VkAccelerationStructureCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setCreateFlags">
      <argument name="createFlags_" type="vk::AccelerationStructureCreateFlagsKHR" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::AccelerationStructureTypeKHR" />
    </method>
    <method name="setDeviceAddress">
      <argument name="deviceAddress_" type="vk::DeviceAddress" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureCreateInfoKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="createFlags" />
    <field name="buffer" />
    <field name="offset" />
    <field name="size" />
    <field name="type" />
    <field name="deviceAddress" />
  </struct>
  <struct name="AccelerationStructureDeviceAddressInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureDeviceAddressInfoKHR">
      <argument name="accelerationStructure_" type="vk::AccelerationStructureKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureDeviceAddressInfoKHR">
      <argument name="rhs" type="const AccelerationStructureDeviceAddressInfoKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureDeviceAddressInfoKHR">
      <argument name="rhs" type="const VkAccelerationStructureDeviceAddressInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureDeviceAddressInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureDeviceAddressInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAccelerationStructure">
      <argument name="accelerationStructure_" type="vk::AccelerationStructureKHR" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureDeviceAddressInfoKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureDeviceAddressInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureDeviceAddressInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureDeviceAddressInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="accelerationStructure" />
  </struct>
  <struct name="AccelerationStructureGeometryAabbsDataKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureGeometryAabbsDataKHR">
      <argument name="data_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="stride_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureGeometryAabbsDataKHR">
      <argument name="rhs" type="const AccelerationStructureGeometryAabbsDataKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureGeometryAabbsDataKHR">
      <argument name="rhs" type="const VkAccelerationStructureGeometryAabbsDataKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureGeometryAabbsDataKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureGeometryAabbsDataKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setData">
      <argument name="data_" type="const vk::DeviceOrHostAddressConstKHR &amp;" />
    </method>
    <method name="setStride">
      <argument name="stride_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureGeometryAabbsDataKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureGeometryAabbsDataKHR &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="data" />
    <field name="stride" />
  </struct>
  <union name="AccelerationStructureGeometryDataKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureGeometryDataKHR">
      <argument name="triangles_" type="vk::AccelerationStructureGeometryTrianglesDataKHR" default_raw="{}" />
    </constructor>
    <constructor name="AccelerationStructureGeometryDataKHR">
      <argument name="aabbs_" type="vk::AccelerationStructureGeometryAabbsDataKHR" />
    </constructor>
    <constructor name="AccelerationStructureGeometryDataKHR">
      <argument name="instances_" type="vk::AccelerationStructureGeometryInstancesDataKHR" />
    </constructor>
    <method name="setTriangles">
      <argument name="triangles_" type="const vk::AccelerationStructureGeometryTrianglesDataKHR &amp;" />
    </method>
    <method name="setAabbs">
      <argument name="aabbs_" type="const vk::AccelerationStructureGeometryAabbsDataKHR &amp;" />
    </method>
    <method name="setInstances">
      <argument name="instances_" type="const vk::AccelerationStructureGeometryInstancesDataKHR &amp;" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureGeometryDataKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureGeometryDataKHR &amp;" />
    <field name="triangles" />
    <field name="aabbs" />
    <field name="instances" />
  </union>
  <struct name="AccelerationStructureGeometryInstancesDataKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureGeometryInstancesDataKHR">
      <argument name="arrayOfPointers_" type="vk::Bool32" default_raw="{}" />
      <argument name="data_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureGeometryInstancesDataKHR">
      <argument name="rhs" type="const AccelerationStructureGeometryInstancesDataKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureGeometryInstancesDataKHR">
      <argument name="rhs" type="const VkAccelerationStructureGeometryInstancesDataKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureGeometryInstancesDataKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureGeometryInstancesDataKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setArrayOfPointers">
      <argument name="arrayOfPointers_" type="vk::Bool32" />
    </method>
    <method name="setData">
      <argument name="data_" type="const vk::DeviceOrHostAddressConstKHR &amp;" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureGeometryInstancesDataKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureGeometryInstancesDataKHR &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="arrayOfPointers" />
    <field name="data" />
  </struct>
  <struct name="AccelerationStructureGeometryKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureGeometryKHR">
      <argument name="geometryType_" type="vk::GeometryTypeKHR" default_raw="VULKAN_HPP_NAMESPACE::GeometryTypeKHR::eTriangles" />
      <argument name="geometry_" type="vk::AccelerationStructureGeometryDataKHR" default_raw="{}" />
      <argument name="flags_" type="vk::GeometryFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureGeometryKHR">
      <argument name="rhs" type="const AccelerationStructureGeometryKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureGeometryKHR">
      <argument name="rhs" type="const VkAccelerationStructureGeometryKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureGeometryKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureGeometryKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setGeometryType">
      <argument name="geometryType_" type="vk::GeometryTypeKHR" />
    </method>
    <method name="setGeometry">
      <argument name="geometry_" type="const vk::AccelerationStructureGeometryDataKHR &amp;" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::GeometryFlagsKHR" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureGeometryKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureGeometryKHR &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="geometryType" />
    <field name="geometry" />
    <field name="flags" />
  </struct>
  <struct name="AccelerationStructureGeometryTrianglesDataKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureGeometryTrianglesDataKHR">
      <argument name="vertexFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="vertexData_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="vertexStride_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="maxVertex_" type="uint32_t" default_raw="{}" />
      <argument name="indexType_" type="vk::IndexType" default_raw="VULKAN_HPP_NAMESPACE::IndexType::eUint16" />
      <argument name="indexData_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="transformData_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureGeometryTrianglesDataKHR">
      <argument name="rhs" type="const AccelerationStructureGeometryTrianglesDataKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureGeometryTrianglesDataKHR">
      <argument name="rhs" type="const VkAccelerationStructureGeometryTrianglesDataKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureGeometryTrianglesDataKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureGeometryTrianglesDataKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setVertexFormat">
      <argument name="vertexFormat_" type="vk::Format" />
    </method>
    <method name="setVertexData">
      <argument name="vertexData_" type="const vk::DeviceOrHostAddressConstKHR &amp;" />
    </method>
    <method name="setVertexStride">
      <argument name="vertexStride_" type="vk::DeviceSize" />
    </method>
    <method name="setMaxVertex">
      <argument name="maxVertex_" type="uint32_t" />
    </method>
    <method name="setIndexType">
      <argument name="indexType_" type="vk::IndexType" />
    </method>
    <method name="setIndexData">
      <argument name="indexData_" type="const vk::DeviceOrHostAddressConstKHR &amp;" />
    </method>
    <method name="setTransformData">
      <argument name="transformData_" type="const vk::DeviceOrHostAddressConstKHR &amp;" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureGeometryTrianglesDataKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureGeometryTrianglesDataKHR &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="vertexFormat" />
    <field name="vertexData" />
    <field name="vertexStride" />
    <field name="maxVertex" />
    <field name="indexType" />
    <field name="indexData" />
    <field name="transformData" />
  </struct>
  <struct name="AccelerationStructureInstanceKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureInstanceKHR">
      <argument name="transform_" type="vk::TransformMatrixKHR" default_raw="{}" />
      <argument name="instanceCustomIndex_" type="uint32_t" default_raw="{}" />
      <argument name="mask_" type="uint32_t" default_raw="{}" />
      <argument name="instanceShaderBindingTableRecordOffset_" type="uint32_t" default_raw="{}" />
      <argument name="flags_" type="vk::GeometryInstanceFlagsKHR" default_raw="{}" />
      <argument name="accelerationStructureReference_" type="uint64_t" default_raw="{}" />
    </constructor>
    <constructor name="AccelerationStructureInstanceKHR">
      <argument name="rhs" type="const AccelerationStructureInstanceKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureInstanceKHR">
      <argument name="rhs" type="const VkAccelerationStructureInstanceKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureInstanceKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureInstanceKHR &amp;" />
    </method>
    <method name="setTransform">
      <argument name="transform_" type="const vk::TransformMatrixKHR &amp;" />
    </method>
    <method name="setInstanceCustomIndex">
      <argument name="instanceCustomIndex_" type="uint32_t" />
    </method>
    <method name="setMask">
      <argument name="mask_" type="uint32_t" />
    </method>
    <method name="setInstanceShaderBindingTableRecordOffset">
      <argument name="instanceShaderBindingTableRecordOffset_" type="uint32_t" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::GeometryInstanceFlagsKHR" />
    </method>
    <method name="setAccelerationStructureReference">
      <argument name="accelerationStructureReference_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureInstanceKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureInstanceKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureInstanceKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureInstanceKHR &amp;" />
    </method>
    <field name="transform" />
    <field name="instanceCustomIndex" />
    <field name="mask" />
    <field name="instanceShaderBindingTableRecordOffset" />
    <field name="flags" />
    <field name="accelerationStructureReference" />
  </struct>
  <type_alias name="AccelerationStructureInstanceNV" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="AccelerationStructureInstanceKHR" />
  <struct name="AccelerationStructureVersionInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureVersionInfoKHR">
      <argument name="pVersionData_" type="const uint8_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureVersionInfoKHR">
      <argument name="rhs" type="const AccelerationStructureVersionInfoKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureVersionInfoKHR">
      <argument name="rhs" type="const VkAccelerationStructureVersionInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureVersionInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureVersionInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPVersionData">
      <argument name="pVersionData_" type="const uint8_t *" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureVersionInfoKHR &amp;" />
    <conversion_function name="operator VkAccelerationStructureVersionInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureVersionInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureVersionInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pVersionData" />
  </struct>
  <struct name="CopyAccelerationStructureInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyAccelerationStructureInfoKHR">
      <argument name="src_" type="vk::AccelerationStructureKHR" default_raw="{}" />
      <argument name="dst_" type="vk::AccelerationStructureKHR" default_raw="{}" />
      <argument name="mode_" type="vk::CopyAccelerationStructureModeKHR" default_raw="VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR::eClone" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyAccelerationStructureInfoKHR">
      <argument name="rhs" type="const CopyAccelerationStructureInfoKHR &amp;" />
    </constructor>
    <constructor name="CopyAccelerationStructureInfoKHR">
      <argument name="rhs" type="const VkCopyAccelerationStructureInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyAccelerationStructureInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyAccelerationStructureInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrc">
      <argument name="src_" type="vk::AccelerationStructureKHR" />
    </method>
    <method name="setDst">
      <argument name="dst_" type="vk::AccelerationStructureKHR" />
    </method>
    <method name="setMode">
      <argument name="mode_" type="vk::CopyAccelerationStructureModeKHR" />
    </method>
    <conversion_function name="operator const VkCopyAccelerationStructureInfoKHR &amp;" />
    <conversion_function name="operator VkCopyAccelerationStructureInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyAccelerationStructureInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyAccelerationStructureInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="src" />
    <field name="dst" />
    <field name="mode" />
  </struct>
  <struct name="CopyAccelerationStructureToMemoryInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyAccelerationStructureToMemoryInfoKHR">
      <argument name="src_" type="vk::AccelerationStructureKHR" default_raw="{}" />
      <argument name="dst_" type="vk::DeviceOrHostAddressKHR" default_raw="{}" />
      <argument name="mode_" type="vk::CopyAccelerationStructureModeKHR" default_raw="VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR::eClone" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyAccelerationStructureToMemoryInfoKHR">
      <argument name="rhs" type="const CopyAccelerationStructureToMemoryInfoKHR &amp;" />
    </constructor>
    <constructor name="CopyAccelerationStructureToMemoryInfoKHR">
      <argument name="rhs" type="const VkCopyAccelerationStructureToMemoryInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyAccelerationStructureToMemoryInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyAccelerationStructureToMemoryInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrc">
      <argument name="src_" type="vk::AccelerationStructureKHR" />
    </method>
    <method name="setDst">
      <argument name="dst_" type="const vk::DeviceOrHostAddressKHR &amp;" />
    </method>
    <method name="setMode">
      <argument name="mode_" type="vk::CopyAccelerationStructureModeKHR" />
    </method>
    <conversion_function name="operator const VkCopyAccelerationStructureToMemoryInfoKHR &amp;" />
    <conversion_function name="operator VkCopyAccelerationStructureToMemoryInfoKHR &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="src" />
    <field name="dst" />
    <field name="mode" />
  </struct>
  <struct name="CopyMemoryToAccelerationStructureInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyMemoryToAccelerationStructureInfoKHR">
      <argument name="src_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="dst_" type="vk::AccelerationStructureKHR" default_raw="{}" />
      <argument name="mode_" type="vk::CopyAccelerationStructureModeKHR" default_raw="VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR::eClone" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyMemoryToAccelerationStructureInfoKHR">
      <argument name="rhs" type="const CopyMemoryToAccelerationStructureInfoKHR &amp;" />
    </constructor>
    <constructor name="CopyMemoryToAccelerationStructureInfoKHR">
      <argument name="rhs" type="const VkCopyMemoryToAccelerationStructureInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyMemoryToAccelerationStructureInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyMemoryToAccelerationStructureInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrc">
      <argument name="src_" type="const vk::DeviceOrHostAddressConstKHR &amp;" />
    </method>
    <method name="setDst">
      <argument name="dst_" type="vk::AccelerationStructureKHR" />
    </method>
    <method name="setMode">
      <argument name="mode_" type="vk::CopyAccelerationStructureModeKHR" />
    </method>
    <conversion_function name="operator const VkCopyMemoryToAccelerationStructureInfoKHR &amp;" />
    <conversion_function name="operator VkCopyMemoryToAccelerationStructureInfoKHR &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="src" />
    <field name="dst" />
    <field name="mode" />
  </struct>
  <union name="DeviceOrHostAddressConstKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceOrHostAddressConstKHR">
      <argument name="deviceAddress_" type="vk::DeviceAddress" default_raw="{}" />
    </constructor>
    <constructor name="DeviceOrHostAddressConstKHR">
      <argument name="hostAddress_" type="const void *" />
    </constructor>
    <method name="setDeviceAddress">
      <argument name="deviceAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setHostAddress">
      <argument name="hostAddress_" type="const void *" />
    </method>
    <conversion_function name="operator const VkDeviceOrHostAddressConstKHR &amp;" />
    <conversion_function name="operator VkDeviceOrHostAddressConstKHR &amp;" />
    <field name="deviceAddress" />
    <field name="hostAddress" />
  </union>
  <union name="DeviceOrHostAddressKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceOrHostAddressKHR">
      <argument name="deviceAddress_" type="vk::DeviceAddress" default_raw="{}" />
    </constructor>
    <constructor name="DeviceOrHostAddressKHR">
      <argument name="hostAddress_" type="void *" />
    </constructor>
    <method name="setDeviceAddress">
      <argument name="deviceAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setHostAddress">
      <argument name="hostAddress_" type="void *" />
    </method>
    <conversion_function name="operator const VkDeviceOrHostAddressKHR &amp;" />
    <conversion_function name="operator VkDeviceOrHostAddressKHR &amp;" />
    <field name="deviceAddress" />
    <field name="hostAddress" />
  </union>
  <struct name="PhysicalDeviceAccelerationStructureFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceAccelerationStructureFeaturesKHR">
      <argument name="accelerationStructure_" type="vk::Bool32" default_raw="{}" />
      <argument name="accelerationStructureCaptureReplay_" type="vk::Bool32" default_raw="{}" />
      <argument name="accelerationStructureIndirectBuild_" type="vk::Bool32" default_raw="{}" />
      <argument name="accelerationStructureHostCommands_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBindingAccelerationStructureUpdateAfterBind_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceAccelerationStructureFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceAccelerationStructureFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceAccelerationStructureFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceAccelerationStructureFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceAccelerationStructureFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceAccelerationStructureFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setAccelerationStructure">
      <argument name="accelerationStructure_" type="vk::Bool32" />
    </method>
    <method name="setAccelerationStructureCaptureReplay">
      <argument name="accelerationStructureCaptureReplay_" type="vk::Bool32" />
    </method>
    <method name="setAccelerationStructureIndirectBuild">
      <argument name="accelerationStructureIndirectBuild_" type="vk::Bool32" />
    </method>
    <method name="setAccelerationStructureHostCommands">
      <argument name="accelerationStructureHostCommands_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBindingAccelerationStructureUpdateAfterBind">
      <argument name="descriptorBindingAccelerationStructureUpdateAfterBind_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceAccelerationStructureFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceAccelerationStructureFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceAccelerationStructureFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceAccelerationStructureFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="accelerationStructure" />
    <field name="accelerationStructureCaptureReplay" />
    <field name="accelerationStructureIndirectBuild" />
    <field name="accelerationStructureHostCommands" />
    <field name="descriptorBindingAccelerationStructureUpdateAfterBind" />
  </struct>
  <struct name="PhysicalDeviceAccelerationStructurePropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceAccelerationStructurePropertiesKHR">
      <argument name="maxGeometryCount_" type="uint64_t" default_raw="{}" />
      <argument name="maxInstanceCount_" type="uint64_t" default_raw="{}" />
      <argument name="maxPrimitiveCount_" type="uint64_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorAccelerationStructures_" type="uint32_t" default_raw="{}" />
      <argument name="maxPerStageDescriptorUpdateAfterBindAccelerationStructures_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetAccelerationStructures_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetUpdateAfterBindAccelerationStructures_" type="uint32_t" default_raw="{}" />
      <argument name="minAccelerationStructureScratchOffsetAlignment_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceAccelerationStructurePropertiesKHR">
      <argument name="rhs" type="const PhysicalDeviceAccelerationStructurePropertiesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceAccelerationStructurePropertiesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceAccelerationStructurePropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceAccelerationStructurePropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceAccelerationStructurePropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceAccelerationStructurePropertiesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceAccelerationStructurePropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceAccelerationStructurePropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceAccelerationStructurePropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxGeometryCount" />
    <field name="maxInstanceCount" />
    <field name="maxPrimitiveCount" />
    <field name="maxPerStageDescriptorAccelerationStructures" />
    <field name="maxPerStageDescriptorUpdateAfterBindAccelerationStructures" />
    <field name="maxDescriptorSetAccelerationStructures" />
    <field name="maxDescriptorSetUpdateAfterBindAccelerationStructures" />
    <field name="minAccelerationStructureScratchOffsetAlignment" />
  </struct>
  <struct name="TransformMatrixKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="TransformMatrixKHR">
      <argument name="matrix_" type="const std::array&lt;std::array&lt;float, 4&gt;, 3&gt; &amp;" default_raw="{}" />
    </constructor>
    <constructor name="TransformMatrixKHR">
      <argument name="rhs" type="const TransformMatrixKHR &amp;" />
    </constructor>
    <constructor name="TransformMatrixKHR">
      <argument name="rhs" type="const VkTransformMatrixKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const TransformMatrixKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkTransformMatrixKHR &amp;" />
    </method>
    <method name="setMatrix">
      <argument name="matrix_" type="std::array&lt;std::array&lt;float, 4&gt;, 3&gt;" />
    </method>
    <conversion_function name="operator const VkTransformMatrixKHR &amp;" />
    <conversion_function name="operator VkTransformMatrixKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const TransformMatrixKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const TransformMatrixKHR &amp;" />
    </method>
    <field name="matrix" />
  </struct>
  <type_alias name="TransformMatrixNV" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="TransformMatrixKHR" />
  <struct name="WriteDescriptorSetAccelerationStructureKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="WriteDescriptorSetAccelerationStructureKHR">
      <argument name="accelerationStructureCount_" type="uint32_t" default_raw="{}" />
      <argument name="pAccelerationStructures_" type="const vk::AccelerationStructureKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="WriteDescriptorSetAccelerationStructureKHR">
      <argument name="rhs" type="const WriteDescriptorSetAccelerationStructureKHR &amp;" />
    </constructor>
    <constructor name="WriteDescriptorSetAccelerationStructureKHR">
      <argument name="rhs" type="const VkWriteDescriptorSetAccelerationStructureKHR &amp;" />
    </constructor>
    <constructor name="WriteDescriptorSetAccelerationStructureKHR">
      <argument name="accelerationStructures_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AccelerationStructureKHR&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const WriteDescriptorSetAccelerationStructureKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkWriteDescriptorSetAccelerationStructureKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAccelerationStructureCount">
      <argument name="accelerationStructureCount_" type="uint32_t" />
    </method>
    <method name="setPAccelerationStructures">
      <argument name="pAccelerationStructures_" type="const vk::AccelerationStructureKHR *" />
    </method>
    <method name="setAccelerationStructures">
      <argument name="accelerationStructures_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AccelerationStructureKHR&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkWriteDescriptorSetAccelerationStructureKHR &amp;" />
    <conversion_function name="operator VkWriteDescriptorSetAccelerationStructureKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const WriteDescriptorSetAccelerationStructureKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const WriteDescriptorSetAccelerationStructureKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="accelerationStructureCount" />
    <field name="pAccelerationStructures" />
  </struct>
  <struct name="PhysicalDeviceRayTracingPipelineFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRayTracingPipelineFeaturesKHR">
      <argument name="rayTracingPipeline_" type="vk::Bool32" default_raw="{}" />
      <argument name="rayTracingPipelineShaderGroupHandleCaptureReplay_" type="vk::Bool32" default_raw="{}" />
      <argument name="rayTracingPipelineShaderGroupHandleCaptureReplayMixed_" type="vk::Bool32" default_raw="{}" />
      <argument name="rayTracingPipelineTraceRaysIndirect_" type="vk::Bool32" default_raw="{}" />
      <argument name="rayTraversalPrimitiveCulling_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingPipelineFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPipelineFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingPipelineFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingPipelineFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPipelineFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingPipelineFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRayTracingPipeline">
      <argument name="rayTracingPipeline_" type="vk::Bool32" />
    </method>
    <method name="setRayTracingPipelineShaderGroupHandleCaptureReplay">
      <argument name="rayTracingPipelineShaderGroupHandleCaptureReplay_" type="vk::Bool32" />
    </method>
    <method name="setRayTracingPipelineShaderGroupHandleCaptureReplayMixed">
      <argument name="rayTracingPipelineShaderGroupHandleCaptureReplayMixed_" type="vk::Bool32" />
    </method>
    <method name="setRayTracingPipelineTraceRaysIndirect">
      <argument name="rayTracingPipelineTraceRaysIndirect_" type="vk::Bool32" />
    </method>
    <method name="setRayTraversalPrimitiveCulling">
      <argument name="rayTraversalPrimitiveCulling_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRayTracingPipelineFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRayTracingPipelineFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPipelineFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPipelineFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="rayTracingPipeline" />
    <field name="rayTracingPipelineShaderGroupHandleCaptureReplay" />
    <field name="rayTracingPipelineShaderGroupHandleCaptureReplayMixed" />
    <field name="rayTracingPipelineTraceRaysIndirect" />
    <field name="rayTraversalPrimitiveCulling" />
  </struct>
  <struct name="PhysicalDeviceRayTracingPipelinePropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRayTracingPipelinePropertiesKHR">
      <argument name="shaderGroupHandleSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxRayRecursionDepth_" type="uint32_t" default_raw="{}" />
      <argument name="maxShaderGroupStride_" type="uint32_t" default_raw="{}" />
      <argument name="shaderGroupBaseAlignment_" type="uint32_t" default_raw="{}" />
      <argument name="shaderGroupHandleCaptureReplaySize_" type="uint32_t" default_raw="{}" />
      <argument name="maxRayDispatchInvocationCount_" type="uint32_t" default_raw="{}" />
      <argument name="shaderGroupHandleAlignment_" type="uint32_t" default_raw="{}" />
      <argument name="maxRayHitAttributeSize_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingPipelinePropertiesKHR">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPipelinePropertiesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingPipelinePropertiesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingPipelinePropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPipelinePropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingPipelinePropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRayTracingPipelinePropertiesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRayTracingPipelinePropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPipelinePropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPipelinePropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderGroupHandleSize" />
    <field name="maxRayRecursionDepth" />
    <field name="maxShaderGroupStride" />
    <field name="shaderGroupBaseAlignment" />
    <field name="shaderGroupHandleCaptureReplaySize" />
    <field name="maxRayDispatchInvocationCount" />
    <field name="shaderGroupHandleAlignment" />
    <field name="maxRayHitAttributeSize" />
  </struct>
  <struct name="RayTracingPipelineCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RayTracingPipelineCreateInfoKHR">
      <argument name="flags_" type="vk::PipelineCreateFlags" default_raw="{}" />
      <argument name="stageCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStages_" type="const vk::PipelineShaderStageCreateInfo *" default_raw="{}" />
      <argument name="groupCount_" type="uint32_t" default_raw="{}" />
      <argument name="pGroups_" type="const vk::RayTracingShaderGroupCreateInfoKHR *" default_raw="{}" />
      <argument name="maxPipelineRayRecursionDepth_" type="uint32_t" default_raw="{}" />
      <argument name="pLibraryInfo_" type="const vk::PipelineLibraryCreateInfoKHR *" default_raw="{}" />
      <argument name="pLibraryInterface_" type="const vk::RayTracingPipelineInterfaceCreateInfoKHR *" default_raw="{}" />
      <argument name="pDynamicState_" type="const vk::PipelineDynamicStateCreateInfo *" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="basePipelineHandle_" type="vk::Pipeline" default_raw="{}" />
      <argument name="basePipelineIndex_" type="int32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RayTracingPipelineCreateInfoKHR">
      <argument name="rhs" type="const RayTracingPipelineCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="RayTracingPipelineCreateInfoKHR">
      <argument name="rhs" type="const VkRayTracingPipelineCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="RayTracingPipelineCreateInfoKHR">
      <argument name="flags_" type="vk::PipelineCreateFlags" />
      <argument name="stages_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineShaderStageCreateInfo&gt; &amp;" />
      <argument name="groups_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::RayTracingShaderGroupCreateInfoKHR&gt; &amp;" default_raw="{}" />
      <argument name="maxPipelineRayRecursionDepth_" type="uint32_t" default_raw="{}" />
      <argument name="pLibraryInfo_" type="const vk::PipelineLibraryCreateInfoKHR *" default_raw="{}" />
      <argument name="pLibraryInterface_" type="const vk::RayTracingPipelineInterfaceCreateInfoKHR *" default_raw="{}" />
      <argument name="pDynamicState_" type="const vk::PipelineDynamicStateCreateInfo *" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="basePipelineHandle_" type="vk::Pipeline" default_raw="{}" />
      <argument name="basePipelineIndex_" type="int32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RayTracingPipelineCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRayTracingPipelineCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineCreateFlags" />
    </method>
    <method name="setStageCount">
      <argument name="stageCount_" type="uint32_t" />
    </method>
    <method name="setPStages">
      <argument name="pStages_" type="const vk::PipelineShaderStageCreateInfo *" />
    </method>
    <method name="setStages">
      <argument name="stages_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineShaderStageCreateInfo&gt; &amp;" />
    </method>
    <method name="setGroupCount">
      <argument name="groupCount_" type="uint32_t" />
    </method>
    <method name="setPGroups">
      <argument name="pGroups_" type="const vk::RayTracingShaderGroupCreateInfoKHR *" />
    </method>
    <method name="setGroups">
      <argument name="groups_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::RayTracingShaderGroupCreateInfoKHR&gt; &amp;" />
    </method>
    <method name="setMaxPipelineRayRecursionDepth">
      <argument name="maxPipelineRayRecursionDepth_" type="uint32_t" />
    </method>
    <method name="setPLibraryInfo">
      <argument name="pLibraryInfo_" type="const vk::PipelineLibraryCreateInfoKHR *" />
    </method>
    <method name="setPLibraryInterface">
      <argument name="pLibraryInterface_" type="const vk::RayTracingPipelineInterfaceCreateInfoKHR *" />
    </method>
    <method name="setPDynamicState">
      <argument name="pDynamicState_" type="const vk::PipelineDynamicStateCreateInfo *" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::PipelineLayout" />
    </method>
    <method name="setBasePipelineHandle">
      <argument name="basePipelineHandle_" type="vk::Pipeline" />
    </method>
    <method name="setBasePipelineIndex">
      <argument name="basePipelineIndex_" type="int32_t" />
    </method>
    <conversion_function name="operator const VkRayTracingPipelineCreateInfoKHR &amp;" />
    <conversion_function name="operator VkRayTracingPipelineCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RayTracingPipelineCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RayTracingPipelineCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="stageCount" />
    <field name="pStages" />
    <field name="groupCount" />
    <field name="pGroups" />
    <field name="maxPipelineRayRecursionDepth" />
    <field name="pLibraryInfo" />
    <field name="pLibraryInterface" />
    <field name="pDynamicState" />
    <field name="layout" />
    <field name="basePipelineHandle" />
    <field name="basePipelineIndex" />
  </struct>
  <struct name="RayTracingPipelineInterfaceCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RayTracingPipelineInterfaceCreateInfoKHR">
      <argument name="maxPipelineRayPayloadSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxPipelineRayHitAttributeSize_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RayTracingPipelineInterfaceCreateInfoKHR">
      <argument name="rhs" type="const RayTracingPipelineInterfaceCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="RayTracingPipelineInterfaceCreateInfoKHR">
      <argument name="rhs" type="const VkRayTracingPipelineInterfaceCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RayTracingPipelineInterfaceCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRayTracingPipelineInterfaceCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMaxPipelineRayPayloadSize">
      <argument name="maxPipelineRayPayloadSize_" type="uint32_t" />
    </method>
    <method name="setMaxPipelineRayHitAttributeSize">
      <argument name="maxPipelineRayHitAttributeSize_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkRayTracingPipelineInterfaceCreateInfoKHR &amp;" />
    <conversion_function name="operator VkRayTracingPipelineInterfaceCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RayTracingPipelineInterfaceCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RayTracingPipelineInterfaceCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxPipelineRayPayloadSize" />
    <field name="maxPipelineRayHitAttributeSize" />
  </struct>
  <struct name="RayTracingShaderGroupCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RayTracingShaderGroupCreateInfoKHR">
      <argument name="type_" type="vk::RayTracingShaderGroupTypeKHR" default_raw="VULKAN_HPP_NAMESPACE::RayTracingShaderGroupTypeKHR::eGeneral" />
      <argument name="generalShader_" type="uint32_t" default_raw="VULKAN_HPP_NAMESPACE::ShaderUnusedKHR" />
      <argument name="closestHitShader_" type="uint32_t" default_raw="VULKAN_HPP_NAMESPACE::ShaderUnusedKHR" />
      <argument name="anyHitShader_" type="uint32_t" default_raw="VULKAN_HPP_NAMESPACE::ShaderUnusedKHR" />
      <argument name="intersectionShader_" type="uint32_t" default_raw="VULKAN_HPP_NAMESPACE::ShaderUnusedKHR" />
      <argument name="pShaderGroupCaptureReplayHandle_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RayTracingShaderGroupCreateInfoKHR">
      <argument name="rhs" type="const RayTracingShaderGroupCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="RayTracingShaderGroupCreateInfoKHR">
      <argument name="rhs" type="const VkRayTracingShaderGroupCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RayTracingShaderGroupCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRayTracingShaderGroupCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::RayTracingShaderGroupTypeKHR" />
    </method>
    <method name="setGeneralShader">
      <argument name="generalShader_" type="uint32_t" />
    </method>
    <method name="setClosestHitShader">
      <argument name="closestHitShader_" type="uint32_t" />
    </method>
    <method name="setAnyHitShader">
      <argument name="anyHitShader_" type="uint32_t" />
    </method>
    <method name="setIntersectionShader">
      <argument name="intersectionShader_" type="uint32_t" />
    </method>
    <method name="setPShaderGroupCaptureReplayHandle">
      <argument name="pShaderGroupCaptureReplayHandle_" type="const void *" />
    </method>
    <conversion_function name="operator const VkRayTracingShaderGroupCreateInfoKHR &amp;" />
    <conversion_function name="operator VkRayTracingShaderGroupCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RayTracingShaderGroupCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RayTracingShaderGroupCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="type" />
    <field name="generalShader" />
    <field name="closestHitShader" />
    <field name="anyHitShader" />
    <field name="intersectionShader" />
    <field name="pShaderGroupCaptureReplayHandle" />
  </struct>
  <struct name="StridedDeviceAddressRegionKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="StridedDeviceAddressRegionKHR">
      <argument name="deviceAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="stride_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
    </constructor>
    <constructor name="StridedDeviceAddressRegionKHR">
      <argument name="rhs" type="const StridedDeviceAddressRegionKHR &amp;" />
    </constructor>
    <constructor name="StridedDeviceAddressRegionKHR">
      <argument name="rhs" type="const VkStridedDeviceAddressRegionKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const StridedDeviceAddressRegionKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkStridedDeviceAddressRegionKHR &amp;" />
    </method>
    <method name="setDeviceAddress">
      <argument name="deviceAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setStride">
      <argument name="stride_" type="vk::DeviceSize" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkStridedDeviceAddressRegionKHR &amp;" />
    <conversion_function name="operator VkStridedDeviceAddressRegionKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const StridedDeviceAddressRegionKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const StridedDeviceAddressRegionKHR &amp;" />
    </method>
    <field name="deviceAddress" />
    <field name="stride" />
    <field name="size" />
  </struct>
  <struct name="TraceRaysIndirectCommandKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="TraceRaysIndirectCommandKHR">
      <argument name="width_" type="uint32_t" default_raw="{}" />
      <argument name="height_" type="uint32_t" default_raw="{}" />
      <argument name="depth_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="TraceRaysIndirectCommandKHR">
      <argument name="rhs" type="const TraceRaysIndirectCommandKHR &amp;" />
    </constructor>
    <constructor name="TraceRaysIndirectCommandKHR">
      <argument name="rhs" type="const VkTraceRaysIndirectCommandKHR &amp;" />
    </constructor>
    <constructor name="TraceRaysIndirectCommandKHR">
      <argument name="extent2D" type="const Extent2D &amp;" />
      <argument name="depth_" type="uint32_t" default_raw="{}" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const TraceRaysIndirectCommandKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkTraceRaysIndirectCommandKHR &amp;" />
    </method>
    <method name="setWidth">
      <argument name="width_" type="uint32_t" />
    </method>
    <method name="setHeight">
      <argument name="height_" type="uint32_t" />
    </method>
    <method name="setDepth">
      <argument name="depth_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkTraceRaysIndirectCommandKHR &amp;" />
    <conversion_function name="operator VkTraceRaysIndirectCommandKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const TraceRaysIndirectCommandKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const TraceRaysIndirectCommandKHR &amp;" />
    </method>
    <field name="width" />
    <field name="height" />
    <field name="depth" />
  </struct>
  <struct name="PhysicalDeviceRayQueryFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRayQueryFeaturesKHR">
      <argument name="rayQuery_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRayQueryFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceRayQueryFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRayQueryFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceRayQueryFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRayQueryFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRayQueryFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRayQuery">
      <argument name="rayQuery_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRayQueryFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRayQueryFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRayQueryFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRayQueryFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="rayQuery" />
  </struct>
  <struct name="PipelineCoverageModulationStateCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineCoverageModulationStateCreateInfoNV">
      <argument name="flags_" type="vk::PipelineCoverageModulationStateCreateFlagsNV" default_raw="{}" />
      <argument name="coverageModulationMode_" type="vk::CoverageModulationModeNV" default_raw="VULKAN_HPP_NAMESPACE::CoverageModulationModeNV::eNone" />
      <argument name="coverageModulationTableEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="coverageModulationTableCount_" type="uint32_t" default_raw="{}" />
      <argument name="pCoverageModulationTable_" type="const float *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineCoverageModulationStateCreateInfoNV">
      <argument name="rhs" type="const PipelineCoverageModulationStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineCoverageModulationStateCreateInfoNV">
      <argument name="rhs" type="const VkPipelineCoverageModulationStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineCoverageModulationStateCreateInfoNV">
      <argument name="flags_" type="vk::PipelineCoverageModulationStateCreateFlagsNV" />
      <argument name="coverageModulationMode_" type="vk::CoverageModulationModeNV" />
      <argument name="coverageModulationTableEnable_" type="vk::Bool32" />
      <argument name="coverageModulationTable_" type="const vk::ArrayProxyNoTemporaries&lt;const float&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineCoverageModulationStateCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineCoverageModulationStateCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineCoverageModulationStateCreateFlagsNV" />
    </method>
    <method name="setCoverageModulationMode">
      <argument name="coverageModulationMode_" type="vk::CoverageModulationModeNV" />
    </method>
    <method name="setCoverageModulationTableEnable">
      <argument name="coverageModulationTableEnable_" type="vk::Bool32" />
    </method>
    <method name="setCoverageModulationTableCount">
      <argument name="coverageModulationTableCount_" type="uint32_t" />
    </method>
    <method name="setPCoverageModulationTable">
      <argument name="pCoverageModulationTable_" type="const float *" />
    </method>
    <method name="setCoverageModulationTable">
      <argument name="coverageModulationTable_" type="const vk::ArrayProxyNoTemporaries&lt;const float&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineCoverageModulationStateCreateInfoNV &amp;" />
    <conversion_function name="operator VkPipelineCoverageModulationStateCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineCoverageModulationStateCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineCoverageModulationStateCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="coverageModulationMode" />
    <field name="coverageModulationTableEnable" />
    <field name="coverageModulationTableCount" />
    <field name="pCoverageModulationTable" />
  </struct>
  <struct name="PhysicalDeviceShaderSMBuiltinsFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderSMBuiltinsFeaturesNV">
      <argument name="shaderSMBuiltins_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderSMBuiltinsFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceShaderSMBuiltinsFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderSMBuiltinsFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderSMBuiltinsFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderSMBuiltins">
      <argument name="shaderSMBuiltins_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderSMBuiltinsFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderSMBuiltinsFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderSMBuiltinsFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderSMBuiltins" />
  </struct>
  <struct name="PhysicalDeviceShaderSMBuiltinsPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderSMBuiltinsPropertiesNV">
      <argument name="shaderSMCount_" type="uint32_t" default_raw="{}" />
      <argument name="shaderWarpsPerSM_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderSMBuiltinsPropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceShaderSMBuiltinsPropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderSMBuiltinsPropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderSMBuiltinsPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderSMBuiltinsPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderSMBuiltinsPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderSMBuiltinsPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderSMCount" />
    <field name="shaderWarpsPerSM" />
  </struct>
  <struct name="DrmFormatModifierProperties2EXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DrmFormatModifierProperties2EXT">
      <argument name="drmFormatModifier_" type="uint64_t" default_raw="{}" />
      <argument name="drmFormatModifierPlaneCount_" type="uint32_t" default_raw="{}" />
      <argument name="drmFormatModifierTilingFeatures_" type="vk::FormatFeatureFlags2" default_raw="{}" />
    </constructor>
    <constructor name="DrmFormatModifierProperties2EXT">
      <argument name="rhs" type="const DrmFormatModifierProperties2EXT &amp;" />
    </constructor>
    <constructor name="DrmFormatModifierProperties2EXT">
      <argument name="rhs" type="const VkDrmFormatModifierProperties2EXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DrmFormatModifierProperties2EXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDrmFormatModifierProperties2EXT &amp;" />
    </method>
    <conversion_function name="operator const VkDrmFormatModifierProperties2EXT &amp;" />
    <conversion_function name="operator VkDrmFormatModifierProperties2EXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DrmFormatModifierProperties2EXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DrmFormatModifierProperties2EXT &amp;" />
    </method>
    <field name="drmFormatModifier" />
    <field name="drmFormatModifierPlaneCount" />
    <field name="drmFormatModifierTilingFeatures" />
  </struct>
  <struct name="DrmFormatModifierPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DrmFormatModifierPropertiesEXT">
      <argument name="drmFormatModifier_" type="uint64_t" default_raw="{}" />
      <argument name="drmFormatModifierPlaneCount_" type="uint32_t" default_raw="{}" />
      <argument name="drmFormatModifierTilingFeatures_" type="vk::FormatFeatureFlags" default_raw="{}" />
    </constructor>
    <constructor name="DrmFormatModifierPropertiesEXT">
      <argument name="rhs" type="const DrmFormatModifierPropertiesEXT &amp;" />
    </constructor>
    <constructor name="DrmFormatModifierPropertiesEXT">
      <argument name="rhs" type="const VkDrmFormatModifierPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DrmFormatModifierPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDrmFormatModifierPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkDrmFormatModifierPropertiesEXT &amp;" />
    <conversion_function name="operator VkDrmFormatModifierPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DrmFormatModifierPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DrmFormatModifierPropertiesEXT &amp;" />
    </method>
    <field name="drmFormatModifier" />
    <field name="drmFormatModifierPlaneCount" />
    <field name="drmFormatModifierTilingFeatures" />
  </struct>
  <struct name="DrmFormatModifierPropertiesList2EXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DrmFormatModifierPropertiesList2EXT">
      <argument name="drmFormatModifierCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDrmFormatModifierProperties_" type="vk::DrmFormatModifierProperties2EXT *" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DrmFormatModifierPropertiesList2EXT">
      <argument name="rhs" type="const DrmFormatModifierPropertiesList2EXT &amp;" />
    </constructor>
    <constructor name="DrmFormatModifierPropertiesList2EXT">
      <argument name="rhs" type="const VkDrmFormatModifierPropertiesList2EXT &amp;" />
    </constructor>
    <constructor name="DrmFormatModifierPropertiesList2EXT">
      <argument name="drmFormatModifierProperties_" type="const vk::ArrayProxyNoTemporaries&lt;vk::DrmFormatModifierProperties2EXT&gt; &amp;" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DrmFormatModifierPropertiesList2EXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDrmFormatModifierPropertiesList2EXT &amp;" />
    </method>
    <conversion_function name="operator const VkDrmFormatModifierPropertiesList2EXT &amp;" />
    <conversion_function name="operator VkDrmFormatModifierPropertiesList2EXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DrmFormatModifierPropertiesList2EXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DrmFormatModifierPropertiesList2EXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="drmFormatModifierCount" />
    <field name="pDrmFormatModifierProperties" />
  </struct>
  <struct name="DrmFormatModifierPropertiesListEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DrmFormatModifierPropertiesListEXT">
      <argument name="drmFormatModifierCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDrmFormatModifierProperties_" type="vk::DrmFormatModifierPropertiesEXT *" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DrmFormatModifierPropertiesListEXT">
      <argument name="rhs" type="const DrmFormatModifierPropertiesListEXT &amp;" />
    </constructor>
    <constructor name="DrmFormatModifierPropertiesListEXT">
      <argument name="rhs" type="const VkDrmFormatModifierPropertiesListEXT &amp;" />
    </constructor>
    <constructor name="DrmFormatModifierPropertiesListEXT">
      <argument name="drmFormatModifierProperties_" type="const vk::ArrayProxyNoTemporaries&lt;vk::DrmFormatModifierPropertiesEXT&gt; &amp;" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DrmFormatModifierPropertiesListEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDrmFormatModifierPropertiesListEXT &amp;" />
    </method>
    <conversion_function name="operator const VkDrmFormatModifierPropertiesListEXT &amp;" />
    <conversion_function name="operator VkDrmFormatModifierPropertiesListEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DrmFormatModifierPropertiesListEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DrmFormatModifierPropertiesListEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="drmFormatModifierCount" />
    <field name="pDrmFormatModifierProperties" />
  </struct>
  <struct name="ImageDrmFormatModifierExplicitCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageDrmFormatModifierExplicitCreateInfoEXT">
      <argument name="drmFormatModifier_" type="uint64_t" default_raw="{}" />
      <argument name="drmFormatModifierPlaneCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPlaneLayouts_" type="const vk::SubresourceLayout *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageDrmFormatModifierExplicitCreateInfoEXT">
      <argument name="rhs" type="const ImageDrmFormatModifierExplicitCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="ImageDrmFormatModifierExplicitCreateInfoEXT">
      <argument name="rhs" type="const VkImageDrmFormatModifierExplicitCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="ImageDrmFormatModifierExplicitCreateInfoEXT">
      <argument name="drmFormatModifier_" type="uint64_t" />
      <argument name="planeLayouts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubresourceLayout&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageDrmFormatModifierExplicitCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageDrmFormatModifierExplicitCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDrmFormatModifier">
      <argument name="drmFormatModifier_" type="uint64_t" />
    </method>
    <method name="setDrmFormatModifierPlaneCount">
      <argument name="drmFormatModifierPlaneCount_" type="uint32_t" />
    </method>
    <method name="setPPlaneLayouts">
      <argument name="pPlaneLayouts_" type="const vk::SubresourceLayout *" />
    </method>
    <method name="setPlaneLayouts">
      <argument name="planeLayouts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SubresourceLayout&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkImageDrmFormatModifierExplicitCreateInfoEXT &amp;" />
    <conversion_function name="operator VkImageDrmFormatModifierExplicitCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageDrmFormatModifierExplicitCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageDrmFormatModifierExplicitCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="drmFormatModifier" />
    <field name="drmFormatModifierPlaneCount" />
    <field name="pPlaneLayouts" />
  </struct>
  <struct name="ImageDrmFormatModifierListCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageDrmFormatModifierListCreateInfoEXT">
      <argument name="drmFormatModifierCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDrmFormatModifiers_" type="const uint64_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageDrmFormatModifierListCreateInfoEXT">
      <argument name="rhs" type="const ImageDrmFormatModifierListCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="ImageDrmFormatModifierListCreateInfoEXT">
      <argument name="rhs" type="const VkImageDrmFormatModifierListCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="ImageDrmFormatModifierListCreateInfoEXT">
      <argument name="drmFormatModifiers_" type="const vk::ArrayProxyNoTemporaries&lt;const uint64_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageDrmFormatModifierListCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageDrmFormatModifierListCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDrmFormatModifierCount">
      <argument name="drmFormatModifierCount_" type="uint32_t" />
    </method>
    <method name="setPDrmFormatModifiers">
      <argument name="pDrmFormatModifiers_" type="const uint64_t *" />
    </method>
    <method name="setDrmFormatModifiers">
      <argument name="drmFormatModifiers_" type="const vk::ArrayProxyNoTemporaries&lt;const uint64_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkImageDrmFormatModifierListCreateInfoEXT &amp;" />
    <conversion_function name="operator VkImageDrmFormatModifierListCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageDrmFormatModifierListCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageDrmFormatModifierListCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="drmFormatModifierCount" />
    <field name="pDrmFormatModifiers" />
  </struct>
  <struct name="ImageDrmFormatModifierPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageDrmFormatModifierPropertiesEXT">
      <argument name="drmFormatModifier_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageDrmFormatModifierPropertiesEXT">
      <argument name="rhs" type="const ImageDrmFormatModifierPropertiesEXT &amp;" />
    </constructor>
    <constructor name="ImageDrmFormatModifierPropertiesEXT">
      <argument name="rhs" type="const VkImageDrmFormatModifierPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageDrmFormatModifierPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageDrmFormatModifierPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkImageDrmFormatModifierPropertiesEXT &amp;" />
    <conversion_function name="operator VkImageDrmFormatModifierPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageDrmFormatModifierPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageDrmFormatModifierPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="drmFormatModifier" />
  </struct>
  <struct name="PhysicalDeviceImageDrmFormatModifierInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageDrmFormatModifierInfoEXT">
      <argument name="drmFormatModifier_" type="uint64_t" default_raw="{}" />
      <argument name="sharingMode_" type="vk::SharingMode" default_raw="VULKAN_HPP_NAMESPACE::SharingMode::eExclusive" />
      <argument name="queueFamilyIndexCount_" type="uint32_t" default_raw="{}" />
      <argument name="pQueueFamilyIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageDrmFormatModifierInfoEXT">
      <argument name="rhs" type="const PhysicalDeviceImageDrmFormatModifierInfoEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageDrmFormatModifierInfoEXT">
      <argument name="rhs" type="const VkPhysicalDeviceImageDrmFormatModifierInfoEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageDrmFormatModifierInfoEXT">
      <argument name="drmFormatModifier_" type="uint64_t" />
      <argument name="sharingMode_" type="vk::SharingMode" />
      <argument name="queueFamilyIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageDrmFormatModifierInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageDrmFormatModifierInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDrmFormatModifier">
      <argument name="drmFormatModifier_" type="uint64_t" />
    </method>
    <method name="setSharingMode">
      <argument name="sharingMode_" type="vk::SharingMode" />
    </method>
    <method name="setQueueFamilyIndexCount">
      <argument name="queueFamilyIndexCount_" type="uint32_t" />
    </method>
    <method name="setPQueueFamilyIndices">
      <argument name="pQueueFamilyIndices_" type="const uint32_t *" />
    </method>
    <method name="setQueueFamilyIndices">
      <argument name="queueFamilyIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageDrmFormatModifierInfoEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageDrmFormatModifierInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageDrmFormatModifierInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageDrmFormatModifierInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="drmFormatModifier" />
    <field name="sharingMode" />
    <field name="queueFamilyIndexCount" />
    <field name="pQueueFamilyIndices" />
  </struct>
  <struct name="ShaderModuleValidationCacheCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ShaderModuleValidationCacheCreateInfoEXT">
      <argument name="validationCache_" type="vk::ValidationCacheEXT" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ShaderModuleValidationCacheCreateInfoEXT">
      <argument name="rhs" type="const ShaderModuleValidationCacheCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="ShaderModuleValidationCacheCreateInfoEXT">
      <argument name="rhs" type="const VkShaderModuleValidationCacheCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ShaderModuleValidationCacheCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkShaderModuleValidationCacheCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setValidationCache">
      <argument name="validationCache_" type="vk::ValidationCacheEXT" />
    </method>
    <conversion_function name="operator const VkShaderModuleValidationCacheCreateInfoEXT &amp;" />
    <conversion_function name="operator VkShaderModuleValidationCacheCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ShaderModuleValidationCacheCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ShaderModuleValidationCacheCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="validationCache" />
  </struct>
  <struct name="ValidationCacheCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ValidationCacheCreateInfoEXT">
      <argument name="flags_" type="vk::ValidationCacheCreateFlagsEXT" default_raw="{}" />
      <argument name="initialDataSize_" type="size_t" default_raw="{}" />
      <argument name="pInitialData_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ValidationCacheCreateInfoEXT">
      <argument name="rhs" type="const ValidationCacheCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="ValidationCacheCreateInfoEXT">
      <argument name="rhs" type="const VkValidationCacheCreateInfoEXT &amp;" />
    </constructor>
    <method name="ValidationCacheCreateInfoEXT" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const ValidationCacheCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkValidationCacheCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::ValidationCacheCreateFlagsEXT" />
    </method>
    <method name="setInitialDataSize">
      <argument name="initialDataSize_" type="size_t" />
    </method>
    <method name="setPInitialData">
      <argument name="pInitialData_" type="const void *" />
    </method>
    <method name="setInitialData" template_raw="template &lt;typename T&gt;" />
    <conversion_function name="operator const VkValidationCacheCreateInfoEXT &amp;" />
    <conversion_function name="operator VkValidationCacheCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ValidationCacheCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ValidationCacheCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="initialDataSize" />
    <field name="pInitialData" />
  </struct>
  <struct name="CoarseSampleLocationNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CoarseSampleLocationNV">
      <argument name="pixelX_" type="uint32_t" default_raw="{}" />
      <argument name="pixelY_" type="uint32_t" default_raw="{}" />
      <argument name="sample_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="CoarseSampleLocationNV">
      <argument name="rhs" type="const CoarseSampleLocationNV &amp;" />
    </constructor>
    <constructor name="CoarseSampleLocationNV">
      <argument name="rhs" type="const VkCoarseSampleLocationNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CoarseSampleLocationNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCoarseSampleLocationNV &amp;" />
    </method>
    <method name="setPixelX">
      <argument name="pixelX_" type="uint32_t" />
    </method>
    <method name="setPixelY">
      <argument name="pixelY_" type="uint32_t" />
    </method>
    <method name="setSample">
      <argument name="sample_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkCoarseSampleLocationNV &amp;" />
    <conversion_function name="operator VkCoarseSampleLocationNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CoarseSampleLocationNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CoarseSampleLocationNV &amp;" />
    </method>
    <field name="pixelX" />
    <field name="pixelY" />
    <field name="sample" />
  </struct>
  <struct name="CoarseSampleOrderCustomNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CoarseSampleOrderCustomNV">
      <argument name="shadingRate_" type="vk::ShadingRatePaletteEntryNV" default_raw="VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::eNoInvocations" />
      <argument name="sampleCount_" type="uint32_t" default_raw="{}" />
      <argument name="sampleLocationCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSampleLocations_" type="const vk::CoarseSampleLocationNV *" default_raw="{}" />
    </constructor>
    <constructor name="CoarseSampleOrderCustomNV">
      <argument name="rhs" type="const CoarseSampleOrderCustomNV &amp;" />
    </constructor>
    <constructor name="CoarseSampleOrderCustomNV">
      <argument name="rhs" type="const VkCoarseSampleOrderCustomNV &amp;" />
    </constructor>
    <constructor name="CoarseSampleOrderCustomNV">
      <argument name="shadingRate_" type="vk::ShadingRatePaletteEntryNV" />
      <argument name="sampleCount_" type="uint32_t" />
      <argument name="sampleLocations_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::CoarseSampleLocationNV&gt; &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CoarseSampleOrderCustomNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCoarseSampleOrderCustomNV &amp;" />
    </method>
    <method name="setShadingRate">
      <argument name="shadingRate_" type="vk::ShadingRatePaletteEntryNV" />
    </method>
    <method name="setSampleCount">
      <argument name="sampleCount_" type="uint32_t" />
    </method>
    <method name="setSampleLocationCount">
      <argument name="sampleLocationCount_" type="uint32_t" />
    </method>
    <method name="setPSampleLocations">
      <argument name="pSampleLocations_" type="const vk::CoarseSampleLocationNV *" />
    </method>
    <method name="setSampleLocations">
      <argument name="sampleLocations_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::CoarseSampleLocationNV&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkCoarseSampleOrderCustomNV &amp;" />
    <conversion_function name="operator VkCoarseSampleOrderCustomNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CoarseSampleOrderCustomNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CoarseSampleOrderCustomNV &amp;" />
    </method>
    <field name="shadingRate" />
    <field name="sampleCount" />
    <field name="sampleLocationCount" />
    <field name="pSampleLocations" />
  </struct>
  <struct name="PhysicalDeviceShadingRateImageFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShadingRateImageFeaturesNV">
      <argument name="shadingRateImage_" type="vk::Bool32" default_raw="{}" />
      <argument name="shadingRateCoarseSampleOrder_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShadingRateImageFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceShadingRateImageFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShadingRateImageFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceShadingRateImageFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShadingRateImageFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShadingRateImageFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShadingRateImage">
      <argument name="shadingRateImage_" type="vk::Bool32" />
    </method>
    <method name="setShadingRateCoarseSampleOrder">
      <argument name="shadingRateCoarseSampleOrder_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShadingRateImageFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShadingRateImageFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShadingRateImageFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShadingRateImageFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shadingRateImage" />
    <field name="shadingRateCoarseSampleOrder" />
  </struct>
  <struct name="PhysicalDeviceShadingRateImagePropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShadingRateImagePropertiesNV">
      <argument name="shadingRateTexelSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="shadingRatePaletteSize_" type="uint32_t" default_raw="{}" />
      <argument name="shadingRateMaxCoarseSamples_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShadingRateImagePropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceShadingRateImagePropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShadingRateImagePropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceShadingRateImagePropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShadingRateImagePropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShadingRateImagePropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShadingRateImagePropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShadingRateImagePropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShadingRateImagePropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShadingRateImagePropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shadingRateTexelSize" />
    <field name="shadingRatePaletteSize" />
    <field name="shadingRateMaxCoarseSamples" />
  </struct>
  <struct name="PipelineViewportCoarseSampleOrderStateCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineViewportCoarseSampleOrderStateCreateInfoNV">
      <argument name="sampleOrderType_" type="vk::CoarseSampleOrderTypeNV" default_raw="VULKAN_HPP_NAMESPACE::CoarseSampleOrderTypeNV::eDefault" />
      <argument name="customSampleOrderCount_" type="uint32_t" default_raw="{}" />
      <argument name="pCustomSampleOrders_" type="const vk::CoarseSampleOrderCustomNV *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineViewportCoarseSampleOrderStateCreateInfoNV">
      <argument name="rhs" type="const PipelineViewportCoarseSampleOrderStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineViewportCoarseSampleOrderStateCreateInfoNV">
      <argument name="rhs" type="const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineViewportCoarseSampleOrderStateCreateInfoNV">
      <argument name="sampleOrderType_" type="vk::CoarseSampleOrderTypeNV" />
      <argument name="customSampleOrders_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::CoarseSampleOrderCustomNV&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineViewportCoarseSampleOrderStateCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSampleOrderType">
      <argument name="sampleOrderType_" type="vk::CoarseSampleOrderTypeNV" />
    </method>
    <method name="setCustomSampleOrderCount">
      <argument name="customSampleOrderCount_" type="uint32_t" />
    </method>
    <method name="setPCustomSampleOrders">
      <argument name="pCustomSampleOrders_" type="const vk::CoarseSampleOrderCustomNV *" />
    </method>
    <method name="setCustomSampleOrders">
      <argument name="customSampleOrders_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::CoarseSampleOrderCustomNV&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV &amp;" />
    <conversion_function name="operator VkPipelineViewportCoarseSampleOrderStateCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineViewportCoarseSampleOrderStateCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineViewportCoarseSampleOrderStateCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="sampleOrderType" />
    <field name="customSampleOrderCount" />
    <field name="pCustomSampleOrders" />
  </struct>
  <struct name="PipelineViewportShadingRateImageStateCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineViewportShadingRateImageStateCreateInfoNV">
      <argument name="shadingRateImageEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="viewportCount_" type="uint32_t" default_raw="{}" />
      <argument name="pShadingRatePalettes_" type="const vk::ShadingRatePaletteNV *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineViewportShadingRateImageStateCreateInfoNV">
      <argument name="rhs" type="const PipelineViewportShadingRateImageStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineViewportShadingRateImageStateCreateInfoNV">
      <argument name="rhs" type="const VkPipelineViewportShadingRateImageStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineViewportShadingRateImageStateCreateInfoNV">
      <argument name="shadingRateImageEnable_" type="vk::Bool32" />
      <argument name="shadingRatePalettes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ShadingRatePaletteNV&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineViewportShadingRateImageStateCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineViewportShadingRateImageStateCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setShadingRateImageEnable">
      <argument name="shadingRateImageEnable_" type="vk::Bool32" />
    </method>
    <method name="setViewportCount">
      <argument name="viewportCount_" type="uint32_t" />
    </method>
    <method name="setPShadingRatePalettes">
      <argument name="pShadingRatePalettes_" type="const vk::ShadingRatePaletteNV *" />
    </method>
    <method name="setShadingRatePalettes">
      <argument name="shadingRatePalettes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ShadingRatePaletteNV&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineViewportShadingRateImageStateCreateInfoNV &amp;" />
    <conversion_function name="operator VkPipelineViewportShadingRateImageStateCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineViewportShadingRateImageStateCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineViewportShadingRateImageStateCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shadingRateImageEnable" />
    <field name="viewportCount" />
    <field name="pShadingRatePalettes" />
  </struct>
  <struct name="ShadingRatePaletteNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ShadingRatePaletteNV">
      <argument name="shadingRatePaletteEntryCount_" type="uint32_t" default_raw="{}" />
      <argument name="pShadingRatePaletteEntries_" type="const vk::ShadingRatePaletteEntryNV *" default_raw="{}" />
    </constructor>
    <constructor name="ShadingRatePaletteNV">
      <argument name="rhs" type="const ShadingRatePaletteNV &amp;" />
    </constructor>
    <constructor name="ShadingRatePaletteNV">
      <argument name="rhs" type="const VkShadingRatePaletteNV &amp;" />
    </constructor>
    <constructor name="ShadingRatePaletteNV">
      <argument name="shadingRatePaletteEntries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ShadingRatePaletteEntryNV&gt; &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ShadingRatePaletteNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkShadingRatePaletteNV &amp;" />
    </method>
    <method name="setShadingRatePaletteEntryCount">
      <argument name="shadingRatePaletteEntryCount_" type="uint32_t" />
    </method>
    <method name="setPShadingRatePaletteEntries">
      <argument name="pShadingRatePaletteEntries_" type="const vk::ShadingRatePaletteEntryNV *" />
    </method>
    <method name="setShadingRatePaletteEntries">
      <argument name="shadingRatePaletteEntries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ShadingRatePaletteEntryNV&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkShadingRatePaletteNV &amp;" />
    <conversion_function name="operator VkShadingRatePaletteNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ShadingRatePaletteNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ShadingRatePaletteNV &amp;" />
    </method>
    <field name="shadingRatePaletteEntryCount" />
    <field name="pShadingRatePaletteEntries" />
  </struct>
  <struct name="AccelerationStructureCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureCreateInfoNV">
      <argument name="compactedSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="info_" type="vk::AccelerationStructureInfoNV" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureCreateInfoNV">
      <argument name="rhs" type="const AccelerationStructureCreateInfoNV &amp;" />
    </constructor>
    <constructor name="AccelerationStructureCreateInfoNV">
      <argument name="rhs" type="const VkAccelerationStructureCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setCompactedSize">
      <argument name="compactedSize_" type="vk::DeviceSize" />
    </method>
    <method name="setInfo">
      <argument name="info_" type="const vk::AccelerationStructureInfoNV &amp;" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureCreateInfoNV &amp;" />
    <conversion_function name="operator VkAccelerationStructureCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="compactedSize" />
    <field name="info" />
  </struct>
  <struct name="AccelerationStructureInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureInfoNV">
      <argument name="type_" type="vk::AccelerationStructureTypeNV" default_raw="{}" />
      <argument name="flags_" type="vk::BuildAccelerationStructureFlagsNV" default_raw="{}" />
      <argument name="instanceCount_" type="uint32_t" default_raw="{}" />
      <argument name="geometryCount_" type="uint32_t" default_raw="{}" />
      <argument name="pGeometries_" type="const vk::GeometryNV *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureInfoNV">
      <argument name="rhs" type="const AccelerationStructureInfoNV &amp;" />
    </constructor>
    <constructor name="AccelerationStructureInfoNV">
      <argument name="rhs" type="const VkAccelerationStructureInfoNV &amp;" />
    </constructor>
    <constructor name="AccelerationStructureInfoNV">
      <argument name="type_" type="vk::AccelerationStructureTypeNV" />
      <argument name="flags_" type="vk::BuildAccelerationStructureFlagsNV" />
      <argument name="instanceCount_" type="uint32_t" />
      <argument name="geometries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::GeometryNV&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::AccelerationStructureTypeNV" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::BuildAccelerationStructureFlagsNV" />
    </method>
    <method name="setInstanceCount">
      <argument name="instanceCount_" type="uint32_t" />
    </method>
    <method name="setGeometryCount">
      <argument name="geometryCount_" type="uint32_t" />
    </method>
    <method name="setPGeometries">
      <argument name="pGeometries_" type="const vk::GeometryNV *" />
    </method>
    <method name="setGeometries">
      <argument name="geometries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::GeometryNV&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureInfoNV &amp;" />
    <conversion_function name="operator VkAccelerationStructureInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="type" />
    <field name="flags" />
    <field name="instanceCount" />
    <field name="geometryCount" />
    <field name="pGeometries" />
  </struct>
  <struct name="AccelerationStructureMemoryRequirementsInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureMemoryRequirementsInfoNV">
      <argument name="type_" type="vk::AccelerationStructureMemoryRequirementsTypeNV" default_raw="VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::eObject" />
      <argument name="accelerationStructure_" type="vk::AccelerationStructureNV" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureMemoryRequirementsInfoNV">
      <argument name="rhs" type="const AccelerationStructureMemoryRequirementsInfoNV &amp;" />
    </constructor>
    <constructor name="AccelerationStructureMemoryRequirementsInfoNV">
      <argument name="rhs" type="const VkAccelerationStructureMemoryRequirementsInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureMemoryRequirementsInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureMemoryRequirementsInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::AccelerationStructureMemoryRequirementsTypeNV" />
    </method>
    <method name="setAccelerationStructure">
      <argument name="accelerationStructure_" type="vk::AccelerationStructureNV" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureMemoryRequirementsInfoNV &amp;" />
    <conversion_function name="operator VkAccelerationStructureMemoryRequirementsInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureMemoryRequirementsInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureMemoryRequirementsInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="type" />
    <field name="accelerationStructure" />
  </struct>
  <struct name="BindAccelerationStructureMemoryInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindAccelerationStructureMemoryInfoNV">
      <argument name="accelerationStructure_" type="vk::AccelerationStructureNV" default_raw="{}" />
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="memoryOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="deviceIndexCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDeviceIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindAccelerationStructureMemoryInfoNV">
      <argument name="rhs" type="const BindAccelerationStructureMemoryInfoNV &amp;" />
    </constructor>
    <constructor name="BindAccelerationStructureMemoryInfoNV">
      <argument name="rhs" type="const VkBindAccelerationStructureMemoryInfoNV &amp;" />
    </constructor>
    <constructor name="BindAccelerationStructureMemoryInfoNV">
      <argument name="accelerationStructure_" type="vk::AccelerationStructureNV" />
      <argument name="memory_" type="vk::DeviceMemory" />
      <argument name="memoryOffset_" type="vk::DeviceSize" />
      <argument name="deviceIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindAccelerationStructureMemoryInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindAccelerationStructureMemoryInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAccelerationStructure">
      <argument name="accelerationStructure_" type="vk::AccelerationStructureNV" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <method name="setMemoryOffset">
      <argument name="memoryOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setDeviceIndexCount">
      <argument name="deviceIndexCount_" type="uint32_t" />
    </method>
    <method name="setPDeviceIndices">
      <argument name="pDeviceIndices_" type="const uint32_t *" />
    </method>
    <method name="setDeviceIndices">
      <argument name="deviceIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkBindAccelerationStructureMemoryInfoNV &amp;" />
    <conversion_function name="operator VkBindAccelerationStructureMemoryInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindAccelerationStructureMemoryInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindAccelerationStructureMemoryInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="accelerationStructure" />
    <field name="memory" />
    <field name="memoryOffset" />
    <field name="deviceIndexCount" />
    <field name="pDeviceIndices" />
  </struct>
  <struct name="GeometryAABBNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="GeometryAABBNV">
      <argument name="aabbData_" type="vk::Buffer" default_raw="{}" />
      <argument name="numAABBs_" type="uint32_t" default_raw="{}" />
      <argument name="stride_" type="uint32_t" default_raw="{}" />
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="GeometryAABBNV">
      <argument name="rhs" type="const GeometryAABBNV &amp;" />
    </constructor>
    <constructor name="GeometryAABBNV">
      <argument name="rhs" type="const VkGeometryAABBNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const GeometryAABBNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkGeometryAABBNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAabbData">
      <argument name="aabbData_" type="vk::Buffer" />
    </method>
    <method name="setNumAABBs">
      <argument name="numAABBs_" type="uint32_t" />
    </method>
    <method name="setStride">
      <argument name="stride_" type="uint32_t" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkGeometryAABBNV &amp;" />
    <conversion_function name="operator VkGeometryAABBNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const GeometryAABBNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const GeometryAABBNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="aabbData" />
    <field name="numAABBs" />
    <field name="stride" />
    <field name="offset" />
  </struct>
  <struct name="GeometryDataNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="GeometryDataNV">
      <argument name="triangles_" type="vk::GeometryTrianglesNV" default_raw="{}" />
      <argument name="aabbs_" type="vk::GeometryAABBNV" default_raw="{}" />
    </constructor>
    <constructor name="GeometryDataNV">
      <argument name="rhs" type="const GeometryDataNV &amp;" />
    </constructor>
    <constructor name="GeometryDataNV">
      <argument name="rhs" type="const VkGeometryDataNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const GeometryDataNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkGeometryDataNV &amp;" />
    </method>
    <method name="setTriangles">
      <argument name="triangles_" type="const vk::GeometryTrianglesNV &amp;" />
    </method>
    <method name="setAabbs">
      <argument name="aabbs_" type="const vk::GeometryAABBNV &amp;" />
    </method>
    <conversion_function name="operator const VkGeometryDataNV &amp;" />
    <conversion_function name="operator VkGeometryDataNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const GeometryDataNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const GeometryDataNV &amp;" />
    </method>
    <field name="triangles" />
    <field name="aabbs" />
  </struct>
  <struct name="GeometryNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="GeometryNV">
      <argument name="geometryType_" type="vk::GeometryTypeKHR" default_raw="VULKAN_HPP_NAMESPACE::GeometryTypeKHR::eTriangles" />
      <argument name="geometry_" type="vk::GeometryDataNV" default_raw="{}" />
      <argument name="flags_" type="vk::GeometryFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="GeometryNV">
      <argument name="rhs" type="const GeometryNV &amp;" />
    </constructor>
    <constructor name="GeometryNV">
      <argument name="rhs" type="const VkGeometryNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const GeometryNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkGeometryNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setGeometryType">
      <argument name="geometryType_" type="vk::GeometryTypeKHR" />
    </method>
    <method name="setGeometry">
      <argument name="geometry_" type="const vk::GeometryDataNV &amp;" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::GeometryFlagsKHR" />
    </method>
    <conversion_function name="operator const VkGeometryNV &amp;" />
    <conversion_function name="operator VkGeometryNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const GeometryNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const GeometryNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="geometryType" />
    <field name="geometry" />
    <field name="flags" />
  </struct>
  <struct name="GeometryTrianglesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="GeometryTrianglesNV">
      <argument name="vertexData_" type="vk::Buffer" default_raw="{}" />
      <argument name="vertexOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="vertexCount_" type="uint32_t" default_raw="{}" />
      <argument name="vertexStride_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="vertexFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="indexData_" type="vk::Buffer" default_raw="{}" />
      <argument name="indexOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="indexCount_" type="uint32_t" default_raw="{}" />
      <argument name="indexType_" type="vk::IndexType" default_raw="VULKAN_HPP_NAMESPACE::IndexType::eUint16" />
      <argument name="transformData_" type="vk::Buffer" default_raw="{}" />
      <argument name="transformOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="GeometryTrianglesNV">
      <argument name="rhs" type="const GeometryTrianglesNV &amp;" />
    </constructor>
    <constructor name="GeometryTrianglesNV">
      <argument name="rhs" type="const VkGeometryTrianglesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const GeometryTrianglesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkGeometryTrianglesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setVertexData">
      <argument name="vertexData_" type="vk::Buffer" />
    </method>
    <method name="setVertexOffset">
      <argument name="vertexOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setVertexCount">
      <argument name="vertexCount_" type="uint32_t" />
    </method>
    <method name="setVertexStride">
      <argument name="vertexStride_" type="vk::DeviceSize" />
    </method>
    <method name="setVertexFormat">
      <argument name="vertexFormat_" type="vk::Format" />
    </method>
    <method name="setIndexData">
      <argument name="indexData_" type="vk::Buffer" />
    </method>
    <method name="setIndexOffset">
      <argument name="indexOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setIndexCount">
      <argument name="indexCount_" type="uint32_t" />
    </method>
    <method name="setIndexType">
      <argument name="indexType_" type="vk::IndexType" />
    </method>
    <method name="setTransformData">
      <argument name="transformData_" type="vk::Buffer" />
    </method>
    <method name="setTransformOffset">
      <argument name="transformOffset_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkGeometryTrianglesNV &amp;" />
    <conversion_function name="operator VkGeometryTrianglesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const GeometryTrianglesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const GeometryTrianglesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="vertexData" />
    <field name="vertexOffset" />
    <field name="vertexCount" />
    <field name="vertexStride" />
    <field name="vertexFormat" />
    <field name="indexData" />
    <field name="indexOffset" />
    <field name="indexCount" />
    <field name="indexType" />
    <field name="transformData" />
    <field name="transformOffset" />
  </struct>
  <struct name="PhysicalDeviceRayTracingPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRayTracingPropertiesNV">
      <argument name="shaderGroupHandleSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxRecursionDepth_" type="uint32_t" default_raw="{}" />
      <argument name="maxShaderGroupStride_" type="uint32_t" default_raw="{}" />
      <argument name="shaderGroupBaseAlignment_" type="uint32_t" default_raw="{}" />
      <argument name="maxGeometryCount_" type="uint64_t" default_raw="{}" />
      <argument name="maxInstanceCount_" type="uint64_t" default_raw="{}" />
      <argument name="maxTriangleCount_" type="uint64_t" default_raw="{}" />
      <argument name="maxDescriptorSetAccelerationStructures_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingPropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingPropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRayTracingPropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRayTracingPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderGroupHandleSize" />
    <field name="maxRecursionDepth" />
    <field name="maxShaderGroupStride" />
    <field name="shaderGroupBaseAlignment" />
    <field name="maxGeometryCount" />
    <field name="maxInstanceCount" />
    <field name="maxTriangleCount" />
    <field name="maxDescriptorSetAccelerationStructures" />
  </struct>
  <struct name="RayTracingPipelineCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RayTracingPipelineCreateInfoNV">
      <argument name="flags_" type="vk::PipelineCreateFlags" default_raw="{}" />
      <argument name="stageCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStages_" type="const vk::PipelineShaderStageCreateInfo *" default_raw="{}" />
      <argument name="groupCount_" type="uint32_t" default_raw="{}" />
      <argument name="pGroups_" type="const vk::RayTracingShaderGroupCreateInfoNV *" default_raw="{}" />
      <argument name="maxRecursionDepth_" type="uint32_t" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="basePipelineHandle_" type="vk::Pipeline" default_raw="{}" />
      <argument name="basePipelineIndex_" type="int32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RayTracingPipelineCreateInfoNV">
      <argument name="rhs" type="const RayTracingPipelineCreateInfoNV &amp;" />
    </constructor>
    <constructor name="RayTracingPipelineCreateInfoNV">
      <argument name="rhs" type="const VkRayTracingPipelineCreateInfoNV &amp;" />
    </constructor>
    <constructor name="RayTracingPipelineCreateInfoNV">
      <argument name="flags_" type="vk::PipelineCreateFlags" />
      <argument name="stages_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineShaderStageCreateInfo&gt; &amp;" />
      <argument name="groups_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::RayTracingShaderGroupCreateInfoNV&gt; &amp;" default_raw="{}" />
      <argument name="maxRecursionDepth_" type="uint32_t" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="basePipelineHandle_" type="vk::Pipeline" default_raw="{}" />
      <argument name="basePipelineIndex_" type="int32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RayTracingPipelineCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRayTracingPipelineCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineCreateFlags" />
    </method>
    <method name="setStageCount">
      <argument name="stageCount_" type="uint32_t" />
    </method>
    <method name="setPStages">
      <argument name="pStages_" type="const vk::PipelineShaderStageCreateInfo *" />
    </method>
    <method name="setStages">
      <argument name="stages_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineShaderStageCreateInfo&gt; &amp;" />
    </method>
    <method name="setGroupCount">
      <argument name="groupCount_" type="uint32_t" />
    </method>
    <method name="setPGroups">
      <argument name="pGroups_" type="const vk::RayTracingShaderGroupCreateInfoNV *" />
    </method>
    <method name="setGroups">
      <argument name="groups_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::RayTracingShaderGroupCreateInfoNV&gt; &amp;" />
    </method>
    <method name="setMaxRecursionDepth">
      <argument name="maxRecursionDepth_" type="uint32_t" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::PipelineLayout" />
    </method>
    <method name="setBasePipelineHandle">
      <argument name="basePipelineHandle_" type="vk::Pipeline" />
    </method>
    <method name="setBasePipelineIndex">
      <argument name="basePipelineIndex_" type="int32_t" />
    </method>
    <conversion_function name="operator const VkRayTracingPipelineCreateInfoNV &amp;" />
    <conversion_function name="operator VkRayTracingPipelineCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RayTracingPipelineCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RayTracingPipelineCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="stageCount" />
    <field name="pStages" />
    <field name="groupCount" />
    <field name="pGroups" />
    <field name="maxRecursionDepth" />
    <field name="layout" />
    <field name="basePipelineHandle" />
    <field name="basePipelineIndex" />
  </struct>
  <struct name="RayTracingShaderGroupCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RayTracingShaderGroupCreateInfoNV">
      <argument name="type_" type="vk::RayTracingShaderGroupTypeKHR" default_raw="VULKAN_HPP_NAMESPACE::RayTracingShaderGroupTypeKHR::eGeneral" />
      <argument name="generalShader_" type="uint32_t" default_raw="VULKAN_HPP_NAMESPACE::ShaderUnusedNV" />
      <argument name="closestHitShader_" type="uint32_t" default_raw="VULKAN_HPP_NAMESPACE::ShaderUnusedNV" />
      <argument name="anyHitShader_" type="uint32_t" default_raw="VULKAN_HPP_NAMESPACE::ShaderUnusedNV" />
      <argument name="intersectionShader_" type="uint32_t" default_raw="VULKAN_HPP_NAMESPACE::ShaderUnusedNV" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RayTracingShaderGroupCreateInfoNV">
      <argument name="rhs" type="const RayTracingShaderGroupCreateInfoNV &amp;" />
    </constructor>
    <constructor name="RayTracingShaderGroupCreateInfoNV">
      <argument name="rhs" type="const VkRayTracingShaderGroupCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RayTracingShaderGroupCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRayTracingShaderGroupCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::RayTracingShaderGroupTypeKHR" />
    </method>
    <method name="setGeneralShader">
      <argument name="generalShader_" type="uint32_t" />
    </method>
    <method name="setClosestHitShader">
      <argument name="closestHitShader_" type="uint32_t" />
    </method>
    <method name="setAnyHitShader">
      <argument name="anyHitShader_" type="uint32_t" />
    </method>
    <method name="setIntersectionShader">
      <argument name="intersectionShader_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkRayTracingShaderGroupCreateInfoNV &amp;" />
    <conversion_function name="operator VkRayTracingShaderGroupCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RayTracingShaderGroupCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RayTracingShaderGroupCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="type" />
    <field name="generalShader" />
    <field name="closestHitShader" />
    <field name="anyHitShader" />
    <field name="intersectionShader" />
  </struct>
  <struct name="WriteDescriptorSetAccelerationStructureNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="WriteDescriptorSetAccelerationStructureNV">
      <argument name="accelerationStructureCount_" type="uint32_t" default_raw="{}" />
      <argument name="pAccelerationStructures_" type="const vk::AccelerationStructureNV *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="WriteDescriptorSetAccelerationStructureNV">
      <argument name="rhs" type="const WriteDescriptorSetAccelerationStructureNV &amp;" />
    </constructor>
    <constructor name="WriteDescriptorSetAccelerationStructureNV">
      <argument name="rhs" type="const VkWriteDescriptorSetAccelerationStructureNV &amp;" />
    </constructor>
    <constructor name="WriteDescriptorSetAccelerationStructureNV">
      <argument name="accelerationStructures_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AccelerationStructureNV&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const WriteDescriptorSetAccelerationStructureNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkWriteDescriptorSetAccelerationStructureNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAccelerationStructureCount">
      <argument name="accelerationStructureCount_" type="uint32_t" />
    </method>
    <method name="setPAccelerationStructures">
      <argument name="pAccelerationStructures_" type="const vk::AccelerationStructureNV *" />
    </method>
    <method name="setAccelerationStructures">
      <argument name="accelerationStructures_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::AccelerationStructureNV&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkWriteDescriptorSetAccelerationStructureNV &amp;" />
    <conversion_function name="operator VkWriteDescriptorSetAccelerationStructureNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const WriteDescriptorSetAccelerationStructureNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const WriteDescriptorSetAccelerationStructureNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="accelerationStructureCount" />
    <field name="pAccelerationStructures" />
  </struct>
  <struct name="PhysicalDeviceRepresentativeFragmentTestFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRepresentativeFragmentTestFeaturesNV">
      <argument name="representativeFragmentTest_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRepresentativeFragmentTestFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceRepresentativeFragmentTestFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRepresentativeFragmentTestFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRepresentativeFragmentTestFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRepresentativeFragmentTest">
      <argument name="representativeFragmentTest_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRepresentativeFragmentTestFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRepresentativeFragmentTestFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="representativeFragmentTest" />
  </struct>
  <struct name="PipelineRepresentativeFragmentTestStateCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineRepresentativeFragmentTestStateCreateInfoNV">
      <argument name="representativeFragmentTestEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineRepresentativeFragmentTestStateCreateInfoNV">
      <argument name="rhs" type="const PipelineRepresentativeFragmentTestStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineRepresentativeFragmentTestStateCreateInfoNV">
      <argument name="rhs" type="const VkPipelineRepresentativeFragmentTestStateCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineRepresentativeFragmentTestStateCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineRepresentativeFragmentTestStateCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setRepresentativeFragmentTestEnable">
      <argument name="representativeFragmentTestEnable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPipelineRepresentativeFragmentTestStateCreateInfoNV &amp;" />
    <conversion_function name="operator VkPipelineRepresentativeFragmentTestStateCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineRepresentativeFragmentTestStateCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineRepresentativeFragmentTestStateCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="representativeFragmentTestEnable" />
  </struct>
  <struct name="FilterCubicImageViewImageFormatPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FilterCubicImageViewImageFormatPropertiesEXT">
      <argument name="filterCubic_" type="vk::Bool32" default_raw="{}" />
      <argument name="filterCubicMinmax_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="FilterCubicImageViewImageFormatPropertiesEXT">
      <argument name="rhs" type="const FilterCubicImageViewImageFormatPropertiesEXT &amp;" />
    </constructor>
    <constructor name="FilterCubicImageViewImageFormatPropertiesEXT">
      <argument name="rhs" type="const VkFilterCubicImageViewImageFormatPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const FilterCubicImageViewImageFormatPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFilterCubicImageViewImageFormatPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkFilterCubicImageViewImageFormatPropertiesEXT &amp;" />
    <conversion_function name="operator VkFilterCubicImageViewImageFormatPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FilterCubicImageViewImageFormatPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FilterCubicImageViewImageFormatPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="filterCubic" />
    <field name="filterCubicMinmax" />
  </struct>
  <struct name="PhysicalDeviceImageViewImageFormatInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageViewImageFormatInfoEXT">
      <argument name="imageViewType_" type="vk::ImageViewType" default_raw="VULKAN_HPP_NAMESPACE::ImageViewType::e1D" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageViewImageFormatInfoEXT">
      <argument name="rhs" type="const PhysicalDeviceImageViewImageFormatInfoEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageViewImageFormatInfoEXT">
      <argument name="rhs" type="const VkPhysicalDeviceImageViewImageFormatInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageViewImageFormatInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageViewImageFormatInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setImageViewType">
      <argument name="imageViewType_" type="vk::ImageViewType" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageViewImageFormatInfoEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageViewImageFormatInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageViewImageFormatInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageViewImageFormatInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageViewType" />
  </struct>
  <struct name="ImportMemoryHostPointerInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImportMemoryHostPointerInfoEXT">
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalMemoryHandleTypeFlagBits::eOpaqueFd" />
      <argument name="pHostPointer_" type="void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImportMemoryHostPointerInfoEXT">
      <argument name="rhs" type="const ImportMemoryHostPointerInfoEXT &amp;" />
    </constructor>
    <constructor name="ImportMemoryHostPointerInfoEXT">
      <argument name="rhs" type="const VkImportMemoryHostPointerInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImportMemoryHostPointerInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImportMemoryHostPointerInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" />
    </method>
    <method name="setPHostPointer">
      <argument name="pHostPointer_" type="void *" />
    </method>
    <conversion_function name="operator const VkImportMemoryHostPointerInfoEXT &amp;" />
    <conversion_function name="operator VkImportMemoryHostPointerInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImportMemoryHostPointerInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImportMemoryHostPointerInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="handleType" />
    <field name="pHostPointer" />
  </struct>
  <struct name="MemoryHostPointerPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryHostPointerPropertiesEXT">
      <argument name="memoryTypeBits_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryHostPointerPropertiesEXT">
      <argument name="rhs" type="const MemoryHostPointerPropertiesEXT &amp;" />
    </constructor>
    <constructor name="MemoryHostPointerPropertiesEXT">
      <argument name="rhs" type="const VkMemoryHostPointerPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryHostPointerPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryHostPointerPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkMemoryHostPointerPropertiesEXT &amp;" />
    <conversion_function name="operator VkMemoryHostPointerPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryHostPointerPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryHostPointerPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memoryTypeBits" />
  </struct>
  <struct name="PhysicalDeviceExternalMemoryHostPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExternalMemoryHostPropertiesEXT">
      <argument name="minImportedHostPointerAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExternalMemoryHostPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceExternalMemoryHostPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExternalMemoryHostPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceExternalMemoryHostPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExternalMemoryHostPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExternalMemoryHostPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExternalMemoryHostPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExternalMemoryHostPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExternalMemoryHostPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExternalMemoryHostPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="minImportedHostPointerAlignment" />
  </struct>
  <struct name="PhysicalDeviceShaderClockFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderClockFeaturesKHR">
      <argument name="shaderSubgroupClock_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderDeviceClock_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderClockFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceShaderClockFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderClockFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceShaderClockFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderClockFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderClockFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderSubgroupClock">
      <argument name="shaderSubgroupClock_" type="vk::Bool32" />
    </method>
    <method name="setShaderDeviceClock">
      <argument name="shaderDeviceClock_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderClockFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderClockFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderClockFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderClockFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderSubgroupClock" />
    <field name="shaderDeviceClock" />
  </struct>
  <struct name="PipelineCompilerControlCreateInfoAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineCompilerControlCreateInfoAMD">
      <argument name="compilerControlFlags_" type="vk::PipelineCompilerControlFlagsAMD" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineCompilerControlCreateInfoAMD">
      <argument name="rhs" type="const PipelineCompilerControlCreateInfoAMD &amp;" />
    </constructor>
    <constructor name="PipelineCompilerControlCreateInfoAMD">
      <argument name="rhs" type="const VkPipelineCompilerControlCreateInfoAMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineCompilerControlCreateInfoAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineCompilerControlCreateInfoAMD &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setCompilerControlFlags">
      <argument name="compilerControlFlags_" type="vk::PipelineCompilerControlFlagsAMD" />
    </method>
    <conversion_function name="operator const VkPipelineCompilerControlCreateInfoAMD &amp;" />
    <conversion_function name="operator VkPipelineCompilerControlCreateInfoAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineCompilerControlCreateInfoAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineCompilerControlCreateInfoAMD &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="compilerControlFlags" />
  </struct>
  <struct name="PhysicalDeviceShaderCorePropertiesAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderCorePropertiesAMD">
      <argument name="shaderEngineCount_" type="uint32_t" default_raw="{}" />
      <argument name="shaderArraysPerEngineCount_" type="uint32_t" default_raw="{}" />
      <argument name="computeUnitsPerShaderArray_" type="uint32_t" default_raw="{}" />
      <argument name="simdPerComputeUnit_" type="uint32_t" default_raw="{}" />
      <argument name="wavefrontsPerSimd_" type="uint32_t" default_raw="{}" />
      <argument name="wavefrontSize_" type="uint32_t" default_raw="{}" />
      <argument name="sgprsPerSimd_" type="uint32_t" default_raw="{}" />
      <argument name="minSgprAllocation_" type="uint32_t" default_raw="{}" />
      <argument name="maxSgprAllocation_" type="uint32_t" default_raw="{}" />
      <argument name="sgprAllocationGranularity_" type="uint32_t" default_raw="{}" />
      <argument name="vgprsPerSimd_" type="uint32_t" default_raw="{}" />
      <argument name="minVgprAllocation_" type="uint32_t" default_raw="{}" />
      <argument name="maxVgprAllocation_" type="uint32_t" default_raw="{}" />
      <argument name="vgprAllocationGranularity_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderCorePropertiesAMD">
      <argument name="rhs" type="const PhysicalDeviceShaderCorePropertiesAMD &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderCorePropertiesAMD">
      <argument name="rhs" type="const VkPhysicalDeviceShaderCorePropertiesAMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderCorePropertiesAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderCorePropertiesAMD &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderCorePropertiesAMD &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderCorePropertiesAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderCorePropertiesAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderCorePropertiesAMD &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderEngineCount" />
    <field name="shaderArraysPerEngineCount" />
    <field name="computeUnitsPerShaderArray" />
    <field name="simdPerComputeUnit" />
    <field name="wavefrontsPerSimd" />
    <field name="wavefrontSize" />
    <field name="sgprsPerSimd" />
    <field name="minSgprAllocation" />
    <field name="maxSgprAllocation" />
    <field name="sgprAllocationGranularity" />
    <field name="vgprsPerSimd" />
    <field name="minVgprAllocation" />
    <field name="maxVgprAllocation" />
    <field name="vgprAllocationGranularity" />
  </struct>
  <struct name="VideoDecodeH265CapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH265CapabilitiesKHR">
      <argument name="maxLevelIdc_" type="int" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH265CapabilitiesKHR">
      <argument name="rhs" type="const VideoDecodeH265CapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH265CapabilitiesKHR">
      <argument name="rhs" type="const VkVideoDecodeH265CapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH265CapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH265CapabilitiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH265CapabilitiesKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH265CapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH265CapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH265CapabilitiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxLevelIdc" />
  </struct>
  <struct name="VideoDecodeH265DpbSlotInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH265DpbSlotInfoKHR">
      <argument name="pStdReferenceInfo_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH265DpbSlotInfoKHR">
      <argument name="rhs" type="const VideoDecodeH265DpbSlotInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH265DpbSlotInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeH265DpbSlotInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH265DpbSlotInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH265DpbSlotInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPStdReferenceInfo">
      <argument name="pStdReferenceInfo_" type="const int *" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH265DpbSlotInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH265DpbSlotInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH265DpbSlotInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH265DpbSlotInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pStdReferenceInfo" />
  </struct>
  <struct name="VideoDecodeH265PictureInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH265PictureInfoKHR">
      <argument name="pStdPictureInfo_" type="const int *" default_raw="{}" />
      <argument name="sliceSegmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSliceSegmentOffsets_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH265PictureInfoKHR">
      <argument name="rhs" type="const VideoDecodeH265PictureInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH265PictureInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeH265PictureInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH265PictureInfoKHR">
      <argument name="pStdPictureInfo_" type="const int *" />
      <argument name="sliceSegmentOffsets_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH265PictureInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH265PictureInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPStdPictureInfo">
      <argument name="pStdPictureInfo_" type="const int *" />
    </method>
    <method name="setSliceSegmentCount">
      <argument name="sliceSegmentCount_" type="uint32_t" />
    </method>
    <method name="setPSliceSegmentOffsets">
      <argument name="pSliceSegmentOffsets_" type="const uint32_t *" />
    </method>
    <method name="setSliceSegmentOffsets">
      <argument name="sliceSegmentOffsets_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH265PictureInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH265PictureInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH265PictureInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH265PictureInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pStdPictureInfo" />
    <field name="sliceSegmentCount" />
    <field name="pSliceSegmentOffsets" />
  </struct>
  <struct name="VideoDecodeH265ProfileInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH265ProfileInfoKHR">
      <argument name="stdProfileIdc_" type="int" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH265ProfileInfoKHR">
      <argument name="rhs" type="const VideoDecodeH265ProfileInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH265ProfileInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeH265ProfileInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH265ProfileInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH265ProfileInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStdProfileIdc">
      <argument name="stdProfileIdc_" type="int" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH265ProfileInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH265ProfileInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH265ProfileInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH265ProfileInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stdProfileIdc" />
  </struct>
  <struct name="VideoDecodeH265SessionParametersAddInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH265SessionParametersAddInfoKHR">
      <argument name="stdVPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStdVPSs_" type="const int *" default_raw="{}" />
      <argument name="stdSPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStdSPSs_" type="const int *" default_raw="{}" />
      <argument name="stdPPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStdPPSs_" type="const int *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH265SessionParametersAddInfoKHR">
      <argument name="rhs" type="const VideoDecodeH265SessionParametersAddInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH265SessionParametersAddInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeH265SessionParametersAddInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH265SessionParametersAddInfoKHR">
      <argument name="stdVPSs_" type="const int &amp;" />
      <argument name="stdSPSs_" type="const int &amp;" default_raw="{}" />
      <argument name="stdPPSs_" type="const int &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH265SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH265SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStdVPSCount">
      <argument name="stdVPSCount_" type="uint32_t" />
    </method>
    <method name="setPStdVPSs">
      <argument name="pStdVPSs_" type="const int *" />
    </method>
    <method name="setStdVPSs">
      <argument name="stdVPSs_" type="const int &amp;" />
    </method>
    <method name="setStdSPSCount">
      <argument name="stdSPSCount_" type="uint32_t" />
    </method>
    <method name="setPStdSPSs">
      <argument name="pStdSPSs_" type="const int *" />
    </method>
    <method name="setStdSPSs">
      <argument name="stdSPSs_" type="const int &amp;" />
    </method>
    <method name="setStdPPSCount">
      <argument name="stdPPSCount_" type="uint32_t" />
    </method>
    <method name="setPStdPPSs">
      <argument name="pStdPPSs_" type="const int *" />
    </method>
    <method name="setStdPPSs">
      <argument name="stdPPSs_" type="const int &amp;" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH265SessionParametersAddInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH265SessionParametersAddInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH265SessionParametersAddInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH265SessionParametersAddInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stdVPSCount" />
    <field name="pStdVPSs" />
    <field name="stdSPSCount" />
    <field name="pStdSPSs" />
    <field name="stdPPSCount" />
    <field name="pStdPPSs" />
  </struct>
  <struct name="VideoDecodeH265SessionParametersCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoDecodeH265SessionParametersCreateInfoKHR">
      <argument name="maxStdVPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxStdSPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxStdPPSCount_" type="uint32_t" default_raw="{}" />
      <argument name="pParametersAddInfo_" type="const vk::VideoDecodeH265SessionParametersAddInfoKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoDecodeH265SessionParametersCreateInfoKHR">
      <argument name="rhs" type="const VideoDecodeH265SessionParametersCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoDecodeH265SessionParametersCreateInfoKHR">
      <argument name="rhs" type="const VkVideoDecodeH265SessionParametersCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoDecodeH265SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoDecodeH265SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMaxStdVPSCount">
      <argument name="maxStdVPSCount_" type="uint32_t" />
    </method>
    <method name="setMaxStdSPSCount">
      <argument name="maxStdSPSCount_" type="uint32_t" />
    </method>
    <method name="setMaxStdPPSCount">
      <argument name="maxStdPPSCount_" type="uint32_t" />
    </method>
    <method name="setPParametersAddInfo">
      <argument name="pParametersAddInfo_" type="const vk::VideoDecodeH265SessionParametersAddInfoKHR *" />
    </method>
    <conversion_function name="operator const VkVideoDecodeH265SessionParametersCreateInfoKHR &amp;" />
    <conversion_function name="operator VkVideoDecodeH265SessionParametersCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoDecodeH265SessionParametersCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoDecodeH265SessionParametersCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxStdVPSCount" />
    <field name="maxStdSPSCount" />
    <field name="maxStdPPSCount" />
    <field name="pParametersAddInfo" />
  </struct>
  <type_alias name="DeviceQueueGlobalPriorityCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="DeviceQueueGlobalPriorityCreateInfoKHR" />
  <struct name="DeviceQueueGlobalPriorityCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceQueueGlobalPriorityCreateInfoKHR">
      <argument name="globalPriority_" type="vk::QueueGlobalPriorityKHR" default_raw="VULKAN_HPP_NAMESPACE::QueueGlobalPriorityKHR::eLow" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceQueueGlobalPriorityCreateInfoKHR">
      <argument name="rhs" type="const DeviceQueueGlobalPriorityCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="DeviceQueueGlobalPriorityCreateInfoKHR">
      <argument name="rhs" type="const VkDeviceQueueGlobalPriorityCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceQueueGlobalPriorityCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceQueueGlobalPriorityCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setGlobalPriority">
      <argument name="globalPriority_" type="vk::QueueGlobalPriorityKHR" />
    </method>
    <conversion_function name="operator const VkDeviceQueueGlobalPriorityCreateInfoKHR &amp;" />
    <conversion_function name="operator VkDeviceQueueGlobalPriorityCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceQueueGlobalPriorityCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceQueueGlobalPriorityCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="globalPriority" />
  </struct>
  <type_alias name="PhysicalDeviceGlobalPriorityQueryFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceGlobalPriorityQueryFeaturesKHR" />
  <struct name="PhysicalDeviceGlobalPriorityQueryFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceGlobalPriorityQueryFeaturesKHR">
      <argument name="globalPriorityQuery_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceGlobalPriorityQueryFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceGlobalPriorityQueryFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceGlobalPriorityQueryFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceGlobalPriorityQueryFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setGlobalPriorityQuery">
      <argument name="globalPriorityQuery_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceGlobalPriorityQueryFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceGlobalPriorityQueryFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="globalPriorityQuery" />
  </struct>
  <type_alias name="QueueFamilyGlobalPriorityPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="QueueFamilyGlobalPriorityPropertiesKHR" />
  <struct name="QueueFamilyGlobalPriorityPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueueFamilyGlobalPriorityPropertiesKHR">
      <argument name="priorityCount_" type="uint32_t" default_raw="{}" />
      <argument name="priorities_" type="const std::array&lt;vk::QueueGlobalPriorityKHR, 16U&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="QueueFamilyGlobalPriorityPropertiesKHR">
      <argument name="rhs" type="const QueueFamilyGlobalPriorityPropertiesKHR &amp;" />
    </constructor>
    <constructor name="QueueFamilyGlobalPriorityPropertiesKHR">
      <argument name="rhs" type="const VkQueueFamilyGlobalPriorityPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueueFamilyGlobalPriorityPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueueFamilyGlobalPriorityPropertiesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPriorityCount">
      <argument name="priorityCount_" type="uint32_t" />
    </method>
    <method name="setPriorities">
      <argument name="priorities_" type="std::array&lt;vk::QueueGlobalPriorityKHR, 16U&gt;" />
    </method>
    <conversion_function name="operator const VkQueueFamilyGlobalPriorityPropertiesKHR &amp;" />
    <conversion_function name="operator VkQueueFamilyGlobalPriorityPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueueFamilyGlobalPriorityPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueueFamilyGlobalPriorityPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="priorityCount" />
    <field name="priorities" />
  </struct>
  <struct name="DeviceMemoryOverallocationCreateInfoAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceMemoryOverallocationCreateInfoAMD">
      <argument name="overallocationBehavior_" type="vk::MemoryOverallocationBehaviorAMD" default_raw="VULKAN_HPP_NAMESPACE::MemoryOverallocationBehaviorAMD::eDefault" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceMemoryOverallocationCreateInfoAMD">
      <argument name="rhs" type="const DeviceMemoryOverallocationCreateInfoAMD &amp;" />
    </constructor>
    <constructor name="DeviceMemoryOverallocationCreateInfoAMD">
      <argument name="rhs" type="const VkDeviceMemoryOverallocationCreateInfoAMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceMemoryOverallocationCreateInfoAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceMemoryOverallocationCreateInfoAMD &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setOverallocationBehavior">
      <argument name="overallocationBehavior_" type="vk::MemoryOverallocationBehaviorAMD" />
    </method>
    <conversion_function name="operator const VkDeviceMemoryOverallocationCreateInfoAMD &amp;" />
    <conversion_function name="operator VkDeviceMemoryOverallocationCreateInfoAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceMemoryOverallocationCreateInfoAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceMemoryOverallocationCreateInfoAMD &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="overallocationBehavior" />
  </struct>
  <struct name="PhysicalDeviceVertexAttributeDivisorPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVertexAttributeDivisorPropertiesEXT">
      <argument name="maxVertexAttribDivisor_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVertexAttributeDivisorPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVertexAttributeDivisorPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxVertexAttribDivisor" />
  </struct>
  <struct name="PhysicalDeviceComputeShaderDerivativesFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceComputeShaderDerivativesFeaturesNV">
      <argument name="computeDerivativeGroupQuads_" type="vk::Bool32" default_raw="{}" />
      <argument name="computeDerivativeGroupLinear_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceComputeShaderDerivativesFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceComputeShaderDerivativesFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceComputeShaderDerivativesFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceComputeShaderDerivativesFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setComputeDerivativeGroupQuads">
      <argument name="computeDerivativeGroupQuads_" type="vk::Bool32" />
    </method>
    <method name="setComputeDerivativeGroupLinear">
      <argument name="computeDerivativeGroupLinear_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceComputeShaderDerivativesFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceComputeShaderDerivativesFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceComputeShaderDerivativesFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="computeDerivativeGroupQuads" />
    <field name="computeDerivativeGroupLinear" />
  </struct>
  <struct name="DrawMeshTasksIndirectCommandNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DrawMeshTasksIndirectCommandNV">
      <argument name="taskCount_" type="uint32_t" default_raw="{}" />
      <argument name="firstTask_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="DrawMeshTasksIndirectCommandNV">
      <argument name="rhs" type="const DrawMeshTasksIndirectCommandNV &amp;" />
    </constructor>
    <constructor name="DrawMeshTasksIndirectCommandNV">
      <argument name="rhs" type="const VkDrawMeshTasksIndirectCommandNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DrawMeshTasksIndirectCommandNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDrawMeshTasksIndirectCommandNV &amp;" />
    </method>
    <method name="setTaskCount">
      <argument name="taskCount_" type="uint32_t" />
    </method>
    <method name="setFirstTask">
      <argument name="firstTask_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDrawMeshTasksIndirectCommandNV &amp;" />
    <conversion_function name="operator VkDrawMeshTasksIndirectCommandNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DrawMeshTasksIndirectCommandNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DrawMeshTasksIndirectCommandNV &amp;" />
    </method>
    <field name="taskCount" />
    <field name="firstTask" />
  </struct>
  <struct name="PhysicalDeviceMeshShaderFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMeshShaderFeaturesNV">
      <argument name="taskShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="meshShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMeshShaderFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMeshShaderFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceMeshShaderFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMeshShaderFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTaskShader">
      <argument name="taskShader_" type="vk::Bool32" />
    </method>
    <method name="setMeshShader">
      <argument name="meshShader_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMeshShaderFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMeshShaderFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="taskShader" />
    <field name="meshShader" />
  </struct>
  <struct name="PhysicalDeviceMeshShaderPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMeshShaderPropertiesNV">
      <argument name="maxDrawMeshTasksCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxTaskWorkGroupInvocations_" type="uint32_t" default_raw="{}" />
      <argument name="maxTaskWorkGroupSize_" type="const std::array&lt;uint32_t, 3&gt; &amp;" default_raw="{}" />
      <argument name="maxTaskTotalMemorySize_" type="uint32_t" default_raw="{}" />
      <argument name="maxTaskOutputCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshWorkGroupInvocations_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshWorkGroupSize_" type="const std::array&lt;uint32_t, 3&gt; &amp;" default_raw="{}" />
      <argument name="maxMeshTotalMemorySize_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshOutputVertices_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshOutputPrimitives_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshMultiviewViewCount_" type="uint32_t" default_raw="{}" />
      <argument name="meshOutputPerVertexGranularity_" type="uint32_t" default_raw="{}" />
      <argument name="meshOutputPerPrimitiveGranularity_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMeshShaderPropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderPropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMeshShaderPropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceMeshShaderPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMeshShaderPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMeshShaderPropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMeshShaderPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxDrawMeshTasksCount" />
    <field name="maxTaskWorkGroupInvocations" />
    <field name="maxTaskWorkGroupSize" />
    <field name="maxTaskTotalMemorySize" />
    <field name="maxTaskOutputCount" />
    <field name="maxMeshWorkGroupInvocations" />
    <field name="maxMeshWorkGroupSize" />
    <field name="maxMeshTotalMemorySize" />
    <field name="maxMeshOutputVertices" />
    <field name="maxMeshOutputPrimitives" />
    <field name="maxMeshMultiviewViewCount" />
    <field name="meshOutputPerVertexGranularity" />
    <field name="meshOutputPerPrimitiveGranularity" />
  </struct>
  <struct name="PhysicalDeviceShaderImageFootprintFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderImageFootprintFeaturesNV">
      <argument name="imageFootprint_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderImageFootprintFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceShaderImageFootprintFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderImageFootprintFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceShaderImageFootprintFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderImageFootprintFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderImageFootprintFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setImageFootprint">
      <argument name="imageFootprint_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderImageFootprintFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderImageFootprintFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderImageFootprintFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderImageFootprintFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageFootprint" />
  </struct>
  <struct name="PhysicalDeviceExclusiveScissorFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExclusiveScissorFeaturesNV">
      <argument name="exclusiveScissor_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExclusiveScissorFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceExclusiveScissorFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExclusiveScissorFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceExclusiveScissorFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExclusiveScissorFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExclusiveScissorFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setExclusiveScissor">
      <argument name="exclusiveScissor_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExclusiveScissorFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExclusiveScissorFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExclusiveScissorFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExclusiveScissorFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="exclusiveScissor" />
  </struct>
  <struct name="PipelineViewportExclusiveScissorStateCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineViewportExclusiveScissorStateCreateInfoNV">
      <argument name="exclusiveScissorCount_" type="uint32_t" default_raw="{}" />
      <argument name="pExclusiveScissors_" type="const vk::Rect2D *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineViewportExclusiveScissorStateCreateInfoNV">
      <argument name="rhs" type="const PipelineViewportExclusiveScissorStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineViewportExclusiveScissorStateCreateInfoNV">
      <argument name="rhs" type="const VkPipelineViewportExclusiveScissorStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineViewportExclusiveScissorStateCreateInfoNV">
      <argument name="exclusiveScissors_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineViewportExclusiveScissorStateCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineViewportExclusiveScissorStateCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setExclusiveScissorCount">
      <argument name="exclusiveScissorCount_" type="uint32_t" />
    </method>
    <method name="setPExclusiveScissors">
      <argument name="pExclusiveScissors_" type="const vk::Rect2D *" />
    </method>
    <method name="setExclusiveScissors">
      <argument name="exclusiveScissors_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineViewportExclusiveScissorStateCreateInfoNV &amp;" />
    <conversion_function name="operator VkPipelineViewportExclusiveScissorStateCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineViewportExclusiveScissorStateCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineViewportExclusiveScissorStateCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="exclusiveScissorCount" />
    <field name="pExclusiveScissors" />
  </struct>
  <struct name="CheckpointDataNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CheckpointDataNV">
      <argument name="stage_" type="vk::PipelineStageFlagBits" default_raw="VULKAN_HPP_NAMESPACE::PipelineStageFlagBits::eTopOfPipe" />
      <argument name="pCheckpointMarker_" type="void *" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CheckpointDataNV">
      <argument name="rhs" type="const CheckpointDataNV &amp;" />
    </constructor>
    <constructor name="CheckpointDataNV">
      <argument name="rhs" type="const VkCheckpointDataNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CheckpointDataNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCheckpointDataNV &amp;" />
    </method>
    <conversion_function name="operator const VkCheckpointDataNV &amp;" />
    <conversion_function name="operator VkCheckpointDataNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CheckpointDataNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CheckpointDataNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stage" />
    <field name="pCheckpointMarker" />
  </struct>
  <struct name="QueueFamilyCheckpointPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueueFamilyCheckpointPropertiesNV">
      <argument name="checkpointExecutionStageMask_" type="vk::PipelineStageFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="QueueFamilyCheckpointPropertiesNV">
      <argument name="rhs" type="const QueueFamilyCheckpointPropertiesNV &amp;" />
    </constructor>
    <constructor name="QueueFamilyCheckpointPropertiesNV">
      <argument name="rhs" type="const VkQueueFamilyCheckpointPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueueFamilyCheckpointPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueueFamilyCheckpointPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkQueueFamilyCheckpointPropertiesNV &amp;" />
    <conversion_function name="operator VkQueueFamilyCheckpointPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueueFamilyCheckpointPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueueFamilyCheckpointPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="checkpointExecutionStageMask" />
  </struct>
  <struct name="PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL">
      <argument name="shaderIntegerFunctions2_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL">
      <argument name="rhs" type="const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderIntegerFunctions2">
      <argument name="shaderIntegerFunctions2_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderIntegerFunctions2" />
  </struct>
  <struct name="InitializePerformanceApiInfoINTEL" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="InitializePerformanceApiInfoINTEL">
      <argument name="pUserData_" type="void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="InitializePerformanceApiInfoINTEL">
      <argument name="rhs" type="const InitializePerformanceApiInfoINTEL &amp;" />
    </constructor>
    <constructor name="InitializePerformanceApiInfoINTEL">
      <argument name="rhs" type="const VkInitializePerformanceApiInfoINTEL &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const InitializePerformanceApiInfoINTEL &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkInitializePerformanceApiInfoINTEL &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPUserData">
      <argument name="pUserData_" type="void *" />
    </method>
    <conversion_function name="operator const VkInitializePerformanceApiInfoINTEL &amp;" />
    <conversion_function name="operator VkInitializePerformanceApiInfoINTEL &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const InitializePerformanceApiInfoINTEL &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const InitializePerformanceApiInfoINTEL &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pUserData" />
  </struct>
  <struct name="PerformanceConfigurationAcquireInfoINTEL" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PerformanceConfigurationAcquireInfoINTEL">
      <argument name="type_" type="vk::PerformanceConfigurationTypeINTEL" default_raw="VULKAN_HPP_NAMESPACE::PerformanceConfigurationTypeINTEL::eCommandQueueMetricsDiscoveryActivated" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PerformanceConfigurationAcquireInfoINTEL">
      <argument name="rhs" type="const PerformanceConfigurationAcquireInfoINTEL &amp;" />
    </constructor>
    <constructor name="PerformanceConfigurationAcquireInfoINTEL">
      <argument name="rhs" type="const VkPerformanceConfigurationAcquireInfoINTEL &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PerformanceConfigurationAcquireInfoINTEL &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPerformanceConfigurationAcquireInfoINTEL &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::PerformanceConfigurationTypeINTEL" />
    </method>
    <conversion_function name="operator const VkPerformanceConfigurationAcquireInfoINTEL &amp;" />
    <conversion_function name="operator VkPerformanceConfigurationAcquireInfoINTEL &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PerformanceConfigurationAcquireInfoINTEL &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PerformanceConfigurationAcquireInfoINTEL &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="type" />
  </struct>
  <struct name="PerformanceMarkerInfoINTEL" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PerformanceMarkerInfoINTEL">
      <argument name="marker_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PerformanceMarkerInfoINTEL">
      <argument name="rhs" type="const PerformanceMarkerInfoINTEL &amp;" />
    </constructor>
    <constructor name="PerformanceMarkerInfoINTEL">
      <argument name="rhs" type="const VkPerformanceMarkerInfoINTEL &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PerformanceMarkerInfoINTEL &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPerformanceMarkerInfoINTEL &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMarker">
      <argument name="marker_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkPerformanceMarkerInfoINTEL &amp;" />
    <conversion_function name="operator VkPerformanceMarkerInfoINTEL &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PerformanceMarkerInfoINTEL &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PerformanceMarkerInfoINTEL &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="marker" />
  </struct>
  <struct name="PerformanceOverrideInfoINTEL" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PerformanceOverrideInfoINTEL">
      <argument name="type_" type="vk::PerformanceOverrideTypeINTEL" default_raw="VULKAN_HPP_NAMESPACE::PerformanceOverrideTypeINTEL::eNullHardware" />
      <argument name="enable_" type="vk::Bool32" default_raw="{}" />
      <argument name="parameter_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PerformanceOverrideInfoINTEL">
      <argument name="rhs" type="const PerformanceOverrideInfoINTEL &amp;" />
    </constructor>
    <constructor name="PerformanceOverrideInfoINTEL">
      <argument name="rhs" type="const VkPerformanceOverrideInfoINTEL &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PerformanceOverrideInfoINTEL &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPerformanceOverrideInfoINTEL &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::PerformanceOverrideTypeINTEL" />
    </method>
    <method name="setEnable">
      <argument name="enable_" type="vk::Bool32" />
    </method>
    <method name="setParameter">
      <argument name="parameter_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkPerformanceOverrideInfoINTEL &amp;" />
    <conversion_function name="operator VkPerformanceOverrideInfoINTEL &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PerformanceOverrideInfoINTEL &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PerformanceOverrideInfoINTEL &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="type" />
    <field name="enable" />
    <field name="parameter" />
  </struct>
  <struct name="PerformanceStreamMarkerInfoINTEL" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PerformanceStreamMarkerInfoINTEL">
      <argument name="marker_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PerformanceStreamMarkerInfoINTEL">
      <argument name="rhs" type="const PerformanceStreamMarkerInfoINTEL &amp;" />
    </constructor>
    <constructor name="PerformanceStreamMarkerInfoINTEL">
      <argument name="rhs" type="const VkPerformanceStreamMarkerInfoINTEL &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PerformanceStreamMarkerInfoINTEL &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPerformanceStreamMarkerInfoINTEL &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMarker">
      <argument name="marker_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkPerformanceStreamMarkerInfoINTEL &amp;" />
    <conversion_function name="operator VkPerformanceStreamMarkerInfoINTEL &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PerformanceStreamMarkerInfoINTEL &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PerformanceStreamMarkerInfoINTEL &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="marker" />
  </struct>
  <union name="PerformanceValueDataINTEL" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PerformanceValueDataINTEL">
      <argument name="value32_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="PerformanceValueDataINTEL">
      <argument name="value64_" type="uint64_t" />
    </constructor>
    <constructor name="PerformanceValueDataINTEL">
      <argument name="valueFloat_" type="float" />
    </constructor>
    <constructor name="PerformanceValueDataINTEL">
      <argument name="valueString_" type="const char *" />
    </constructor>
    <method name="setValue32">
      <argument name="value32_" type="uint32_t" />
    </method>
    <method name="setValue64">
      <argument name="value64_" type="uint64_t" />
    </method>
    <method name="setValueFloat">
      <argument name="valueFloat_" type="float" />
    </method>
    <method name="setValueBool">
      <argument name="valueBool_" type="vk::Bool32" />
    </method>
    <method name="setValueString">
      <argument name="valueString_" type="const char *" />
    </method>
    <conversion_function name="operator const VkPerformanceValueDataINTEL &amp;" />
    <conversion_function name="operator VkPerformanceValueDataINTEL &amp;" />
    <field name="value32" />
    <field name="value64" />
    <field name="valueFloat" />
    <field name="valueBool" />
    <field name="valueString" />
  </union>
  <struct name="PerformanceValueINTEL" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PerformanceValueINTEL">
      <argument name="type_" type="vk::PerformanceValueTypeINTEL" default_raw="VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL::eUint32" />
      <argument name="data_" type="vk::PerformanceValueDataINTEL" default_raw="{}" />
    </constructor>
    <constructor name="PerformanceValueINTEL">
      <argument name="rhs" type="const PerformanceValueINTEL &amp;" />
    </constructor>
    <constructor name="PerformanceValueINTEL">
      <argument name="rhs" type="const VkPerformanceValueINTEL &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PerformanceValueINTEL &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPerformanceValueINTEL &amp;" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::PerformanceValueTypeINTEL" />
    </method>
    <method name="setData">
      <argument name="data_" type="const vk::PerformanceValueDataINTEL &amp;" />
    </method>
    <conversion_function name="operator const VkPerformanceValueINTEL &amp;" />
    <conversion_function name="operator VkPerformanceValueINTEL &amp;" />
    <field name="type" />
    <field name="data" />
  </struct>
  <type_alias name="QueryPoolCreateInfoINTEL" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="QueryPoolPerformanceQueryCreateInfoINTEL" />
  <struct name="QueryPoolPerformanceQueryCreateInfoINTEL" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueryPoolPerformanceQueryCreateInfoINTEL">
      <argument name="performanceCountersSampling_" type="vk::QueryPoolSamplingModeINTEL" default_raw="VULKAN_HPP_NAMESPACE::QueryPoolSamplingModeINTEL::eManual" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="QueryPoolPerformanceQueryCreateInfoINTEL">
      <argument name="rhs" type="const QueryPoolPerformanceQueryCreateInfoINTEL &amp;" />
    </constructor>
    <constructor name="QueryPoolPerformanceQueryCreateInfoINTEL">
      <argument name="rhs" type="const VkQueryPoolPerformanceQueryCreateInfoINTEL &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueryPoolPerformanceQueryCreateInfoINTEL &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueryPoolPerformanceQueryCreateInfoINTEL &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPerformanceCountersSampling">
      <argument name="performanceCountersSampling_" type="vk::QueryPoolSamplingModeINTEL" />
    </method>
    <conversion_function name="operator const VkQueryPoolPerformanceQueryCreateInfoINTEL &amp;" />
    <conversion_function name="operator VkQueryPoolPerformanceQueryCreateInfoINTEL &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueryPoolPerformanceQueryCreateInfoINTEL &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueryPoolPerformanceQueryCreateInfoINTEL &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="performanceCountersSampling" />
  </struct>
  <struct name="PhysicalDevicePCIBusInfoPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePCIBusInfoPropertiesEXT">
      <argument name="pciDomain_" type="uint32_t" default_raw="{}" />
      <argument name="pciBus_" type="uint32_t" default_raw="{}" />
      <argument name="pciDevice_" type="uint32_t" default_raw="{}" />
      <argument name="pciFunction_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePCIBusInfoPropertiesEXT">
      <argument name="rhs" type="const PhysicalDevicePCIBusInfoPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePCIBusInfoPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDevicePCIBusInfoPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePCIBusInfoPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePCIBusInfoPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePCIBusInfoPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDevicePCIBusInfoPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePCIBusInfoPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePCIBusInfoPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pciDomain" />
    <field name="pciBus" />
    <field name="pciDevice" />
    <field name="pciFunction" />
  </struct>
  <struct name="DisplayNativeHdrSurfaceCapabilitiesAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DisplayNativeHdrSurfaceCapabilitiesAMD">
      <argument name="localDimmingSupport_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DisplayNativeHdrSurfaceCapabilitiesAMD">
      <argument name="rhs" type="const DisplayNativeHdrSurfaceCapabilitiesAMD &amp;" />
    </constructor>
    <constructor name="DisplayNativeHdrSurfaceCapabilitiesAMD">
      <argument name="rhs" type="const VkDisplayNativeHdrSurfaceCapabilitiesAMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayNativeHdrSurfaceCapabilitiesAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDisplayNativeHdrSurfaceCapabilitiesAMD &amp;" />
    </method>
    <conversion_function name="operator const VkDisplayNativeHdrSurfaceCapabilitiesAMD &amp;" />
    <conversion_function name="operator VkDisplayNativeHdrSurfaceCapabilitiesAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DisplayNativeHdrSurfaceCapabilitiesAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayNativeHdrSurfaceCapabilitiesAMD &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="localDimmingSupport" />
  </struct>
  <struct name="SwapchainDisplayNativeHdrCreateInfoAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SwapchainDisplayNativeHdrCreateInfoAMD">
      <argument name="localDimmingEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SwapchainDisplayNativeHdrCreateInfoAMD">
      <argument name="rhs" type="const SwapchainDisplayNativeHdrCreateInfoAMD &amp;" />
    </constructor>
    <constructor name="SwapchainDisplayNativeHdrCreateInfoAMD">
      <argument name="rhs" type="const VkSwapchainDisplayNativeHdrCreateInfoAMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SwapchainDisplayNativeHdrCreateInfoAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSwapchainDisplayNativeHdrCreateInfoAMD &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setLocalDimmingEnable">
      <argument name="localDimmingEnable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkSwapchainDisplayNativeHdrCreateInfoAMD &amp;" />
    <conversion_function name="operator VkSwapchainDisplayNativeHdrCreateInfoAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SwapchainDisplayNativeHdrCreateInfoAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SwapchainDisplayNativeHdrCreateInfoAMD &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="localDimmingEnable" />
  </struct>
  <struct name="PhysicalDeviceFragmentDensityMapFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentDensityMapFeaturesEXT">
      <argument name="fragmentDensityMap_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentDensityMapDynamic_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentDensityMapNonSubsampledImages_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMapFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMapFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMapFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMapFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFragmentDensityMap">
      <argument name="fragmentDensityMap_" type="vk::Bool32" />
    </method>
    <method name="setFragmentDensityMapDynamic">
      <argument name="fragmentDensityMapDynamic_" type="vk::Bool32" />
    </method>
    <method name="setFragmentDensityMapNonSubsampledImages">
      <argument name="fragmentDensityMapNonSubsampledImages_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentDensityMapFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentDensityMapFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fragmentDensityMap" />
    <field name="fragmentDensityMapDynamic" />
    <field name="fragmentDensityMapNonSubsampledImages" />
  </struct>
  <struct name="PhysicalDeviceFragmentDensityMapPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentDensityMapPropertiesEXT">
      <argument name="minFragmentDensityTexelSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxFragmentDensityTexelSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="fragmentDensityInvocations_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMapPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMapPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMapPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMapPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentDensityMapPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentDensityMapPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="minFragmentDensityTexelSize" />
    <field name="maxFragmentDensityTexelSize" />
    <field name="fragmentDensityInvocations" />
  </struct>
  <struct name="RenderPassFragmentDensityMapCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassFragmentDensityMapCreateInfoEXT">
      <argument name="fragmentDensityMapAttachment_" type="vk::AttachmentReference" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassFragmentDensityMapCreateInfoEXT">
      <argument name="rhs" type="const RenderPassFragmentDensityMapCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="RenderPassFragmentDensityMapCreateInfoEXT">
      <argument name="rhs" type="const VkRenderPassFragmentDensityMapCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassFragmentDensityMapCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassFragmentDensityMapCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFragmentDensityMapAttachment">
      <argument name="fragmentDensityMapAttachment_" type="const vk::AttachmentReference &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassFragmentDensityMapCreateInfoEXT &amp;" />
    <conversion_function name="operator VkRenderPassFragmentDensityMapCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassFragmentDensityMapCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassFragmentDensityMapCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fragmentDensityMapAttachment" />
  </struct>
  <struct name="FragmentShadingRateAttachmentInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FragmentShadingRateAttachmentInfoKHR">
      <argument name="pFragmentShadingRateAttachment_" type="const vk::AttachmentReference2 *" default_raw="{}" />
      <argument name="shadingRateAttachmentTexelSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="FragmentShadingRateAttachmentInfoKHR">
      <argument name="rhs" type="const FragmentShadingRateAttachmentInfoKHR &amp;" />
    </constructor>
    <constructor name="FragmentShadingRateAttachmentInfoKHR">
      <argument name="rhs" type="const VkFragmentShadingRateAttachmentInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const FragmentShadingRateAttachmentInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFragmentShadingRateAttachmentInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPFragmentShadingRateAttachment">
      <argument name="pFragmentShadingRateAttachment_" type="const vk::AttachmentReference2 *" />
    </method>
    <method name="setShadingRateAttachmentTexelSize">
      <argument name="shadingRateAttachmentTexelSize_" type="const vk::Extent2D &amp;" />
    </method>
    <conversion_function name="operator const VkFragmentShadingRateAttachmentInfoKHR &amp;" />
    <conversion_function name="operator VkFragmentShadingRateAttachmentInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FragmentShadingRateAttachmentInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FragmentShadingRateAttachmentInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pFragmentShadingRateAttachment" />
    <field name="shadingRateAttachmentTexelSize" />
  </struct>
  <struct name="PhysicalDeviceFragmentShadingRateFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentShadingRateFeaturesKHR">
      <argument name="pipelineFragmentShadingRate_" type="vk::Bool32" default_raw="{}" />
      <argument name="primitiveFragmentShadingRate_" type="vk::Bool32" default_raw="{}" />
      <argument name="attachmentFragmentShadingRate_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShadingRateFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShadingRateFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShadingRateFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShadingRateFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPipelineFragmentShadingRate">
      <argument name="pipelineFragmentShadingRate_" type="vk::Bool32" />
    </method>
    <method name="setPrimitiveFragmentShadingRate">
      <argument name="primitiveFragmentShadingRate_" type="vk::Bool32" />
    </method>
    <method name="setAttachmentFragmentShadingRate">
      <argument name="attachmentFragmentShadingRate_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentShadingRateFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentShadingRateFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipelineFragmentShadingRate" />
    <field name="primitiveFragmentShadingRate" />
    <field name="attachmentFragmentShadingRate" />
  </struct>
  <struct name="PhysicalDeviceFragmentShadingRateKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentShadingRateKHR">
      <argument name="sampleCounts_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="fragmentSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShadingRateKHR">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShadingRateKHR">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShadingRateKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShadingRateKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentShadingRateKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentShadingRateKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="sampleCounts" />
    <field name="fragmentSize" />
  </struct>
  <struct name="PhysicalDeviceFragmentShadingRatePropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentShadingRatePropertiesKHR">
      <argument name="minFragmentShadingRateAttachmentTexelSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxFragmentShadingRateAttachmentTexelSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxFragmentShadingRateAttachmentTexelSizeAspectRatio_" type="uint32_t" default_raw="{}" />
      <argument name="primitiveFragmentShadingRateWithMultipleViewports_" type="vk::Bool32" default_raw="{}" />
      <argument name="layeredShadingRateAttachments_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentShadingRateNonTrivialCombinerOps_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxFragmentSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxFragmentSizeAspectRatio_" type="uint32_t" default_raw="{}" />
      <argument name="maxFragmentShadingRateCoverageSamples_" type="uint32_t" default_raw="{}" />
      <argument name="maxFragmentShadingRateRasterizationSamples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="fragmentShadingRateWithShaderDepthStencilWrites_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentShadingRateWithSampleMask_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentShadingRateWithShaderSampleMask_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentShadingRateWithConservativeRasterization_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentShadingRateWithFragmentShaderInterlock_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentShadingRateWithCustomSampleLocations_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentShadingRateStrictMultiplyCombiner_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShadingRatePropertiesKHR">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRatePropertiesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShadingRatePropertiesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShadingRatePropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRatePropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShadingRatePropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentShadingRatePropertiesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentShadingRatePropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRatePropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRatePropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="minFragmentShadingRateAttachmentTexelSize" />
    <field name="maxFragmentShadingRateAttachmentTexelSize" />
    <field name="maxFragmentShadingRateAttachmentTexelSizeAspectRatio" />
    <field name="primitiveFragmentShadingRateWithMultipleViewports" />
    <field name="layeredShadingRateAttachments" />
    <field name="fragmentShadingRateNonTrivialCombinerOps" />
    <field name="maxFragmentSize" />
    <field name="maxFragmentSizeAspectRatio" />
    <field name="maxFragmentShadingRateCoverageSamples" />
    <field name="maxFragmentShadingRateRasterizationSamples" />
    <field name="fragmentShadingRateWithShaderDepthStencilWrites" />
    <field name="fragmentShadingRateWithSampleMask" />
    <field name="fragmentShadingRateWithShaderSampleMask" />
    <field name="fragmentShadingRateWithConservativeRasterization" />
    <field name="fragmentShadingRateWithFragmentShaderInterlock" />
    <field name="fragmentShadingRateWithCustomSampleLocations" />
    <field name="fragmentShadingRateStrictMultiplyCombiner" />
  </struct>
  <struct name="PipelineFragmentShadingRateStateCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineFragmentShadingRateStateCreateInfoKHR">
      <argument name="fragmentSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="combinerOps_" type="const std::array&lt;vk::FragmentShadingRateCombinerOpKHR, 2&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineFragmentShadingRateStateCreateInfoKHR">
      <argument name="rhs" type="const PipelineFragmentShadingRateStateCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="PipelineFragmentShadingRateStateCreateInfoKHR">
      <argument name="rhs" type="const VkPipelineFragmentShadingRateStateCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineFragmentShadingRateStateCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineFragmentShadingRateStateCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFragmentSize">
      <argument name="fragmentSize_" type="const vk::Extent2D &amp;" />
    </method>
    <method name="setCombinerOps">
      <argument name="combinerOps_" type="std::array&lt;vk::FragmentShadingRateCombinerOpKHR, 2&gt;" />
    </method>
    <conversion_function name="operator const VkPipelineFragmentShadingRateStateCreateInfoKHR &amp;" />
    <conversion_function name="operator VkPipelineFragmentShadingRateStateCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineFragmentShadingRateStateCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineFragmentShadingRateStateCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fragmentSize" />
    <field name="combinerOps" />
  </struct>
  <struct name="PhysicalDeviceShaderCoreProperties2AMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderCoreProperties2AMD">
      <argument name="shaderCoreFeatures_" type="vk::ShaderCorePropertiesFlagsAMD" default_raw="{}" />
      <argument name="activeComputeUnitCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderCoreProperties2AMD">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreProperties2AMD &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderCoreProperties2AMD">
      <argument name="rhs" type="const VkPhysicalDeviceShaderCoreProperties2AMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreProperties2AMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderCoreProperties2AMD &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderCoreProperties2AMD &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderCoreProperties2AMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreProperties2AMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreProperties2AMD &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderCoreFeatures" />
    <field name="activeComputeUnitCount" />
  </struct>
  <struct name="PhysicalDeviceCoherentMemoryFeaturesAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCoherentMemoryFeaturesAMD">
      <argument name="deviceCoherentMemory_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCoherentMemoryFeaturesAMD">
      <argument name="rhs" type="const PhysicalDeviceCoherentMemoryFeaturesAMD &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCoherentMemoryFeaturesAMD">
      <argument name="rhs" type="const VkPhysicalDeviceCoherentMemoryFeaturesAMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCoherentMemoryFeaturesAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCoherentMemoryFeaturesAMD &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDeviceCoherentMemory">
      <argument name="deviceCoherentMemory_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCoherentMemoryFeaturesAMD &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCoherentMemoryFeaturesAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCoherentMemoryFeaturesAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCoherentMemoryFeaturesAMD &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceCoherentMemory" />
  </struct>
  <struct name="PhysicalDeviceShaderImageAtomicInt64FeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderImageAtomicInt64FeaturesEXT">
      <argument name="shaderImageInt64Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseImageInt64Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderImageAtomicInt64FeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceShaderImageAtomicInt64FeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderImageAtomicInt64FeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderImageAtomicInt64FeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderImageInt64Atomics">
      <argument name="shaderImageInt64Atomics_" type="vk::Bool32" />
    </method>
    <method name="setSparseImageInt64Atomics">
      <argument name="sparseImageInt64Atomics_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderImageAtomicInt64FeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderImageAtomicInt64FeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderImageInt64Atomics" />
    <field name="sparseImageInt64Atomics" />
  </struct>
  <struct name="PhysicalDeviceMemoryBudgetPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMemoryBudgetPropertiesEXT">
      <argument name="heapBudget_" type="const std::array&lt;vk::DeviceSize, 16U&gt; &amp;" default_raw="{}" />
      <argument name="heapUsage_" type="const std::array&lt;vk::DeviceSize, 16U&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryBudgetPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceMemoryBudgetPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryBudgetPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryBudgetPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMemoryBudgetPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryBudgetPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMemoryBudgetPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMemoryBudgetPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMemoryBudgetPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMemoryBudgetPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="heapBudget" />
    <field name="heapUsage" />
  </struct>
  <struct name="MemoryPriorityAllocateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryPriorityAllocateInfoEXT">
      <argument name="priority_" type="float" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryPriorityAllocateInfoEXT">
      <argument name="rhs" type="const MemoryPriorityAllocateInfoEXT &amp;" />
    </constructor>
    <constructor name="MemoryPriorityAllocateInfoEXT">
      <argument name="rhs" type="const VkMemoryPriorityAllocateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryPriorityAllocateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryPriorityAllocateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPriority">
      <argument name="priority_" type="float" />
    </method>
    <conversion_function name="operator const VkMemoryPriorityAllocateInfoEXT &amp;" />
    <conversion_function name="operator VkMemoryPriorityAllocateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryPriorityAllocateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryPriorityAllocateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="priority" />
  </struct>
  <struct name="PhysicalDeviceMemoryPriorityFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMemoryPriorityFeaturesEXT">
      <argument name="memoryPriority_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryPriorityFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceMemoryPriorityFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryPriorityFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryPriorityFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMemoryPriorityFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryPriorityFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMemoryPriority">
      <argument name="memoryPriority_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMemoryPriorityFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMemoryPriorityFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMemoryPriorityFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMemoryPriorityFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memoryPriority" />
  </struct>
  <struct name="SurfaceProtectedCapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SurfaceProtectedCapabilitiesKHR">
      <argument name="supportsProtected_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SurfaceProtectedCapabilitiesKHR">
      <argument name="rhs" type="const SurfaceProtectedCapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="SurfaceProtectedCapabilitiesKHR">
      <argument name="rhs" type="const VkSurfaceProtectedCapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SurfaceProtectedCapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSurfaceProtectedCapabilitiesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSupportsProtected">
      <argument name="supportsProtected_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkSurfaceProtectedCapabilitiesKHR &amp;" />
    <conversion_function name="operator VkSurfaceProtectedCapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SurfaceProtectedCapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SurfaceProtectedCapabilitiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="supportsProtected" />
  </struct>
  <struct name="PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV">
      <argument name="dedicatedAllocationImageAliasing_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDedicatedAllocationImageAliasing">
      <argument name="dedicatedAllocationImageAliasing_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="dedicatedAllocationImageAliasing" />
  </struct>
  <struct name="BufferDeviceAddressCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferDeviceAddressCreateInfoEXT">
      <argument name="deviceAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferDeviceAddressCreateInfoEXT">
      <argument name="rhs" type="const BufferDeviceAddressCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="BufferDeviceAddressCreateInfoEXT">
      <argument name="rhs" type="const VkBufferDeviceAddressCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferDeviceAddressCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferDeviceAddressCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDeviceAddress">
      <argument name="deviceAddress_" type="vk::DeviceAddress" />
    </method>
    <conversion_function name="operator const VkBufferDeviceAddressCreateInfoEXT &amp;" />
    <conversion_function name="operator VkBufferDeviceAddressCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferDeviceAddressCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferDeviceAddressCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceAddress" />
  </struct>
  <type_alias name="PhysicalDeviceBufferAddressFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceBufferDeviceAddressFeaturesEXT" />
  <struct name="PhysicalDeviceBufferDeviceAddressFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceBufferDeviceAddressFeaturesEXT">
      <argument name="bufferDeviceAddress_" type="vk::Bool32" default_raw="{}" />
      <argument name="bufferDeviceAddressCaptureReplay_" type="vk::Bool32" default_raw="{}" />
      <argument name="bufferDeviceAddressMultiDevice_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceBufferDeviceAddressFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceBufferDeviceAddressFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceBufferDeviceAddressFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceBufferDeviceAddressFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setBufferDeviceAddress">
      <argument name="bufferDeviceAddress_" type="vk::Bool32" />
    </method>
    <method name="setBufferDeviceAddressCaptureReplay">
      <argument name="bufferDeviceAddressCaptureReplay_" type="vk::Bool32" />
    </method>
    <method name="setBufferDeviceAddressMultiDevice">
      <argument name="bufferDeviceAddressMultiDevice_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceBufferDeviceAddressFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceBufferDeviceAddressFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceBufferDeviceAddressFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="bufferDeviceAddress" />
    <field name="bufferDeviceAddressCaptureReplay" />
    <field name="bufferDeviceAddressMultiDevice" />
  </struct>
  <struct name="ValidationFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ValidationFeaturesEXT">
      <argument name="enabledValidationFeatureCount_" type="uint32_t" default_raw="{}" />
      <argument name="pEnabledValidationFeatures_" type="const vk::ValidationFeatureEnableEXT *" default_raw="{}" />
      <argument name="disabledValidationFeatureCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDisabledValidationFeatures_" type="const vk::ValidationFeatureDisableEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ValidationFeaturesEXT">
      <argument name="rhs" type="const ValidationFeaturesEXT &amp;" />
    </constructor>
    <constructor name="ValidationFeaturesEXT">
      <argument name="rhs" type="const VkValidationFeaturesEXT &amp;" />
    </constructor>
    <constructor name="ValidationFeaturesEXT">
      <argument name="enabledValidationFeatures_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ValidationFeatureEnableEXT&gt; &amp;" />
      <argument name="disabledValidationFeatures_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ValidationFeatureDisableEXT&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ValidationFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkValidationFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setEnabledValidationFeatureCount">
      <argument name="enabledValidationFeatureCount_" type="uint32_t" />
    </method>
    <method name="setPEnabledValidationFeatures">
      <argument name="pEnabledValidationFeatures_" type="const vk::ValidationFeatureEnableEXT *" />
    </method>
    <method name="setEnabledValidationFeatures">
      <argument name="enabledValidationFeatures_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ValidationFeatureEnableEXT&gt; &amp;" />
    </method>
    <method name="setDisabledValidationFeatureCount">
      <argument name="disabledValidationFeatureCount_" type="uint32_t" />
    </method>
    <method name="setPDisabledValidationFeatures">
      <argument name="pDisabledValidationFeatures_" type="const vk::ValidationFeatureDisableEXT *" />
    </method>
    <method name="setDisabledValidationFeatures">
      <argument name="disabledValidationFeatures_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ValidationFeatureDisableEXT&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkValidationFeaturesEXT &amp;" />
    <conversion_function name="operator VkValidationFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ValidationFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ValidationFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="enabledValidationFeatureCount" />
    <field name="pEnabledValidationFeatures" />
    <field name="disabledValidationFeatureCount" />
    <field name="pDisabledValidationFeatures" />
  </struct>
  <struct name="PhysicalDevicePresentWaitFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePresentWaitFeaturesKHR">
      <argument name="presentWait_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePresentWaitFeaturesKHR">
      <argument name="rhs" type="const PhysicalDevicePresentWaitFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePresentWaitFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDevicePresentWaitFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePresentWaitFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePresentWaitFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPresentWait">
      <argument name="presentWait_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePresentWaitFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDevicePresentWaitFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePresentWaitFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePresentWaitFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentWait" />
  </struct>
  <struct name="CooperativeMatrixPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CooperativeMatrixPropertiesNV">
      <argument name="MSize_" type="uint32_t" default_raw="{}" />
      <argument name="NSize_" type="uint32_t" default_raw="{}" />
      <argument name="KSize_" type="uint32_t" default_raw="{}" />
      <argument name="AType_" type="vk::ComponentTypeNV" default_raw="{}" />
      <argument name="BType_" type="vk::ComponentTypeNV" default_raw="{}" />
      <argument name="CType_" type="vk::ComponentTypeNV" default_raw="{}" />
      <argument name="DType_" type="vk::ComponentTypeNV" default_raw="{}" />
      <argument name="scope_" type="vk::ScopeNV" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CooperativeMatrixPropertiesNV">
      <argument name="rhs" type="const CooperativeMatrixPropertiesNV &amp;" />
    </constructor>
    <constructor name="CooperativeMatrixPropertiesNV">
      <argument name="rhs" type="const VkCooperativeMatrixPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CooperativeMatrixPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCooperativeMatrixPropertiesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMSize">
      <argument name="MSize_" type="uint32_t" />
    </method>
    <method name="setNSize">
      <argument name="NSize_" type="uint32_t" />
    </method>
    <method name="setKSize">
      <argument name="KSize_" type="uint32_t" />
    </method>
    <method name="setAType">
      <argument name="AType_" type="vk::ComponentTypeNV" />
    </method>
    <method name="setBType">
      <argument name="BType_" type="vk::ComponentTypeNV" />
    </method>
    <method name="setCType">
      <argument name="CType_" type="vk::ComponentTypeNV" />
    </method>
    <method name="setDType">
      <argument name="DType_" type="vk::ComponentTypeNV" />
    </method>
    <method name="setScope">
      <argument name="scope_" type="vk::ScopeNV" />
    </method>
    <conversion_function name="operator const VkCooperativeMatrixPropertiesNV &amp;" />
    <conversion_function name="operator VkCooperativeMatrixPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CooperativeMatrixPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CooperativeMatrixPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="MSize" />
    <field name="NSize" />
    <field name="KSize" />
    <field name="AType" />
    <field name="BType" />
    <field name="CType" />
    <field name="DType" />
    <field name="scope" />
  </struct>
  <struct name="PhysicalDeviceCooperativeMatrixFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCooperativeMatrixFeaturesNV">
      <argument name="cooperativeMatrix_" type="vk::Bool32" default_raw="{}" />
      <argument name="cooperativeMatrixRobustBufferAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCooperativeMatrixFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCooperativeMatrixFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceCooperativeMatrixFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCooperativeMatrixFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setCooperativeMatrix">
      <argument name="cooperativeMatrix_" type="vk::Bool32" />
    </method>
    <method name="setCooperativeMatrixRobustBufferAccess">
      <argument name="cooperativeMatrixRobustBufferAccess_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCooperativeMatrixFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCooperativeMatrixFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="cooperativeMatrix" />
    <field name="cooperativeMatrixRobustBufferAccess" />
  </struct>
  <struct name="PhysicalDeviceCooperativeMatrixPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCooperativeMatrixPropertiesNV">
      <argument name="cooperativeMatrixSupportedStages_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCooperativeMatrixPropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixPropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCooperativeMatrixPropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceCooperativeMatrixPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCooperativeMatrixPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCooperativeMatrixPropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCooperativeMatrixPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="cooperativeMatrixSupportedStages" />
  </struct>
  <struct name="FramebufferMixedSamplesCombinationNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FramebufferMixedSamplesCombinationNV">
      <argument name="coverageReductionMode_" type="vk::CoverageReductionModeNV" default_raw="VULKAN_HPP_NAMESPACE::CoverageReductionModeNV::eMerge" />
      <argument name="rasterizationSamples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="depthStencilSamples_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="colorSamples_" type="vk::SampleCountFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="FramebufferMixedSamplesCombinationNV">
      <argument name="rhs" type="const FramebufferMixedSamplesCombinationNV &amp;" />
    </constructor>
    <constructor name="FramebufferMixedSamplesCombinationNV">
      <argument name="rhs" type="const VkFramebufferMixedSamplesCombinationNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const FramebufferMixedSamplesCombinationNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFramebufferMixedSamplesCombinationNV &amp;" />
    </method>
    <conversion_function name="operator const VkFramebufferMixedSamplesCombinationNV &amp;" />
    <conversion_function name="operator VkFramebufferMixedSamplesCombinationNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FramebufferMixedSamplesCombinationNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FramebufferMixedSamplesCombinationNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="coverageReductionMode" />
    <field name="rasterizationSamples" />
    <field name="depthStencilSamples" />
    <field name="colorSamples" />
  </struct>
  <struct name="PhysicalDeviceCoverageReductionModeFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCoverageReductionModeFeaturesNV">
      <argument name="coverageReductionMode_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCoverageReductionModeFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceCoverageReductionModeFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCoverageReductionModeFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceCoverageReductionModeFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCoverageReductionModeFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCoverageReductionModeFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setCoverageReductionMode">
      <argument name="coverageReductionMode_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCoverageReductionModeFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCoverageReductionModeFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCoverageReductionModeFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCoverageReductionModeFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="coverageReductionMode" />
  </struct>
  <struct name="PipelineCoverageReductionStateCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineCoverageReductionStateCreateInfoNV">
      <argument name="flags_" type="vk::PipelineCoverageReductionStateCreateFlagsNV" default_raw="{}" />
      <argument name="coverageReductionMode_" type="vk::CoverageReductionModeNV" default_raw="VULKAN_HPP_NAMESPACE::CoverageReductionModeNV::eMerge" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineCoverageReductionStateCreateInfoNV">
      <argument name="rhs" type="const PipelineCoverageReductionStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineCoverageReductionStateCreateInfoNV">
      <argument name="rhs" type="const VkPipelineCoverageReductionStateCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineCoverageReductionStateCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineCoverageReductionStateCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineCoverageReductionStateCreateFlagsNV" />
    </method>
    <method name="setCoverageReductionMode">
      <argument name="coverageReductionMode_" type="vk::CoverageReductionModeNV" />
    </method>
    <conversion_function name="operator const VkPipelineCoverageReductionStateCreateInfoNV &amp;" />
    <conversion_function name="operator VkPipelineCoverageReductionStateCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineCoverageReductionStateCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineCoverageReductionStateCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="coverageReductionMode" />
  </struct>
  <struct name="PhysicalDeviceFragmentShaderInterlockFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentShaderInterlockFeaturesEXT">
      <argument name="fragmentShaderSampleInterlock_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentShaderPixelInterlock_" type="vk::Bool32" default_raw="{}" />
      <argument name="fragmentShaderShadingRateInterlock_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShaderInterlockFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderInterlockFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShaderInterlockFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderInterlockFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFragmentShaderSampleInterlock">
      <argument name="fragmentShaderSampleInterlock_" type="vk::Bool32" />
    </method>
    <method name="setFragmentShaderPixelInterlock">
      <argument name="fragmentShaderPixelInterlock_" type="vk::Bool32" />
    </method>
    <method name="setFragmentShaderShadingRateInterlock">
      <argument name="fragmentShaderShadingRateInterlock_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderInterlockFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderInterlockFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fragmentShaderSampleInterlock" />
    <field name="fragmentShaderPixelInterlock" />
    <field name="fragmentShaderShadingRateInterlock" />
  </struct>
  <struct name="PhysicalDeviceYcbcrImageArraysFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceYcbcrImageArraysFeaturesEXT">
      <argument name="ycbcrImageArrays_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceYcbcrImageArraysFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceYcbcrImageArraysFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceYcbcrImageArraysFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceYcbcrImageArraysFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setYcbcrImageArrays">
      <argument name="ycbcrImageArrays_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceYcbcrImageArraysFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceYcbcrImageArraysFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceYcbcrImageArraysFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="ycbcrImageArrays" />
  </struct>
  <struct name="PhysicalDeviceProvokingVertexFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceProvokingVertexFeaturesEXT">
      <argument name="provokingVertexLast_" type="vk::Bool32" default_raw="{}" />
      <argument name="transformFeedbackPreservesProvokingVertex_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceProvokingVertexFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceProvokingVertexFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceProvokingVertexFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceProvokingVertexFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceProvokingVertexFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceProvokingVertexFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setProvokingVertexLast">
      <argument name="provokingVertexLast_" type="vk::Bool32" />
    </method>
    <method name="setTransformFeedbackPreservesProvokingVertex">
      <argument name="transformFeedbackPreservesProvokingVertex_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceProvokingVertexFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceProvokingVertexFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceProvokingVertexFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceProvokingVertexFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="provokingVertexLast" />
    <field name="transformFeedbackPreservesProvokingVertex" />
  </struct>
  <struct name="PhysicalDeviceProvokingVertexPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceProvokingVertexPropertiesEXT">
      <argument name="provokingVertexModePerPipeline_" type="vk::Bool32" default_raw="{}" />
      <argument name="transformFeedbackPreservesTriangleFanProvokingVertex_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceProvokingVertexPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceProvokingVertexPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceProvokingVertexPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceProvokingVertexPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceProvokingVertexPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceProvokingVertexPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceProvokingVertexPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceProvokingVertexPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceProvokingVertexPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceProvokingVertexPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="provokingVertexModePerPipeline" />
    <field name="transformFeedbackPreservesTriangleFanProvokingVertex" />
  </struct>
  <struct name="PipelineRasterizationProvokingVertexStateCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineRasterizationProvokingVertexStateCreateInfoEXT">
      <argument name="provokingVertexMode_" type="vk::ProvokingVertexModeEXT" default_raw="VULKAN_HPP_NAMESPACE::ProvokingVertexModeEXT::eFirstVertex" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineRasterizationProvokingVertexStateCreateInfoEXT">
      <argument name="rhs" type="const PipelineRasterizationProvokingVertexStateCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineRasterizationProvokingVertexStateCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineRasterizationProvokingVertexStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setProvokingVertexMode">
      <argument name="provokingVertexMode_" type="vk::ProvokingVertexModeEXT" />
    </method>
    <conversion_function name="operator const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineRasterizationProvokingVertexStateCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineRasterizationProvokingVertexStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineRasterizationProvokingVertexStateCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="provokingVertexMode" />
  </struct>
  <struct name="HeadlessSurfaceCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="HeadlessSurfaceCreateInfoEXT">
      <argument name="flags_" type="vk::HeadlessSurfaceCreateFlagsEXT" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="HeadlessSurfaceCreateInfoEXT">
      <argument name="rhs" type="const HeadlessSurfaceCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="HeadlessSurfaceCreateInfoEXT">
      <argument name="rhs" type="const VkHeadlessSurfaceCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const HeadlessSurfaceCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkHeadlessSurfaceCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::HeadlessSurfaceCreateFlagsEXT" />
    </method>
    <conversion_function name="operator const VkHeadlessSurfaceCreateInfoEXT &amp;" />
    <conversion_function name="operator VkHeadlessSurfaceCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const HeadlessSurfaceCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const HeadlessSurfaceCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
  </struct>
  <struct name="PhysicalDeviceLineRasterizationFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceLineRasterizationFeaturesEXT">
      <argument name="rectangularLines_" type="vk::Bool32" default_raw="{}" />
      <argument name="bresenhamLines_" type="vk::Bool32" default_raw="{}" />
      <argument name="smoothLines_" type="vk::Bool32" default_raw="{}" />
      <argument name="stippledRectangularLines_" type="vk::Bool32" default_raw="{}" />
      <argument name="stippledBresenhamLines_" type="vk::Bool32" default_raw="{}" />
      <argument name="stippledSmoothLines_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceLineRasterizationFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceLineRasterizationFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceLineRasterizationFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceLineRasterizationFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceLineRasterizationFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceLineRasterizationFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRectangularLines">
      <argument name="rectangularLines_" type="vk::Bool32" />
    </method>
    <method name="setBresenhamLines">
      <argument name="bresenhamLines_" type="vk::Bool32" />
    </method>
    <method name="setSmoothLines">
      <argument name="smoothLines_" type="vk::Bool32" />
    </method>
    <method name="setStippledRectangularLines">
      <argument name="stippledRectangularLines_" type="vk::Bool32" />
    </method>
    <method name="setStippledBresenhamLines">
      <argument name="stippledBresenhamLines_" type="vk::Bool32" />
    </method>
    <method name="setStippledSmoothLines">
      <argument name="stippledSmoothLines_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceLineRasterizationFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceLineRasterizationFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceLineRasterizationFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceLineRasterizationFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="rectangularLines" />
    <field name="bresenhamLines" />
    <field name="smoothLines" />
    <field name="stippledRectangularLines" />
    <field name="stippledBresenhamLines" />
    <field name="stippledSmoothLines" />
  </struct>
  <struct name="PhysicalDeviceLineRasterizationPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceLineRasterizationPropertiesEXT">
      <argument name="lineSubPixelPrecisionBits_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceLineRasterizationPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceLineRasterizationPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceLineRasterizationPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceLineRasterizationPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceLineRasterizationPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceLineRasterizationPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceLineRasterizationPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceLineRasterizationPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceLineRasterizationPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceLineRasterizationPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="lineSubPixelPrecisionBits" />
  </struct>
  <struct name="PipelineRasterizationLineStateCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineRasterizationLineStateCreateInfoEXT">
      <argument name="lineRasterizationMode_" type="vk::LineRasterizationModeEXT" default_raw="VULKAN_HPP_NAMESPACE::LineRasterizationModeEXT::eDefault" />
      <argument name="stippledLineEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="lineStippleFactor_" type="uint32_t" default_raw="{}" />
      <argument name="lineStipplePattern_" type="uint16_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineRasterizationLineStateCreateInfoEXT">
      <argument name="rhs" type="const PipelineRasterizationLineStateCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineRasterizationLineStateCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineRasterizationLineStateCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineRasterizationLineStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineRasterizationLineStateCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setLineRasterizationMode">
      <argument name="lineRasterizationMode_" type="vk::LineRasterizationModeEXT" />
    </method>
    <method name="setStippledLineEnable">
      <argument name="stippledLineEnable_" type="vk::Bool32" />
    </method>
    <method name="setLineStippleFactor">
      <argument name="lineStippleFactor_" type="uint32_t" />
    </method>
    <method name="setLineStipplePattern">
      <argument name="lineStipplePattern_" type="uint16_t" />
    </method>
    <conversion_function name="operator const VkPipelineRasterizationLineStateCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineRasterizationLineStateCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineRasterizationLineStateCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineRasterizationLineStateCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="lineRasterizationMode" />
    <field name="stippledLineEnable" />
    <field name="lineStippleFactor" />
    <field name="lineStipplePattern" />
  </struct>
  <struct name="PhysicalDeviceShaderAtomicFloatFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderAtomicFloatFeaturesEXT">
      <argument name="shaderBufferFloat32Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderBufferFloat32AtomicAdd_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderBufferFloat64Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderBufferFloat64AtomicAdd_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSharedFloat32Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSharedFloat32AtomicAdd_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSharedFloat64Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSharedFloat64AtomicAdd_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderImageFloat32Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderImageFloat32AtomicAdd_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseImageFloat32Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseImageFloat32AtomicAdd_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderAtomicFloatFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicFloatFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderAtomicFloatFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceShaderAtomicFloatFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicFloatFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderAtomicFloatFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderBufferFloat32Atomics">
      <argument name="shaderBufferFloat32Atomics_" type="vk::Bool32" />
    </method>
    <method name="setShaderBufferFloat32AtomicAdd">
      <argument name="shaderBufferFloat32AtomicAdd_" type="vk::Bool32" />
    </method>
    <method name="setShaderBufferFloat64Atomics">
      <argument name="shaderBufferFloat64Atomics_" type="vk::Bool32" />
    </method>
    <method name="setShaderBufferFloat64AtomicAdd">
      <argument name="shaderBufferFloat64AtomicAdd_" type="vk::Bool32" />
    </method>
    <method name="setShaderSharedFloat32Atomics">
      <argument name="shaderSharedFloat32Atomics_" type="vk::Bool32" />
    </method>
    <method name="setShaderSharedFloat32AtomicAdd">
      <argument name="shaderSharedFloat32AtomicAdd_" type="vk::Bool32" />
    </method>
    <method name="setShaderSharedFloat64Atomics">
      <argument name="shaderSharedFloat64Atomics_" type="vk::Bool32" />
    </method>
    <method name="setShaderSharedFloat64AtomicAdd">
      <argument name="shaderSharedFloat64AtomicAdd_" type="vk::Bool32" />
    </method>
    <method name="setShaderImageFloat32Atomics">
      <argument name="shaderImageFloat32Atomics_" type="vk::Bool32" />
    </method>
    <method name="setShaderImageFloat32AtomicAdd">
      <argument name="shaderImageFloat32AtomicAdd_" type="vk::Bool32" />
    </method>
    <method name="setSparseImageFloat32Atomics">
      <argument name="sparseImageFloat32Atomics_" type="vk::Bool32" />
    </method>
    <method name="setSparseImageFloat32AtomicAdd">
      <argument name="sparseImageFloat32AtomicAdd_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderAtomicFloatFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderAtomicFloatFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicFloatFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicFloatFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderBufferFloat32Atomics" />
    <field name="shaderBufferFloat32AtomicAdd" />
    <field name="shaderBufferFloat64Atomics" />
    <field name="shaderBufferFloat64AtomicAdd" />
    <field name="shaderSharedFloat32Atomics" />
    <field name="shaderSharedFloat32AtomicAdd" />
    <field name="shaderSharedFloat64Atomics" />
    <field name="shaderSharedFloat64AtomicAdd" />
    <field name="shaderImageFloat32Atomics" />
    <field name="shaderImageFloat32AtomicAdd" />
    <field name="sparseImageFloat32Atomics" />
    <field name="sparseImageFloat32AtomicAdd" />
  </struct>
  <struct name="PhysicalDeviceIndexTypeUint8FeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceIndexTypeUint8FeaturesEXT">
      <argument name="indexTypeUint8_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceIndexTypeUint8FeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceIndexTypeUint8FeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceIndexTypeUint8FeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceIndexTypeUint8FeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceIndexTypeUint8FeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceIndexTypeUint8FeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setIndexTypeUint8">
      <argument name="indexTypeUint8_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceIndexTypeUint8FeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceIndexTypeUint8FeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceIndexTypeUint8FeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceIndexTypeUint8FeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="indexTypeUint8" />
  </struct>
  <struct name="PhysicalDeviceExtendedDynamicStateFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExtendedDynamicStateFeaturesEXT">
      <argument name="extendedDynamicState_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedDynamicStateFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicStateFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedDynamicStateFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicStateFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setExtendedDynamicState">
      <argument name="extendedDynamicState_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExtendedDynamicStateFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicStateFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicStateFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="extendedDynamicState" />
  </struct>
  <struct name="PhysicalDevicePipelineExecutablePropertiesFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePipelineExecutablePropertiesFeaturesKHR">
      <argument name="pipelineExecutableInfo_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePipelineExecutablePropertiesFeaturesKHR">
      <argument name="rhs" type="const PhysicalDevicePipelineExecutablePropertiesFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePipelineExecutablePropertiesFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePipelineExecutablePropertiesFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPipelineExecutableInfo">
      <argument name="pipelineExecutableInfo_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePipelineExecutablePropertiesFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePipelineExecutablePropertiesFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipelineExecutableInfo" />
  </struct>
  <struct name="PipelineExecutableInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineExecutableInfoKHR">
      <argument name="pipeline_" type="vk::Pipeline" default_raw="{}" />
      <argument name="executableIndex_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineExecutableInfoKHR">
      <argument name="rhs" type="const PipelineExecutableInfoKHR &amp;" />
    </constructor>
    <constructor name="PipelineExecutableInfoKHR">
      <argument name="rhs" type="const VkPipelineExecutableInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineExecutableInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineExecutableInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPipeline">
      <argument name="pipeline_" type="vk::Pipeline" />
    </method>
    <method name="setExecutableIndex">
      <argument name="executableIndex_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkPipelineExecutableInfoKHR &amp;" />
    <conversion_function name="operator VkPipelineExecutableInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineExecutableInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineExecutableInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipeline" />
    <field name="executableIndex" />
  </struct>
  <struct name="PipelineExecutableInternalRepresentationKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineExecutableInternalRepresentationKHR">
      <argument name="name_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="description_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="isText_" type="vk::Bool32" default_raw="{}" />
      <argument name="dataSize_" type="size_t" default_raw="{}" />
      <argument name="pData_" type="void *" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineExecutableInternalRepresentationKHR">
      <argument name="rhs" type="const PipelineExecutableInternalRepresentationKHR &amp;" />
    </constructor>
    <constructor name="PipelineExecutableInternalRepresentationKHR">
      <argument name="rhs" type="const VkPipelineExecutableInternalRepresentationKHR &amp;" />
    </constructor>
    <method name="PipelineExecutableInternalRepresentationKHR" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const PipelineExecutableInternalRepresentationKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineExecutableInternalRepresentationKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineExecutableInternalRepresentationKHR &amp;" />
    <conversion_function name="operator VkPipelineExecutableInternalRepresentationKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineExecutableInternalRepresentationKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineExecutableInternalRepresentationKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="name" />
    <field name="description" />
    <field name="isText" />
    <field name="dataSize" />
    <field name="pData" />
  </struct>
  <struct name="PipelineExecutablePropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineExecutablePropertiesKHR">
      <argument name="stages_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="name_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="description_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="subgroupSize_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineExecutablePropertiesKHR">
      <argument name="rhs" type="const PipelineExecutablePropertiesKHR &amp;" />
    </constructor>
    <constructor name="PipelineExecutablePropertiesKHR">
      <argument name="rhs" type="const VkPipelineExecutablePropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineExecutablePropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineExecutablePropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineExecutablePropertiesKHR &amp;" />
    <conversion_function name="operator VkPipelineExecutablePropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineExecutablePropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineExecutablePropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stages" />
    <field name="name" />
    <field name="description" />
    <field name="subgroupSize" />
  </struct>
  <struct name="PipelineExecutableStatisticKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineExecutableStatisticKHR">
      <argument name="name_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="description_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="format_" type="vk::PipelineExecutableStatisticFormatKHR" default_raw="VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticFormatKHR::eBool32" />
      <argument name="value_" type="vk::PipelineExecutableStatisticValueKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineExecutableStatisticKHR">
      <argument name="rhs" type="const PipelineExecutableStatisticKHR &amp;" />
    </constructor>
    <constructor name="PipelineExecutableStatisticKHR">
      <argument name="rhs" type="const VkPipelineExecutableStatisticKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineExecutableStatisticKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineExecutableStatisticKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineExecutableStatisticKHR &amp;" />
    <conversion_function name="operator VkPipelineExecutableStatisticKHR &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="name" />
    <field name="description" />
    <field name="format" />
    <field name="value" />
  </struct>
  <union name="PipelineExecutableStatisticValueKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineExecutableStatisticValueKHR">
      <argument name="b32_" type="vk::Bool32" default_raw="{}" />
    </constructor>
    <constructor name="PipelineExecutableStatisticValueKHR">
      <argument name="i64_" type="int64_t" />
    </constructor>
    <constructor name="PipelineExecutableStatisticValueKHR">
      <argument name="u64_" type="uint64_t" />
    </constructor>
    <constructor name="PipelineExecutableStatisticValueKHR">
      <argument name="f64_" type="double" />
    </constructor>
    <method name="setB32">
      <argument name="b32_" type="vk::Bool32" />
    </method>
    <method name="setI64">
      <argument name="i64_" type="int64_t" />
    </method>
    <method name="setU64">
      <argument name="u64_" type="uint64_t" />
    </method>
    <method name="setF64">
      <argument name="f64_" type="double" />
    </method>
    <conversion_function name="operator const VkPipelineExecutableStatisticValueKHR &amp;" />
    <conversion_function name="operator VkPipelineExecutableStatisticValueKHR &amp;" />
    <field name="b32" />
    <field name="i64" />
    <field name="u64" />
    <field name="f64" />
  </union>
  <type_alias name="PipelineInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PipelineInfoKHR" />
  <struct name="PipelineInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineInfoKHR">
      <argument name="pipeline_" type="vk::Pipeline" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineInfoKHR">
      <argument name="rhs" type="const PipelineInfoKHR &amp;" />
    </constructor>
    <constructor name="PipelineInfoKHR">
      <argument name="rhs" type="const VkPipelineInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPipeline">
      <argument name="pipeline_" type="vk::Pipeline" />
    </method>
    <conversion_function name="operator const VkPipelineInfoKHR &amp;" />
    <conversion_function name="operator VkPipelineInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipeline" />
  </struct>
  <struct name="CopyImageToImageInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyImageToImageInfoEXT">
      <argument name="flags_" type="vk::HostImageCopyFlagsEXT" default_raw="{}" />
      <argument name="srcImage_" type="vk::Image" default_raw="{}" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="dstImage_" type="vk::Image" default_raw="{}" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="regionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRegions_" type="const vk::ImageCopy2 *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyImageToImageInfoEXT">
      <argument name="rhs" type="const CopyImageToImageInfoEXT &amp;" />
    </constructor>
    <constructor name="CopyImageToImageInfoEXT">
      <argument name="rhs" type="const VkCopyImageToImageInfoEXT &amp;" />
    </constructor>
    <constructor name="CopyImageToImageInfoEXT">
      <argument name="flags_" type="vk::HostImageCopyFlagsEXT" />
      <argument name="srcImage_" type="vk::Image" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
      <argument name="dstImage_" type="vk::Image" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageCopy2&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyImageToImageInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyImageToImageInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::HostImageCopyFlagsEXT" />
    </method>
    <method name="setSrcImage">
      <argument name="srcImage_" type="vk::Image" />
    </method>
    <method name="setSrcImageLayout">
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setDstImage">
      <argument name="dstImage_" type="vk::Image" />
    </method>
    <method name="setDstImageLayout">
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setRegionCount">
      <argument name="regionCount_" type="uint32_t" />
    </method>
    <method name="setPRegions">
      <argument name="pRegions_" type="const vk::ImageCopy2 *" />
    </method>
    <method name="setRegions">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageCopy2&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkCopyImageToImageInfoEXT &amp;" />
    <conversion_function name="operator VkCopyImageToImageInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyImageToImageInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyImageToImageInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="srcImage" />
    <field name="srcImageLayout" />
    <field name="dstImage" />
    <field name="dstImageLayout" />
    <field name="regionCount" />
    <field name="pRegions" />
  </struct>
  <struct name="CopyImageToMemoryInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyImageToMemoryInfoEXT">
      <argument name="flags_" type="vk::HostImageCopyFlagsEXT" default_raw="{}" />
      <argument name="srcImage_" type="vk::Image" default_raw="{}" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="regionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRegions_" type="const vk::ImageToMemoryCopyEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyImageToMemoryInfoEXT">
      <argument name="rhs" type="const CopyImageToMemoryInfoEXT &amp;" />
    </constructor>
    <constructor name="CopyImageToMemoryInfoEXT">
      <argument name="rhs" type="const VkCopyImageToMemoryInfoEXT &amp;" />
    </constructor>
    <constructor name="CopyImageToMemoryInfoEXT">
      <argument name="flags_" type="vk::HostImageCopyFlagsEXT" />
      <argument name="srcImage_" type="vk::Image" />
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageToMemoryCopyEXT&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyImageToMemoryInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyImageToMemoryInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::HostImageCopyFlagsEXT" />
    </method>
    <method name="setSrcImage">
      <argument name="srcImage_" type="vk::Image" />
    </method>
    <method name="setSrcImageLayout">
      <argument name="srcImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setRegionCount">
      <argument name="regionCount_" type="uint32_t" />
    </method>
    <method name="setPRegions">
      <argument name="pRegions_" type="const vk::ImageToMemoryCopyEXT *" />
    </method>
    <method name="setRegions">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::ImageToMemoryCopyEXT&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkCopyImageToMemoryInfoEXT &amp;" />
    <conversion_function name="operator VkCopyImageToMemoryInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyImageToMemoryInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyImageToMemoryInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="srcImage" />
    <field name="srcImageLayout" />
    <field name="regionCount" />
    <field name="pRegions" />
  </struct>
  <struct name="CopyMemoryToImageInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyMemoryToImageInfoEXT">
      <argument name="flags_" type="vk::HostImageCopyFlagsEXT" default_raw="{}" />
      <argument name="dstImage_" type="vk::Image" default_raw="{}" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="regionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRegions_" type="const vk::MemoryToImageCopyEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyMemoryToImageInfoEXT">
      <argument name="rhs" type="const CopyMemoryToImageInfoEXT &amp;" />
    </constructor>
    <constructor name="CopyMemoryToImageInfoEXT">
      <argument name="rhs" type="const VkCopyMemoryToImageInfoEXT &amp;" />
    </constructor>
    <constructor name="CopyMemoryToImageInfoEXT">
      <argument name="flags_" type="vk::HostImageCopyFlagsEXT" />
      <argument name="dstImage_" type="vk::Image" />
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MemoryToImageCopyEXT&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyMemoryToImageInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyMemoryToImageInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::HostImageCopyFlagsEXT" />
    </method>
    <method name="setDstImage">
      <argument name="dstImage_" type="vk::Image" />
    </method>
    <method name="setDstImageLayout">
      <argument name="dstImageLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setRegionCount">
      <argument name="regionCount_" type="uint32_t" />
    </method>
    <method name="setPRegions">
      <argument name="pRegions_" type="const vk::MemoryToImageCopyEXT *" />
    </method>
    <method name="setRegions">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MemoryToImageCopyEXT&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkCopyMemoryToImageInfoEXT &amp;" />
    <conversion_function name="operator VkCopyMemoryToImageInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyMemoryToImageInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyMemoryToImageInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="dstImage" />
    <field name="dstImageLayout" />
    <field name="regionCount" />
    <field name="pRegions" />
  </struct>
  <struct name="HostImageCopyDevicePerformanceQueryEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="HostImageCopyDevicePerformanceQueryEXT">
      <argument name="optimalDeviceAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="identicalMemoryLayout_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="HostImageCopyDevicePerformanceQueryEXT">
      <argument name="rhs" type="const HostImageCopyDevicePerformanceQueryEXT &amp;" />
    </constructor>
    <constructor name="HostImageCopyDevicePerformanceQueryEXT">
      <argument name="rhs" type="const VkHostImageCopyDevicePerformanceQueryEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const HostImageCopyDevicePerformanceQueryEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkHostImageCopyDevicePerformanceQueryEXT &amp;" />
    </method>
    <conversion_function name="operator const VkHostImageCopyDevicePerformanceQueryEXT &amp;" />
    <conversion_function name="operator VkHostImageCopyDevicePerformanceQueryEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const HostImageCopyDevicePerformanceQueryEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const HostImageCopyDevicePerformanceQueryEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="optimalDeviceAccess" />
    <field name="identicalMemoryLayout" />
  </struct>
  <struct name="HostImageLayoutTransitionInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="HostImageLayoutTransitionInfoEXT">
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="oldLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="newLayout_" type="vk::ImageLayout" default_raw="VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined" />
      <argument name="subresourceRange_" type="vk::ImageSubresourceRange" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="HostImageLayoutTransitionInfoEXT">
      <argument name="rhs" type="const HostImageLayoutTransitionInfoEXT &amp;" />
    </constructor>
    <constructor name="HostImageLayoutTransitionInfoEXT">
      <argument name="rhs" type="const VkHostImageLayoutTransitionInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const HostImageLayoutTransitionInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkHostImageLayoutTransitionInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <method name="setOldLayout">
      <argument name="oldLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setNewLayout">
      <argument name="newLayout_" type="vk::ImageLayout" />
    </method>
    <method name="setSubresourceRange">
      <argument name="subresourceRange_" type="const vk::ImageSubresourceRange &amp;" />
    </method>
    <conversion_function name="operator const VkHostImageLayoutTransitionInfoEXT &amp;" />
    <conversion_function name="operator VkHostImageLayoutTransitionInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const HostImageLayoutTransitionInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const HostImageLayoutTransitionInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="image" />
    <field name="oldLayout" />
    <field name="newLayout" />
    <field name="subresourceRange" />
  </struct>
  <struct name="ImageToMemoryCopyEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageToMemoryCopyEXT">
      <argument name="pHostPointer_" type="void *" default_raw="{}" />
      <argument name="memoryRowLength_" type="uint32_t" default_raw="{}" />
      <argument name="memoryImageHeight_" type="uint32_t" default_raw="{}" />
      <argument name="imageSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="imageOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="imageExtent_" type="vk::Extent3D" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageToMemoryCopyEXT">
      <argument name="rhs" type="const ImageToMemoryCopyEXT &amp;" />
    </constructor>
    <constructor name="ImageToMemoryCopyEXT">
      <argument name="rhs" type="const VkImageToMemoryCopyEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageToMemoryCopyEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageToMemoryCopyEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPHostPointer">
      <argument name="pHostPointer_" type="void *" />
    </method>
    <method name="setMemoryRowLength">
      <argument name="memoryRowLength_" type="uint32_t" />
    </method>
    <method name="setMemoryImageHeight">
      <argument name="memoryImageHeight_" type="uint32_t" />
    </method>
    <method name="setImageSubresource">
      <argument name="imageSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setImageOffset">
      <argument name="imageOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setImageExtent">
      <argument name="imageExtent_" type="const vk::Extent3D &amp;" />
    </method>
    <conversion_function name="operator const VkImageToMemoryCopyEXT &amp;" />
    <conversion_function name="operator VkImageToMemoryCopyEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageToMemoryCopyEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageToMemoryCopyEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pHostPointer" />
    <field name="memoryRowLength" />
    <field name="memoryImageHeight" />
    <field name="imageSubresource" />
    <field name="imageOffset" />
    <field name="imageExtent" />
  </struct>
  <struct name="MemoryToImageCopyEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryToImageCopyEXT">
      <argument name="pHostPointer_" type="const void *" default_raw="{}" />
      <argument name="memoryRowLength_" type="uint32_t" default_raw="{}" />
      <argument name="memoryImageHeight_" type="uint32_t" default_raw="{}" />
      <argument name="imageSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="imageOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="imageExtent_" type="vk::Extent3D" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryToImageCopyEXT">
      <argument name="rhs" type="const MemoryToImageCopyEXT &amp;" />
    </constructor>
    <constructor name="MemoryToImageCopyEXT">
      <argument name="rhs" type="const VkMemoryToImageCopyEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryToImageCopyEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryToImageCopyEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPHostPointer">
      <argument name="pHostPointer_" type="const void *" />
    </method>
    <method name="setMemoryRowLength">
      <argument name="memoryRowLength_" type="uint32_t" />
    </method>
    <method name="setMemoryImageHeight">
      <argument name="memoryImageHeight_" type="uint32_t" />
    </method>
    <method name="setImageSubresource">
      <argument name="imageSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setImageOffset">
      <argument name="imageOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setImageExtent">
      <argument name="imageExtent_" type="const vk::Extent3D &amp;" />
    </method>
    <conversion_function name="operator const VkMemoryToImageCopyEXT &amp;" />
    <conversion_function name="operator VkMemoryToImageCopyEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryToImageCopyEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryToImageCopyEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pHostPointer" />
    <field name="memoryRowLength" />
    <field name="memoryImageHeight" />
    <field name="imageSubresource" />
    <field name="imageOffset" />
    <field name="imageExtent" />
  </struct>
  <struct name="PhysicalDeviceHostImageCopyFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceHostImageCopyFeaturesEXT">
      <argument name="hostImageCopy_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceHostImageCopyFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceHostImageCopyFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceHostImageCopyFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceHostImageCopyFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceHostImageCopyFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceHostImageCopyFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setHostImageCopy">
      <argument name="hostImageCopy_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceHostImageCopyFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceHostImageCopyFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceHostImageCopyFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceHostImageCopyFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="hostImageCopy" />
  </struct>
  <struct name="PhysicalDeviceHostImageCopyPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceHostImageCopyPropertiesEXT">
      <argument name="copySrcLayoutCount_" type="uint32_t" default_raw="{}" />
      <argument name="pCopySrcLayouts_" type="vk::ImageLayout *" default_raw="{}" />
      <argument name="copyDstLayoutCount_" type="uint32_t" default_raw="{}" />
      <argument name="pCopyDstLayouts_" type="vk::ImageLayout *" default_raw="{}" />
      <argument name="optimalTilingLayoutUUID_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="identicalMemoryTypeRequirements_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceHostImageCopyPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceHostImageCopyPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceHostImageCopyPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceHostImageCopyPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceHostImageCopyPropertiesEXT">
      <argument name="copySrcLayouts_" type="const vk::ArrayProxyNoTemporaries&lt;vk::ImageLayout&gt; &amp;" />
      <argument name="copyDstLayouts_" type="const vk::ArrayProxyNoTemporaries&lt;vk::ImageLayout&gt; &amp;" default_raw="{}" />
      <argument name="optimalTilingLayoutUUID_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="identicalMemoryTypeRequirements_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceHostImageCopyPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceHostImageCopyPropertiesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setCopySrcLayoutCount">
      <argument name="copySrcLayoutCount_" type="uint32_t" />
    </method>
    <method name="setPCopySrcLayouts">
      <argument name="pCopySrcLayouts_" type="vk::ImageLayout *" />
    </method>
    <method name="setCopySrcLayouts">
      <argument name="copySrcLayouts_" type="const vk::ArrayProxyNoTemporaries&lt;vk::ImageLayout&gt; &amp;" />
    </method>
    <method name="setCopyDstLayoutCount">
      <argument name="copyDstLayoutCount_" type="uint32_t" />
    </method>
    <method name="setPCopyDstLayouts">
      <argument name="pCopyDstLayouts_" type="vk::ImageLayout *" />
    </method>
    <method name="setCopyDstLayouts">
      <argument name="copyDstLayouts_" type="const vk::ArrayProxyNoTemporaries&lt;vk::ImageLayout&gt; &amp;" />
    </method>
    <method name="setOptimalTilingLayoutUUID">
      <argument name="optimalTilingLayoutUUID_" type="std::array&lt;uint8_t, 16U&gt;" />
    </method>
    <method name="setIdenticalMemoryTypeRequirements">
      <argument name="identicalMemoryTypeRequirements_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceHostImageCopyPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceHostImageCopyPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceHostImageCopyPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceHostImageCopyPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="copySrcLayoutCount" />
    <field name="pCopySrcLayouts" />
    <field name="copyDstLayoutCount" />
    <field name="pCopyDstLayouts" />
    <field name="optimalTilingLayoutUUID" />
    <field name="identicalMemoryTypeRequirements" />
  </struct>
  <struct name="SubresourceHostMemcpySizeEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubresourceHostMemcpySizeEXT">
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubresourceHostMemcpySizeEXT">
      <argument name="rhs" type="const SubresourceHostMemcpySizeEXT &amp;" />
    </constructor>
    <constructor name="SubresourceHostMemcpySizeEXT">
      <argument name="rhs" type="const VkSubresourceHostMemcpySizeEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubresourceHostMemcpySizeEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubresourceHostMemcpySizeEXT &amp;" />
    </method>
    <conversion_function name="operator const VkSubresourceHostMemcpySizeEXT &amp;" />
    <conversion_function name="operator VkSubresourceHostMemcpySizeEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubresourceHostMemcpySizeEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubresourceHostMemcpySizeEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="size" />
  </struct>
  <struct name="MemoryMapInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryMapInfoKHR">
      <argument name="flags_" type="vk::MemoryMapFlags" default_raw="{}" />
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryMapInfoKHR">
      <argument name="rhs" type="const MemoryMapInfoKHR &amp;" />
    </constructor>
    <constructor name="MemoryMapInfoKHR">
      <argument name="rhs" type="const VkMemoryMapInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryMapInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryMapInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::MemoryMapFlags" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkMemoryMapInfoKHR &amp;" />
    <conversion_function name="operator VkMemoryMapInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryMapInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryMapInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="memory" />
    <field name="offset" />
    <field name="size" />
  </struct>
  <struct name="MemoryUnmapInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryUnmapInfoKHR">
      <argument name="flags_" type="vk::MemoryUnmapFlagsKHR" default_raw="{}" />
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryUnmapInfoKHR">
      <argument name="rhs" type="const MemoryUnmapInfoKHR &amp;" />
    </constructor>
    <constructor name="MemoryUnmapInfoKHR">
      <argument name="rhs" type="const VkMemoryUnmapInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryUnmapInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryUnmapInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::MemoryUnmapFlagsKHR" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <conversion_function name="operator const VkMemoryUnmapInfoKHR &amp;" />
    <conversion_function name="operator VkMemoryUnmapInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryUnmapInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryUnmapInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="memory" />
  </struct>
  <struct name="PhysicalDeviceShaderAtomicFloat2FeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderAtomicFloat2FeaturesEXT">
      <argument name="shaderBufferFloat16Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderBufferFloat16AtomicAdd_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderBufferFloat16AtomicMinMax_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderBufferFloat32AtomicMinMax_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderBufferFloat64AtomicMinMax_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSharedFloat16Atomics_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSharedFloat16AtomicAdd_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSharedFloat16AtomicMinMax_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSharedFloat32AtomicMinMax_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderSharedFloat64AtomicMinMax_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderImageFloat32AtomicMinMax_" type="vk::Bool32" default_raw="{}" />
      <argument name="sparseImageFloat32AtomicMinMax_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderAtomicFloat2FeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicFloat2FeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderAtomicFloat2FeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicFloat2FeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderBufferFloat16Atomics">
      <argument name="shaderBufferFloat16Atomics_" type="vk::Bool32" />
    </method>
    <method name="setShaderBufferFloat16AtomicAdd">
      <argument name="shaderBufferFloat16AtomicAdd_" type="vk::Bool32" />
    </method>
    <method name="setShaderBufferFloat16AtomicMinMax">
      <argument name="shaderBufferFloat16AtomicMinMax_" type="vk::Bool32" />
    </method>
    <method name="setShaderBufferFloat32AtomicMinMax">
      <argument name="shaderBufferFloat32AtomicMinMax_" type="vk::Bool32" />
    </method>
    <method name="setShaderBufferFloat64AtomicMinMax">
      <argument name="shaderBufferFloat64AtomicMinMax_" type="vk::Bool32" />
    </method>
    <method name="setShaderSharedFloat16Atomics">
      <argument name="shaderSharedFloat16Atomics_" type="vk::Bool32" />
    </method>
    <method name="setShaderSharedFloat16AtomicAdd">
      <argument name="shaderSharedFloat16AtomicAdd_" type="vk::Bool32" />
    </method>
    <method name="setShaderSharedFloat16AtomicMinMax">
      <argument name="shaderSharedFloat16AtomicMinMax_" type="vk::Bool32" />
    </method>
    <method name="setShaderSharedFloat32AtomicMinMax">
      <argument name="shaderSharedFloat32AtomicMinMax_" type="vk::Bool32" />
    </method>
    <method name="setShaderSharedFloat64AtomicMinMax">
      <argument name="shaderSharedFloat64AtomicMinMax_" type="vk::Bool32" />
    </method>
    <method name="setShaderImageFloat32AtomicMinMax">
      <argument name="shaderImageFloat32AtomicMinMax_" type="vk::Bool32" />
    </method>
    <method name="setSparseImageFloat32AtomicMinMax">
      <argument name="sparseImageFloat32AtomicMinMax_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicFloat2FeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderAtomicFloat2FeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderBufferFloat16Atomics" />
    <field name="shaderBufferFloat16AtomicAdd" />
    <field name="shaderBufferFloat16AtomicMinMax" />
    <field name="shaderBufferFloat32AtomicMinMax" />
    <field name="shaderBufferFloat64AtomicMinMax" />
    <field name="shaderSharedFloat16Atomics" />
    <field name="shaderSharedFloat16AtomicAdd" />
    <field name="shaderSharedFloat16AtomicMinMax" />
    <field name="shaderSharedFloat32AtomicMinMax" />
    <field name="shaderSharedFloat64AtomicMinMax" />
    <field name="shaderImageFloat32AtomicMinMax" />
    <field name="sparseImageFloat32AtomicMinMax" />
  </struct>
  <struct name="SurfacePresentModeCompatibilityEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SurfacePresentModeCompatibilityEXT">
      <argument name="presentModeCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPresentModes_" type="vk::PresentModeKHR *" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SurfacePresentModeCompatibilityEXT">
      <argument name="rhs" type="const SurfacePresentModeCompatibilityEXT &amp;" />
    </constructor>
    <constructor name="SurfacePresentModeCompatibilityEXT">
      <argument name="rhs" type="const VkSurfacePresentModeCompatibilityEXT &amp;" />
    </constructor>
    <constructor name="SurfacePresentModeCompatibilityEXT">
      <argument name="presentModes_" type="const vk::ArrayProxyNoTemporaries&lt;vk::PresentModeKHR&gt; &amp;" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SurfacePresentModeCompatibilityEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSurfacePresentModeCompatibilityEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPresentModeCount">
      <argument name="presentModeCount_" type="uint32_t" />
    </method>
    <method name="setPPresentModes">
      <argument name="pPresentModes_" type="vk::PresentModeKHR *" />
    </method>
    <method name="setPresentModes">
      <argument name="presentModes_" type="const vk::ArrayProxyNoTemporaries&lt;vk::PresentModeKHR&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSurfacePresentModeCompatibilityEXT &amp;" />
    <conversion_function name="operator VkSurfacePresentModeCompatibilityEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SurfacePresentModeCompatibilityEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SurfacePresentModeCompatibilityEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentModeCount" />
    <field name="pPresentModes" />
  </struct>
  <struct name="SurfacePresentModeEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SurfacePresentModeEXT">
      <argument name="presentMode_" type="vk::PresentModeKHR" default_raw="VULKAN_HPP_NAMESPACE::PresentModeKHR::eImmediate" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SurfacePresentModeEXT">
      <argument name="rhs" type="const SurfacePresentModeEXT &amp;" />
    </constructor>
    <constructor name="SurfacePresentModeEXT">
      <argument name="rhs" type="const VkSurfacePresentModeEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SurfacePresentModeEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSurfacePresentModeEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPresentMode">
      <argument name="presentMode_" type="vk::PresentModeKHR" />
    </method>
    <conversion_function name="operator const VkSurfacePresentModeEXT &amp;" />
    <conversion_function name="operator VkSurfacePresentModeEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SurfacePresentModeEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SurfacePresentModeEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentMode" />
  </struct>
  <struct name="SurfacePresentScalingCapabilitiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SurfacePresentScalingCapabilitiesEXT">
      <argument name="supportedPresentScaling_" type="vk::PresentScalingFlagsEXT" default_raw="{}" />
      <argument name="supportedPresentGravityX_" type="vk::PresentGravityFlagsEXT" default_raw="{}" />
      <argument name="supportedPresentGravityY_" type="vk::PresentGravityFlagsEXT" default_raw="{}" />
      <argument name="minScaledImageExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxScaledImageExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SurfacePresentScalingCapabilitiesEXT">
      <argument name="rhs" type="const SurfacePresentScalingCapabilitiesEXT &amp;" />
    </constructor>
    <constructor name="SurfacePresentScalingCapabilitiesEXT">
      <argument name="rhs" type="const VkSurfacePresentScalingCapabilitiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SurfacePresentScalingCapabilitiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSurfacePresentScalingCapabilitiesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSupportedPresentScaling">
      <argument name="supportedPresentScaling_" type="vk::PresentScalingFlagsEXT" />
    </method>
    <method name="setSupportedPresentGravityX">
      <argument name="supportedPresentGravityX_" type="vk::PresentGravityFlagsEXT" />
    </method>
    <method name="setSupportedPresentGravityY">
      <argument name="supportedPresentGravityY_" type="vk::PresentGravityFlagsEXT" />
    </method>
    <method name="setMinScaledImageExtent">
      <argument name="minScaledImageExtent_" type="const vk::Extent2D &amp;" />
    </method>
    <method name="setMaxScaledImageExtent">
      <argument name="maxScaledImageExtent_" type="const vk::Extent2D &amp;" />
    </method>
    <conversion_function name="operator const VkSurfacePresentScalingCapabilitiesEXT &amp;" />
    <conversion_function name="operator VkSurfacePresentScalingCapabilitiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SurfacePresentScalingCapabilitiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SurfacePresentScalingCapabilitiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="supportedPresentScaling" />
    <field name="supportedPresentGravityX" />
    <field name="supportedPresentGravityY" />
    <field name="minScaledImageExtent" />
    <field name="maxScaledImageExtent" />
  </struct>
  <struct name="PhysicalDeviceSwapchainMaintenance1FeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSwapchainMaintenance1FeaturesEXT">
      <argument name="swapchainMaintenance1_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSwapchainMaintenance1FeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceSwapchainMaintenance1FeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSwapchainMaintenance1FeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSwapchainMaintenance1FeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSwapchainMaintenance1">
      <argument name="swapchainMaintenance1_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSwapchainMaintenance1FeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSwapchainMaintenance1FeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="swapchainMaintenance1" />
  </struct>
  <struct name="ReleaseSwapchainImagesInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ReleaseSwapchainImagesInfoEXT">
      <argument name="swapchain_" type="vk::SwapchainKHR" default_raw="{}" />
      <argument name="imageIndexCount_" type="uint32_t" default_raw="{}" />
      <argument name="pImageIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ReleaseSwapchainImagesInfoEXT">
      <argument name="rhs" type="const ReleaseSwapchainImagesInfoEXT &amp;" />
    </constructor>
    <constructor name="ReleaseSwapchainImagesInfoEXT">
      <argument name="rhs" type="const VkReleaseSwapchainImagesInfoEXT &amp;" />
    </constructor>
    <constructor name="ReleaseSwapchainImagesInfoEXT">
      <argument name="swapchain_" type="vk::SwapchainKHR" />
      <argument name="imageIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ReleaseSwapchainImagesInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkReleaseSwapchainImagesInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSwapchain">
      <argument name="swapchain_" type="vk::SwapchainKHR" />
    </method>
    <method name="setImageIndexCount">
      <argument name="imageIndexCount_" type="uint32_t" />
    </method>
    <method name="setPImageIndices">
      <argument name="pImageIndices_" type="const uint32_t *" />
    </method>
    <method name="setImageIndices">
      <argument name="imageIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkReleaseSwapchainImagesInfoEXT &amp;" />
    <conversion_function name="operator VkReleaseSwapchainImagesInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ReleaseSwapchainImagesInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ReleaseSwapchainImagesInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="swapchain" />
    <field name="imageIndexCount" />
    <field name="pImageIndices" />
  </struct>
  <struct name="SwapchainPresentFenceInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SwapchainPresentFenceInfoEXT">
      <argument name="swapchainCount_" type="uint32_t" default_raw="{}" />
      <argument name="pFences_" type="const vk::Fence *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SwapchainPresentFenceInfoEXT">
      <argument name="rhs" type="const SwapchainPresentFenceInfoEXT &amp;" />
    </constructor>
    <constructor name="SwapchainPresentFenceInfoEXT">
      <argument name="rhs" type="const VkSwapchainPresentFenceInfoEXT &amp;" />
    </constructor>
    <constructor name="SwapchainPresentFenceInfoEXT">
      <argument name="fences_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Fence&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SwapchainPresentFenceInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSwapchainPresentFenceInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSwapchainCount">
      <argument name="swapchainCount_" type="uint32_t" />
    </method>
    <method name="setPFences">
      <argument name="pFences_" type="const vk::Fence *" />
    </method>
    <method name="setFences">
      <argument name="fences_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Fence&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSwapchainPresentFenceInfoEXT &amp;" />
    <conversion_function name="operator VkSwapchainPresentFenceInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SwapchainPresentFenceInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SwapchainPresentFenceInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="swapchainCount" />
    <field name="pFences" />
  </struct>
  <struct name="SwapchainPresentModeInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SwapchainPresentModeInfoEXT">
      <argument name="swapchainCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPresentModes_" type="const vk::PresentModeKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SwapchainPresentModeInfoEXT">
      <argument name="rhs" type="const SwapchainPresentModeInfoEXT &amp;" />
    </constructor>
    <constructor name="SwapchainPresentModeInfoEXT">
      <argument name="rhs" type="const VkSwapchainPresentModeInfoEXT &amp;" />
    </constructor>
    <constructor name="SwapchainPresentModeInfoEXT">
      <argument name="presentModes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PresentModeKHR&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SwapchainPresentModeInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSwapchainPresentModeInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSwapchainCount">
      <argument name="swapchainCount_" type="uint32_t" />
    </method>
    <method name="setPPresentModes">
      <argument name="pPresentModes_" type="const vk::PresentModeKHR *" />
    </method>
    <method name="setPresentModes">
      <argument name="presentModes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PresentModeKHR&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSwapchainPresentModeInfoEXT &amp;" />
    <conversion_function name="operator VkSwapchainPresentModeInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SwapchainPresentModeInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SwapchainPresentModeInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="swapchainCount" />
    <field name="pPresentModes" />
  </struct>
  <struct name="SwapchainPresentModesCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SwapchainPresentModesCreateInfoEXT">
      <argument name="presentModeCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPresentModes_" type="const vk::PresentModeKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SwapchainPresentModesCreateInfoEXT">
      <argument name="rhs" type="const SwapchainPresentModesCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="SwapchainPresentModesCreateInfoEXT">
      <argument name="rhs" type="const VkSwapchainPresentModesCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="SwapchainPresentModesCreateInfoEXT">
      <argument name="presentModes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PresentModeKHR&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SwapchainPresentModesCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSwapchainPresentModesCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPresentModeCount">
      <argument name="presentModeCount_" type="uint32_t" />
    </method>
    <method name="setPPresentModes">
      <argument name="pPresentModes_" type="const vk::PresentModeKHR *" />
    </method>
    <method name="setPresentModes">
      <argument name="presentModes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PresentModeKHR&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSwapchainPresentModesCreateInfoEXT &amp;" />
    <conversion_function name="operator VkSwapchainPresentModesCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SwapchainPresentModesCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SwapchainPresentModesCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentModeCount" />
    <field name="pPresentModes" />
  </struct>
  <struct name="SwapchainPresentScalingCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SwapchainPresentScalingCreateInfoEXT">
      <argument name="scalingBehavior_" type="vk::PresentScalingFlagsEXT" default_raw="{}" />
      <argument name="presentGravityX_" type="vk::PresentGravityFlagsEXT" default_raw="{}" />
      <argument name="presentGravityY_" type="vk::PresentGravityFlagsEXT" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SwapchainPresentScalingCreateInfoEXT">
      <argument name="rhs" type="const SwapchainPresentScalingCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="SwapchainPresentScalingCreateInfoEXT">
      <argument name="rhs" type="const VkSwapchainPresentScalingCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SwapchainPresentScalingCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSwapchainPresentScalingCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setScalingBehavior">
      <argument name="scalingBehavior_" type="vk::PresentScalingFlagsEXT" />
    </method>
    <method name="setPresentGravityX">
      <argument name="presentGravityX_" type="vk::PresentGravityFlagsEXT" />
    </method>
    <method name="setPresentGravityY">
      <argument name="presentGravityY_" type="vk::PresentGravityFlagsEXT" />
    </method>
    <conversion_function name="operator const VkSwapchainPresentScalingCreateInfoEXT &amp;" />
    <conversion_function name="operator VkSwapchainPresentScalingCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SwapchainPresentScalingCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SwapchainPresentScalingCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="scalingBehavior" />
    <field name="presentGravityX" />
    <field name="presentGravityY" />
  </struct>
  <struct name="BindIndexBufferIndirectCommandNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindIndexBufferIndirectCommandNV">
      <argument name="bufferAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="size_" type="uint32_t" default_raw="{}" />
      <argument name="indexType_" type="vk::IndexType" default_raw="VULKAN_HPP_NAMESPACE::IndexType::eUint16" />
    </constructor>
    <constructor name="BindIndexBufferIndirectCommandNV">
      <argument name="rhs" type="const BindIndexBufferIndirectCommandNV &amp;" />
    </constructor>
    <constructor name="BindIndexBufferIndirectCommandNV">
      <argument name="rhs" type="const VkBindIndexBufferIndirectCommandNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindIndexBufferIndirectCommandNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindIndexBufferIndirectCommandNV &amp;" />
    </method>
    <method name="setBufferAddress">
      <argument name="bufferAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setSize">
      <argument name="size_" type="uint32_t" />
    </method>
    <method name="setIndexType">
      <argument name="indexType_" type="vk::IndexType" />
    </method>
    <conversion_function name="operator const VkBindIndexBufferIndirectCommandNV &amp;" />
    <conversion_function name="operator VkBindIndexBufferIndirectCommandNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindIndexBufferIndirectCommandNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindIndexBufferIndirectCommandNV &amp;" />
    </method>
    <field name="bufferAddress" />
    <field name="size" />
    <field name="indexType" />
  </struct>
  <struct name="BindShaderGroupIndirectCommandNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindShaderGroupIndirectCommandNV">
      <argument name="groupIndex_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="BindShaderGroupIndirectCommandNV">
      <argument name="rhs" type="const BindShaderGroupIndirectCommandNV &amp;" />
    </constructor>
    <constructor name="BindShaderGroupIndirectCommandNV">
      <argument name="rhs" type="const VkBindShaderGroupIndirectCommandNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindShaderGroupIndirectCommandNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindShaderGroupIndirectCommandNV &amp;" />
    </method>
    <method name="setGroupIndex">
      <argument name="groupIndex_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkBindShaderGroupIndirectCommandNV &amp;" />
    <conversion_function name="operator VkBindShaderGroupIndirectCommandNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindShaderGroupIndirectCommandNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindShaderGroupIndirectCommandNV &amp;" />
    </method>
    <field name="groupIndex" />
  </struct>
  <struct name="BindVertexBufferIndirectCommandNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindVertexBufferIndirectCommandNV">
      <argument name="bufferAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="size_" type="uint32_t" default_raw="{}" />
      <argument name="stride_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="BindVertexBufferIndirectCommandNV">
      <argument name="rhs" type="const BindVertexBufferIndirectCommandNV &amp;" />
    </constructor>
    <constructor name="BindVertexBufferIndirectCommandNV">
      <argument name="rhs" type="const VkBindVertexBufferIndirectCommandNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindVertexBufferIndirectCommandNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindVertexBufferIndirectCommandNV &amp;" />
    </method>
    <method name="setBufferAddress">
      <argument name="bufferAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setSize">
      <argument name="size_" type="uint32_t" />
    </method>
    <method name="setStride">
      <argument name="stride_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkBindVertexBufferIndirectCommandNV &amp;" />
    <conversion_function name="operator VkBindVertexBufferIndirectCommandNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindVertexBufferIndirectCommandNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindVertexBufferIndirectCommandNV &amp;" />
    </method>
    <field name="bufferAddress" />
    <field name="size" />
    <field name="stride" />
  </struct>
  <struct name="GeneratedCommandsInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="GeneratedCommandsInfoNV">
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" default_raw="VULKAN_HPP_NAMESPACE::PipelineBindPoint::eGraphics" />
      <argument name="pipeline_" type="vk::Pipeline" default_raw="{}" />
      <argument name="indirectCommandsLayout_" type="vk::IndirectCommandsLayoutNV" default_raw="{}" />
      <argument name="streamCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStreams_" type="const vk::IndirectCommandsStreamNV *" default_raw="{}" />
      <argument name="sequencesCount_" type="uint32_t" default_raw="{}" />
      <argument name="preprocessBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="preprocessOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="preprocessSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="sequencesCountBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="sequencesCountOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="sequencesIndexBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="sequencesIndexOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="GeneratedCommandsInfoNV">
      <argument name="rhs" type="const GeneratedCommandsInfoNV &amp;" />
    </constructor>
    <constructor name="GeneratedCommandsInfoNV">
      <argument name="rhs" type="const VkGeneratedCommandsInfoNV &amp;" />
    </constructor>
    <constructor name="GeneratedCommandsInfoNV">
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" />
      <argument name="pipeline_" type="vk::Pipeline" />
      <argument name="indirectCommandsLayout_" type="vk::IndirectCommandsLayoutNV" />
      <argument name="streams_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::IndirectCommandsStreamNV&gt; &amp;" />
      <argument name="sequencesCount_" type="uint32_t" default_raw="{}" />
      <argument name="preprocessBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="preprocessOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="preprocessSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="sequencesCountBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="sequencesCountOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="sequencesIndexBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="sequencesIndexOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const GeneratedCommandsInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkGeneratedCommandsInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPipelineBindPoint">
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" />
    </method>
    <method name="setPipeline">
      <argument name="pipeline_" type="vk::Pipeline" />
    </method>
    <method name="setIndirectCommandsLayout">
      <argument name="indirectCommandsLayout_" type="vk::IndirectCommandsLayoutNV" />
    </method>
    <method name="setStreamCount">
      <argument name="streamCount_" type="uint32_t" />
    </method>
    <method name="setPStreams">
      <argument name="pStreams_" type="const vk::IndirectCommandsStreamNV *" />
    </method>
    <method name="setStreams">
      <argument name="streams_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::IndirectCommandsStreamNV&gt; &amp;" />
    </method>
    <method name="setSequencesCount">
      <argument name="sequencesCount_" type="uint32_t" />
    </method>
    <method name="setPreprocessBuffer">
      <argument name="preprocessBuffer_" type="vk::Buffer" />
    </method>
    <method name="setPreprocessOffset">
      <argument name="preprocessOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setPreprocessSize">
      <argument name="preprocessSize_" type="vk::DeviceSize" />
    </method>
    <method name="setSequencesCountBuffer">
      <argument name="sequencesCountBuffer_" type="vk::Buffer" />
    </method>
    <method name="setSequencesCountOffset">
      <argument name="sequencesCountOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setSequencesIndexBuffer">
      <argument name="sequencesIndexBuffer_" type="vk::Buffer" />
    </method>
    <method name="setSequencesIndexOffset">
      <argument name="sequencesIndexOffset_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkGeneratedCommandsInfoNV &amp;" />
    <conversion_function name="operator VkGeneratedCommandsInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const GeneratedCommandsInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const GeneratedCommandsInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipelineBindPoint" />
    <field name="pipeline" />
    <field name="indirectCommandsLayout" />
    <field name="streamCount" />
    <field name="pStreams" />
    <field name="sequencesCount" />
    <field name="preprocessBuffer" />
    <field name="preprocessOffset" />
    <field name="preprocessSize" />
    <field name="sequencesCountBuffer" />
    <field name="sequencesCountOffset" />
    <field name="sequencesIndexBuffer" />
    <field name="sequencesIndexOffset" />
  </struct>
  <struct name="GeneratedCommandsMemoryRequirementsInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="GeneratedCommandsMemoryRequirementsInfoNV">
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" default_raw="VULKAN_HPP_NAMESPACE::PipelineBindPoint::eGraphics" />
      <argument name="pipeline_" type="vk::Pipeline" default_raw="{}" />
      <argument name="indirectCommandsLayout_" type="vk::IndirectCommandsLayoutNV" default_raw="{}" />
      <argument name="maxSequencesCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="GeneratedCommandsMemoryRequirementsInfoNV">
      <argument name="rhs" type="const GeneratedCommandsMemoryRequirementsInfoNV &amp;" />
    </constructor>
    <constructor name="GeneratedCommandsMemoryRequirementsInfoNV">
      <argument name="rhs" type="const VkGeneratedCommandsMemoryRequirementsInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const GeneratedCommandsMemoryRequirementsInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkGeneratedCommandsMemoryRequirementsInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPipelineBindPoint">
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" />
    </method>
    <method name="setPipeline">
      <argument name="pipeline_" type="vk::Pipeline" />
    </method>
    <method name="setIndirectCommandsLayout">
      <argument name="indirectCommandsLayout_" type="vk::IndirectCommandsLayoutNV" />
    </method>
    <method name="setMaxSequencesCount">
      <argument name="maxSequencesCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkGeneratedCommandsMemoryRequirementsInfoNV &amp;" />
    <conversion_function name="operator VkGeneratedCommandsMemoryRequirementsInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const GeneratedCommandsMemoryRequirementsInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const GeneratedCommandsMemoryRequirementsInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipelineBindPoint" />
    <field name="pipeline" />
    <field name="indirectCommandsLayout" />
    <field name="maxSequencesCount" />
  </struct>
  <struct name="GraphicsPipelineShaderGroupsCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="GraphicsPipelineShaderGroupsCreateInfoNV">
      <argument name="groupCount_" type="uint32_t" default_raw="{}" />
      <argument name="pGroups_" type="const vk::GraphicsShaderGroupCreateInfoNV *" default_raw="{}" />
      <argument name="pipelineCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPipelines_" type="const vk::Pipeline *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="GraphicsPipelineShaderGroupsCreateInfoNV">
      <argument name="rhs" type="const GraphicsPipelineShaderGroupsCreateInfoNV &amp;" />
    </constructor>
    <constructor name="GraphicsPipelineShaderGroupsCreateInfoNV">
      <argument name="rhs" type="const VkGraphicsPipelineShaderGroupsCreateInfoNV &amp;" />
    </constructor>
    <constructor name="GraphicsPipelineShaderGroupsCreateInfoNV">
      <argument name="groups_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::GraphicsShaderGroupCreateInfoNV&gt; &amp;" />
      <argument name="pipelines_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Pipeline&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const GraphicsPipelineShaderGroupsCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkGraphicsPipelineShaderGroupsCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setGroupCount">
      <argument name="groupCount_" type="uint32_t" />
    </method>
    <method name="setPGroups">
      <argument name="pGroups_" type="const vk::GraphicsShaderGroupCreateInfoNV *" />
    </method>
    <method name="setGroups">
      <argument name="groups_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::GraphicsShaderGroupCreateInfoNV&gt; &amp;" />
    </method>
    <method name="setPipelineCount">
      <argument name="pipelineCount_" type="uint32_t" />
    </method>
    <method name="setPPipelines">
      <argument name="pPipelines_" type="const vk::Pipeline *" />
    </method>
    <method name="setPipelines">
      <argument name="pipelines_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Pipeline&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkGraphicsPipelineShaderGroupsCreateInfoNV &amp;" />
    <conversion_function name="operator VkGraphicsPipelineShaderGroupsCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const GraphicsPipelineShaderGroupsCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const GraphicsPipelineShaderGroupsCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="groupCount" />
    <field name="pGroups" />
    <field name="pipelineCount" />
    <field name="pPipelines" />
  </struct>
  <struct name="GraphicsShaderGroupCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="GraphicsShaderGroupCreateInfoNV">
      <argument name="stageCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStages_" type="const vk::PipelineShaderStageCreateInfo *" default_raw="{}" />
      <argument name="pVertexInputState_" type="const vk::PipelineVertexInputStateCreateInfo *" default_raw="{}" />
      <argument name="pTessellationState_" type="const vk::PipelineTessellationStateCreateInfo *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="GraphicsShaderGroupCreateInfoNV">
      <argument name="rhs" type="const GraphicsShaderGroupCreateInfoNV &amp;" />
    </constructor>
    <constructor name="GraphicsShaderGroupCreateInfoNV">
      <argument name="rhs" type="const VkGraphicsShaderGroupCreateInfoNV &amp;" />
    </constructor>
    <constructor name="GraphicsShaderGroupCreateInfoNV">
      <argument name="stages_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineShaderStageCreateInfo&gt; &amp;" />
      <argument name="pVertexInputState_" type="const vk::PipelineVertexInputStateCreateInfo *" default_raw="{}" />
      <argument name="pTessellationState_" type="const vk::PipelineTessellationStateCreateInfo *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const GraphicsShaderGroupCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkGraphicsShaderGroupCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStageCount">
      <argument name="stageCount_" type="uint32_t" />
    </method>
    <method name="setPStages">
      <argument name="pStages_" type="const vk::PipelineShaderStageCreateInfo *" />
    </method>
    <method name="setStages">
      <argument name="stages_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PipelineShaderStageCreateInfo&gt; &amp;" />
    </method>
    <method name="setPVertexInputState">
      <argument name="pVertexInputState_" type="const vk::PipelineVertexInputStateCreateInfo *" />
    </method>
    <method name="setPTessellationState">
      <argument name="pTessellationState_" type="const vk::PipelineTessellationStateCreateInfo *" />
    </method>
    <conversion_function name="operator const VkGraphicsShaderGroupCreateInfoNV &amp;" />
    <conversion_function name="operator VkGraphicsShaderGroupCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const GraphicsShaderGroupCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const GraphicsShaderGroupCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stageCount" />
    <field name="pStages" />
    <field name="pVertexInputState" />
    <field name="pTessellationState" />
  </struct>
  <struct name="IndirectCommandsLayoutCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="IndirectCommandsLayoutCreateInfoNV">
      <argument name="flags_" type="vk::IndirectCommandsLayoutUsageFlagsNV" default_raw="{}" />
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" default_raw="VULKAN_HPP_NAMESPACE::PipelineBindPoint::eGraphics" />
      <argument name="tokenCount_" type="uint32_t" default_raw="{}" />
      <argument name="pTokens_" type="const vk::IndirectCommandsLayoutTokenNV *" default_raw="{}" />
      <argument name="streamCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStreamStrides_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="IndirectCommandsLayoutCreateInfoNV">
      <argument name="rhs" type="const IndirectCommandsLayoutCreateInfoNV &amp;" />
    </constructor>
    <constructor name="IndirectCommandsLayoutCreateInfoNV">
      <argument name="rhs" type="const VkIndirectCommandsLayoutCreateInfoNV &amp;" />
    </constructor>
    <constructor name="IndirectCommandsLayoutCreateInfoNV">
      <argument name="flags_" type="vk::IndirectCommandsLayoutUsageFlagsNV" />
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" />
      <argument name="tokens_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::IndirectCommandsLayoutTokenNV&gt; &amp;" />
      <argument name="streamStrides_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const IndirectCommandsLayoutCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkIndirectCommandsLayoutCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::IndirectCommandsLayoutUsageFlagsNV" />
    </method>
    <method name="setPipelineBindPoint">
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" />
    </method>
    <method name="setTokenCount">
      <argument name="tokenCount_" type="uint32_t" />
    </method>
    <method name="setPTokens">
      <argument name="pTokens_" type="const vk::IndirectCommandsLayoutTokenNV *" />
    </method>
    <method name="setTokens">
      <argument name="tokens_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::IndirectCommandsLayoutTokenNV&gt; &amp;" />
    </method>
    <method name="setStreamCount">
      <argument name="streamCount_" type="uint32_t" />
    </method>
    <method name="setPStreamStrides">
      <argument name="pStreamStrides_" type="const uint32_t *" />
    </method>
    <method name="setStreamStrides">
      <argument name="streamStrides_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkIndirectCommandsLayoutCreateInfoNV &amp;" />
    <conversion_function name="operator VkIndirectCommandsLayoutCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const IndirectCommandsLayoutCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const IndirectCommandsLayoutCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="pipelineBindPoint" />
    <field name="tokenCount" />
    <field name="pTokens" />
    <field name="streamCount" />
    <field name="pStreamStrides" />
  </struct>
  <struct name="IndirectCommandsLayoutTokenNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="IndirectCommandsLayoutTokenNV">
      <argument name="tokenType_" type="vk::IndirectCommandsTokenTypeNV" default_raw="VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV::eShaderGroup" />
      <argument name="stream_" type="uint32_t" default_raw="{}" />
      <argument name="offset_" type="uint32_t" default_raw="{}" />
      <argument name="vertexBindingUnit_" type="uint32_t" default_raw="{}" />
      <argument name="vertexDynamicStride_" type="vk::Bool32" default_raw="{}" />
      <argument name="pushconstantPipelineLayout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="pushconstantShaderStageFlags_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="pushconstantOffset_" type="uint32_t" default_raw="{}" />
      <argument name="pushconstantSize_" type="uint32_t" default_raw="{}" />
      <argument name="indirectStateFlags_" type="vk::IndirectStateFlagsNV" default_raw="{}" />
      <argument name="indexTypeCount_" type="uint32_t" default_raw="{}" />
      <argument name="pIndexTypes_" type="const vk::IndexType *" default_raw="{}" />
      <argument name="pIndexTypeValues_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="IndirectCommandsLayoutTokenNV">
      <argument name="rhs" type="const IndirectCommandsLayoutTokenNV &amp;" />
    </constructor>
    <constructor name="IndirectCommandsLayoutTokenNV">
      <argument name="rhs" type="const VkIndirectCommandsLayoutTokenNV &amp;" />
    </constructor>
    <constructor name="IndirectCommandsLayoutTokenNV">
      <argument name="tokenType_" type="vk::IndirectCommandsTokenTypeNV" />
      <argument name="stream_" type="uint32_t" />
      <argument name="offset_" type="uint32_t" />
      <argument name="vertexBindingUnit_" type="uint32_t" />
      <argument name="vertexDynamicStride_" type="vk::Bool32" />
      <argument name="pushconstantPipelineLayout_" type="vk::PipelineLayout" />
      <argument name="pushconstantShaderStageFlags_" type="vk::ShaderStageFlags" />
      <argument name="pushconstantOffset_" type="uint32_t" />
      <argument name="pushconstantSize_" type="uint32_t" />
      <argument name="indirectStateFlags_" type="vk::IndirectStateFlagsNV" />
      <argument name="indexTypes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::IndexType&gt; &amp;" />
      <argument name="indexTypeValues_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const IndirectCommandsLayoutTokenNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkIndirectCommandsLayoutTokenNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setTokenType">
      <argument name="tokenType_" type="vk::IndirectCommandsTokenTypeNV" />
    </method>
    <method name="setStream">
      <argument name="stream_" type="uint32_t" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="uint32_t" />
    </method>
    <method name="setVertexBindingUnit">
      <argument name="vertexBindingUnit_" type="uint32_t" />
    </method>
    <method name="setVertexDynamicStride">
      <argument name="vertexDynamicStride_" type="vk::Bool32" />
    </method>
    <method name="setPushconstantPipelineLayout">
      <argument name="pushconstantPipelineLayout_" type="vk::PipelineLayout" />
    </method>
    <method name="setPushconstantShaderStageFlags">
      <argument name="pushconstantShaderStageFlags_" type="vk::ShaderStageFlags" />
    </method>
    <method name="setPushconstantOffset">
      <argument name="pushconstantOffset_" type="uint32_t" />
    </method>
    <method name="setPushconstantSize">
      <argument name="pushconstantSize_" type="uint32_t" />
    </method>
    <method name="setIndirectStateFlags">
      <argument name="indirectStateFlags_" type="vk::IndirectStateFlagsNV" />
    </method>
    <method name="setIndexTypeCount">
      <argument name="indexTypeCount_" type="uint32_t" />
    </method>
    <method name="setPIndexTypes">
      <argument name="pIndexTypes_" type="const vk::IndexType *" />
    </method>
    <method name="setIndexTypes">
      <argument name="indexTypes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::IndexType&gt; &amp;" />
    </method>
    <method name="setPIndexTypeValues">
      <argument name="pIndexTypeValues_" type="const uint32_t *" />
    </method>
    <method name="setIndexTypeValues">
      <argument name="indexTypeValues_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkIndirectCommandsLayoutTokenNV &amp;" />
    <conversion_function name="operator VkIndirectCommandsLayoutTokenNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const IndirectCommandsLayoutTokenNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const IndirectCommandsLayoutTokenNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="tokenType" />
    <field name="stream" />
    <field name="offset" />
    <field name="vertexBindingUnit" />
    <field name="vertexDynamicStride" />
    <field name="pushconstantPipelineLayout" />
    <field name="pushconstantShaderStageFlags" />
    <field name="pushconstantOffset" />
    <field name="pushconstantSize" />
    <field name="indirectStateFlags" />
    <field name="indexTypeCount" />
    <field name="pIndexTypes" />
    <field name="pIndexTypeValues" />
  </struct>
  <struct name="IndirectCommandsStreamNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="IndirectCommandsStreamNV">
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
    </constructor>
    <constructor name="IndirectCommandsStreamNV">
      <argument name="rhs" type="const IndirectCommandsStreamNV &amp;" />
    </constructor>
    <constructor name="IndirectCommandsStreamNV">
      <argument name="rhs" type="const VkIndirectCommandsStreamNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const IndirectCommandsStreamNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkIndirectCommandsStreamNV &amp;" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkIndirectCommandsStreamNV &amp;" />
    <conversion_function name="operator VkIndirectCommandsStreamNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const IndirectCommandsStreamNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const IndirectCommandsStreamNV &amp;" />
    </method>
    <field name="buffer" />
    <field name="offset" />
  </struct>
  <struct name="PhysicalDeviceDeviceGeneratedCommandsFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDeviceGeneratedCommandsFeaturesNV">
      <argument name="deviceGeneratedCommands_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDeviceGeneratedCommandsFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDeviceGeneratedCommandsFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDeviceGeneratedCommands">
      <argument name="deviceGeneratedCommands_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceGeneratedCommands" />
  </struct>
  <struct name="PhysicalDeviceDeviceGeneratedCommandsPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDeviceGeneratedCommandsPropertiesNV">
      <argument name="maxGraphicsShaderGroupCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxIndirectSequenceCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxIndirectCommandsTokenCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxIndirectCommandsStreamCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxIndirectCommandsTokenOffset_" type="uint32_t" default_raw="{}" />
      <argument name="maxIndirectCommandsStreamStride_" type="uint32_t" default_raw="{}" />
      <argument name="minSequencesCountBufferOffsetAlignment_" type="uint32_t" default_raw="{}" />
      <argument name="minSequencesIndexBufferOffsetAlignment_" type="uint32_t" default_raw="{}" />
      <argument name="minIndirectCommandsBufferOffsetAlignment_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDeviceGeneratedCommandsPropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsPropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDeviceGeneratedCommandsPropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxGraphicsShaderGroupCount" />
    <field name="maxIndirectSequenceCount" />
    <field name="maxIndirectCommandsTokenCount" />
    <field name="maxIndirectCommandsStreamCount" />
    <field name="maxIndirectCommandsTokenOffset" />
    <field name="maxIndirectCommandsStreamStride" />
    <field name="minSequencesCountBufferOffsetAlignment" />
    <field name="minSequencesIndexBufferOffsetAlignment" />
    <field name="minIndirectCommandsBufferOffsetAlignment" />
  </struct>
  <struct name="SetStateFlagsIndirectCommandNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SetStateFlagsIndirectCommandNV">
      <argument name="data_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="SetStateFlagsIndirectCommandNV">
      <argument name="rhs" type="const SetStateFlagsIndirectCommandNV &amp;" />
    </constructor>
    <constructor name="SetStateFlagsIndirectCommandNV">
      <argument name="rhs" type="const VkSetStateFlagsIndirectCommandNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SetStateFlagsIndirectCommandNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSetStateFlagsIndirectCommandNV &amp;" />
    </method>
    <method name="setData">
      <argument name="data_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkSetStateFlagsIndirectCommandNV &amp;" />
    <conversion_function name="operator VkSetStateFlagsIndirectCommandNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SetStateFlagsIndirectCommandNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SetStateFlagsIndirectCommandNV &amp;" />
    </method>
    <field name="data" />
  </struct>
  <struct name="CommandBufferInheritanceViewportScissorInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CommandBufferInheritanceViewportScissorInfoNV">
      <argument name="viewportScissor2D_" type="vk::Bool32" default_raw="{}" />
      <argument name="viewportDepthCount_" type="uint32_t" default_raw="{}" />
      <argument name="pViewportDepths_" type="const vk::Viewport *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CommandBufferInheritanceViewportScissorInfoNV">
      <argument name="rhs" type="const CommandBufferInheritanceViewportScissorInfoNV &amp;" />
    </constructor>
    <constructor name="CommandBufferInheritanceViewportScissorInfoNV">
      <argument name="rhs" type="const VkCommandBufferInheritanceViewportScissorInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CommandBufferInheritanceViewportScissorInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCommandBufferInheritanceViewportScissorInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setViewportScissor2D">
      <argument name="viewportScissor2D_" type="vk::Bool32" />
    </method>
    <method name="setViewportDepthCount">
      <argument name="viewportDepthCount_" type="uint32_t" />
    </method>
    <method name="setPViewportDepths">
      <argument name="pViewportDepths_" type="const vk::Viewport *" />
    </method>
    <conversion_function name="operator const VkCommandBufferInheritanceViewportScissorInfoNV &amp;" />
    <conversion_function name="operator VkCommandBufferInheritanceViewportScissorInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CommandBufferInheritanceViewportScissorInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CommandBufferInheritanceViewportScissorInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="viewportScissor2D" />
    <field name="viewportDepthCount" />
    <field name="pViewportDepths" />
  </struct>
  <struct name="PhysicalDeviceInheritedViewportScissorFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceInheritedViewportScissorFeaturesNV">
      <argument name="inheritedViewportScissor2D_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceInheritedViewportScissorFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceInheritedViewportScissorFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceInheritedViewportScissorFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceInheritedViewportScissorFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceInheritedViewportScissorFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceInheritedViewportScissorFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setInheritedViewportScissor2D">
      <argument name="inheritedViewportScissor2D_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceInheritedViewportScissorFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceInheritedViewportScissorFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceInheritedViewportScissorFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceInheritedViewportScissorFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="inheritedViewportScissor2D" />
  </struct>
  <struct name="PhysicalDeviceTexelBufferAlignmentFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceTexelBufferAlignmentFeaturesEXT">
      <argument name="texelBufferAlignment_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceTexelBufferAlignmentFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceTexelBufferAlignmentFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceTexelBufferAlignmentFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceTexelBufferAlignmentFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTexelBufferAlignment">
      <argument name="texelBufferAlignment_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceTexelBufferAlignmentFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceTexelBufferAlignmentFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="texelBufferAlignment" />
  </struct>
  <struct name="CommandBufferInheritanceRenderPassTransformInfoQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CommandBufferInheritanceRenderPassTransformInfoQCOM">
      <argument name="transform_" type="vk::SurfaceTransformFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::SurfaceTransformFlagBitsKHR::eIdentity" />
      <argument name="renderArea_" type="vk::Rect2D" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CommandBufferInheritanceRenderPassTransformInfoQCOM">
      <argument name="rhs" type="const CommandBufferInheritanceRenderPassTransformInfoQCOM &amp;" />
    </constructor>
    <constructor name="CommandBufferInheritanceRenderPassTransformInfoQCOM">
      <argument name="rhs" type="const VkCommandBufferInheritanceRenderPassTransformInfoQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CommandBufferInheritanceRenderPassTransformInfoQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCommandBufferInheritanceRenderPassTransformInfoQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTransform">
      <argument name="transform_" type="vk::SurfaceTransformFlagBitsKHR" />
    </method>
    <method name="setRenderArea">
      <argument name="renderArea_" type="const vk::Rect2D &amp;" />
    </method>
    <conversion_function name="operator const VkCommandBufferInheritanceRenderPassTransformInfoQCOM &amp;" />
    <conversion_function name="operator VkCommandBufferInheritanceRenderPassTransformInfoQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CommandBufferInheritanceRenderPassTransformInfoQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CommandBufferInheritanceRenderPassTransformInfoQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="transform" />
    <field name="renderArea" />
  </struct>
  <struct name="RenderPassTransformBeginInfoQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassTransformBeginInfoQCOM">
      <argument name="transform_" type="vk::SurfaceTransformFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::SurfaceTransformFlagBitsKHR::eIdentity" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassTransformBeginInfoQCOM">
      <argument name="rhs" type="const RenderPassTransformBeginInfoQCOM &amp;" />
    </constructor>
    <constructor name="RenderPassTransformBeginInfoQCOM">
      <argument name="rhs" type="const VkRenderPassTransformBeginInfoQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassTransformBeginInfoQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassTransformBeginInfoQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTransform">
      <argument name="transform_" type="vk::SurfaceTransformFlagBitsKHR" />
    </method>
    <conversion_function name="operator const VkRenderPassTransformBeginInfoQCOM &amp;" />
    <conversion_function name="operator VkRenderPassTransformBeginInfoQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassTransformBeginInfoQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassTransformBeginInfoQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="transform" />
  </struct>
  <struct name="DepthBiasInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DepthBiasInfoEXT">
      <argument name="depthBiasConstantFactor_" type="float" default_raw="{}" />
      <argument name="depthBiasClamp_" type="float" default_raw="{}" />
      <argument name="depthBiasSlopeFactor_" type="float" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DepthBiasInfoEXT">
      <argument name="rhs" type="const DepthBiasInfoEXT &amp;" />
    </constructor>
    <constructor name="DepthBiasInfoEXT">
      <argument name="rhs" type="const VkDepthBiasInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DepthBiasInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDepthBiasInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDepthBiasConstantFactor">
      <argument name="depthBiasConstantFactor_" type="float" />
    </method>
    <method name="setDepthBiasClamp">
      <argument name="depthBiasClamp_" type="float" />
    </method>
    <method name="setDepthBiasSlopeFactor">
      <argument name="depthBiasSlopeFactor_" type="float" />
    </method>
    <conversion_function name="operator const VkDepthBiasInfoEXT &amp;" />
    <conversion_function name="operator VkDepthBiasInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DepthBiasInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DepthBiasInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="depthBiasConstantFactor" />
    <field name="depthBiasClamp" />
    <field name="depthBiasSlopeFactor" />
  </struct>
  <struct name="DepthBiasRepresentationInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DepthBiasRepresentationInfoEXT">
      <argument name="depthBiasRepresentation_" type="vk::DepthBiasRepresentationEXT" default_raw="VULKAN_HPP_NAMESPACE::DepthBiasRepresentationEXT::eLeastRepresentableValueFormat" />
      <argument name="depthBiasExact_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DepthBiasRepresentationInfoEXT">
      <argument name="rhs" type="const DepthBiasRepresentationInfoEXT &amp;" />
    </constructor>
    <constructor name="DepthBiasRepresentationInfoEXT">
      <argument name="rhs" type="const VkDepthBiasRepresentationInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DepthBiasRepresentationInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDepthBiasRepresentationInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDepthBiasRepresentation">
      <argument name="depthBiasRepresentation_" type="vk::DepthBiasRepresentationEXT" />
    </method>
    <method name="setDepthBiasExact">
      <argument name="depthBiasExact_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkDepthBiasRepresentationInfoEXT &amp;" />
    <conversion_function name="operator VkDepthBiasRepresentationInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DepthBiasRepresentationInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DepthBiasRepresentationInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="depthBiasRepresentation" />
    <field name="depthBiasExact" />
  </struct>
  <struct name="PhysicalDeviceDepthBiasControlFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDepthBiasControlFeaturesEXT">
      <argument name="depthBiasControl_" type="vk::Bool32" default_raw="{}" />
      <argument name="leastRepresentableValueForceUnormRepresentation_" type="vk::Bool32" default_raw="{}" />
      <argument name="floatRepresentation_" type="vk::Bool32" default_raw="{}" />
      <argument name="depthBiasExact_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDepthBiasControlFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceDepthBiasControlFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDepthBiasControlFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceDepthBiasControlFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDepthBiasControlFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDepthBiasControlFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDepthBiasControl">
      <argument name="depthBiasControl_" type="vk::Bool32" />
    </method>
    <method name="setLeastRepresentableValueForceUnormRepresentation">
      <argument name="leastRepresentableValueForceUnormRepresentation_" type="vk::Bool32" />
    </method>
    <method name="setFloatRepresentation">
      <argument name="floatRepresentation_" type="vk::Bool32" />
    </method>
    <method name="setDepthBiasExact">
      <argument name="depthBiasExact_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDepthBiasControlFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDepthBiasControlFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDepthBiasControlFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDepthBiasControlFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="depthBiasControl" />
    <field name="leastRepresentableValueForceUnormRepresentation" />
    <field name="floatRepresentation" />
    <field name="depthBiasExact" />
  </struct>
  <struct name="DeviceDeviceMemoryReportCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceDeviceMemoryReportCreateInfoEXT">
      <argument name="flags_" type="vk::DeviceMemoryReportFlagsEXT" default_raw="{}" />
      <argument name="pfnUserCallback_" type="PFN_vkDeviceMemoryReportCallbackEXT" default_raw="{}" />
      <argument name="pUserData_" type="void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceDeviceMemoryReportCreateInfoEXT">
      <argument name="rhs" type="const DeviceDeviceMemoryReportCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="DeviceDeviceMemoryReportCreateInfoEXT">
      <argument name="rhs" type="const VkDeviceDeviceMemoryReportCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceDeviceMemoryReportCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceDeviceMemoryReportCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DeviceMemoryReportFlagsEXT" />
    </method>
    <method name="setPfnUserCallback">
      <argument name="pfnUserCallback_" type="PFN_vkDeviceMemoryReportCallbackEXT" />
    </method>
    <method name="setPUserData">
      <argument name="pUserData_" type="void *" />
    </method>
    <conversion_function name="operator const VkDeviceDeviceMemoryReportCreateInfoEXT &amp;" />
    <conversion_function name="operator VkDeviceDeviceMemoryReportCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceDeviceMemoryReportCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceDeviceMemoryReportCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="pfnUserCallback" />
    <field name="pUserData" />
  </struct>
  <struct name="DeviceMemoryReportCallbackDataEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceMemoryReportCallbackDataEXT">
      <argument name="flags_" type="vk::DeviceMemoryReportFlagsEXT" default_raw="{}" />
      <argument name="type_" type="vk::DeviceMemoryReportEventTypeEXT" default_raw="VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT::eAllocate" />
      <argument name="memoryObjectId_" type="uint64_t" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="objectType_" type="vk::ObjectType" default_raw="VULKAN_HPP_NAMESPACE::ObjectType::eUnknown" />
      <argument name="objectHandle_" type="uint64_t" default_raw="{}" />
      <argument name="heapIndex_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceMemoryReportCallbackDataEXT">
      <argument name="rhs" type="const DeviceMemoryReportCallbackDataEXT &amp;" />
    </constructor>
    <constructor name="DeviceMemoryReportCallbackDataEXT">
      <argument name="rhs" type="const VkDeviceMemoryReportCallbackDataEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceMemoryReportCallbackDataEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceMemoryReportCallbackDataEXT &amp;" />
    </method>
    <conversion_function name="operator const VkDeviceMemoryReportCallbackDataEXT &amp;" />
    <conversion_function name="operator VkDeviceMemoryReportCallbackDataEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceMemoryReportCallbackDataEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceMemoryReportCallbackDataEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="type" />
    <field name="memoryObjectId" />
    <field name="size" />
    <field name="objectType" />
    <field name="objectHandle" />
    <field name="heapIndex" />
  </struct>
  <struct name="PhysicalDeviceDeviceMemoryReportFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDeviceMemoryReportFeaturesEXT">
      <argument name="deviceMemoryReport_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDeviceMemoryReportFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceDeviceMemoryReportFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDeviceMemoryReportFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDeviceMemoryReportFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDeviceMemoryReport">
      <argument name="deviceMemoryReport_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDeviceMemoryReportFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDeviceMemoryReportFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDeviceMemoryReportFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceMemoryReport" />
  </struct>
  <struct name="PhysicalDeviceRobustness2FeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRobustness2FeaturesEXT">
      <argument name="robustBufferAccess2_" type="vk::Bool32" default_raw="{}" />
      <argument name="robustImageAccess2_" type="vk::Bool32" default_raw="{}" />
      <argument name="nullDescriptor_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRobustness2FeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceRobustness2FeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRobustness2FeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceRobustness2FeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRobustness2FeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRobustness2FeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRobustBufferAccess2">
      <argument name="robustBufferAccess2_" type="vk::Bool32" />
    </method>
    <method name="setRobustImageAccess2">
      <argument name="robustImageAccess2_" type="vk::Bool32" />
    </method>
    <method name="setNullDescriptor">
      <argument name="nullDescriptor_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRobustness2FeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRobustness2FeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRobustness2FeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRobustness2FeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="robustBufferAccess2" />
    <field name="robustImageAccess2" />
    <field name="nullDescriptor" />
  </struct>
  <struct name="PhysicalDeviceRobustness2PropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRobustness2PropertiesEXT">
      <argument name="robustStorageBufferAccessSizeAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="robustUniformBufferAccessSizeAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRobustness2PropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceRobustness2PropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRobustness2PropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceRobustness2PropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRobustness2PropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRobustness2PropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRobustness2PropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRobustness2PropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRobustness2PropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRobustness2PropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="robustStorageBufferAccessSizeAlignment" />
    <field name="robustUniformBufferAccessSizeAlignment" />
  </struct>
  <struct name="PhysicalDeviceCustomBorderColorFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCustomBorderColorFeaturesEXT">
      <argument name="customBorderColors_" type="vk::Bool32" default_raw="{}" />
      <argument name="customBorderColorWithoutFormat_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCustomBorderColorFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceCustomBorderColorFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCustomBorderColorFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceCustomBorderColorFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCustomBorderColorFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCustomBorderColorFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setCustomBorderColors">
      <argument name="customBorderColors_" type="vk::Bool32" />
    </method>
    <method name="setCustomBorderColorWithoutFormat">
      <argument name="customBorderColorWithoutFormat_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCustomBorderColorFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCustomBorderColorFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCustomBorderColorFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCustomBorderColorFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="customBorderColors" />
    <field name="customBorderColorWithoutFormat" />
  </struct>
  <struct name="PhysicalDeviceCustomBorderColorPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCustomBorderColorPropertiesEXT">
      <argument name="maxCustomBorderColorSamplers_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCustomBorderColorPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceCustomBorderColorPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCustomBorderColorPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceCustomBorderColorPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCustomBorderColorPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCustomBorderColorPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCustomBorderColorPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCustomBorderColorPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCustomBorderColorPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCustomBorderColorPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxCustomBorderColorSamplers" />
  </struct>
  <struct name="SamplerCustomBorderColorCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SamplerCustomBorderColorCreateInfoEXT">
      <argument name="customBorderColor_" type="vk::ClearColorValue" default_raw="{}" />
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SamplerCustomBorderColorCreateInfoEXT">
      <argument name="rhs" type="const SamplerCustomBorderColorCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="SamplerCustomBorderColorCreateInfoEXT">
      <argument name="rhs" type="const VkSamplerCustomBorderColorCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SamplerCustomBorderColorCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSamplerCustomBorderColorCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setCustomBorderColor">
      <argument name="customBorderColor_" type="const vk::ClearColorValue &amp;" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <conversion_function name="operator const VkSamplerCustomBorderColorCreateInfoEXT &amp;" />
    <conversion_function name="operator VkSamplerCustomBorderColorCreateInfoEXT &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="customBorderColor" />
    <field name="format" />
  </struct>
  <struct name="PipelineLibraryCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineLibraryCreateInfoKHR">
      <argument name="libraryCount_" type="uint32_t" default_raw="{}" />
      <argument name="pLibraries_" type="const vk::Pipeline *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineLibraryCreateInfoKHR">
      <argument name="rhs" type="const PipelineLibraryCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="PipelineLibraryCreateInfoKHR">
      <argument name="rhs" type="const VkPipelineLibraryCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="PipelineLibraryCreateInfoKHR">
      <argument name="libraries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Pipeline&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineLibraryCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineLibraryCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setLibraryCount">
      <argument name="libraryCount_" type="uint32_t" />
    </method>
    <method name="setPLibraries">
      <argument name="pLibraries_" type="const vk::Pipeline *" />
    </method>
    <method name="setLibraries">
      <argument name="libraries_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Pipeline&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineLibraryCreateInfoKHR &amp;" />
    <conversion_function name="operator VkPipelineLibraryCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineLibraryCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineLibraryCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="libraryCount" />
    <field name="pLibraries" />
  </struct>
  <struct name="PhysicalDevicePresentBarrierFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePresentBarrierFeaturesNV">
      <argument name="presentBarrier_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePresentBarrierFeaturesNV">
      <argument name="rhs" type="const PhysicalDevicePresentBarrierFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePresentBarrierFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDevicePresentBarrierFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePresentBarrierFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePresentBarrierFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPresentBarrier">
      <argument name="presentBarrier_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePresentBarrierFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDevicePresentBarrierFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePresentBarrierFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePresentBarrierFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentBarrier" />
  </struct>
  <struct name="SurfaceCapabilitiesPresentBarrierNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SurfaceCapabilitiesPresentBarrierNV">
      <argument name="presentBarrierSupported_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SurfaceCapabilitiesPresentBarrierNV">
      <argument name="rhs" type="const SurfaceCapabilitiesPresentBarrierNV &amp;" />
    </constructor>
    <constructor name="SurfaceCapabilitiesPresentBarrierNV">
      <argument name="rhs" type="const VkSurfaceCapabilitiesPresentBarrierNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SurfaceCapabilitiesPresentBarrierNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSurfaceCapabilitiesPresentBarrierNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPresentBarrierSupported">
      <argument name="presentBarrierSupported_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkSurfaceCapabilitiesPresentBarrierNV &amp;" />
    <conversion_function name="operator VkSurfaceCapabilitiesPresentBarrierNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SurfaceCapabilitiesPresentBarrierNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SurfaceCapabilitiesPresentBarrierNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentBarrierSupported" />
  </struct>
  <struct name="SwapchainPresentBarrierCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SwapchainPresentBarrierCreateInfoNV">
      <argument name="presentBarrierEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SwapchainPresentBarrierCreateInfoNV">
      <argument name="rhs" type="const SwapchainPresentBarrierCreateInfoNV &amp;" />
    </constructor>
    <constructor name="SwapchainPresentBarrierCreateInfoNV">
      <argument name="rhs" type="const VkSwapchainPresentBarrierCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SwapchainPresentBarrierCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSwapchainPresentBarrierCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPresentBarrierEnable">
      <argument name="presentBarrierEnable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkSwapchainPresentBarrierCreateInfoNV &amp;" />
    <conversion_function name="operator VkSwapchainPresentBarrierCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SwapchainPresentBarrierCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SwapchainPresentBarrierCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentBarrierEnable" />
  </struct>
  <struct name="PhysicalDevicePresentIdFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePresentIdFeaturesKHR">
      <argument name="presentId_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePresentIdFeaturesKHR">
      <argument name="rhs" type="const PhysicalDevicePresentIdFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePresentIdFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDevicePresentIdFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePresentIdFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePresentIdFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPresentId">
      <argument name="presentId_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePresentIdFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDevicePresentIdFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePresentIdFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePresentIdFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentId" />
  </struct>
  <struct name="PresentIdKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PresentIdKHR">
      <argument name="swapchainCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPresentIds_" type="const uint64_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PresentIdKHR">
      <argument name="rhs" type="const PresentIdKHR &amp;" />
    </constructor>
    <constructor name="PresentIdKHR">
      <argument name="rhs" type="const VkPresentIdKHR &amp;" />
    </constructor>
    <constructor name="PresentIdKHR">
      <argument name="presentIds_" type="const vk::ArrayProxyNoTemporaries&lt;const uint64_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PresentIdKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPresentIdKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSwapchainCount">
      <argument name="swapchainCount_" type="uint32_t" />
    </method>
    <method name="setPPresentIds">
      <argument name="pPresentIds_" type="const uint64_t *" />
    </method>
    <method name="setPresentIds">
      <argument name="presentIds_" type="const vk::ArrayProxyNoTemporaries&lt;const uint64_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPresentIdKHR &amp;" />
    <conversion_function name="operator VkPresentIdKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PresentIdKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PresentIdKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="swapchainCount" />
    <field name="pPresentIds" />
  </struct>
  <struct name="PhysicalDeviceVideoEncodeQualityLevelInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVideoEncodeQualityLevelInfoKHR">
      <argument name="pVideoProfile_" type="const vk::VideoProfileInfoKHR *" default_raw="{}" />
      <argument name="qualityLevel_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVideoEncodeQualityLevelInfoKHR">
      <argument name="rhs" type="const PhysicalDeviceVideoEncodeQualityLevelInfoKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVideoEncodeQualityLevelInfoKHR">
      <argument name="rhs" type="const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVideoEncodeQualityLevelInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPVideoProfile">
      <argument name="pVideoProfile_" type="const vk::VideoProfileInfoKHR *" />
    </method>
    <method name="setQualityLevel">
      <argument name="qualityLevel_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVideoEncodeQualityLevelInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVideoEncodeQualityLevelInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pVideoProfile" />
    <field name="qualityLevel" />
  </struct>
  <struct name="QueryPoolVideoEncodeFeedbackCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueryPoolVideoEncodeFeedbackCreateInfoKHR">
      <argument name="encodeFeedbackFlags_" type="vk::VideoEncodeFeedbackFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="QueryPoolVideoEncodeFeedbackCreateInfoKHR">
      <argument name="rhs" type="const QueryPoolVideoEncodeFeedbackCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="QueryPoolVideoEncodeFeedbackCreateInfoKHR">
      <argument name="rhs" type="const VkQueryPoolVideoEncodeFeedbackCreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueryPoolVideoEncodeFeedbackCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueryPoolVideoEncodeFeedbackCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setEncodeFeedbackFlags">
      <argument name="encodeFeedbackFlags_" type="vk::VideoEncodeFeedbackFlagsKHR" />
    </method>
    <conversion_function name="operator const VkQueryPoolVideoEncodeFeedbackCreateInfoKHR &amp;" />
    <conversion_function name="operator VkQueryPoolVideoEncodeFeedbackCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueryPoolVideoEncodeFeedbackCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueryPoolVideoEncodeFeedbackCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="encodeFeedbackFlags" />
  </struct>
  <struct name="VideoEncodeCapabilitiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeCapabilitiesKHR">
      <argument name="flags_" type="vk::VideoEncodeCapabilityFlagsKHR" default_raw="{}" />
      <argument name="rateControlModes_" type="vk::VideoEncodeRateControlModeFlagsKHR" default_raw="{}" />
      <argument name="maxRateControlLayers_" type="uint32_t" default_raw="{}" />
      <argument name="maxBitrate_" type="uint64_t" default_raw="{}" />
      <argument name="maxQualityLevels_" type="uint32_t" default_raw="{}" />
      <argument name="encodeInputPictureGranularity_" type="vk::Extent2D" default_raw="{}" />
      <argument name="supportedEncodeFeedbackFlags_" type="vk::VideoEncodeFeedbackFlagsKHR" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeCapabilitiesKHR">
      <argument name="rhs" type="const VideoEncodeCapabilitiesKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeCapabilitiesKHR">
      <argument name="rhs" type="const VkVideoEncodeCapabilitiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeCapabilitiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeCapabilitiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeCapabilitiesKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeCapabilitiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeCapabilitiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeCapabilitiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="rateControlModes" />
    <field name="maxRateControlLayers" />
    <field name="maxBitrate" />
    <field name="maxQualityLevels" />
    <field name="encodeInputPictureGranularity" />
    <field name="supportedEncodeFeedbackFlags" />
  </struct>
  <struct name="VideoEncodeInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeInfoKHR">
      <argument name="flags_" type="vk::VideoEncodeFlagsKHR" default_raw="{}" />
      <argument name="dstBuffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="dstBufferOffset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="dstBufferRange_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="srcPictureResource_" type="vk::VideoPictureResourceInfoKHR" default_raw="{}" />
      <argument name="pSetupReferenceSlot_" type="const vk::VideoReferenceSlotInfoKHR *" default_raw="{}" />
      <argument name="referenceSlotCount_" type="uint32_t" default_raw="{}" />
      <argument name="pReferenceSlots_" type="const vk::VideoReferenceSlotInfoKHR *" default_raw="{}" />
      <argument name="precedingExternallyEncodedBytes_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeInfoKHR">
      <argument name="rhs" type="const VideoEncodeInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeInfoKHR">
      <argument name="flags_" type="vk::VideoEncodeFlagsKHR" />
      <argument name="dstBuffer_" type="vk::Buffer" />
      <argument name="dstBufferOffset_" type="vk::DeviceSize" />
      <argument name="dstBufferRange_" type="vk::DeviceSize" />
      <argument name="srcPictureResource_" type="vk::VideoPictureResourceInfoKHR" />
      <argument name="pSetupReferenceSlot_" type="const vk::VideoReferenceSlotInfoKHR *" />
      <argument name="referenceSlots_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoReferenceSlotInfoKHR&gt; &amp;" />
      <argument name="precedingExternallyEncodedBytes_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::VideoEncodeFlagsKHR" />
    </method>
    <method name="setDstBuffer">
      <argument name="dstBuffer_" type="vk::Buffer" />
    </method>
    <method name="setDstBufferOffset">
      <argument name="dstBufferOffset_" type="vk::DeviceSize" />
    </method>
    <method name="setDstBufferRange">
      <argument name="dstBufferRange_" type="vk::DeviceSize" />
    </method>
    <method name="setSrcPictureResource">
      <argument name="srcPictureResource_" type="const vk::VideoPictureResourceInfoKHR &amp;" />
    </method>
    <method name="setPSetupReferenceSlot">
      <argument name="pSetupReferenceSlot_" type="const vk::VideoReferenceSlotInfoKHR *" />
    </method>
    <method name="setReferenceSlotCount">
      <argument name="referenceSlotCount_" type="uint32_t" />
    </method>
    <method name="setPReferenceSlots">
      <argument name="pReferenceSlots_" type="const vk::VideoReferenceSlotInfoKHR *" />
    </method>
    <method name="setReferenceSlots">
      <argument name="referenceSlots_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoReferenceSlotInfoKHR&gt; &amp;" />
    </method>
    <method name="setPrecedingExternallyEncodedBytes">
      <argument name="precedingExternallyEncodedBytes_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="dstBuffer" />
    <field name="dstBufferOffset" />
    <field name="dstBufferRange" />
    <field name="srcPictureResource" />
    <field name="pSetupReferenceSlot" />
    <field name="referenceSlotCount" />
    <field name="pReferenceSlots" />
    <field name="precedingExternallyEncodedBytes" />
  </struct>
  <struct name="VideoEncodeQualityLevelInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeQualityLevelInfoKHR">
      <argument name="qualityLevel_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeQualityLevelInfoKHR">
      <argument name="rhs" type="const VideoEncodeQualityLevelInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeQualityLevelInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeQualityLevelInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeQualityLevelInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeQualityLevelInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setQualityLevel">
      <argument name="qualityLevel_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeQualityLevelInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeQualityLevelInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeQualityLevelInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeQualityLevelInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="qualityLevel" />
  </struct>
  <struct name="VideoEncodeQualityLevelPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeQualityLevelPropertiesKHR">
      <argument name="preferredRateControlMode_" type="vk::VideoEncodeRateControlModeFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::VideoEncodeRateControlModeFlagBitsKHR::eDefault" />
      <argument name="preferredRateControlLayerCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeQualityLevelPropertiesKHR">
      <argument name="rhs" type="const VideoEncodeQualityLevelPropertiesKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeQualityLevelPropertiesKHR">
      <argument name="rhs" type="const VkVideoEncodeQualityLevelPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeQualityLevelPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeQualityLevelPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeQualityLevelPropertiesKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeQualityLevelPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeQualityLevelPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeQualityLevelPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="preferredRateControlMode" />
    <field name="preferredRateControlLayerCount" />
  </struct>
  <struct name="VideoEncodeRateControlInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeRateControlInfoKHR">
      <argument name="flags_" type="vk::VideoEncodeRateControlFlagsKHR" default_raw="{}" />
      <argument name="rateControlMode_" type="vk::VideoEncodeRateControlModeFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::VideoEncodeRateControlModeFlagBitsKHR::eDefault" />
      <argument name="layerCount_" type="uint32_t" default_raw="{}" />
      <argument name="pLayers_" type="const vk::VideoEncodeRateControlLayerInfoKHR *" default_raw="{}" />
      <argument name="virtualBufferSizeInMs_" type="uint32_t" default_raw="{}" />
      <argument name="initialVirtualBufferSizeInMs_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeRateControlInfoKHR">
      <argument name="rhs" type="const VideoEncodeRateControlInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeRateControlInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeRateControlInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeRateControlInfoKHR">
      <argument name="flags_" type="vk::VideoEncodeRateControlFlagsKHR" />
      <argument name="rateControlMode_" type="vk::VideoEncodeRateControlModeFlagBitsKHR" />
      <argument name="layers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoEncodeRateControlLayerInfoKHR&gt; &amp;" />
      <argument name="virtualBufferSizeInMs_" type="uint32_t" default_raw="{}" />
      <argument name="initialVirtualBufferSizeInMs_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeRateControlInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeRateControlInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::VideoEncodeRateControlFlagsKHR" />
    </method>
    <method name="setRateControlMode">
      <argument name="rateControlMode_" type="vk::VideoEncodeRateControlModeFlagBitsKHR" />
    </method>
    <method name="setLayerCount">
      <argument name="layerCount_" type="uint32_t" />
    </method>
    <method name="setPLayers">
      <argument name="pLayers_" type="const vk::VideoEncodeRateControlLayerInfoKHR *" />
    </method>
    <method name="setLayers">
      <argument name="layers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VideoEncodeRateControlLayerInfoKHR&gt; &amp;" />
    </method>
    <method name="setVirtualBufferSizeInMs">
      <argument name="virtualBufferSizeInMs_" type="uint32_t" />
    </method>
    <method name="setInitialVirtualBufferSizeInMs">
      <argument name="initialVirtualBufferSizeInMs_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeRateControlInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeRateControlInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeRateControlInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeRateControlInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="rateControlMode" />
    <field name="layerCount" />
    <field name="pLayers" />
    <field name="virtualBufferSizeInMs" />
    <field name="initialVirtualBufferSizeInMs" />
  </struct>
  <struct name="VideoEncodeRateControlLayerInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeRateControlLayerInfoKHR">
      <argument name="averageBitrate_" type="uint64_t" default_raw="{}" />
      <argument name="maxBitrate_" type="uint64_t" default_raw="{}" />
      <argument name="frameRateNumerator_" type="uint32_t" default_raw="{}" />
      <argument name="frameRateDenominator_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeRateControlLayerInfoKHR">
      <argument name="rhs" type="const VideoEncodeRateControlLayerInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeRateControlLayerInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeRateControlLayerInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeRateControlLayerInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeRateControlLayerInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAverageBitrate">
      <argument name="averageBitrate_" type="uint64_t" />
    </method>
    <method name="setMaxBitrate">
      <argument name="maxBitrate_" type="uint64_t" />
    </method>
    <method name="setFrameRateNumerator">
      <argument name="frameRateNumerator_" type="uint32_t" />
    </method>
    <method name="setFrameRateDenominator">
      <argument name="frameRateDenominator_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoEncodeRateControlLayerInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeRateControlLayerInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeRateControlLayerInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeRateControlLayerInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="averageBitrate" />
    <field name="maxBitrate" />
    <field name="frameRateNumerator" />
    <field name="frameRateDenominator" />
  </struct>
  <struct name="VideoEncodeSessionParametersFeedbackInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeSessionParametersFeedbackInfoKHR">
      <argument name="hasOverrides_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeSessionParametersFeedbackInfoKHR">
      <argument name="rhs" type="const VideoEncodeSessionParametersFeedbackInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeSessionParametersFeedbackInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeSessionParametersFeedbackInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeSessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeSessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <conversion_function name="operator const VkVideoEncodeSessionParametersFeedbackInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeSessionParametersFeedbackInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeSessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeSessionParametersFeedbackInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="hasOverrides" />
  </struct>
  <struct name="VideoEncodeSessionParametersGetInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeSessionParametersGetInfoKHR">
      <argument name="videoSessionParameters_" type="vk::VideoSessionParametersKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeSessionParametersGetInfoKHR">
      <argument name="rhs" type="const VideoEncodeSessionParametersGetInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeSessionParametersGetInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeSessionParametersGetInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeSessionParametersGetInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeSessionParametersGetInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setVideoSessionParameters">
      <argument name="videoSessionParameters_" type="vk::VideoSessionParametersKHR" />
    </method>
    <conversion_function name="operator const VkVideoEncodeSessionParametersGetInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeSessionParametersGetInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeSessionParametersGetInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeSessionParametersGetInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="videoSessionParameters" />
  </struct>
  <struct name="VideoEncodeUsageInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoEncodeUsageInfoKHR">
      <argument name="videoUsageHints_" type="vk::VideoEncodeUsageFlagsKHR" default_raw="{}" />
      <argument name="videoContentHints_" type="vk::VideoEncodeContentFlagsKHR" default_raw="{}" />
      <argument name="tuningMode_" type="vk::VideoEncodeTuningModeKHR" default_raw="VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR::eDefault" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoEncodeUsageInfoKHR">
      <argument name="rhs" type="const VideoEncodeUsageInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoEncodeUsageInfoKHR">
      <argument name="rhs" type="const VkVideoEncodeUsageInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoEncodeUsageInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoEncodeUsageInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setVideoUsageHints">
      <argument name="videoUsageHints_" type="vk::VideoEncodeUsageFlagsKHR" />
    </method>
    <method name="setVideoContentHints">
      <argument name="videoContentHints_" type="vk::VideoEncodeContentFlagsKHR" />
    </method>
    <method name="setTuningMode">
      <argument name="tuningMode_" type="vk::VideoEncodeTuningModeKHR" />
    </method>
    <conversion_function name="operator const VkVideoEncodeUsageInfoKHR &amp;" />
    <conversion_function name="operator VkVideoEncodeUsageInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoEncodeUsageInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoEncodeUsageInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="videoUsageHints" />
    <field name="videoContentHints" />
    <field name="tuningMode" />
  </struct>
  <struct name="DeviceDiagnosticsConfigCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceDiagnosticsConfigCreateInfoNV">
      <argument name="flags_" type="vk::DeviceDiagnosticsConfigFlagsNV" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceDiagnosticsConfigCreateInfoNV">
      <argument name="rhs" type="const DeviceDiagnosticsConfigCreateInfoNV &amp;" />
    </constructor>
    <constructor name="DeviceDiagnosticsConfigCreateInfoNV">
      <argument name="rhs" type="const VkDeviceDiagnosticsConfigCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceDiagnosticsConfigCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceDiagnosticsConfigCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DeviceDiagnosticsConfigFlagsNV" />
    </method>
    <conversion_function name="operator const VkDeviceDiagnosticsConfigCreateInfoNV &amp;" />
    <conversion_function name="operator VkDeviceDiagnosticsConfigCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceDiagnosticsConfigCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceDiagnosticsConfigCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
  </struct>
  <struct name="PhysicalDeviceDiagnosticsConfigFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDiagnosticsConfigFeaturesNV">
      <argument name="diagnosticsConfig_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDiagnosticsConfigFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceDiagnosticsConfigFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDiagnosticsConfigFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceDiagnosticsConfigFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDiagnosticsConfigFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDiagnosticsConfigFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDiagnosticsConfig">
      <argument name="diagnosticsConfig_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDiagnosticsConfigFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDiagnosticsConfigFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDiagnosticsConfigFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDiagnosticsConfigFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="diagnosticsConfig" />
  </struct>
  <struct name="QueryLowLatencySupportNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueryLowLatencySupportNV">
      <argument name="pQueriedLowLatencyData_" type="void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="QueryLowLatencySupportNV">
      <argument name="rhs" type="const QueryLowLatencySupportNV &amp;" />
    </constructor>
    <constructor name="QueryLowLatencySupportNV">
      <argument name="rhs" type="const VkQueryLowLatencySupportNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueryLowLatencySupportNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueryLowLatencySupportNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPQueriedLowLatencyData">
      <argument name="pQueriedLowLatencyData_" type="void *" />
    </method>
    <conversion_function name="operator const VkQueryLowLatencySupportNV &amp;" />
    <conversion_function name="operator VkQueryLowLatencySupportNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueryLowLatencySupportNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueryLowLatencySupportNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pQueriedLowLatencyData" />
  </struct>
  <struct name="CheckpointData2NV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CheckpointData2NV">
      <argument name="stage_" type="vk::PipelineStageFlags2" default_raw="{}" />
      <argument name="pCheckpointMarker_" type="void *" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CheckpointData2NV">
      <argument name="rhs" type="const CheckpointData2NV &amp;" />
    </constructor>
    <constructor name="CheckpointData2NV">
      <argument name="rhs" type="const VkCheckpointData2NV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CheckpointData2NV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCheckpointData2NV &amp;" />
    </method>
    <conversion_function name="operator const VkCheckpointData2NV &amp;" />
    <conversion_function name="operator VkCheckpointData2NV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CheckpointData2NV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CheckpointData2NV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stage" />
    <field name="pCheckpointMarker" />
  </struct>
  <struct name="QueueFamilyCheckpointProperties2NV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="QueueFamilyCheckpointProperties2NV">
      <argument name="checkpointExecutionStageMask_" type="vk::PipelineStageFlags2" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="QueueFamilyCheckpointProperties2NV">
      <argument name="rhs" type="const QueueFamilyCheckpointProperties2NV &amp;" />
    </constructor>
    <constructor name="QueueFamilyCheckpointProperties2NV">
      <argument name="rhs" type="const VkQueueFamilyCheckpointProperties2NV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const QueueFamilyCheckpointProperties2NV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkQueueFamilyCheckpointProperties2NV &amp;" />
    </method>
    <conversion_function name="operator const VkQueueFamilyCheckpointProperties2NV &amp;" />
    <conversion_function name="operator VkQueueFamilyCheckpointProperties2NV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const QueueFamilyCheckpointProperties2NV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueueFamilyCheckpointProperties2NV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="checkpointExecutionStageMask" />
  </struct>
  <struct name="AccelerationStructureCaptureDescriptorDataInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureCaptureDescriptorDataInfoEXT">
      <argument name="accelerationStructure_" type="vk::AccelerationStructureKHR" default_raw="{}" />
      <argument name="accelerationStructureNV_" type="vk::AccelerationStructureNV" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureCaptureDescriptorDataInfoEXT">
      <argument name="rhs" type="const AccelerationStructureCaptureDescriptorDataInfoEXT &amp;" />
    </constructor>
    <constructor name="AccelerationStructureCaptureDescriptorDataInfoEXT">
      <argument name="rhs" type="const VkAccelerationStructureCaptureDescriptorDataInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAccelerationStructure">
      <argument name="accelerationStructure_" type="vk::AccelerationStructureKHR" />
    </method>
    <method name="setAccelerationStructureNV">
      <argument name="accelerationStructureNV_" type="vk::AccelerationStructureNV" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureCaptureDescriptorDataInfoEXT &amp;" />
    <conversion_function name="operator VkAccelerationStructureCaptureDescriptorDataInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="accelerationStructure" />
    <field name="accelerationStructureNV" />
  </struct>
  <struct name="BufferCaptureDescriptorDataInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferCaptureDescriptorDataInfoEXT">
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferCaptureDescriptorDataInfoEXT">
      <argument name="rhs" type="const BufferCaptureDescriptorDataInfoEXT &amp;" />
    </constructor>
    <constructor name="BufferCaptureDescriptorDataInfoEXT">
      <argument name="rhs" type="const VkBufferCaptureDescriptorDataInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <conversion_function name="operator const VkBufferCaptureDescriptorDataInfoEXT &amp;" />
    <conversion_function name="operator VkBufferCaptureDescriptorDataInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="buffer" />
  </struct>
  <struct name="DescriptorAddressInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorAddressInfoEXT">
      <argument name="address_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="range_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorAddressInfoEXT">
      <argument name="rhs" type="const DescriptorAddressInfoEXT &amp;" />
    </constructor>
    <constructor name="DescriptorAddressInfoEXT">
      <argument name="rhs" type="const VkDescriptorAddressInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorAddressInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorAddressInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setAddress">
      <argument name="address_" type="vk::DeviceAddress" />
    </method>
    <method name="setRange">
      <argument name="range_" type="vk::DeviceSize" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <conversion_function name="operator const VkDescriptorAddressInfoEXT &amp;" />
    <conversion_function name="operator VkDescriptorAddressInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorAddressInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorAddressInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="address" />
    <field name="range" />
    <field name="format" />
  </struct>
  <struct name="DescriptorBufferBindingInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorBufferBindingInfoEXT">
      <argument name="address_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="usage_" type="vk::BufferUsageFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorBufferBindingInfoEXT">
      <argument name="rhs" type="const DescriptorBufferBindingInfoEXT &amp;" />
    </constructor>
    <constructor name="DescriptorBufferBindingInfoEXT">
      <argument name="rhs" type="const VkDescriptorBufferBindingInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorBufferBindingInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorBufferBindingInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setAddress">
      <argument name="address_" type="vk::DeviceAddress" />
    </method>
    <method name="setUsage">
      <argument name="usage_" type="vk::BufferUsageFlags" />
    </method>
    <conversion_function name="operator const VkDescriptorBufferBindingInfoEXT &amp;" />
    <conversion_function name="operator VkDescriptorBufferBindingInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorBufferBindingInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorBufferBindingInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="address" />
    <field name="usage" />
  </struct>
  <struct name="DescriptorBufferBindingPushDescriptorBufferHandleEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorBufferBindingPushDescriptorBufferHandleEXT">
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorBufferBindingPushDescriptorBufferHandleEXT">
      <argument name="rhs" type="const DescriptorBufferBindingPushDescriptorBufferHandleEXT &amp;" />
    </constructor>
    <constructor name="DescriptorBufferBindingPushDescriptorBufferHandleEXT">
      <argument name="rhs" type="const VkDescriptorBufferBindingPushDescriptorBufferHandleEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorBufferBindingPushDescriptorBufferHandleEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorBufferBindingPushDescriptorBufferHandleEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <conversion_function name="operator const VkDescriptorBufferBindingPushDescriptorBufferHandleEXT &amp;" />
    <conversion_function name="operator VkDescriptorBufferBindingPushDescriptorBufferHandleEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorBufferBindingPushDescriptorBufferHandleEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorBufferBindingPushDescriptorBufferHandleEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="buffer" />
  </struct>
  <union name="DescriptorDataEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorDataEXT">
      <argument name="pSampler_" type="const vk::Sampler *" default_raw="{}" />
    </constructor>
    <constructor name="DescriptorDataEXT">
      <argument name="pDescriptorImageInfo_" type="const vk::DescriptorImageInfo *" />
    </constructor>
    <constructor name="DescriptorDataEXT">
      <argument name="pDescriptorAddressInfoEXT_" type="const vk::DescriptorAddressInfoEXT *" />
    </constructor>
    <constructor name="DescriptorDataEXT">
      <argument name="accelerationStructure_" type="vk::DeviceAddress" />
    </constructor>
    <method name="setPSampler">
      <argument name="pSampler_" type="const vk::Sampler *" />
    </method>
    <method name="setPCombinedImageSampler">
      <argument name="pCombinedImageSampler_" type="const vk::DescriptorImageInfo *" />
    </method>
    <method name="setPInputAttachmentImage">
      <argument name="pInputAttachmentImage_" type="const vk::DescriptorImageInfo *" />
    </method>
    <method name="setPSampledImage">
      <argument name="pSampledImage_" type="const vk::DescriptorImageInfo *" />
    </method>
    <method name="setPStorageImage">
      <argument name="pStorageImage_" type="const vk::DescriptorImageInfo *" />
    </method>
    <method name="setPUniformTexelBuffer">
      <argument name="pUniformTexelBuffer_" type="const vk::DescriptorAddressInfoEXT *" />
    </method>
    <method name="setPStorageTexelBuffer">
      <argument name="pStorageTexelBuffer_" type="const vk::DescriptorAddressInfoEXT *" />
    </method>
    <method name="setPUniformBuffer">
      <argument name="pUniformBuffer_" type="const vk::DescriptorAddressInfoEXT *" />
    </method>
    <method name="setPStorageBuffer">
      <argument name="pStorageBuffer_" type="const vk::DescriptorAddressInfoEXT *" />
    </method>
    <method name="setAccelerationStructure">
      <argument name="accelerationStructure_" type="vk::DeviceAddress" />
    </method>
    <conversion_function name="operator const VkDescriptorDataEXT &amp;" />
    <conversion_function name="operator VkDescriptorDataEXT &amp;" />
    <field name="pSampler" />
    <field name="pCombinedImageSampler" />
    <field name="pInputAttachmentImage" />
    <field name="pSampledImage" />
    <field name="pStorageImage" />
    <field name="pUniformTexelBuffer" />
    <field name="pStorageTexelBuffer" />
    <field name="pUniformBuffer" />
    <field name="pStorageBuffer" />
    <field name="accelerationStructure" />
  </union>
  <struct name="DescriptorGetInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorGetInfoEXT">
      <argument name="type_" type="vk::DescriptorType" default_raw="VULKAN_HPP_NAMESPACE::DescriptorType::eSampler" />
      <argument name="data_" type="vk::DescriptorDataEXT" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorGetInfoEXT">
      <argument name="rhs" type="const DescriptorGetInfoEXT &amp;" />
    </constructor>
    <constructor name="DescriptorGetInfoEXT">
      <argument name="rhs" type="const VkDescriptorGetInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorGetInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorGetInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::DescriptorType" />
    </method>
    <method name="setData">
      <argument name="data_" type="const vk::DescriptorDataEXT &amp;" />
    </method>
    <conversion_function name="operator const VkDescriptorGetInfoEXT &amp;" />
    <conversion_function name="operator VkDescriptorGetInfoEXT &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="type" />
    <field name="data" />
  </struct>
  <struct name="ImageCaptureDescriptorDataInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageCaptureDescriptorDataInfoEXT">
      <argument name="image_" type="vk::Image" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageCaptureDescriptorDataInfoEXT">
      <argument name="rhs" type="const ImageCaptureDescriptorDataInfoEXT &amp;" />
    </constructor>
    <constructor name="ImageCaptureDescriptorDataInfoEXT">
      <argument name="rhs" type="const VkImageCaptureDescriptorDataInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImage">
      <argument name="image_" type="vk::Image" />
    </method>
    <conversion_function name="operator const VkImageCaptureDescriptorDataInfoEXT &amp;" />
    <conversion_function name="operator VkImageCaptureDescriptorDataInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="image" />
  </struct>
  <struct name="ImageViewCaptureDescriptorDataInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageViewCaptureDescriptorDataInfoEXT">
      <argument name="imageView_" type="vk::ImageView" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageViewCaptureDescriptorDataInfoEXT">
      <argument name="rhs" type="const ImageViewCaptureDescriptorDataInfoEXT &amp;" />
    </constructor>
    <constructor name="ImageViewCaptureDescriptorDataInfoEXT">
      <argument name="rhs" type="const VkImageViewCaptureDescriptorDataInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageViewCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageViewCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setImageView">
      <argument name="imageView_" type="vk::ImageView" />
    </method>
    <conversion_function name="operator const VkImageViewCaptureDescriptorDataInfoEXT &amp;" />
    <conversion_function name="operator VkImageViewCaptureDescriptorDataInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageViewCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageViewCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageView" />
  </struct>
  <struct name="OpaqueCaptureDescriptorDataCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="OpaqueCaptureDescriptorDataCreateInfoEXT">
      <argument name="opaqueCaptureDescriptorData_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="OpaqueCaptureDescriptorDataCreateInfoEXT">
      <argument name="rhs" type="const OpaqueCaptureDescriptorDataCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="OpaqueCaptureDescriptorDataCreateInfoEXT">
      <argument name="rhs" type="const VkOpaqueCaptureDescriptorDataCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const OpaqueCaptureDescriptorDataCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkOpaqueCaptureDescriptorDataCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setOpaqueCaptureDescriptorData">
      <argument name="opaqueCaptureDescriptorData_" type="const void *" />
    </method>
    <conversion_function name="operator const VkOpaqueCaptureDescriptorDataCreateInfoEXT &amp;" />
    <conversion_function name="operator VkOpaqueCaptureDescriptorDataCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const OpaqueCaptureDescriptorDataCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const OpaqueCaptureDescriptorDataCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="opaqueCaptureDescriptorData" />
  </struct>
  <struct name="PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT">
      <argument name="combinedImageSamplerDensityMapDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="combinedImageSamplerDensityMapDescriptorSize" />
  </struct>
  <struct name="PhysicalDeviceDescriptorBufferFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDescriptorBufferFeaturesEXT">
      <argument name="descriptorBuffer_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBufferCaptureReplay_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBufferImageLayoutIgnored_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBufferPushDescriptors_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorBufferFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorBufferFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorBufferFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorBufferFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDescriptorBuffer">
      <argument name="descriptorBuffer_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBufferCaptureReplay">
      <argument name="descriptorBufferCaptureReplay_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBufferImageLayoutIgnored">
      <argument name="descriptorBufferImageLayoutIgnored_" type="vk::Bool32" />
    </method>
    <method name="setDescriptorBufferPushDescriptors">
      <argument name="descriptorBufferPushDescriptors_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDescriptorBufferFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDescriptorBufferFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="descriptorBuffer" />
    <field name="descriptorBufferCaptureReplay" />
    <field name="descriptorBufferImageLayoutIgnored" />
    <field name="descriptorBufferPushDescriptors" />
  </struct>
  <struct name="PhysicalDeviceDescriptorBufferPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDescriptorBufferPropertiesEXT">
      <argument name="combinedImageSamplerDescriptorSingleArray_" type="vk::Bool32" default_raw="{}" />
      <argument name="bufferlessPushDescriptors_" type="vk::Bool32" default_raw="{}" />
      <argument name="allowSamplerImageViewPostSubmitCreation_" type="vk::Bool32" default_raw="{}" />
      <argument name="descriptorBufferOffsetAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="maxDescriptorBufferBindings_" type="uint32_t" default_raw="{}" />
      <argument name="maxResourceDescriptorBufferBindings_" type="uint32_t" default_raw="{}" />
      <argument name="maxSamplerDescriptorBufferBindings_" type="uint32_t" default_raw="{}" />
      <argument name="maxEmbeddedImmutableSamplerBindings_" type="uint32_t" default_raw="{}" />
      <argument name="maxEmbeddedImmutableSamplers_" type="uint32_t" default_raw="{}" />
      <argument name="bufferCaptureReplayDescriptorDataSize_" type="size_t" default_raw="{}" />
      <argument name="imageCaptureReplayDescriptorDataSize_" type="size_t" default_raw="{}" />
      <argument name="imageViewCaptureReplayDescriptorDataSize_" type="size_t" default_raw="{}" />
      <argument name="samplerCaptureReplayDescriptorDataSize_" type="size_t" default_raw="{}" />
      <argument name="accelerationStructureCaptureReplayDescriptorDataSize_" type="size_t" default_raw="{}" />
      <argument name="samplerDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="combinedImageSamplerDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="sampledImageDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="storageImageDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="uniformTexelBufferDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="robustUniformTexelBufferDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="storageTexelBufferDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="robustStorageTexelBufferDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="uniformBufferDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="robustUniformBufferDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="storageBufferDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="robustStorageBufferDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="inputAttachmentDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="accelerationStructureDescriptorSize_" type="size_t" default_raw="{}" />
      <argument name="maxSamplerDescriptorBufferRange_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="maxResourceDescriptorBufferRange_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="samplerDescriptorBufferAddressSpaceSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="resourceDescriptorBufferAddressSpaceSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="descriptorBufferAddressSpaceSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorBufferPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorBufferPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorBufferPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorBufferPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDescriptorBufferPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDescriptorBufferPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorBufferPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="combinedImageSamplerDescriptorSingleArray" />
    <field name="bufferlessPushDescriptors" />
    <field name="allowSamplerImageViewPostSubmitCreation" />
    <field name="descriptorBufferOffsetAlignment" />
    <field name="maxDescriptorBufferBindings" />
    <field name="maxResourceDescriptorBufferBindings" />
    <field name="maxSamplerDescriptorBufferBindings" />
    <field name="maxEmbeddedImmutableSamplerBindings" />
    <field name="maxEmbeddedImmutableSamplers" />
    <field name="bufferCaptureReplayDescriptorDataSize" />
    <field name="imageCaptureReplayDescriptorDataSize" />
    <field name="imageViewCaptureReplayDescriptorDataSize" />
    <field name="samplerCaptureReplayDescriptorDataSize" />
    <field name="accelerationStructureCaptureReplayDescriptorDataSize" />
    <field name="samplerDescriptorSize" />
    <field name="combinedImageSamplerDescriptorSize" />
    <field name="sampledImageDescriptorSize" />
    <field name="storageImageDescriptorSize" />
    <field name="uniformTexelBufferDescriptorSize" />
    <field name="robustUniformTexelBufferDescriptorSize" />
    <field name="storageTexelBufferDescriptorSize" />
    <field name="robustStorageTexelBufferDescriptorSize" />
    <field name="uniformBufferDescriptorSize" />
    <field name="robustUniformBufferDescriptorSize" />
    <field name="storageBufferDescriptorSize" />
    <field name="robustStorageBufferDescriptorSize" />
    <field name="inputAttachmentDescriptorSize" />
    <field name="accelerationStructureDescriptorSize" />
    <field name="maxSamplerDescriptorBufferRange" />
    <field name="maxResourceDescriptorBufferRange" />
    <field name="samplerDescriptorBufferAddressSpaceSize" />
    <field name="resourceDescriptorBufferAddressSpaceSize" />
    <field name="descriptorBufferAddressSpaceSize" />
  </struct>
  <struct name="SamplerCaptureDescriptorDataInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SamplerCaptureDescriptorDataInfoEXT">
      <argument name="sampler_" type="vk::Sampler" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SamplerCaptureDescriptorDataInfoEXT">
      <argument name="rhs" type="const SamplerCaptureDescriptorDataInfoEXT &amp;" />
    </constructor>
    <constructor name="SamplerCaptureDescriptorDataInfoEXT">
      <argument name="rhs" type="const VkSamplerCaptureDescriptorDataInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SamplerCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSamplerCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSampler">
      <argument name="sampler_" type="vk::Sampler" />
    </method>
    <conversion_function name="operator const VkSamplerCaptureDescriptorDataInfoEXT &amp;" />
    <conversion_function name="operator VkSamplerCaptureDescriptorDataInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SamplerCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SamplerCaptureDescriptorDataInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="sampler" />
  </struct>
  <struct name="GraphicsPipelineLibraryCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="GraphicsPipelineLibraryCreateInfoEXT">
      <argument name="flags_" type="vk::GraphicsPipelineLibraryFlagsEXT" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="GraphicsPipelineLibraryCreateInfoEXT">
      <argument name="rhs" type="const GraphicsPipelineLibraryCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="GraphicsPipelineLibraryCreateInfoEXT">
      <argument name="rhs" type="const VkGraphicsPipelineLibraryCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const GraphicsPipelineLibraryCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkGraphicsPipelineLibraryCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::GraphicsPipelineLibraryFlagsEXT" />
    </method>
    <conversion_function name="operator const VkGraphicsPipelineLibraryCreateInfoEXT &amp;" />
    <conversion_function name="operator VkGraphicsPipelineLibraryCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const GraphicsPipelineLibraryCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const GraphicsPipelineLibraryCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
  </struct>
  <struct name="PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT">
      <argument name="graphicsPipelineLibrary_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setGraphicsPipelineLibrary">
      <argument name="graphicsPipelineLibrary_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="graphicsPipelineLibrary" />
  </struct>
  <struct name="PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT">
      <argument name="graphicsPipelineLibraryFastLinking_" type="vk::Bool32" default_raw="{}" />
      <argument name="graphicsPipelineLibraryIndependentInterpolationDecoration_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setGraphicsPipelineLibraryFastLinking">
      <argument name="graphicsPipelineLibraryFastLinking_" type="vk::Bool32" />
    </method>
    <method name="setGraphicsPipelineLibraryIndependentInterpolationDecoration">
      <argument name="graphicsPipelineLibraryIndependentInterpolationDecoration_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="graphicsPipelineLibraryFastLinking" />
    <field name="graphicsPipelineLibraryIndependentInterpolationDecoration" />
  </struct>
  <struct name="PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD">
      <argument name="shaderEarlyAndLateFragmentTests_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD">
      <argument name="rhs" type="const PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD">
      <argument name="rhs" type="const VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderEarlyAndLateFragmentTests">
      <argument name="shaderEarlyAndLateFragmentTests_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderEarlyAndLateFragmentTests" />
  </struct>
  <struct name="PhysicalDeviceFragmentShaderBarycentricFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentShaderBarycentricFeaturesKHR">
      <argument name="fragmentShaderBarycentric_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShaderBarycentricFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderBarycentricFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShaderBarycentricFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderBarycentricFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFragmentShaderBarycentric">
      <argument name="fragmentShaderBarycentric_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderBarycentricFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderBarycentricFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fragmentShaderBarycentric" />
  </struct>
  <type_alias name="PhysicalDeviceFragmentShaderBarycentricFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceFragmentShaderBarycentricFeaturesKHR" />
  <struct name="PhysicalDeviceFragmentShaderBarycentricPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentShaderBarycentricPropertiesKHR">
      <argument name="triStripVertexOrderIndependentOfProvokingVertex_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShaderBarycentricPropertiesKHR">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderBarycentricPropertiesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShaderBarycentricPropertiesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderBarycentricPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderBarycentricPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShaderBarycentricPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="triStripVertexOrderIndependentOfProvokingVertex" />
  </struct>
  <struct name="PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR">
      <argument name="shaderSubgroupUniformControlFlow_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderSubgroupUniformControlFlow">
      <argument name="shaderSubgroupUniformControlFlow_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderSubgroupUniformControlFlow" />
  </struct>
  <struct name="PhysicalDeviceFragmentShadingRateEnumsFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentShadingRateEnumsFeaturesNV">
      <argument name="fragmentShadingRateEnums_" type="vk::Bool32" default_raw="{}" />
      <argument name="supersampleFragmentShadingRates_" type="vk::Bool32" default_raw="{}" />
      <argument name="noInvocationFragmentShadingRates_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShadingRateEnumsFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateEnumsFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShadingRateEnumsFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateEnumsFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFragmentShadingRateEnums">
      <argument name="fragmentShadingRateEnums_" type="vk::Bool32" />
    </method>
    <method name="setSupersampleFragmentShadingRates">
      <argument name="supersampleFragmentShadingRates_" type="vk::Bool32" />
    </method>
    <method name="setNoInvocationFragmentShadingRates">
      <argument name="noInvocationFragmentShadingRates_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateEnumsFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateEnumsFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fragmentShadingRateEnums" />
    <field name="supersampleFragmentShadingRates" />
    <field name="noInvocationFragmentShadingRates" />
  </struct>
  <struct name="PhysicalDeviceFragmentShadingRateEnumsPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentShadingRateEnumsPropertiesNV">
      <argument name="maxFragmentShadingRateInvocationCount_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShadingRateEnumsPropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateEnumsPropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentShadingRateEnumsPropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateEnumsPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMaxFragmentShadingRateInvocationCount">
      <argument name="maxFragmentShadingRateInvocationCount_" type="vk::SampleCountFlagBits" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateEnumsPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentShadingRateEnumsPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxFragmentShadingRateInvocationCount" />
  </struct>
  <struct name="PipelineFragmentShadingRateEnumStateCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineFragmentShadingRateEnumStateCreateInfoNV">
      <argument name="shadingRateType_" type="vk::FragmentShadingRateTypeNV" default_raw="VULKAN_HPP_NAMESPACE::FragmentShadingRateTypeNV::eFragmentSize" />
      <argument name="shadingRate_" type="vk::FragmentShadingRateNV" default_raw="VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e1InvocationPerPixel" />
      <argument name="combinerOps_" type="const std::array&lt;vk::FragmentShadingRateCombinerOpKHR, 2&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineFragmentShadingRateEnumStateCreateInfoNV">
      <argument name="rhs" type="const PipelineFragmentShadingRateEnumStateCreateInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineFragmentShadingRateEnumStateCreateInfoNV">
      <argument name="rhs" type="const VkPipelineFragmentShadingRateEnumStateCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineFragmentShadingRateEnumStateCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineFragmentShadingRateEnumStateCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setShadingRateType">
      <argument name="shadingRateType_" type="vk::FragmentShadingRateTypeNV" />
    </method>
    <method name="setShadingRate">
      <argument name="shadingRate_" type="vk::FragmentShadingRateNV" />
    </method>
    <method name="setCombinerOps">
      <argument name="combinerOps_" type="std::array&lt;vk::FragmentShadingRateCombinerOpKHR, 2&gt;" />
    </method>
    <conversion_function name="operator const VkPipelineFragmentShadingRateEnumStateCreateInfoNV &amp;" />
    <conversion_function name="operator VkPipelineFragmentShadingRateEnumStateCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineFragmentShadingRateEnumStateCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineFragmentShadingRateEnumStateCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shadingRateType" />
    <field name="shadingRate" />
    <field name="combinerOps" />
  </struct>
  <struct name="AccelerationStructureGeometryMotionTrianglesDataNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureGeometryMotionTrianglesDataNV">
      <argument name="vertexData_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureGeometryMotionTrianglesDataNV">
      <argument name="rhs" type="const AccelerationStructureGeometryMotionTrianglesDataNV &amp;" />
    </constructor>
    <constructor name="AccelerationStructureGeometryMotionTrianglesDataNV">
      <argument name="rhs" type="const VkAccelerationStructureGeometryMotionTrianglesDataNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureGeometryMotionTrianglesDataNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureGeometryMotionTrianglesDataNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setVertexData">
      <argument name="vertexData_" type="const vk::DeviceOrHostAddressConstKHR &amp;" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureGeometryMotionTrianglesDataNV &amp;" />
    <conversion_function name="operator VkAccelerationStructureGeometryMotionTrianglesDataNV &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="vertexData" />
  </struct>
  <struct name="AccelerationStructureMatrixMotionInstanceNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureMatrixMotionInstanceNV">
      <argument name="transformT0_" type="vk::TransformMatrixKHR" default_raw="{}" />
      <argument name="transformT1_" type="vk::TransformMatrixKHR" default_raw="{}" />
      <argument name="instanceCustomIndex_" type="uint32_t" default_raw="{}" />
      <argument name="mask_" type="uint32_t" default_raw="{}" />
      <argument name="instanceShaderBindingTableRecordOffset_" type="uint32_t" default_raw="{}" />
      <argument name="flags_" type="vk::GeometryInstanceFlagsKHR" default_raw="{}" />
      <argument name="accelerationStructureReference_" type="uint64_t" default_raw="{}" />
    </constructor>
    <constructor name="AccelerationStructureMatrixMotionInstanceNV">
      <argument name="rhs" type="const AccelerationStructureMatrixMotionInstanceNV &amp;" />
    </constructor>
    <constructor name="AccelerationStructureMatrixMotionInstanceNV">
      <argument name="rhs" type="const VkAccelerationStructureMatrixMotionInstanceNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureMatrixMotionInstanceNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureMatrixMotionInstanceNV &amp;" />
    </method>
    <method name="setTransformT0">
      <argument name="transformT0_" type="const vk::TransformMatrixKHR &amp;" />
    </method>
    <method name="setTransformT1">
      <argument name="transformT1_" type="const vk::TransformMatrixKHR &amp;" />
    </method>
    <method name="setInstanceCustomIndex">
      <argument name="instanceCustomIndex_" type="uint32_t" />
    </method>
    <method name="setMask">
      <argument name="mask_" type="uint32_t" />
    </method>
    <method name="setInstanceShaderBindingTableRecordOffset">
      <argument name="instanceShaderBindingTableRecordOffset_" type="uint32_t" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::GeometryInstanceFlagsKHR" />
    </method>
    <method name="setAccelerationStructureReference">
      <argument name="accelerationStructureReference_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureMatrixMotionInstanceNV &amp;" />
    <conversion_function name="operator VkAccelerationStructureMatrixMotionInstanceNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureMatrixMotionInstanceNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureMatrixMotionInstanceNV &amp;" />
    </method>
    <field name="transformT0" />
    <field name="transformT1" />
    <field name="instanceCustomIndex" />
    <field name="mask" />
    <field name="instanceShaderBindingTableRecordOffset" />
    <field name="flags" />
    <field name="accelerationStructureReference" />
  </struct>
  <struct name="AccelerationStructureMotionInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureMotionInfoNV">
      <argument name="maxInstances_" type="uint32_t" default_raw="{}" />
      <argument name="flags_" type="vk::AccelerationStructureMotionInfoFlagsNV" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureMotionInfoNV">
      <argument name="rhs" type="const AccelerationStructureMotionInfoNV &amp;" />
    </constructor>
    <constructor name="AccelerationStructureMotionInfoNV">
      <argument name="rhs" type="const VkAccelerationStructureMotionInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureMotionInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureMotionInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMaxInstances">
      <argument name="maxInstances_" type="uint32_t" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::AccelerationStructureMotionInfoFlagsNV" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureMotionInfoNV &amp;" />
    <conversion_function name="operator VkAccelerationStructureMotionInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureMotionInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureMotionInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxInstances" />
    <field name="flags" />
  </struct>
  <union name="AccelerationStructureMotionInstanceDataNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureMotionInstanceDataNV">
      <argument name="staticInstance_" type="vk::AccelerationStructureInstanceKHR" default_raw="{}" />
    </constructor>
    <constructor name="AccelerationStructureMotionInstanceDataNV">
      <argument name="matrixMotionInstance_" type="vk::AccelerationStructureMatrixMotionInstanceNV" />
    </constructor>
    <constructor name="AccelerationStructureMotionInstanceDataNV">
      <argument name="srtMotionInstance_" type="vk::AccelerationStructureSRTMotionInstanceNV" />
    </constructor>
    <method name="setStaticInstance">
      <argument name="staticInstance_" type="const vk::AccelerationStructureInstanceKHR &amp;" />
    </method>
    <method name="setMatrixMotionInstance">
      <argument name="matrixMotionInstance_" type="const vk::AccelerationStructureMatrixMotionInstanceNV &amp;" />
    </method>
    <method name="setSrtMotionInstance">
      <argument name="srtMotionInstance_" type="const vk::AccelerationStructureSRTMotionInstanceNV &amp;" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureMotionInstanceDataNV &amp;" />
    <conversion_function name="operator VkAccelerationStructureMotionInstanceDataNV &amp;" />
    <field name="staticInstance" />
    <field name="matrixMotionInstance" />
    <field name="srtMotionInstance" />
  </union>
  <struct name="AccelerationStructureMotionInstanceNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureMotionInstanceNV">
      <argument name="type_" type="vk::AccelerationStructureMotionInstanceTypeNV" default_raw="VULKAN_HPP_NAMESPACE::AccelerationStructureMotionInstanceTypeNV::eStatic" />
      <argument name="flags_" type="vk::AccelerationStructureMotionInstanceFlagsNV" default_raw="{}" />
      <argument name="data_" type="vk::AccelerationStructureMotionInstanceDataNV" default_raw="{}" />
    </constructor>
    <constructor name="AccelerationStructureMotionInstanceNV">
      <argument name="rhs" type="const AccelerationStructureMotionInstanceNV &amp;" />
    </constructor>
    <constructor name="AccelerationStructureMotionInstanceNV">
      <argument name="rhs" type="const VkAccelerationStructureMotionInstanceNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureMotionInstanceNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureMotionInstanceNV &amp;" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::AccelerationStructureMotionInstanceTypeNV" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::AccelerationStructureMotionInstanceFlagsNV" />
    </method>
    <method name="setData">
      <argument name="data_" type="const vk::AccelerationStructureMotionInstanceDataNV &amp;" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureMotionInstanceNV &amp;" />
    <conversion_function name="operator VkAccelerationStructureMotionInstanceNV &amp;" />
    <field name="type" />
    <field name="flags" />
    <field name="data" />
  </struct>
  <struct name="AccelerationStructureSRTMotionInstanceNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureSRTMotionInstanceNV">
      <argument name="transformT0_" type="vk::SRTDataNV" default_raw="{}" />
      <argument name="transformT1_" type="vk::SRTDataNV" default_raw="{}" />
      <argument name="instanceCustomIndex_" type="uint32_t" default_raw="{}" />
      <argument name="mask_" type="uint32_t" default_raw="{}" />
      <argument name="instanceShaderBindingTableRecordOffset_" type="uint32_t" default_raw="{}" />
      <argument name="flags_" type="vk::GeometryInstanceFlagsKHR" default_raw="{}" />
      <argument name="accelerationStructureReference_" type="uint64_t" default_raw="{}" />
    </constructor>
    <constructor name="AccelerationStructureSRTMotionInstanceNV">
      <argument name="rhs" type="const AccelerationStructureSRTMotionInstanceNV &amp;" />
    </constructor>
    <constructor name="AccelerationStructureSRTMotionInstanceNV">
      <argument name="rhs" type="const VkAccelerationStructureSRTMotionInstanceNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureSRTMotionInstanceNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureSRTMotionInstanceNV &amp;" />
    </method>
    <method name="setTransformT0">
      <argument name="transformT0_" type="const vk::SRTDataNV &amp;" />
    </method>
    <method name="setTransformT1">
      <argument name="transformT1_" type="const vk::SRTDataNV &amp;" />
    </method>
    <method name="setInstanceCustomIndex">
      <argument name="instanceCustomIndex_" type="uint32_t" />
    </method>
    <method name="setMask">
      <argument name="mask_" type="uint32_t" />
    </method>
    <method name="setInstanceShaderBindingTableRecordOffset">
      <argument name="instanceShaderBindingTableRecordOffset_" type="uint32_t" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::GeometryInstanceFlagsKHR" />
    </method>
    <method name="setAccelerationStructureReference">
      <argument name="accelerationStructureReference_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureSRTMotionInstanceNV &amp;" />
    <conversion_function name="operator VkAccelerationStructureSRTMotionInstanceNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureSRTMotionInstanceNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureSRTMotionInstanceNV &amp;" />
    </method>
    <field name="transformT0" />
    <field name="transformT1" />
    <field name="instanceCustomIndex" />
    <field name="mask" />
    <field name="instanceShaderBindingTableRecordOffset" />
    <field name="flags" />
    <field name="accelerationStructureReference" />
  </struct>
  <struct name="PhysicalDeviceRayTracingMotionBlurFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRayTracingMotionBlurFeaturesNV">
      <argument name="rayTracingMotionBlur_" type="vk::Bool32" default_raw="{}" />
      <argument name="rayTracingMotionBlurPipelineTraceRaysIndirect_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingMotionBlurFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceRayTracingMotionBlurFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingMotionBlurFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingMotionBlurFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingMotionBlurFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingMotionBlurFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRayTracingMotionBlur">
      <argument name="rayTracingMotionBlur_" type="vk::Bool32" />
    </method>
    <method name="setRayTracingMotionBlurPipelineTraceRaysIndirect">
      <argument name="rayTracingMotionBlurPipelineTraceRaysIndirect_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRayTracingMotionBlurFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRayTracingMotionBlurFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRayTracingMotionBlurFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingMotionBlurFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="rayTracingMotionBlur" />
    <field name="rayTracingMotionBlurPipelineTraceRaysIndirect" />
  </struct>
  <struct name="SRTDataNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SRTDataNV">
      <argument name="sx_" type="float" default_raw="{}" />
      <argument name="a_" type="float" default_raw="{}" />
      <argument name="b_" type="float" default_raw="{}" />
      <argument name="pvx_" type="float" default_raw="{}" />
      <argument name="sy_" type="float" default_raw="{}" />
      <argument name="c_" type="float" default_raw="{}" />
      <argument name="pvy_" type="float" default_raw="{}" />
      <argument name="sz_" type="float" default_raw="{}" />
      <argument name="pvz_" type="float" default_raw="{}" />
      <argument name="qx_" type="float" default_raw="{}" />
      <argument name="qy_" type="float" default_raw="{}" />
      <argument name="qz_" type="float" default_raw="{}" />
      <argument name="qw_" type="float" default_raw="{}" />
      <argument name="tx_" type="float" default_raw="{}" />
      <argument name="ty_" type="float" default_raw="{}" />
      <argument name="tz_" type="float" default_raw="{}" />
    </constructor>
    <constructor name="SRTDataNV">
      <argument name="rhs" type="const SRTDataNV &amp;" />
    </constructor>
    <constructor name="SRTDataNV">
      <argument name="rhs" type="const VkSRTDataNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SRTDataNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSRTDataNV &amp;" />
    </method>
    <method name="setSx">
      <argument name="sx_" type="float" />
    </method>
    <method name="setA">
      <argument name="a_" type="float" />
    </method>
    <method name="setB">
      <argument name="b_" type="float" />
    </method>
    <method name="setPvx">
      <argument name="pvx_" type="float" />
    </method>
    <method name="setSy">
      <argument name="sy_" type="float" />
    </method>
    <method name="setC">
      <argument name="c_" type="float" />
    </method>
    <method name="setPvy">
      <argument name="pvy_" type="float" />
    </method>
    <method name="setSz">
      <argument name="sz_" type="float" />
    </method>
    <method name="setPvz">
      <argument name="pvz_" type="float" />
    </method>
    <method name="setQx">
      <argument name="qx_" type="float" />
    </method>
    <method name="setQy">
      <argument name="qy_" type="float" />
    </method>
    <method name="setQz">
      <argument name="qz_" type="float" />
    </method>
    <method name="setQw">
      <argument name="qw_" type="float" />
    </method>
    <method name="setTx">
      <argument name="tx_" type="float" />
    </method>
    <method name="setTy">
      <argument name="ty_" type="float" />
    </method>
    <method name="setTz">
      <argument name="tz_" type="float" />
    </method>
    <conversion_function name="operator const VkSRTDataNV &amp;" />
    <conversion_function name="operator VkSRTDataNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SRTDataNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SRTDataNV &amp;" />
    </method>
    <field name="sx" />
    <field name="a" />
    <field name="b" />
    <field name="pvx" />
    <field name="sy" />
    <field name="c" />
    <field name="pvy" />
    <field name="sz" />
    <field name="pvz" />
    <field name="qx" />
    <field name="qy" />
    <field name="qz" />
    <field name="qw" />
    <field name="tx" />
    <field name="ty" />
    <field name="tz" />
  </struct>
  <struct name="DrawMeshTasksIndirectCommandEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DrawMeshTasksIndirectCommandEXT">
      <argument name="groupCountX_" type="uint32_t" default_raw="{}" />
      <argument name="groupCountY_" type="uint32_t" default_raw="{}" />
      <argument name="groupCountZ_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="DrawMeshTasksIndirectCommandEXT">
      <argument name="rhs" type="const DrawMeshTasksIndirectCommandEXT &amp;" />
    </constructor>
    <constructor name="DrawMeshTasksIndirectCommandEXT">
      <argument name="rhs" type="const VkDrawMeshTasksIndirectCommandEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DrawMeshTasksIndirectCommandEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDrawMeshTasksIndirectCommandEXT &amp;" />
    </method>
    <method name="setGroupCountX">
      <argument name="groupCountX_" type="uint32_t" />
    </method>
    <method name="setGroupCountY">
      <argument name="groupCountY_" type="uint32_t" />
    </method>
    <method name="setGroupCountZ">
      <argument name="groupCountZ_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDrawMeshTasksIndirectCommandEXT &amp;" />
    <conversion_function name="operator VkDrawMeshTasksIndirectCommandEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DrawMeshTasksIndirectCommandEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DrawMeshTasksIndirectCommandEXT &amp;" />
    </method>
    <field name="groupCountX" />
    <field name="groupCountY" />
    <field name="groupCountZ" />
  </struct>
  <struct name="PhysicalDeviceMeshShaderFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMeshShaderFeaturesEXT">
      <argument name="taskShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="meshShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="multiviewMeshShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="primitiveFragmentShadingRateMeshShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="meshShaderQueries_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMeshShaderFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMeshShaderFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceMeshShaderFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMeshShaderFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTaskShader">
      <argument name="taskShader_" type="vk::Bool32" />
    </method>
    <method name="setMeshShader">
      <argument name="meshShader_" type="vk::Bool32" />
    </method>
    <method name="setMultiviewMeshShader">
      <argument name="multiviewMeshShader_" type="vk::Bool32" />
    </method>
    <method name="setPrimitiveFragmentShadingRateMeshShader">
      <argument name="primitiveFragmentShadingRateMeshShader_" type="vk::Bool32" />
    </method>
    <method name="setMeshShaderQueries">
      <argument name="meshShaderQueries_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMeshShaderFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMeshShaderFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="taskShader" />
    <field name="meshShader" />
    <field name="multiviewMeshShader" />
    <field name="primitiveFragmentShadingRateMeshShader" />
    <field name="meshShaderQueries" />
  </struct>
  <struct name="PhysicalDeviceMeshShaderPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMeshShaderPropertiesEXT">
      <argument name="maxTaskWorkGroupTotalCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxTaskWorkGroupCount_" type="const std::array&lt;uint32_t, 3&gt; &amp;" default_raw="{}" />
      <argument name="maxTaskWorkGroupInvocations_" type="uint32_t" default_raw="{}" />
      <argument name="maxTaskWorkGroupSize_" type="const std::array&lt;uint32_t, 3&gt; &amp;" default_raw="{}" />
      <argument name="maxTaskPayloadSize_" type="uint32_t" default_raw="{}" />
      <argument name="maxTaskSharedMemorySize_" type="uint32_t" default_raw="{}" />
      <argument name="maxTaskPayloadAndSharedMemorySize_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshWorkGroupTotalCount_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshWorkGroupCount_" type="const std::array&lt;uint32_t, 3&gt; &amp;" default_raw="{}" />
      <argument name="maxMeshWorkGroupInvocations_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshWorkGroupSize_" type="const std::array&lt;uint32_t, 3&gt; &amp;" default_raw="{}" />
      <argument name="maxMeshSharedMemorySize_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshPayloadAndSharedMemorySize_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshOutputMemorySize_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshPayloadAndOutputMemorySize_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshOutputComponents_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshOutputVertices_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshOutputPrimitives_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshOutputLayers_" type="uint32_t" default_raw="{}" />
      <argument name="maxMeshMultiviewViewCount_" type="uint32_t" default_raw="{}" />
      <argument name="meshOutputPerVertexGranularity_" type="uint32_t" default_raw="{}" />
      <argument name="meshOutputPerPrimitiveGranularity_" type="uint32_t" default_raw="{}" />
      <argument name="maxPreferredTaskWorkGroupInvocations_" type="uint32_t" default_raw="{}" />
      <argument name="maxPreferredMeshWorkGroupInvocations_" type="uint32_t" default_raw="{}" />
      <argument name="prefersLocalInvocationVertexOutput_" type="vk::Bool32" default_raw="{}" />
      <argument name="prefersLocalInvocationPrimitiveOutput_" type="vk::Bool32" default_raw="{}" />
      <argument name="prefersCompactVertexOutput_" type="vk::Bool32" default_raw="{}" />
      <argument name="prefersCompactPrimitiveOutput_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMeshShaderPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMeshShaderPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceMeshShaderPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMeshShaderPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMeshShaderPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMeshShaderPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMeshShaderPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxTaskWorkGroupTotalCount" />
    <field name="maxTaskWorkGroupCount" />
    <field name="maxTaskWorkGroupInvocations" />
    <field name="maxTaskWorkGroupSize" />
    <field name="maxTaskPayloadSize" />
    <field name="maxTaskSharedMemorySize" />
    <field name="maxTaskPayloadAndSharedMemorySize" />
    <field name="maxMeshWorkGroupTotalCount" />
    <field name="maxMeshWorkGroupCount" />
    <field name="maxMeshWorkGroupInvocations" />
    <field name="maxMeshWorkGroupSize" />
    <field name="maxMeshSharedMemorySize" />
    <field name="maxMeshPayloadAndSharedMemorySize" />
    <field name="maxMeshOutputMemorySize" />
    <field name="maxMeshPayloadAndOutputMemorySize" />
    <field name="maxMeshOutputComponents" />
    <field name="maxMeshOutputVertices" />
    <field name="maxMeshOutputPrimitives" />
    <field name="maxMeshOutputLayers" />
    <field name="maxMeshMultiviewViewCount" />
    <field name="meshOutputPerVertexGranularity" />
    <field name="meshOutputPerPrimitiveGranularity" />
    <field name="maxPreferredTaskWorkGroupInvocations" />
    <field name="maxPreferredMeshWorkGroupInvocations" />
    <field name="prefersLocalInvocationVertexOutput" />
    <field name="prefersLocalInvocationPrimitiveOutput" />
    <field name="prefersCompactVertexOutput" />
    <field name="prefersCompactPrimitiveOutput" />
  </struct>
  <struct name="PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT">
      <argument name="ycbcr2plane444Formats_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setYcbcr2plane444Formats">
      <argument name="ycbcr2plane444Formats_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="ycbcr2plane444Formats" />
  </struct>
  <struct name="PhysicalDeviceFragmentDensityMap2FeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentDensityMap2FeaturesEXT">
      <argument name="fragmentDensityMapDeferred_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMap2FeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMap2FeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMap2FeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMap2FeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFragmentDensityMapDeferred">
      <argument name="fragmentDensityMapDeferred_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentDensityMap2FeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMap2FeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMap2FeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fragmentDensityMapDeferred" />
  </struct>
  <struct name="PhysicalDeviceFragmentDensityMap2PropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentDensityMap2PropertiesEXT">
      <argument name="subsampledLoads_" type="vk::Bool32" default_raw="{}" />
      <argument name="subsampledCoarseReconstructionEarlyAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxSubsampledArrayLayers_" type="uint32_t" default_raw="{}" />
      <argument name="maxDescriptorSetSubsampledSamplers_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMap2PropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMap2PropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMap2PropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMap2PropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentDensityMap2PropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMap2PropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMap2PropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="subsampledLoads" />
    <field name="subsampledCoarseReconstructionEarlyAccess" />
    <field name="maxSubsampledArrayLayers" />
    <field name="maxDescriptorSetSubsampledSamplers" />
  </struct>
  <struct name="CopyCommandTransformInfoQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyCommandTransformInfoQCOM">
      <argument name="transform_" type="vk::SurfaceTransformFlagBitsKHR" default_raw="VULKAN_HPP_NAMESPACE::SurfaceTransformFlagBitsKHR::eIdentity" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyCommandTransformInfoQCOM">
      <argument name="rhs" type="const CopyCommandTransformInfoQCOM &amp;" />
    </constructor>
    <constructor name="CopyCommandTransformInfoQCOM">
      <argument name="rhs" type="const VkCopyCommandTransformInfoQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyCommandTransformInfoQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyCommandTransformInfoQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setTransform">
      <argument name="transform_" type="vk::SurfaceTransformFlagBitsKHR" />
    </method>
    <conversion_function name="operator const VkCopyCommandTransformInfoQCOM &amp;" />
    <conversion_function name="operator VkCopyCommandTransformInfoQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyCommandTransformInfoQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyCommandTransformInfoQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="transform" />
  </struct>
  <struct name="PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR">
      <argument name="workgroupMemoryExplicitLayout_" type="vk::Bool32" default_raw="{}" />
      <argument name="workgroupMemoryExplicitLayoutScalarBlockLayout_" type="vk::Bool32" default_raw="{}" />
      <argument name="workgroupMemoryExplicitLayout8BitAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="workgroupMemoryExplicitLayout16BitAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setWorkgroupMemoryExplicitLayout">
      <argument name="workgroupMemoryExplicitLayout_" type="vk::Bool32" />
    </method>
    <method name="setWorkgroupMemoryExplicitLayoutScalarBlockLayout">
      <argument name="workgroupMemoryExplicitLayoutScalarBlockLayout_" type="vk::Bool32" />
    </method>
    <method name="setWorkgroupMemoryExplicitLayout8BitAccess">
      <argument name="workgroupMemoryExplicitLayout8BitAccess_" type="vk::Bool32" />
    </method>
    <method name="setWorkgroupMemoryExplicitLayout16BitAccess">
      <argument name="workgroupMemoryExplicitLayout16BitAccess_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="workgroupMemoryExplicitLayout" />
    <field name="workgroupMemoryExplicitLayoutScalarBlockLayout" />
    <field name="workgroupMemoryExplicitLayout8BitAccess" />
    <field name="workgroupMemoryExplicitLayout16BitAccess" />
  </struct>
  <struct name="ImageCompressionControlEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageCompressionControlEXT">
      <argument name="flags_" type="vk::ImageCompressionFlagsEXT" default_raw="{}" />
      <argument name="compressionControlPlaneCount_" type="uint32_t" default_raw="{}" />
      <argument name="pFixedRateFlags_" type="vk::ImageCompressionFixedRateFlagsEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageCompressionControlEXT">
      <argument name="rhs" type="const ImageCompressionControlEXT &amp;" />
    </constructor>
    <constructor name="ImageCompressionControlEXT">
      <argument name="rhs" type="const VkImageCompressionControlEXT &amp;" />
    </constructor>
    <constructor name="ImageCompressionControlEXT">
      <argument name="flags_" type="vk::ImageCompressionFlagsEXT" />
      <argument name="fixedRateFlags_" type="const vk::ArrayProxyNoTemporaries&lt;vk::ImageCompressionFixedRateFlagsEXT&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageCompressionControlEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageCompressionControlEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::ImageCompressionFlagsEXT" />
    </method>
    <method name="setCompressionControlPlaneCount">
      <argument name="compressionControlPlaneCount_" type="uint32_t" />
    </method>
    <method name="setPFixedRateFlags">
      <argument name="pFixedRateFlags_" type="vk::ImageCompressionFixedRateFlagsEXT *" />
    </method>
    <method name="setFixedRateFlags">
      <argument name="fixedRateFlags_" type="const vk::ArrayProxyNoTemporaries&lt;vk::ImageCompressionFixedRateFlagsEXT&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkImageCompressionControlEXT &amp;" />
    <conversion_function name="operator VkImageCompressionControlEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageCompressionControlEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageCompressionControlEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="compressionControlPlaneCount" />
    <field name="pFixedRateFlags" />
  </struct>
  <struct name="ImageCompressionPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageCompressionPropertiesEXT">
      <argument name="imageCompressionFlags_" type="vk::ImageCompressionFlagsEXT" default_raw="{}" />
      <argument name="imageCompressionFixedRateFlags_" type="vk::ImageCompressionFixedRateFlagsEXT" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageCompressionPropertiesEXT">
      <argument name="rhs" type="const ImageCompressionPropertiesEXT &amp;" />
    </constructor>
    <constructor name="ImageCompressionPropertiesEXT">
      <argument name="rhs" type="const VkImageCompressionPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageCompressionPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageCompressionPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkImageCompressionPropertiesEXT &amp;" />
    <conversion_function name="operator VkImageCompressionPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageCompressionPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageCompressionPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageCompressionFlags" />
    <field name="imageCompressionFixedRateFlags" />
  </struct>
  <struct name="PhysicalDeviceImageCompressionControlFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageCompressionControlFeaturesEXT">
      <argument name="imageCompressionControl_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageCompressionControlFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceImageCompressionControlFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageCompressionControlFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceImageCompressionControlFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageCompressionControlFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageCompressionControlFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setImageCompressionControl">
      <argument name="imageCompressionControl_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageCompressionControlFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageCompressionControlFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageCompressionControlFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageCompressionControlFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageCompressionControl" />
  </struct>
  <struct name="PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT">
      <argument name="attachmentFeedbackLoopLayout_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setAttachmentFeedbackLoopLayout">
      <argument name="attachmentFeedbackLoopLayout_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="attachmentFeedbackLoopLayout" />
  </struct>
  <struct name="PhysicalDevice4444FormatsFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevice4444FormatsFeaturesEXT">
      <argument name="formatA4R4G4B4_" type="vk::Bool32" default_raw="{}" />
      <argument name="formatA4B4G4R4_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevice4444FormatsFeaturesEXT">
      <argument name="rhs" type="const PhysicalDevice4444FormatsFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDevice4444FormatsFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDevice4444FormatsFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevice4444FormatsFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevice4444FormatsFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFormatA4R4G4B4">
      <argument name="formatA4R4G4B4_" type="vk::Bool32" />
    </method>
    <method name="setFormatA4B4G4R4">
      <argument name="formatA4B4G4R4_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevice4444FormatsFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDevice4444FormatsFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevice4444FormatsFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevice4444FormatsFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="formatA4R4G4B4" />
    <field name="formatA4B4G4R4" />
  </struct>
  <struct name="DeviceFaultAddressInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceFaultAddressInfoEXT">
      <argument name="addressType_" type="vk::DeviceFaultAddressTypeEXT" default_raw="VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT::eNone" />
      <argument name="reportedAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="addressPrecision_" type="vk::DeviceSize" default_raw="{}" />
    </constructor>
    <constructor name="DeviceFaultAddressInfoEXT">
      <argument name="rhs" type="const DeviceFaultAddressInfoEXT &amp;" />
    </constructor>
    <constructor name="DeviceFaultAddressInfoEXT">
      <argument name="rhs" type="const VkDeviceFaultAddressInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceFaultAddressInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceFaultAddressInfoEXT &amp;" />
    </method>
    <method name="setAddressType">
      <argument name="addressType_" type="vk::DeviceFaultAddressTypeEXT" />
    </method>
    <method name="setReportedAddress">
      <argument name="reportedAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setAddressPrecision">
      <argument name="addressPrecision_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkDeviceFaultAddressInfoEXT &amp;" />
    <conversion_function name="operator VkDeviceFaultAddressInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceFaultAddressInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceFaultAddressInfoEXT &amp;" />
    </method>
    <field name="addressType" />
    <field name="reportedAddress" />
    <field name="addressPrecision" />
  </struct>
  <struct name="DeviceFaultCountsEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceFaultCountsEXT">
      <argument name="addressInfoCount_" type="uint32_t" default_raw="{}" />
      <argument name="vendorInfoCount_" type="uint32_t" default_raw="{}" />
      <argument name="vendorBinarySize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceFaultCountsEXT">
      <argument name="rhs" type="const DeviceFaultCountsEXT &amp;" />
    </constructor>
    <constructor name="DeviceFaultCountsEXT">
      <argument name="rhs" type="const VkDeviceFaultCountsEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceFaultCountsEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceFaultCountsEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setAddressInfoCount">
      <argument name="addressInfoCount_" type="uint32_t" />
    </method>
    <method name="setVendorInfoCount">
      <argument name="vendorInfoCount_" type="uint32_t" />
    </method>
    <method name="setVendorBinarySize">
      <argument name="vendorBinarySize_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkDeviceFaultCountsEXT &amp;" />
    <conversion_function name="operator VkDeviceFaultCountsEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceFaultCountsEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceFaultCountsEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="addressInfoCount" />
    <field name="vendorInfoCount" />
    <field name="vendorBinarySize" />
  </struct>
  <struct name="DeviceFaultInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceFaultInfoEXT">
      <argument name="description_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="pAddressInfos_" type="vk::DeviceFaultAddressInfoEXT *" default_raw="{}" />
      <argument name="pVendorInfos_" type="vk::DeviceFaultVendorInfoEXT *" default_raw="{}" />
      <argument name="pVendorBinaryData_" type="void *" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceFaultInfoEXT">
      <argument name="rhs" type="const DeviceFaultInfoEXT &amp;" />
    </constructor>
    <constructor name="DeviceFaultInfoEXT">
      <argument name="rhs" type="const VkDeviceFaultInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceFaultInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceFaultInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDescription">
      <argument name="description_" type="std::array&lt;char, 256U&gt;" />
    </method>
    <method name="setPAddressInfos">
      <argument name="pAddressInfos_" type="vk::DeviceFaultAddressInfoEXT *" />
    </method>
    <method name="setPVendorInfos">
      <argument name="pVendorInfos_" type="vk::DeviceFaultVendorInfoEXT *" />
    </method>
    <method name="setPVendorBinaryData">
      <argument name="pVendorBinaryData_" type="void *" />
    </method>
    <conversion_function name="operator const VkDeviceFaultInfoEXT &amp;" />
    <conversion_function name="operator VkDeviceFaultInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceFaultInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceFaultInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="description" />
    <field name="pAddressInfos" />
    <field name="pVendorInfos" />
    <field name="pVendorBinaryData" />
  </struct>
  <struct name="DeviceFaultVendorBinaryHeaderVersionOneEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceFaultVendorBinaryHeaderVersionOneEXT">
      <argument name="headerSize_" type="uint32_t" default_raw="{}" />
      <argument name="headerVersion_" type="vk::DeviceFaultVendorBinaryHeaderVersionEXT" default_raw="VULKAN_HPP_NAMESPACE::DeviceFaultVendorBinaryHeaderVersionEXT::eOne" />
      <argument name="vendorID_" type="uint32_t" default_raw="{}" />
      <argument name="deviceID_" type="uint32_t" default_raw="{}" />
      <argument name="driverVersion_" type="uint32_t" default_raw="{}" />
      <argument name="pipelineCacheUUID_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="applicationNameOffset_" type="uint32_t" default_raw="{}" />
      <argument name="applicationVersion_" type="uint32_t" default_raw="{}" />
      <argument name="engineNameOffset_" type="uint32_t" default_raw="{}" />
      <argument name="engineVersion_" type="uint32_t" default_raw="{}" />
      <argument name="apiVersion_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="DeviceFaultVendorBinaryHeaderVersionOneEXT">
      <argument name="rhs" type="const DeviceFaultVendorBinaryHeaderVersionOneEXT &amp;" />
    </constructor>
    <constructor name="DeviceFaultVendorBinaryHeaderVersionOneEXT">
      <argument name="rhs" type="const VkDeviceFaultVendorBinaryHeaderVersionOneEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceFaultVendorBinaryHeaderVersionOneEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceFaultVendorBinaryHeaderVersionOneEXT &amp;" />
    </method>
    <method name="setHeaderSize">
      <argument name="headerSize_" type="uint32_t" />
    </method>
    <method name="setHeaderVersion">
      <argument name="headerVersion_" type="vk::DeviceFaultVendorBinaryHeaderVersionEXT" />
    </method>
    <method name="setVendorID">
      <argument name="vendorID_" type="uint32_t" />
    </method>
    <method name="setDeviceID">
      <argument name="deviceID_" type="uint32_t" />
    </method>
    <method name="setDriverVersion">
      <argument name="driverVersion_" type="uint32_t" />
    </method>
    <method name="setPipelineCacheUUID">
      <argument name="pipelineCacheUUID_" type="std::array&lt;uint8_t, 16U&gt;" />
    </method>
    <method name="setApplicationNameOffset">
      <argument name="applicationNameOffset_" type="uint32_t" />
    </method>
    <method name="setApplicationVersion">
      <argument name="applicationVersion_" type="uint32_t" />
    </method>
    <method name="setEngineNameOffset">
      <argument name="engineNameOffset_" type="uint32_t" />
    </method>
    <method name="setEngineVersion">
      <argument name="engineVersion_" type="uint32_t" />
    </method>
    <method name="setApiVersion">
      <argument name="apiVersion_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDeviceFaultVendorBinaryHeaderVersionOneEXT &amp;" />
    <conversion_function name="operator VkDeviceFaultVendorBinaryHeaderVersionOneEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceFaultVendorBinaryHeaderVersionOneEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceFaultVendorBinaryHeaderVersionOneEXT &amp;" />
    </method>
    <field name="headerSize" />
    <field name="headerVersion" />
    <field name="vendorID" />
    <field name="deviceID" />
    <field name="driverVersion" />
    <field name="pipelineCacheUUID" />
    <field name="applicationNameOffset" />
    <field name="applicationVersion" />
    <field name="engineNameOffset" />
    <field name="engineVersion" />
    <field name="apiVersion" />
  </struct>
  <struct name="DeviceFaultVendorInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceFaultVendorInfoEXT">
      <argument name="description_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="vendorFaultCode_" type="uint64_t" default_raw="{}" />
      <argument name="vendorFaultData_" type="uint64_t" default_raw="{}" />
    </constructor>
    <constructor name="DeviceFaultVendorInfoEXT">
      <argument name="rhs" type="const DeviceFaultVendorInfoEXT &amp;" />
    </constructor>
    <constructor name="DeviceFaultVendorInfoEXT">
      <argument name="rhs" type="const VkDeviceFaultVendorInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceFaultVendorInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceFaultVendorInfoEXT &amp;" />
    </method>
    <method name="setDescription">
      <argument name="description_" type="std::array&lt;char, 256U&gt;" />
    </method>
    <method name="setVendorFaultCode">
      <argument name="vendorFaultCode_" type="uint64_t" />
    </method>
    <method name="setVendorFaultData">
      <argument name="vendorFaultData_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkDeviceFaultVendorInfoEXT &amp;" />
    <conversion_function name="operator VkDeviceFaultVendorInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceFaultVendorInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceFaultVendorInfoEXT &amp;" />
    </method>
    <field name="description" />
    <field name="vendorFaultCode" />
    <field name="vendorFaultData" />
  </struct>
  <struct name="PhysicalDeviceFaultFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFaultFeaturesEXT">
      <argument name="deviceFault_" type="vk::Bool32" default_raw="{}" />
      <argument name="deviceFaultVendorBinary_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFaultFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceFaultFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFaultFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceFaultFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFaultFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFaultFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDeviceFault">
      <argument name="deviceFault_" type="vk::Bool32" />
    </method>
    <method name="setDeviceFaultVendorBinary">
      <argument name="deviceFaultVendorBinary_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFaultFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFaultFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFaultFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFaultFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceFault" />
    <field name="deviceFaultVendorBinary" />
  </struct>
  <struct name="PhysicalDeviceRGBA10X6FormatsFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRGBA10X6FormatsFeaturesEXT">
      <argument name="formatRgba10x6WithoutYCbCrSampler_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRGBA10X6FormatsFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceRGBA10X6FormatsFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRGBA10X6FormatsFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRGBA10X6FormatsFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFormatRgba10x6WithoutYCbCrSampler">
      <argument name="formatRgba10x6WithoutYCbCrSampler_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRGBA10X6FormatsFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRGBA10X6FormatsFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="formatRgba10x6WithoutYCbCrSampler" />
  </struct>
  <struct name="PhysicalDeviceVertexInputDynamicStateFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVertexInputDynamicStateFeaturesEXT">
      <argument name="vertexInputDynamicState_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVertexInputDynamicStateFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceVertexInputDynamicStateFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVertexInputDynamicStateFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVertexInputDynamicStateFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setVertexInputDynamicState">
      <argument name="vertexInputDynamicState_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVertexInputDynamicStateFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVertexInputDynamicStateFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="vertexInputDynamicState" />
  </struct>
  <struct name="VertexInputAttributeDescription2EXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VertexInputAttributeDescription2EXT">
      <argument name="location_" type="uint32_t" default_raw="{}" />
      <argument name="binding_" type="uint32_t" default_raw="{}" />
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="offset_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VertexInputAttributeDescription2EXT">
      <argument name="rhs" type="const VertexInputAttributeDescription2EXT &amp;" />
    </constructor>
    <constructor name="VertexInputAttributeDescription2EXT">
      <argument name="rhs" type="const VkVertexInputAttributeDescription2EXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VertexInputAttributeDescription2EXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVertexInputAttributeDescription2EXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setLocation">
      <argument name="location_" type="uint32_t" />
    </method>
    <method name="setBinding">
      <argument name="binding_" type="uint32_t" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="vk::Format" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVertexInputAttributeDescription2EXT &amp;" />
    <conversion_function name="operator VkVertexInputAttributeDescription2EXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VertexInputAttributeDescription2EXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VertexInputAttributeDescription2EXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="location" />
    <field name="binding" />
    <field name="format" />
    <field name="offset" />
  </struct>
  <struct name="VertexInputBindingDescription2EXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VertexInputBindingDescription2EXT">
      <argument name="binding_" type="uint32_t" default_raw="{}" />
      <argument name="stride_" type="uint32_t" default_raw="{}" />
      <argument name="inputRate_" type="vk::VertexInputRate" default_raw="VULKAN_HPP_NAMESPACE::VertexInputRate::eVertex" />
      <argument name="divisor_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VertexInputBindingDescription2EXT">
      <argument name="rhs" type="const VertexInputBindingDescription2EXT &amp;" />
    </constructor>
    <constructor name="VertexInputBindingDescription2EXT">
      <argument name="rhs" type="const VkVertexInputBindingDescription2EXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VertexInputBindingDescription2EXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVertexInputBindingDescription2EXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setBinding">
      <argument name="binding_" type="uint32_t" />
    </method>
    <method name="setStride">
      <argument name="stride_" type="uint32_t" />
    </method>
    <method name="setInputRate">
      <argument name="inputRate_" type="vk::VertexInputRate" />
    </method>
    <method name="setDivisor">
      <argument name="divisor_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVertexInputBindingDescription2EXT &amp;" />
    <conversion_function name="operator VkVertexInputBindingDescription2EXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VertexInputBindingDescription2EXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VertexInputBindingDescription2EXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="binding" />
    <field name="stride" />
    <field name="inputRate" />
    <field name="divisor" />
  </struct>
  <struct name="PhysicalDeviceDrmPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDrmPropertiesEXT">
      <argument name="hasPrimary_" type="vk::Bool32" default_raw="{}" />
      <argument name="hasRender_" type="vk::Bool32" default_raw="{}" />
      <argument name="primaryMajor_" type="int64_t" default_raw="{}" />
      <argument name="primaryMinor_" type="int64_t" default_raw="{}" />
      <argument name="renderMajor_" type="int64_t" default_raw="{}" />
      <argument name="renderMinor_" type="int64_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDrmPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceDrmPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDrmPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceDrmPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDrmPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDrmPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDrmPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDrmPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDrmPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDrmPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="hasPrimary" />
    <field name="hasRender" />
    <field name="primaryMajor" />
    <field name="primaryMinor" />
    <field name="renderMajor" />
    <field name="renderMinor" />
  </struct>
  <struct name="DeviceAddressBindingCallbackDataEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceAddressBindingCallbackDataEXT">
      <argument name="flags_" type="vk::DeviceAddressBindingFlagsEXT" default_raw="{}" />
      <argument name="baseAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="bindingType_" type="vk::DeviceAddressBindingTypeEXT" default_raw="VULKAN_HPP_NAMESPACE::DeviceAddressBindingTypeEXT::eBind" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceAddressBindingCallbackDataEXT">
      <argument name="rhs" type="const DeviceAddressBindingCallbackDataEXT &amp;" />
    </constructor>
    <constructor name="DeviceAddressBindingCallbackDataEXT">
      <argument name="rhs" type="const VkDeviceAddressBindingCallbackDataEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceAddressBindingCallbackDataEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceAddressBindingCallbackDataEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DeviceAddressBindingFlagsEXT" />
    </method>
    <method name="setBaseAddress">
      <argument name="baseAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <method name="setBindingType">
      <argument name="bindingType_" type="vk::DeviceAddressBindingTypeEXT" />
    </method>
    <conversion_function name="operator const VkDeviceAddressBindingCallbackDataEXT &amp;" />
    <conversion_function name="operator VkDeviceAddressBindingCallbackDataEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceAddressBindingCallbackDataEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceAddressBindingCallbackDataEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="baseAddress" />
    <field name="size" />
    <field name="bindingType" />
  </struct>
  <struct name="PhysicalDeviceAddressBindingReportFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceAddressBindingReportFeaturesEXT">
      <argument name="reportAddressBinding_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceAddressBindingReportFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceAddressBindingReportFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceAddressBindingReportFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceAddressBindingReportFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceAddressBindingReportFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceAddressBindingReportFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setReportAddressBinding">
      <argument name="reportAddressBinding_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceAddressBindingReportFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceAddressBindingReportFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceAddressBindingReportFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceAddressBindingReportFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="reportAddressBinding" />
  </struct>
  <struct name="PhysicalDeviceDepthClipControlFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDepthClipControlFeaturesEXT">
      <argument name="depthClipControl_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDepthClipControlFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceDepthClipControlFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDepthClipControlFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceDepthClipControlFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDepthClipControlFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDepthClipControlFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDepthClipControl">
      <argument name="depthClipControl_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDepthClipControlFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDepthClipControlFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDepthClipControlFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDepthClipControlFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="depthClipControl" />
  </struct>
  <struct name="PipelineViewportDepthClipControlCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineViewportDepthClipControlCreateInfoEXT">
      <argument name="negativeOneToOne_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineViewportDepthClipControlCreateInfoEXT">
      <argument name="rhs" type="const PipelineViewportDepthClipControlCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineViewportDepthClipControlCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineViewportDepthClipControlCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineViewportDepthClipControlCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineViewportDepthClipControlCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setNegativeOneToOne">
      <argument name="negativeOneToOne_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPipelineViewportDepthClipControlCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineViewportDepthClipControlCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineViewportDepthClipControlCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineViewportDepthClipControlCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="negativeOneToOne" />
  </struct>
  <struct name="PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT">
      <argument name="primitiveTopologyListRestart_" type="vk::Bool32" default_raw="{}" />
      <argument name="primitiveTopologyPatchListRestart_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT">
      <argument name="rhs" type="const PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPrimitiveTopologyListRestart">
      <argument name="primitiveTopologyListRestart_" type="vk::Bool32" />
    </method>
    <method name="setPrimitiveTopologyPatchListRestart">
      <argument name="primitiveTopologyPatchListRestart_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="primitiveTopologyListRestart" />
    <field name="primitiveTopologyPatchListRestart" />
  </struct>
  <struct name="PhysicalDeviceSubpassShadingFeaturesHUAWEI" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSubpassShadingFeaturesHUAWEI">
      <argument name="subpassShading_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSubpassShadingFeaturesHUAWEI">
      <argument name="rhs" type="const PhysicalDeviceSubpassShadingFeaturesHUAWEI &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSubpassShadingFeaturesHUAWEI">
      <argument name="rhs" type="const VkPhysicalDeviceSubpassShadingFeaturesHUAWEI &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSubpassShadingFeaturesHUAWEI &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSubpassShadingFeaturesHUAWEI &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSubpassShading">
      <argument name="subpassShading_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSubpassShadingFeaturesHUAWEI &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSubpassShadingFeaturesHUAWEI &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSubpassShadingFeaturesHUAWEI &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSubpassShadingFeaturesHUAWEI &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="subpassShading" />
  </struct>
  <struct name="PhysicalDeviceSubpassShadingPropertiesHUAWEI" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSubpassShadingPropertiesHUAWEI">
      <argument name="maxSubpassShadingWorkgroupSizeAspectRatio_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSubpassShadingPropertiesHUAWEI">
      <argument name="rhs" type="const PhysicalDeviceSubpassShadingPropertiesHUAWEI &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSubpassShadingPropertiesHUAWEI">
      <argument name="rhs" type="const VkPhysicalDeviceSubpassShadingPropertiesHUAWEI &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSubpassShadingPropertiesHUAWEI &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSubpassShadingPropertiesHUAWEI &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSubpassShadingPropertiesHUAWEI &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSubpassShadingPropertiesHUAWEI &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSubpassShadingPropertiesHUAWEI &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSubpassShadingPropertiesHUAWEI &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxSubpassShadingWorkgroupSizeAspectRatio" />
  </struct>
  <struct name="SubpassShadingPipelineCreateInfoHUAWEI" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubpassShadingPipelineCreateInfoHUAWEI">
      <argument name="renderPass_" type="vk::RenderPass" default_raw="{}" />
      <argument name="subpass_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubpassShadingPipelineCreateInfoHUAWEI">
      <argument name="rhs" type="const SubpassShadingPipelineCreateInfoHUAWEI &amp;" />
    </constructor>
    <constructor name="SubpassShadingPipelineCreateInfoHUAWEI">
      <argument name="rhs" type="const VkSubpassShadingPipelineCreateInfoHUAWEI &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubpassShadingPipelineCreateInfoHUAWEI &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubpassShadingPipelineCreateInfoHUAWEI &amp;" />
    </method>
    <conversion_function name="operator const VkSubpassShadingPipelineCreateInfoHUAWEI &amp;" />
    <conversion_function name="operator VkSubpassShadingPipelineCreateInfoHUAWEI &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubpassShadingPipelineCreateInfoHUAWEI &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubpassShadingPipelineCreateInfoHUAWEI &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="renderPass" />
    <field name="subpass" />
  </struct>
  <struct name="PhysicalDeviceInvocationMaskFeaturesHUAWEI" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceInvocationMaskFeaturesHUAWEI">
      <argument name="invocationMask_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceInvocationMaskFeaturesHUAWEI">
      <argument name="rhs" type="const PhysicalDeviceInvocationMaskFeaturesHUAWEI &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceInvocationMaskFeaturesHUAWEI">
      <argument name="rhs" type="const VkPhysicalDeviceInvocationMaskFeaturesHUAWEI &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceInvocationMaskFeaturesHUAWEI &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceInvocationMaskFeaturesHUAWEI &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setInvocationMask">
      <argument name="invocationMask_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceInvocationMaskFeaturesHUAWEI &amp;" />
    <conversion_function name="operator VkPhysicalDeviceInvocationMaskFeaturesHUAWEI &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceInvocationMaskFeaturesHUAWEI &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceInvocationMaskFeaturesHUAWEI &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="invocationMask" />
  </struct>
  <struct name="MemoryGetRemoteAddressInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MemoryGetRemoteAddressInfoNV">
      <argument name="memory_" type="vk::DeviceMemory" default_raw="{}" />
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ExternalMemoryHandleTypeFlagBits::eOpaqueFd" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MemoryGetRemoteAddressInfoNV">
      <argument name="rhs" type="const MemoryGetRemoteAddressInfoNV &amp;" />
    </constructor>
    <constructor name="MemoryGetRemoteAddressInfoNV">
      <argument name="rhs" type="const VkMemoryGetRemoteAddressInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MemoryGetRemoteAddressInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMemoryGetRemoteAddressInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMemory">
      <argument name="memory_" type="vk::DeviceMemory" />
    </method>
    <method name="setHandleType">
      <argument name="handleType_" type="vk::ExternalMemoryHandleTypeFlagBits" />
    </method>
    <conversion_function name="operator const VkMemoryGetRemoteAddressInfoNV &amp;" />
    <conversion_function name="operator VkMemoryGetRemoteAddressInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MemoryGetRemoteAddressInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MemoryGetRemoteAddressInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memory" />
    <field name="handleType" />
  </struct>
  <struct name="PhysicalDeviceExternalMemoryRDMAFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExternalMemoryRDMAFeaturesNV">
      <argument name="externalMemoryRDMA_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExternalMemoryRDMAFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceExternalMemoryRDMAFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExternalMemoryRDMAFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceExternalMemoryRDMAFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExternalMemoryRDMAFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExternalMemoryRDMAFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setExternalMemoryRDMA">
      <argument name="externalMemoryRDMA_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExternalMemoryRDMAFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExternalMemoryRDMAFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExternalMemoryRDMAFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExternalMemoryRDMAFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="externalMemoryRDMA" />
  </struct>
  <struct name="PhysicalDevicePipelinePropertiesFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePipelinePropertiesFeaturesEXT">
      <argument name="pipelinePropertiesIdentifier_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePipelinePropertiesFeaturesEXT">
      <argument name="rhs" type="const PhysicalDevicePipelinePropertiesFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePipelinePropertiesFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDevicePipelinePropertiesFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePipelinePropertiesFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePipelinePropertiesFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPipelinePropertiesIdentifier">
      <argument name="pipelinePropertiesIdentifier_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePipelinePropertiesFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDevicePipelinePropertiesFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePipelinePropertiesFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePipelinePropertiesFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipelinePropertiesIdentifier" />
  </struct>
  <struct name="PipelinePropertiesIdentifierEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelinePropertiesIdentifierEXT">
      <argument name="pipelineIdentifier_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelinePropertiesIdentifierEXT">
      <argument name="rhs" type="const PipelinePropertiesIdentifierEXT &amp;" />
    </constructor>
    <constructor name="PipelinePropertiesIdentifierEXT">
      <argument name="rhs" type="const VkPipelinePropertiesIdentifierEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelinePropertiesIdentifierEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelinePropertiesIdentifierEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPipelineIdentifier">
      <argument name="pipelineIdentifier_" type="std::array&lt;uint8_t, 16U&gt;" />
    </method>
    <conversion_function name="operator const VkPipelinePropertiesIdentifierEXT &amp;" />
    <conversion_function name="operator VkPipelinePropertiesIdentifierEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelinePropertiesIdentifierEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelinePropertiesIdentifierEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipelineIdentifier" />
  </struct>
  <struct name="FrameBoundaryEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="FrameBoundaryEXT">
      <argument name="flags_" type="vk::FrameBoundaryFlagsEXT" default_raw="{}" />
      <argument name="frameID_" type="uint64_t" default_raw="{}" />
      <argument name="imageCount_" type="uint32_t" default_raw="{}" />
      <argument name="pImages_" type="const vk::Image *" default_raw="{}" />
      <argument name="bufferCount_" type="uint32_t" default_raw="{}" />
      <argument name="pBuffers_" type="const vk::Buffer *" default_raw="{}" />
      <argument name="tagName_" type="uint64_t" default_raw="{}" />
      <argument name="tagSize_" type="size_t" default_raw="{}" />
      <argument name="pTag_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="FrameBoundaryEXT">
      <argument name="rhs" type="const FrameBoundaryEXT &amp;" />
    </constructor>
    <constructor name="FrameBoundaryEXT">
      <argument name="rhs" type="const VkFrameBoundaryEXT &amp;" />
    </constructor>
    <method name="FrameBoundaryEXT" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const FrameBoundaryEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkFrameBoundaryEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::FrameBoundaryFlagsEXT" />
    </method>
    <method name="setFrameID">
      <argument name="frameID_" type="uint64_t" />
    </method>
    <method name="setImageCount">
      <argument name="imageCount_" type="uint32_t" />
    </method>
    <method name="setPImages">
      <argument name="pImages_" type="const vk::Image *" />
    </method>
    <method name="setImages">
      <argument name="images_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Image&gt; &amp;" />
    </method>
    <method name="setBufferCount">
      <argument name="bufferCount_" type="uint32_t" />
    </method>
    <method name="setPBuffers">
      <argument name="pBuffers_" type="const vk::Buffer *" />
    </method>
    <method name="setBuffers">
      <argument name="buffers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Buffer&gt; &amp;" />
    </method>
    <method name="setTagName">
      <argument name="tagName_" type="uint64_t" />
    </method>
    <method name="setTagSize">
      <argument name="tagSize_" type="size_t" />
    </method>
    <method name="setPTag">
      <argument name="pTag_" type="const void *" />
    </method>
    <method name="setTag" template_raw="template &lt;typename T&gt;" />
    <conversion_function name="operator const VkFrameBoundaryEXT &amp;" />
    <conversion_function name="operator VkFrameBoundaryEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const FrameBoundaryEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const FrameBoundaryEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="frameID" />
    <field name="imageCount" />
    <field name="pImages" />
    <field name="bufferCount" />
    <field name="pBuffers" />
    <field name="tagName" />
    <field name="tagSize" />
    <field name="pTag" />
  </struct>
  <struct name="PhysicalDeviceFrameBoundaryFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFrameBoundaryFeaturesEXT">
      <argument name="frameBoundary_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFrameBoundaryFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceFrameBoundaryFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFrameBoundaryFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceFrameBoundaryFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFrameBoundaryFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFrameBoundaryFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFrameBoundary">
      <argument name="frameBoundary_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFrameBoundaryFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFrameBoundaryFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFrameBoundaryFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFrameBoundaryFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="frameBoundary" />
  </struct>
  <struct name="MultisampledRenderToSingleSampledInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MultisampledRenderToSingleSampledInfoEXT">
      <argument name="multisampledRenderToSingleSampledEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="rasterizationSamples_" type="vk::SampleCountFlagBits" default_raw="VULKAN_HPP_NAMESPACE::SampleCountFlagBits::e1" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MultisampledRenderToSingleSampledInfoEXT">
      <argument name="rhs" type="const MultisampledRenderToSingleSampledInfoEXT &amp;" />
    </constructor>
    <constructor name="MultisampledRenderToSingleSampledInfoEXT">
      <argument name="rhs" type="const VkMultisampledRenderToSingleSampledInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MultisampledRenderToSingleSampledInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMultisampledRenderToSingleSampledInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMultisampledRenderToSingleSampledEnable">
      <argument name="multisampledRenderToSingleSampledEnable_" type="vk::Bool32" />
    </method>
    <method name="setRasterizationSamples">
      <argument name="rasterizationSamples_" type="vk::SampleCountFlagBits" />
    </method>
    <conversion_function name="operator const VkMultisampledRenderToSingleSampledInfoEXT &amp;" />
    <conversion_function name="operator VkMultisampledRenderToSingleSampledInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MultisampledRenderToSingleSampledInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MultisampledRenderToSingleSampledInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="multisampledRenderToSingleSampledEnable" />
    <field name="rasterizationSamples" />
  </struct>
  <struct name="PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT">
      <argument name="multisampledRenderToSingleSampled_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMultisampledRenderToSingleSampled">
      <argument name="multisampledRenderToSingleSampled_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="multisampledRenderToSingleSampled" />
  </struct>
  <struct name="SubpassResolvePerformanceQueryEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubpassResolvePerformanceQueryEXT">
      <argument name="optimal_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubpassResolvePerformanceQueryEXT">
      <argument name="rhs" type="const SubpassResolvePerformanceQueryEXT &amp;" />
    </constructor>
    <constructor name="SubpassResolvePerformanceQueryEXT">
      <argument name="rhs" type="const VkSubpassResolvePerformanceQueryEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubpassResolvePerformanceQueryEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubpassResolvePerformanceQueryEXT &amp;" />
    </method>
    <conversion_function name="operator const VkSubpassResolvePerformanceQueryEXT &amp;" />
    <conversion_function name="operator VkSubpassResolvePerformanceQueryEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubpassResolvePerformanceQueryEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubpassResolvePerformanceQueryEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="optimal" />
  </struct>
  <struct name="PhysicalDeviceExtendedDynamicState2FeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExtendedDynamicState2FeaturesEXT">
      <argument name="extendedDynamicState2_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState2LogicOp_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState2PatchControlPoints_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedDynamicState2FeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState2FeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedDynamicState2FeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState2FeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setExtendedDynamicState2">
      <argument name="extendedDynamicState2_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState2LogicOp">
      <argument name="extendedDynamicState2LogicOp_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState2PatchControlPoints">
      <argument name="extendedDynamicState2PatchControlPoints_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExtendedDynamicState2FeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState2FeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState2FeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="extendedDynamicState2" />
    <field name="extendedDynamicState2LogicOp" />
    <field name="extendedDynamicState2PatchControlPoints" />
  </struct>
  <struct name="PhysicalDeviceColorWriteEnableFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceColorWriteEnableFeaturesEXT">
      <argument name="colorWriteEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceColorWriteEnableFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceColorWriteEnableFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceColorWriteEnableFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceColorWriteEnableFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceColorWriteEnableFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceColorWriteEnableFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setColorWriteEnable">
      <argument name="colorWriteEnable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceColorWriteEnableFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceColorWriteEnableFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceColorWriteEnableFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceColorWriteEnableFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="colorWriteEnable" />
  </struct>
  <struct name="PipelineColorWriteCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineColorWriteCreateInfoEXT">
      <argument name="attachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pColorWriteEnables_" type="const vk::Bool32 *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineColorWriteCreateInfoEXT">
      <argument name="rhs" type="const PipelineColorWriteCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineColorWriteCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineColorWriteCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineColorWriteCreateInfoEXT">
      <argument name="colorWriteEnables_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Bool32&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineColorWriteCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineColorWriteCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAttachmentCount">
      <argument name="attachmentCount_" type="uint32_t" />
    </method>
    <method name="setPColorWriteEnables">
      <argument name="pColorWriteEnables_" type="const vk::Bool32 *" />
    </method>
    <method name="setColorWriteEnables">
      <argument name="colorWriteEnables_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Bool32&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineColorWriteCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineColorWriteCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineColorWriteCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineColorWriteCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="attachmentCount" />
    <field name="pColorWriteEnables" />
  </struct>
  <struct name="PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT">
      <argument name="primitivesGeneratedQuery_" type="vk::Bool32" default_raw="{}" />
      <argument name="primitivesGeneratedQueryWithRasterizerDiscard_" type="vk::Bool32" default_raw="{}" />
      <argument name="primitivesGeneratedQueryWithNonZeroStreams_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT">
      <argument name="rhs" type="const PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPrimitivesGeneratedQuery">
      <argument name="primitivesGeneratedQuery_" type="vk::Bool32" />
    </method>
    <method name="setPrimitivesGeneratedQueryWithRasterizerDiscard">
      <argument name="primitivesGeneratedQueryWithRasterizerDiscard_" type="vk::Bool32" />
    </method>
    <method name="setPrimitivesGeneratedQueryWithNonZeroStreams">
      <argument name="primitivesGeneratedQueryWithNonZeroStreams_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="primitivesGeneratedQuery" />
    <field name="primitivesGeneratedQueryWithRasterizerDiscard" />
    <field name="primitivesGeneratedQueryWithNonZeroStreams" />
  </struct>
  <struct name="PhysicalDeviceRayTracingMaintenance1FeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRayTracingMaintenance1FeaturesKHR">
      <argument name="rayTracingMaintenance1_" type="vk::Bool32" default_raw="{}" />
      <argument name="rayTracingPipelineTraceRaysIndirect2_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingMaintenance1FeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceRayTracingMaintenance1FeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingMaintenance1FeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingMaintenance1FeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRayTracingMaintenance1">
      <argument name="rayTracingMaintenance1_" type="vk::Bool32" />
    </method>
    <method name="setRayTracingPipelineTraceRaysIndirect2">
      <argument name="rayTracingPipelineTraceRaysIndirect2_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRayTracingMaintenance1FeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingMaintenance1FeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="rayTracingMaintenance1" />
    <field name="rayTracingPipelineTraceRaysIndirect2" />
  </struct>
  <struct name="TraceRaysIndirectCommand2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="TraceRaysIndirectCommand2KHR">
      <argument name="raygenShaderRecordAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="raygenShaderRecordSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="missShaderBindingTableAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="missShaderBindingTableSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="missShaderBindingTableStride_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="hitShaderBindingTableAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="hitShaderBindingTableSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="hitShaderBindingTableStride_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="callableShaderBindingTableAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="callableShaderBindingTableSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="callableShaderBindingTableStride_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="width_" type="uint32_t" default_raw="{}" />
      <argument name="height_" type="uint32_t" default_raw="{}" />
      <argument name="depth_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="TraceRaysIndirectCommand2KHR">
      <argument name="rhs" type="const TraceRaysIndirectCommand2KHR &amp;" />
    </constructor>
    <constructor name="TraceRaysIndirectCommand2KHR">
      <argument name="rhs" type="const VkTraceRaysIndirectCommand2KHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const TraceRaysIndirectCommand2KHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkTraceRaysIndirectCommand2KHR &amp;" />
    </method>
    <method name="setRaygenShaderRecordAddress">
      <argument name="raygenShaderRecordAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setRaygenShaderRecordSize">
      <argument name="raygenShaderRecordSize_" type="vk::DeviceSize" />
    </method>
    <method name="setMissShaderBindingTableAddress">
      <argument name="missShaderBindingTableAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setMissShaderBindingTableSize">
      <argument name="missShaderBindingTableSize_" type="vk::DeviceSize" />
    </method>
    <method name="setMissShaderBindingTableStride">
      <argument name="missShaderBindingTableStride_" type="vk::DeviceSize" />
    </method>
    <method name="setHitShaderBindingTableAddress">
      <argument name="hitShaderBindingTableAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setHitShaderBindingTableSize">
      <argument name="hitShaderBindingTableSize_" type="vk::DeviceSize" />
    </method>
    <method name="setHitShaderBindingTableStride">
      <argument name="hitShaderBindingTableStride_" type="vk::DeviceSize" />
    </method>
    <method name="setCallableShaderBindingTableAddress">
      <argument name="callableShaderBindingTableAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setCallableShaderBindingTableSize">
      <argument name="callableShaderBindingTableSize_" type="vk::DeviceSize" />
    </method>
    <method name="setCallableShaderBindingTableStride">
      <argument name="callableShaderBindingTableStride_" type="vk::DeviceSize" />
    </method>
    <method name="setWidth">
      <argument name="width_" type="uint32_t" />
    </method>
    <method name="setHeight">
      <argument name="height_" type="uint32_t" />
    </method>
    <method name="setDepth">
      <argument name="depth_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkTraceRaysIndirectCommand2KHR &amp;" />
    <conversion_function name="operator VkTraceRaysIndirectCommand2KHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const TraceRaysIndirectCommand2KHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const TraceRaysIndirectCommand2KHR &amp;" />
    </method>
    <field name="raygenShaderRecordAddress" />
    <field name="raygenShaderRecordSize" />
    <field name="missShaderBindingTableAddress" />
    <field name="missShaderBindingTableSize" />
    <field name="missShaderBindingTableStride" />
    <field name="hitShaderBindingTableAddress" />
    <field name="hitShaderBindingTableSize" />
    <field name="hitShaderBindingTableStride" />
    <field name="callableShaderBindingTableAddress" />
    <field name="callableShaderBindingTableSize" />
    <field name="callableShaderBindingTableStride" />
    <field name="width" />
    <field name="height" />
    <field name="depth" />
  </struct>
  <struct name="ImageViewMinLodCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageViewMinLodCreateInfoEXT">
      <argument name="minLod_" type="float" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageViewMinLodCreateInfoEXT">
      <argument name="rhs" type="const ImageViewMinLodCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="ImageViewMinLodCreateInfoEXT">
      <argument name="rhs" type="const VkImageViewMinLodCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageViewMinLodCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageViewMinLodCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMinLod">
      <argument name="minLod_" type="float" />
    </method>
    <conversion_function name="operator const VkImageViewMinLodCreateInfoEXT &amp;" />
    <conversion_function name="operator VkImageViewMinLodCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageViewMinLodCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageViewMinLodCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="minLod" />
  </struct>
  <struct name="PhysicalDeviceImageViewMinLodFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageViewMinLodFeaturesEXT">
      <argument name="minLod_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageViewMinLodFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceImageViewMinLodFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageViewMinLodFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceImageViewMinLodFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageViewMinLodFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageViewMinLodFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMinLod">
      <argument name="minLod_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageViewMinLodFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageViewMinLodFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageViewMinLodFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageViewMinLodFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="minLod" />
  </struct>
  <struct name="MultiDrawIndexedInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MultiDrawIndexedInfoEXT">
      <argument name="firstIndex_" type="uint32_t" default_raw="{}" />
      <argument name="indexCount_" type="uint32_t" default_raw="{}" />
      <argument name="vertexOffset_" type="int32_t" default_raw="{}" />
    </constructor>
    <constructor name="MultiDrawIndexedInfoEXT">
      <argument name="rhs" type="const MultiDrawIndexedInfoEXT &amp;" />
    </constructor>
    <constructor name="MultiDrawIndexedInfoEXT">
      <argument name="rhs" type="const VkMultiDrawIndexedInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MultiDrawIndexedInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMultiDrawIndexedInfoEXT &amp;" />
    </method>
    <method name="setFirstIndex">
      <argument name="firstIndex_" type="uint32_t" />
    </method>
    <method name="setIndexCount">
      <argument name="indexCount_" type="uint32_t" />
    </method>
    <method name="setVertexOffset">
      <argument name="vertexOffset_" type="int32_t" />
    </method>
    <conversion_function name="operator const VkMultiDrawIndexedInfoEXT &amp;" />
    <conversion_function name="operator VkMultiDrawIndexedInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MultiDrawIndexedInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MultiDrawIndexedInfoEXT &amp;" />
    </method>
    <field name="firstIndex" />
    <field name="indexCount" />
    <field name="vertexOffset" />
  </struct>
  <struct name="MultiDrawInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MultiDrawInfoEXT">
      <argument name="firstVertex_" type="uint32_t" default_raw="{}" />
      <argument name="vertexCount_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="MultiDrawInfoEXT">
      <argument name="rhs" type="const MultiDrawInfoEXT &amp;" />
    </constructor>
    <constructor name="MultiDrawInfoEXT">
      <argument name="rhs" type="const VkMultiDrawInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MultiDrawInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMultiDrawInfoEXT &amp;" />
    </method>
    <method name="setFirstVertex">
      <argument name="firstVertex_" type="uint32_t" />
    </method>
    <method name="setVertexCount">
      <argument name="vertexCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkMultiDrawInfoEXT &amp;" />
    <conversion_function name="operator VkMultiDrawInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MultiDrawInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MultiDrawInfoEXT &amp;" />
    </method>
    <field name="firstVertex" />
    <field name="vertexCount" />
  </struct>
  <struct name="PhysicalDeviceMultiDrawFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMultiDrawFeaturesEXT">
      <argument name="multiDraw_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMultiDrawFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceMultiDrawFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMultiDrawFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceMultiDrawFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMultiDrawFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMultiDrawFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMultiDraw">
      <argument name="multiDraw_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMultiDrawFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMultiDrawFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMultiDrawFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMultiDrawFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="multiDraw" />
  </struct>
  <struct name="PhysicalDeviceMultiDrawPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMultiDrawPropertiesEXT">
      <argument name="maxMultiDrawCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMultiDrawPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceMultiDrawPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMultiDrawPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceMultiDrawPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMultiDrawPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMultiDrawPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMultiDrawPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMultiDrawPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMultiDrawPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMultiDrawPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxMultiDrawCount" />
  </struct>
  <struct name="PhysicalDeviceImage2DViewOf3DFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImage2DViewOf3DFeaturesEXT">
      <argument name="image2DViewOf3D_" type="vk::Bool32" default_raw="{}" />
      <argument name="sampler2DViewOf3D_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImage2DViewOf3DFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceImage2DViewOf3DFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImage2DViewOf3DFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceImage2DViewOf3DFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImage2DViewOf3DFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImage2DViewOf3DFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setImage2DViewOf3D">
      <argument name="image2DViewOf3D_" type="vk::Bool32" />
    </method>
    <method name="setSampler2DViewOf3D">
      <argument name="sampler2DViewOf3D_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImage2DViewOf3DFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImage2DViewOf3DFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImage2DViewOf3DFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImage2DViewOf3DFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="image2DViewOf3D" />
    <field name="sampler2DViewOf3D" />
  </struct>
  <struct name="PhysicalDeviceShaderTileImageFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderTileImageFeaturesEXT">
      <argument name="shaderTileImageColorReadAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderTileImageDepthReadAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderTileImageStencilReadAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderTileImageFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceShaderTileImageFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderTileImageFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceShaderTileImageFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderTileImageFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderTileImageFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderTileImageColorReadAccess">
      <argument name="shaderTileImageColorReadAccess_" type="vk::Bool32" />
    </method>
    <method name="setShaderTileImageDepthReadAccess">
      <argument name="shaderTileImageDepthReadAccess_" type="vk::Bool32" />
    </method>
    <method name="setShaderTileImageStencilReadAccess">
      <argument name="shaderTileImageStencilReadAccess_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderTileImageFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderTileImageFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderTileImageFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderTileImageFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderTileImageColorReadAccess" />
    <field name="shaderTileImageDepthReadAccess" />
    <field name="shaderTileImageStencilReadAccess" />
  </struct>
  <struct name="PhysicalDeviceShaderTileImagePropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderTileImagePropertiesEXT">
      <argument name="shaderTileImageCoherentReadAccelerated_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderTileImageReadSampleFromPixelRateInvocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="shaderTileImageReadFromHelperInvocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderTileImagePropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceShaderTileImagePropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderTileImagePropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceShaderTileImagePropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderTileImagePropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderTileImagePropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderTileImagePropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderTileImagePropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderTileImagePropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderTileImagePropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderTileImageCoherentReadAccelerated" />
    <field name="shaderTileImageReadSampleFromPixelRateInvocation" />
    <field name="shaderTileImageReadFromHelperInvocation" />
  </struct>
  <struct name="AccelerationStructureTrianglesOpacityMicromapEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AccelerationStructureTrianglesOpacityMicromapEXT">
      <argument name="indexType_" type="vk::IndexType" default_raw="VULKAN_HPP_NAMESPACE::IndexType::eUint16" />
      <argument name="indexBuffer_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="indexStride_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="baseTriangle_" type="uint32_t" default_raw="{}" />
      <argument name="usageCountsCount_" type="uint32_t" default_raw="{}" />
      <argument name="pUsageCounts_" type="const vk::MicromapUsageEXT *" default_raw="{}" />
      <argument name="ppUsageCounts_" type="const vk::MicromapUsageEXT *const *" default_raw="{}" />
      <argument name="micromap_" type="vk::MicromapEXT" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AccelerationStructureTrianglesOpacityMicromapEXT">
      <argument name="rhs" type="const AccelerationStructureTrianglesOpacityMicromapEXT &amp;" />
    </constructor>
    <constructor name="AccelerationStructureTrianglesOpacityMicromapEXT">
      <argument name="rhs" type="const VkAccelerationStructureTrianglesOpacityMicromapEXT &amp;" />
    </constructor>
    <constructor name="AccelerationStructureTrianglesOpacityMicromapEXT">
      <argument name="indexType_" type="vk::IndexType" />
      <argument name="indexBuffer_" type="vk::DeviceOrHostAddressConstKHR" />
      <argument name="indexStride_" type="vk::DeviceSize" />
      <argument name="baseTriangle_" type="uint32_t" />
      <argument name="usageCounts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MicromapUsageEXT&gt; &amp;" />
      <argument name="pUsageCounts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MicromapUsageEXT *const&gt; &amp;" default_raw="{}" />
      <argument name="micromap_" type="vk::MicromapEXT" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AccelerationStructureTrianglesOpacityMicromapEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAccelerationStructureTrianglesOpacityMicromapEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setIndexType">
      <argument name="indexType_" type="vk::IndexType" />
    </method>
    <method name="setIndexBuffer">
      <argument name="indexBuffer_" type="const vk::DeviceOrHostAddressConstKHR &amp;" />
    </method>
    <method name="setIndexStride">
      <argument name="indexStride_" type="vk::DeviceSize" />
    </method>
    <method name="setBaseTriangle">
      <argument name="baseTriangle_" type="uint32_t" />
    </method>
    <method name="setUsageCountsCount">
      <argument name="usageCountsCount_" type="uint32_t" />
    </method>
    <method name="setPUsageCounts">
      <argument name="pUsageCounts_" type="const vk::MicromapUsageEXT *" />
    </method>
    <method name="setUsageCounts">
      <argument name="usageCounts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MicromapUsageEXT&gt; &amp;" />
    </method>
    <method name="setPpUsageCounts">
      <argument name="ppUsageCounts_" type="const vk::MicromapUsageEXT *const *" />
    </method>
    <method name="setPUsageCounts">
      <argument name="pUsageCounts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MicromapUsageEXT *const&gt; &amp;" />
    </method>
    <method name="setMicromap">
      <argument name="micromap_" type="vk::MicromapEXT" />
    </method>
    <conversion_function name="operator const VkAccelerationStructureTrianglesOpacityMicromapEXT &amp;" />
    <conversion_function name="operator VkAccelerationStructureTrianglesOpacityMicromapEXT &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="indexType" />
    <field name="indexBuffer" />
    <field name="indexStride" />
    <field name="baseTriangle" />
    <field name="usageCountsCount" />
    <field name="pUsageCounts" />
    <field name="ppUsageCounts" />
    <field name="micromap" />
  </struct>
  <struct name="CopyMemoryToMicromapInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyMemoryToMicromapInfoEXT">
      <argument name="src_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="dst_" type="vk::MicromapEXT" default_raw="{}" />
      <argument name="mode_" type="vk::CopyMicromapModeEXT" default_raw="VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT::eClone" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyMemoryToMicromapInfoEXT">
      <argument name="rhs" type="const CopyMemoryToMicromapInfoEXT &amp;" />
    </constructor>
    <constructor name="CopyMemoryToMicromapInfoEXT">
      <argument name="rhs" type="const VkCopyMemoryToMicromapInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyMemoryToMicromapInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyMemoryToMicromapInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrc">
      <argument name="src_" type="const vk::DeviceOrHostAddressConstKHR &amp;" />
    </method>
    <method name="setDst">
      <argument name="dst_" type="vk::MicromapEXT" />
    </method>
    <method name="setMode">
      <argument name="mode_" type="vk::CopyMicromapModeEXT" />
    </method>
    <conversion_function name="operator const VkCopyMemoryToMicromapInfoEXT &amp;" />
    <conversion_function name="operator VkCopyMemoryToMicromapInfoEXT &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="src" />
    <field name="dst" />
    <field name="mode" />
  </struct>
  <struct name="CopyMicromapInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyMicromapInfoEXT">
      <argument name="src_" type="vk::MicromapEXT" default_raw="{}" />
      <argument name="dst_" type="vk::MicromapEXT" default_raw="{}" />
      <argument name="mode_" type="vk::CopyMicromapModeEXT" default_raw="VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT::eClone" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyMicromapInfoEXT">
      <argument name="rhs" type="const CopyMicromapInfoEXT &amp;" />
    </constructor>
    <constructor name="CopyMicromapInfoEXT">
      <argument name="rhs" type="const VkCopyMicromapInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyMicromapInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyMicromapInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrc">
      <argument name="src_" type="vk::MicromapEXT" />
    </method>
    <method name="setDst">
      <argument name="dst_" type="vk::MicromapEXT" />
    </method>
    <method name="setMode">
      <argument name="mode_" type="vk::CopyMicromapModeEXT" />
    </method>
    <conversion_function name="operator const VkCopyMicromapInfoEXT &amp;" />
    <conversion_function name="operator VkCopyMicromapInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyMicromapInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyMicromapInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="src" />
    <field name="dst" />
    <field name="mode" />
  </struct>
  <struct name="CopyMicromapToMemoryInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyMicromapToMemoryInfoEXT">
      <argument name="src_" type="vk::MicromapEXT" default_raw="{}" />
      <argument name="dst_" type="vk::DeviceOrHostAddressKHR" default_raw="{}" />
      <argument name="mode_" type="vk::CopyMicromapModeEXT" default_raw="VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT::eClone" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CopyMicromapToMemoryInfoEXT">
      <argument name="rhs" type="const CopyMicromapToMemoryInfoEXT &amp;" />
    </constructor>
    <constructor name="CopyMicromapToMemoryInfoEXT">
      <argument name="rhs" type="const VkCopyMicromapToMemoryInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyMicromapToMemoryInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyMicromapToMemoryInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSrc">
      <argument name="src_" type="vk::MicromapEXT" />
    </method>
    <method name="setDst">
      <argument name="dst_" type="const vk::DeviceOrHostAddressKHR &amp;" />
    </method>
    <method name="setMode">
      <argument name="mode_" type="vk::CopyMicromapModeEXT" />
    </method>
    <conversion_function name="operator const VkCopyMicromapToMemoryInfoEXT &amp;" />
    <conversion_function name="operator VkCopyMicromapToMemoryInfoEXT &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="src" />
    <field name="dst" />
    <field name="mode" />
  </struct>
  <struct name="MicromapBuildInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MicromapBuildInfoEXT">
      <argument name="type_" type="vk::MicromapTypeEXT" default_raw="VULKAN_HPP_NAMESPACE::MicromapTypeEXT::eOpacityMicromap" />
      <argument name="flags_" type="vk::BuildMicromapFlagsEXT" default_raw="{}" />
      <argument name="mode_" type="vk::BuildMicromapModeEXT" default_raw="VULKAN_HPP_NAMESPACE::BuildMicromapModeEXT::eBuild" />
      <argument name="dstMicromap_" type="vk::MicromapEXT" default_raw="{}" />
      <argument name="usageCountsCount_" type="uint32_t" default_raw="{}" />
      <argument name="pUsageCounts_" type="const vk::MicromapUsageEXT *" default_raw="{}" />
      <argument name="ppUsageCounts_" type="const vk::MicromapUsageEXT *const *" default_raw="{}" />
      <argument name="data_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="scratchData_" type="vk::DeviceOrHostAddressKHR" default_raw="{}" />
      <argument name="triangleArray_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="triangleArrayStride_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MicromapBuildInfoEXT">
      <argument name="rhs" type="const MicromapBuildInfoEXT &amp;" />
    </constructor>
    <constructor name="MicromapBuildInfoEXT">
      <argument name="rhs" type="const VkMicromapBuildInfoEXT &amp;" />
    </constructor>
    <constructor name="MicromapBuildInfoEXT">
      <argument name="type_" type="vk::MicromapTypeEXT" />
      <argument name="flags_" type="vk::BuildMicromapFlagsEXT" />
      <argument name="mode_" type="vk::BuildMicromapModeEXT" />
      <argument name="dstMicromap_" type="vk::MicromapEXT" />
      <argument name="usageCounts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MicromapUsageEXT&gt; &amp;" />
      <argument name="pUsageCounts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MicromapUsageEXT *const&gt; &amp;" default_raw="{}" />
      <argument name="data_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="scratchData_" type="vk::DeviceOrHostAddressKHR" default_raw="{}" />
      <argument name="triangleArray_" type="vk::DeviceOrHostAddressConstKHR" default_raw="{}" />
      <argument name="triangleArrayStride_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MicromapBuildInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMicromapBuildInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::MicromapTypeEXT" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::BuildMicromapFlagsEXT" />
    </method>
    <method name="setMode">
      <argument name="mode_" type="vk::BuildMicromapModeEXT" />
    </method>
    <method name="setDstMicromap">
      <argument name="dstMicromap_" type="vk::MicromapEXT" />
    </method>
    <method name="setUsageCountsCount">
      <argument name="usageCountsCount_" type="uint32_t" />
    </method>
    <method name="setPUsageCounts">
      <argument name="pUsageCounts_" type="const vk::MicromapUsageEXT *" />
    </method>
    <method name="setUsageCounts">
      <argument name="usageCounts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MicromapUsageEXT&gt; &amp;" />
    </method>
    <method name="setPpUsageCounts">
      <argument name="ppUsageCounts_" type="const vk::MicromapUsageEXT *const *" />
    </method>
    <method name="setPUsageCounts">
      <argument name="pUsageCounts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MicromapUsageEXT *const&gt; &amp;" />
    </method>
    <method name="setData">
      <argument name="data_" type="const vk::DeviceOrHostAddressConstKHR &amp;" />
    </method>
    <method name="setScratchData">
      <argument name="scratchData_" type="const vk::DeviceOrHostAddressKHR &amp;" />
    </method>
    <method name="setTriangleArray">
      <argument name="triangleArray_" type="const vk::DeviceOrHostAddressConstKHR &amp;" />
    </method>
    <method name="setTriangleArrayStride">
      <argument name="triangleArrayStride_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkMicromapBuildInfoEXT &amp;" />
    <conversion_function name="operator VkMicromapBuildInfoEXT &amp;" />
    <field name="sType" />
    <field name="pNext" />
    <field name="type" />
    <field name="flags" />
    <field name="mode" />
    <field name="dstMicromap" />
    <field name="usageCountsCount" />
    <field name="pUsageCounts" />
    <field name="ppUsageCounts" />
    <field name="data" />
    <field name="scratchData" />
    <field name="triangleArray" />
    <field name="triangleArrayStride" />
  </struct>
  <struct name="MicromapBuildSizesInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MicromapBuildSizesInfoEXT">
      <argument name="micromapSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="buildScratchSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="discardable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MicromapBuildSizesInfoEXT">
      <argument name="rhs" type="const MicromapBuildSizesInfoEXT &amp;" />
    </constructor>
    <constructor name="MicromapBuildSizesInfoEXT">
      <argument name="rhs" type="const VkMicromapBuildSizesInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MicromapBuildSizesInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMicromapBuildSizesInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMicromapSize">
      <argument name="micromapSize_" type="vk::DeviceSize" />
    </method>
    <method name="setBuildScratchSize">
      <argument name="buildScratchSize_" type="vk::DeviceSize" />
    </method>
    <method name="setDiscardable">
      <argument name="discardable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkMicromapBuildSizesInfoEXT &amp;" />
    <conversion_function name="operator VkMicromapBuildSizesInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MicromapBuildSizesInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MicromapBuildSizesInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="micromapSize" />
    <field name="buildScratchSize" />
    <field name="discardable" />
  </struct>
  <struct name="MicromapCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MicromapCreateInfoEXT">
      <argument name="createFlags_" type="vk::MicromapCreateFlagsEXT" default_raw="{}" />
      <argument name="buffer_" type="vk::Buffer" default_raw="{}" />
      <argument name="offset_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="type_" type="vk::MicromapTypeEXT" default_raw="VULKAN_HPP_NAMESPACE::MicromapTypeEXT::eOpacityMicromap" />
      <argument name="deviceAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MicromapCreateInfoEXT">
      <argument name="rhs" type="const MicromapCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="MicromapCreateInfoEXT">
      <argument name="rhs" type="const VkMicromapCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MicromapCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMicromapCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setCreateFlags">
      <argument name="createFlags_" type="vk::MicromapCreateFlagsEXT" />
    </method>
    <method name="setBuffer">
      <argument name="buffer_" type="vk::Buffer" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="vk::DeviceSize" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::MicromapTypeEXT" />
    </method>
    <method name="setDeviceAddress">
      <argument name="deviceAddress_" type="vk::DeviceAddress" />
    </method>
    <conversion_function name="operator const VkMicromapCreateInfoEXT &amp;" />
    <conversion_function name="operator VkMicromapCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MicromapCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MicromapCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="createFlags" />
    <field name="buffer" />
    <field name="offset" />
    <field name="size" />
    <field name="type" />
    <field name="deviceAddress" />
  </struct>
  <struct name="MicromapTriangleEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MicromapTriangleEXT">
      <argument name="dataOffset_" type="uint32_t" default_raw="{}" />
      <argument name="subdivisionLevel_" type="uint16_t" default_raw="{}" />
      <argument name="format_" type="uint16_t" default_raw="{}" />
    </constructor>
    <constructor name="MicromapTriangleEXT">
      <argument name="rhs" type="const MicromapTriangleEXT &amp;" />
    </constructor>
    <constructor name="MicromapTriangleEXT">
      <argument name="rhs" type="const VkMicromapTriangleEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MicromapTriangleEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMicromapTriangleEXT &amp;" />
    </method>
    <method name="setDataOffset">
      <argument name="dataOffset_" type="uint32_t" />
    </method>
    <method name="setSubdivisionLevel">
      <argument name="subdivisionLevel_" type="uint16_t" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="uint16_t" />
    </method>
    <conversion_function name="operator const VkMicromapTriangleEXT &amp;" />
    <conversion_function name="operator VkMicromapTriangleEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MicromapTriangleEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MicromapTriangleEXT &amp;" />
    </method>
    <field name="dataOffset" />
    <field name="subdivisionLevel" />
    <field name="format" />
  </struct>
  <struct name="MicromapUsageEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MicromapUsageEXT">
      <argument name="count_" type="uint32_t" default_raw="{}" />
      <argument name="subdivisionLevel_" type="uint32_t" default_raw="{}" />
      <argument name="format_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="MicromapUsageEXT">
      <argument name="rhs" type="const MicromapUsageEXT &amp;" />
    </constructor>
    <constructor name="MicromapUsageEXT">
      <argument name="rhs" type="const VkMicromapUsageEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MicromapUsageEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMicromapUsageEXT &amp;" />
    </method>
    <method name="setCount">
      <argument name="count_" type="uint32_t" />
    </method>
    <method name="setSubdivisionLevel">
      <argument name="subdivisionLevel_" type="uint32_t" />
    </method>
    <method name="setFormat">
      <argument name="format_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkMicromapUsageEXT &amp;" />
    <conversion_function name="operator VkMicromapUsageEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MicromapUsageEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MicromapUsageEXT &amp;" />
    </method>
    <field name="count" />
    <field name="subdivisionLevel" />
    <field name="format" />
  </struct>
  <struct name="MicromapVersionInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MicromapVersionInfoEXT">
      <argument name="pVersionData_" type="const uint8_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MicromapVersionInfoEXT">
      <argument name="rhs" type="const MicromapVersionInfoEXT &amp;" />
    </constructor>
    <constructor name="MicromapVersionInfoEXT">
      <argument name="rhs" type="const VkMicromapVersionInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MicromapVersionInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMicromapVersionInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPVersionData">
      <argument name="pVersionData_" type="const uint8_t *" />
    </method>
    <conversion_function name="operator const VkMicromapVersionInfoEXT &amp;" />
    <conversion_function name="operator VkMicromapVersionInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MicromapVersionInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MicromapVersionInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pVersionData" />
  </struct>
  <struct name="PhysicalDeviceOpacityMicromapFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceOpacityMicromapFeaturesEXT">
      <argument name="micromap_" type="vk::Bool32" default_raw="{}" />
      <argument name="micromapCaptureReplay_" type="vk::Bool32" default_raw="{}" />
      <argument name="micromapHostCommands_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceOpacityMicromapFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceOpacityMicromapFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceOpacityMicromapFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceOpacityMicromapFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceOpacityMicromapFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceOpacityMicromapFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMicromap">
      <argument name="micromap_" type="vk::Bool32" />
    </method>
    <method name="setMicromapCaptureReplay">
      <argument name="micromapCaptureReplay_" type="vk::Bool32" />
    </method>
    <method name="setMicromapHostCommands">
      <argument name="micromapHostCommands_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceOpacityMicromapFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceOpacityMicromapFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceOpacityMicromapFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceOpacityMicromapFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="micromap" />
    <field name="micromapCaptureReplay" />
    <field name="micromapHostCommands" />
  </struct>
  <struct name="PhysicalDeviceOpacityMicromapPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceOpacityMicromapPropertiesEXT">
      <argument name="maxOpacity2StateSubdivisionLevel_" type="uint32_t" default_raw="{}" />
      <argument name="maxOpacity4StateSubdivisionLevel_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceOpacityMicromapPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceOpacityMicromapPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceOpacityMicromapPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceOpacityMicromapPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceOpacityMicromapPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceOpacityMicromapPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceOpacityMicromapPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceOpacityMicromapPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceOpacityMicromapPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceOpacityMicromapPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxOpacity2StateSubdivisionLevel" />
    <field name="maxOpacity4StateSubdivisionLevel" />
  </struct>
  <struct name="PhysicalDeviceClusterCullingShaderFeaturesHUAWEI" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceClusterCullingShaderFeaturesHUAWEI">
      <argument name="clustercullingShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="multiviewClusterCullingShader_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceClusterCullingShaderFeaturesHUAWEI">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderFeaturesHUAWEI &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceClusterCullingShaderFeaturesHUAWEI">
      <argument name="rhs" type="const VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderFeaturesHUAWEI &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setClustercullingShader">
      <argument name="clustercullingShader_" type="vk::Bool32" />
    </method>
    <method name="setMultiviewClusterCullingShader">
      <argument name="multiviewClusterCullingShader_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI &amp;" />
    <conversion_function name="operator VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderFeaturesHUAWEI &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderFeaturesHUAWEI &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="clustercullingShader" />
    <field name="multiviewClusterCullingShader" />
  </struct>
  <struct name="PhysicalDeviceClusterCullingShaderPropertiesHUAWEI" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceClusterCullingShaderPropertiesHUAWEI">
      <argument name="maxWorkGroupCount_" type="const std::array&lt;uint32_t, 3&gt; &amp;" default_raw="{}" />
      <argument name="maxWorkGroupSize_" type="const std::array&lt;uint32_t, 3&gt; &amp;" default_raw="{}" />
      <argument name="maxOutputClusterCount_" type="uint32_t" default_raw="{}" />
      <argument name="indirectBufferOffsetAlignment_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceClusterCullingShaderPropertiesHUAWEI">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderPropertiesHUAWEI &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceClusterCullingShaderPropertiesHUAWEI">
      <argument name="rhs" type="const VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderPropertiesHUAWEI &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI &amp;" />
    <conversion_function name="operator VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderPropertiesHUAWEI &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderPropertiesHUAWEI &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxWorkGroupCount" />
    <field name="maxWorkGroupSize" />
    <field name="maxOutputClusterCount" />
    <field name="indirectBufferOffsetAlignment" />
  </struct>
  <struct name="PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI">
      <argument name="clusterShadingRate_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI">
      <argument name="rhs" type="const VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setClusterShadingRate">
      <argument name="clusterShadingRate_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI &amp;" />
    <conversion_function name="operator VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="clusterShadingRate" />
  </struct>
  <struct name="PhysicalDeviceBorderColorSwizzleFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceBorderColorSwizzleFeaturesEXT">
      <argument name="borderColorSwizzle_" type="vk::Bool32" default_raw="{}" />
      <argument name="borderColorSwizzleFromImage_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceBorderColorSwizzleFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceBorderColorSwizzleFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceBorderColorSwizzleFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceBorderColorSwizzleFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceBorderColorSwizzleFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceBorderColorSwizzleFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setBorderColorSwizzle">
      <argument name="borderColorSwizzle_" type="vk::Bool32" />
    </method>
    <method name="setBorderColorSwizzleFromImage">
      <argument name="borderColorSwizzleFromImage_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceBorderColorSwizzleFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceBorderColorSwizzleFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceBorderColorSwizzleFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceBorderColorSwizzleFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="borderColorSwizzle" />
    <field name="borderColorSwizzleFromImage" />
  </struct>
  <struct name="SamplerBorderColorComponentMappingCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SamplerBorderColorComponentMappingCreateInfoEXT">
      <argument name="components_" type="vk::ComponentMapping" default_raw="{}" />
      <argument name="srgb_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SamplerBorderColorComponentMappingCreateInfoEXT">
      <argument name="rhs" type="const SamplerBorderColorComponentMappingCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="SamplerBorderColorComponentMappingCreateInfoEXT">
      <argument name="rhs" type="const VkSamplerBorderColorComponentMappingCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SamplerBorderColorComponentMappingCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSamplerBorderColorComponentMappingCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setComponents">
      <argument name="components_" type="const vk::ComponentMapping &amp;" />
    </method>
    <method name="setSrgb">
      <argument name="srgb_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkSamplerBorderColorComponentMappingCreateInfoEXT &amp;" />
    <conversion_function name="operator VkSamplerBorderColorComponentMappingCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SamplerBorderColorComponentMappingCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SamplerBorderColorComponentMappingCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="components" />
    <field name="srgb" />
  </struct>
  <struct name="PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT">
      <argument name="pageableDeviceLocalMemory_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT">
      <argument name="rhs" type="const PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPageableDeviceLocalMemory">
      <argument name="pageableDeviceLocalMemory_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pageableDeviceLocalMemory" />
  </struct>
  <struct name="PhysicalDeviceShaderCorePropertiesARM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderCorePropertiesARM">
      <argument name="pixelRate_" type="uint32_t" default_raw="{}" />
      <argument name="texelRate_" type="uint32_t" default_raw="{}" />
      <argument name="fmaRate_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderCorePropertiesARM">
      <argument name="rhs" type="const PhysicalDeviceShaderCorePropertiesARM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderCorePropertiesARM">
      <argument name="rhs" type="const VkPhysicalDeviceShaderCorePropertiesARM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderCorePropertiesARM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderCorePropertiesARM &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderCorePropertiesARM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderCorePropertiesARM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderCorePropertiesARM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderCorePropertiesARM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pixelRate" />
    <field name="texelRate" />
    <field name="fmaRate" />
  </struct>
  <struct name="DeviceQueueShaderCoreControlCreateInfoARM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceQueueShaderCoreControlCreateInfoARM">
      <argument name="shaderCoreCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceQueueShaderCoreControlCreateInfoARM">
      <argument name="rhs" type="const DeviceQueueShaderCoreControlCreateInfoARM &amp;" />
    </constructor>
    <constructor name="DeviceQueueShaderCoreControlCreateInfoARM">
      <argument name="rhs" type="const VkDeviceQueueShaderCoreControlCreateInfoARM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceQueueShaderCoreControlCreateInfoARM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceQueueShaderCoreControlCreateInfoARM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderCoreCount">
      <argument name="shaderCoreCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDeviceQueueShaderCoreControlCreateInfoARM &amp;" />
    <conversion_function name="operator VkDeviceQueueShaderCoreControlCreateInfoARM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceQueueShaderCoreControlCreateInfoARM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceQueueShaderCoreControlCreateInfoARM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderCoreCount" />
  </struct>
  <struct name="PhysicalDeviceSchedulingControlsFeaturesARM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSchedulingControlsFeaturesARM">
      <argument name="schedulingControls_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSchedulingControlsFeaturesARM">
      <argument name="rhs" type="const PhysicalDeviceSchedulingControlsFeaturesARM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSchedulingControlsFeaturesARM">
      <argument name="rhs" type="const VkPhysicalDeviceSchedulingControlsFeaturesARM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSchedulingControlsFeaturesARM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSchedulingControlsFeaturesARM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSchedulingControls">
      <argument name="schedulingControls_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSchedulingControlsFeaturesARM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSchedulingControlsFeaturesARM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSchedulingControlsFeaturesARM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSchedulingControlsFeaturesARM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="schedulingControls" />
  </struct>
  <struct name="PhysicalDeviceSchedulingControlsPropertiesARM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSchedulingControlsPropertiesARM">
      <argument name="schedulingControlsFlags_" type="vk::PhysicalDeviceSchedulingControlsFlagsARM" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSchedulingControlsPropertiesARM">
      <argument name="rhs" type="const PhysicalDeviceSchedulingControlsPropertiesARM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSchedulingControlsPropertiesARM">
      <argument name="rhs" type="const VkPhysicalDeviceSchedulingControlsPropertiesARM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSchedulingControlsPropertiesARM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSchedulingControlsPropertiesARM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSchedulingControlsFlags">
      <argument name="schedulingControlsFlags_" type="vk::PhysicalDeviceSchedulingControlsFlagsARM" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSchedulingControlsPropertiesARM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSchedulingControlsPropertiesARM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSchedulingControlsPropertiesARM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSchedulingControlsPropertiesARM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="schedulingControlsFlags" />
  </struct>
  <struct name="ImageViewSlicedCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageViewSlicedCreateInfoEXT">
      <argument name="sliceOffset_" type="uint32_t" default_raw="{}" />
      <argument name="sliceCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageViewSlicedCreateInfoEXT">
      <argument name="rhs" type="const ImageViewSlicedCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="ImageViewSlicedCreateInfoEXT">
      <argument name="rhs" type="const VkImageViewSlicedCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageViewSlicedCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageViewSlicedCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSliceOffset">
      <argument name="sliceOffset_" type="uint32_t" />
    </method>
    <method name="setSliceCount">
      <argument name="sliceCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkImageViewSlicedCreateInfoEXT &amp;" />
    <conversion_function name="operator VkImageViewSlicedCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageViewSlicedCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageViewSlicedCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="sliceOffset" />
    <field name="sliceCount" />
  </struct>
  <struct name="PhysicalDeviceImageSlicedViewOf3DFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageSlicedViewOf3DFeaturesEXT">
      <argument name="imageSlicedViewOf3D_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageSlicedViewOf3DFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceImageSlicedViewOf3DFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageSlicedViewOf3DFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageSlicedViewOf3DFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setImageSlicedViewOf3D">
      <argument name="imageSlicedViewOf3D_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageSlicedViewOf3DFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageSlicedViewOf3DFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageSlicedViewOf3D" />
  </struct>
  <struct name="DescriptorSetBindingReferenceVALVE" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorSetBindingReferenceVALVE">
      <argument name="descriptorSetLayout_" type="vk::DescriptorSetLayout" default_raw="{}" />
      <argument name="binding_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorSetBindingReferenceVALVE">
      <argument name="rhs" type="const DescriptorSetBindingReferenceVALVE &amp;" />
    </constructor>
    <constructor name="DescriptorSetBindingReferenceVALVE">
      <argument name="rhs" type="const VkDescriptorSetBindingReferenceVALVE &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorSetBindingReferenceVALVE &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorSetBindingReferenceVALVE &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDescriptorSetLayout">
      <argument name="descriptorSetLayout_" type="vk::DescriptorSetLayout" />
    </method>
    <method name="setBinding">
      <argument name="binding_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDescriptorSetBindingReferenceVALVE &amp;" />
    <conversion_function name="operator VkDescriptorSetBindingReferenceVALVE &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorSetBindingReferenceVALVE &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorSetBindingReferenceVALVE &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="descriptorSetLayout" />
    <field name="binding" />
  </struct>
  <struct name="DescriptorSetLayoutHostMappingInfoVALVE" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DescriptorSetLayoutHostMappingInfoVALVE">
      <argument name="descriptorOffset_" type="size_t" default_raw="{}" />
      <argument name="descriptorSize_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DescriptorSetLayoutHostMappingInfoVALVE">
      <argument name="rhs" type="const DescriptorSetLayoutHostMappingInfoVALVE &amp;" />
    </constructor>
    <constructor name="DescriptorSetLayoutHostMappingInfoVALVE">
      <argument name="rhs" type="const VkDescriptorSetLayoutHostMappingInfoVALVE &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DescriptorSetLayoutHostMappingInfoVALVE &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDescriptorSetLayoutHostMappingInfoVALVE &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDescriptorOffset">
      <argument name="descriptorOffset_" type="size_t" />
    </method>
    <method name="setDescriptorSize">
      <argument name="descriptorSize_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkDescriptorSetLayoutHostMappingInfoVALVE &amp;" />
    <conversion_function name="operator VkDescriptorSetLayoutHostMappingInfoVALVE &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DescriptorSetLayoutHostMappingInfoVALVE &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorSetLayoutHostMappingInfoVALVE &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="descriptorOffset" />
    <field name="descriptorSize" />
  </struct>
  <struct name="PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE">
      <argument name="descriptorSetHostMapping_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE">
      <argument name="rhs" type="const PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDescriptorSetHostMapping">
      <argument name="descriptorSetHostMapping_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="descriptorSetHostMapping" />
  </struct>
  <struct name="PhysicalDeviceDepthClampZeroOneFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDepthClampZeroOneFeaturesEXT">
      <argument name="depthClampZeroOne_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDepthClampZeroOneFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceDepthClampZeroOneFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDepthClampZeroOneFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceDepthClampZeroOneFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDepthClampZeroOneFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDepthClampZeroOneFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDepthClampZeroOne">
      <argument name="depthClampZeroOne_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDepthClampZeroOneFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDepthClampZeroOneFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDepthClampZeroOneFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDepthClampZeroOneFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="depthClampZeroOne" />
  </struct>
  <struct name="PhysicalDeviceNonSeamlessCubeMapFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceNonSeamlessCubeMapFeaturesEXT">
      <argument name="nonSeamlessCubeMap_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceNonSeamlessCubeMapFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceNonSeamlessCubeMapFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceNonSeamlessCubeMapFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceNonSeamlessCubeMapFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setNonSeamlessCubeMap">
      <argument name="nonSeamlessCubeMap_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceNonSeamlessCubeMapFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceNonSeamlessCubeMapFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="nonSeamlessCubeMap" />
  </struct>
  <struct name="PhysicalDeviceRenderPassStripedFeaturesARM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRenderPassStripedFeaturesARM">
      <argument name="renderPassStriped_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRenderPassStripedFeaturesARM">
      <argument name="rhs" type="const PhysicalDeviceRenderPassStripedFeaturesARM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRenderPassStripedFeaturesARM">
      <argument name="rhs" type="const VkPhysicalDeviceRenderPassStripedFeaturesARM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRenderPassStripedFeaturesARM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRenderPassStripedFeaturesARM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRenderPassStriped">
      <argument name="renderPassStriped_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRenderPassStripedFeaturesARM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRenderPassStripedFeaturesARM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRenderPassStripedFeaturesARM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRenderPassStripedFeaturesARM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="renderPassStriped" />
  </struct>
  <struct name="PhysicalDeviceRenderPassStripedPropertiesARM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRenderPassStripedPropertiesARM">
      <argument name="renderPassStripeGranularity_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxRenderPassStripes_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRenderPassStripedPropertiesARM">
      <argument name="rhs" type="const PhysicalDeviceRenderPassStripedPropertiesARM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRenderPassStripedPropertiesARM">
      <argument name="rhs" type="const VkPhysicalDeviceRenderPassStripedPropertiesARM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRenderPassStripedPropertiesARM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRenderPassStripedPropertiesARM &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRenderPassStripedPropertiesARM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRenderPassStripedPropertiesARM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRenderPassStripedPropertiesARM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRenderPassStripedPropertiesARM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="renderPassStripeGranularity" />
    <field name="maxRenderPassStripes" />
  </struct>
  <struct name="RenderPassStripeBeginInfoARM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassStripeBeginInfoARM">
      <argument name="stripeInfoCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStripeInfos_" type="const vk::RenderPassStripeInfoARM *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassStripeBeginInfoARM">
      <argument name="rhs" type="const RenderPassStripeBeginInfoARM &amp;" />
    </constructor>
    <constructor name="RenderPassStripeBeginInfoARM">
      <argument name="rhs" type="const VkRenderPassStripeBeginInfoARM &amp;" />
    </constructor>
    <constructor name="RenderPassStripeBeginInfoARM">
      <argument name="stripeInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::RenderPassStripeInfoARM&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassStripeBeginInfoARM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassStripeBeginInfoARM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStripeInfoCount">
      <argument name="stripeInfoCount_" type="uint32_t" />
    </method>
    <method name="setPStripeInfos">
      <argument name="pStripeInfos_" type="const vk::RenderPassStripeInfoARM *" />
    </method>
    <method name="setStripeInfos">
      <argument name="stripeInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::RenderPassStripeInfoARM&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassStripeBeginInfoARM &amp;" />
    <conversion_function name="operator VkRenderPassStripeBeginInfoARM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassStripeBeginInfoARM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassStripeBeginInfoARM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stripeInfoCount" />
    <field name="pStripeInfos" />
  </struct>
  <struct name="RenderPassStripeInfoARM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassStripeInfoARM">
      <argument name="stripeArea_" type="vk::Rect2D" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassStripeInfoARM">
      <argument name="rhs" type="const RenderPassStripeInfoARM &amp;" />
    </constructor>
    <constructor name="RenderPassStripeInfoARM">
      <argument name="rhs" type="const VkRenderPassStripeInfoARM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassStripeInfoARM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassStripeInfoARM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStripeArea">
      <argument name="stripeArea_" type="const vk::Rect2D &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassStripeInfoARM &amp;" />
    <conversion_function name="operator VkRenderPassStripeInfoARM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassStripeInfoARM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassStripeInfoARM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stripeArea" />
  </struct>
  <struct name="RenderPassStripeSubmitInfoARM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassStripeSubmitInfoARM">
      <argument name="stripeSemaphoreInfoCount_" type="uint32_t" default_raw="{}" />
      <argument name="pStripeSemaphoreInfos_" type="const vk::SemaphoreSubmitInfo *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassStripeSubmitInfoARM">
      <argument name="rhs" type="const RenderPassStripeSubmitInfoARM &amp;" />
    </constructor>
    <constructor name="RenderPassStripeSubmitInfoARM">
      <argument name="rhs" type="const VkRenderPassStripeSubmitInfoARM &amp;" />
    </constructor>
    <constructor name="RenderPassStripeSubmitInfoARM">
      <argument name="stripeSemaphoreInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SemaphoreSubmitInfo&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassStripeSubmitInfoARM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassStripeSubmitInfoARM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStripeSemaphoreInfoCount">
      <argument name="stripeSemaphoreInfoCount_" type="uint32_t" />
    </method>
    <method name="setPStripeSemaphoreInfos">
      <argument name="pStripeSemaphoreInfos_" type="const vk::SemaphoreSubmitInfo *" />
    </method>
    <method name="setStripeSemaphoreInfos">
      <argument name="stripeSemaphoreInfos_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::SemaphoreSubmitInfo&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassStripeSubmitInfoARM &amp;" />
    <conversion_function name="operator VkRenderPassStripeSubmitInfoARM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassStripeSubmitInfoARM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassStripeSubmitInfoARM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stripeSemaphoreInfoCount" />
    <field name="pStripeSemaphoreInfos" />
  </struct>
  <struct name="PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM">
      <argument name="fragmentDensityMapOffset_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFragmentDensityMapOffset">
      <argument name="fragmentDensityMapOffset_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fragmentDensityMapOffset" />
  </struct>
  <struct name="PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM">
      <argument name="fragmentDensityOffsetGranularity_" type="vk::Extent2D" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fragmentDensityOffsetGranularity" />
  </struct>
  <struct name="SubpassFragmentDensityMapOffsetEndInfoQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubpassFragmentDensityMapOffsetEndInfoQCOM">
      <argument name="fragmentDensityOffsetCount_" type="uint32_t" default_raw="{}" />
      <argument name="pFragmentDensityOffsets_" type="const vk::Offset2D *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubpassFragmentDensityMapOffsetEndInfoQCOM">
      <argument name="rhs" type="const SubpassFragmentDensityMapOffsetEndInfoQCOM &amp;" />
    </constructor>
    <constructor name="SubpassFragmentDensityMapOffsetEndInfoQCOM">
      <argument name="rhs" type="const VkSubpassFragmentDensityMapOffsetEndInfoQCOM &amp;" />
    </constructor>
    <constructor name="SubpassFragmentDensityMapOffsetEndInfoQCOM">
      <argument name="fragmentDensityOffsets_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Offset2D&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubpassFragmentDensityMapOffsetEndInfoQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubpassFragmentDensityMapOffsetEndInfoQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFragmentDensityOffsetCount">
      <argument name="fragmentDensityOffsetCount_" type="uint32_t" />
    </method>
    <method name="setPFragmentDensityOffsets">
      <argument name="pFragmentDensityOffsets_" type="const vk::Offset2D *" />
    </method>
    <method name="setFragmentDensityOffsets">
      <argument name="fragmentDensityOffsets_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Offset2D&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSubpassFragmentDensityMapOffsetEndInfoQCOM &amp;" />
    <conversion_function name="operator VkSubpassFragmentDensityMapOffsetEndInfoQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubpassFragmentDensityMapOffsetEndInfoQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubpassFragmentDensityMapOffsetEndInfoQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="fragmentDensityOffsetCount" />
    <field name="pFragmentDensityOffsets" />
  </struct>
  <struct name="CopyMemoryIndirectCommandNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyMemoryIndirectCommandNV">
      <argument name="srcAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="dstAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
    </constructor>
    <constructor name="CopyMemoryIndirectCommandNV">
      <argument name="rhs" type="const CopyMemoryIndirectCommandNV &amp;" />
    </constructor>
    <constructor name="CopyMemoryIndirectCommandNV">
      <argument name="rhs" type="const VkCopyMemoryIndirectCommandNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyMemoryIndirectCommandNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyMemoryIndirectCommandNV &amp;" />
    </method>
    <method name="setSrcAddress">
      <argument name="srcAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setDstAddress">
      <argument name="dstAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <conversion_function name="operator const VkCopyMemoryIndirectCommandNV &amp;" />
    <conversion_function name="operator VkCopyMemoryIndirectCommandNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyMemoryIndirectCommandNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyMemoryIndirectCommandNV &amp;" />
    </method>
    <field name="srcAddress" />
    <field name="dstAddress" />
    <field name="size" />
  </struct>
  <struct name="CopyMemoryToImageIndirectCommandNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CopyMemoryToImageIndirectCommandNV">
      <argument name="srcAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="bufferRowLength_" type="uint32_t" default_raw="{}" />
      <argument name="bufferImageHeight_" type="uint32_t" default_raw="{}" />
      <argument name="imageSubresource_" type="vk::ImageSubresourceLayers" default_raw="{}" />
      <argument name="imageOffset_" type="vk::Offset3D" default_raw="{}" />
      <argument name="imageExtent_" type="vk::Extent3D" default_raw="{}" />
    </constructor>
    <constructor name="CopyMemoryToImageIndirectCommandNV">
      <argument name="rhs" type="const CopyMemoryToImageIndirectCommandNV &amp;" />
    </constructor>
    <constructor name="CopyMemoryToImageIndirectCommandNV">
      <argument name="rhs" type="const VkCopyMemoryToImageIndirectCommandNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CopyMemoryToImageIndirectCommandNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCopyMemoryToImageIndirectCommandNV &amp;" />
    </method>
    <method name="setSrcAddress">
      <argument name="srcAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setBufferRowLength">
      <argument name="bufferRowLength_" type="uint32_t" />
    </method>
    <method name="setBufferImageHeight">
      <argument name="bufferImageHeight_" type="uint32_t" />
    </method>
    <method name="setImageSubresource">
      <argument name="imageSubresource_" type="const vk::ImageSubresourceLayers &amp;" />
    </method>
    <method name="setImageOffset">
      <argument name="imageOffset_" type="const vk::Offset3D &amp;" />
    </method>
    <method name="setImageExtent">
      <argument name="imageExtent_" type="const vk::Extent3D &amp;" />
    </method>
    <conversion_function name="operator const VkCopyMemoryToImageIndirectCommandNV &amp;" />
    <conversion_function name="operator VkCopyMemoryToImageIndirectCommandNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CopyMemoryToImageIndirectCommandNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CopyMemoryToImageIndirectCommandNV &amp;" />
    </method>
    <field name="srcAddress" />
    <field name="bufferRowLength" />
    <field name="bufferImageHeight" />
    <field name="imageSubresource" />
    <field name="imageOffset" />
    <field name="imageExtent" />
  </struct>
  <struct name="PhysicalDeviceCopyMemoryIndirectFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCopyMemoryIndirectFeaturesNV">
      <argument name="indirectCopy_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCopyMemoryIndirectFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceCopyMemoryIndirectFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCopyMemoryIndirectFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceCopyMemoryIndirectFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCopyMemoryIndirectFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCopyMemoryIndirectFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setIndirectCopy">
      <argument name="indirectCopy_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCopyMemoryIndirectFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCopyMemoryIndirectFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCopyMemoryIndirectFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCopyMemoryIndirectFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="indirectCopy" />
  </struct>
  <struct name="PhysicalDeviceCopyMemoryIndirectPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCopyMemoryIndirectPropertiesNV">
      <argument name="supportedQueues_" type="vk::QueueFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCopyMemoryIndirectPropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceCopyMemoryIndirectPropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCopyMemoryIndirectPropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceCopyMemoryIndirectPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCopyMemoryIndirectPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCopyMemoryIndirectPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCopyMemoryIndirectPropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCopyMemoryIndirectPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCopyMemoryIndirectPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCopyMemoryIndirectPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="supportedQueues" />
  </struct>
  <struct name="DecompressMemoryRegionNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DecompressMemoryRegionNV">
      <argument name="srcAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="dstAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="compressedSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="decompressedSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="decompressionMethod_" type="vk::MemoryDecompressionMethodFlagsNV" default_raw="{}" />
    </constructor>
    <constructor name="DecompressMemoryRegionNV">
      <argument name="rhs" type="const DecompressMemoryRegionNV &amp;" />
    </constructor>
    <constructor name="DecompressMemoryRegionNV">
      <argument name="rhs" type="const VkDecompressMemoryRegionNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DecompressMemoryRegionNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDecompressMemoryRegionNV &amp;" />
    </method>
    <method name="setSrcAddress">
      <argument name="srcAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setDstAddress">
      <argument name="dstAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setCompressedSize">
      <argument name="compressedSize_" type="vk::DeviceSize" />
    </method>
    <method name="setDecompressedSize">
      <argument name="decompressedSize_" type="vk::DeviceSize" />
    </method>
    <method name="setDecompressionMethod">
      <argument name="decompressionMethod_" type="vk::MemoryDecompressionMethodFlagsNV" />
    </method>
    <conversion_function name="operator const VkDecompressMemoryRegionNV &amp;" />
    <conversion_function name="operator VkDecompressMemoryRegionNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DecompressMemoryRegionNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DecompressMemoryRegionNV &amp;" />
    </method>
    <field name="srcAddress" />
    <field name="dstAddress" />
    <field name="compressedSize" />
    <field name="decompressedSize" />
    <field name="decompressionMethod" />
  </struct>
  <struct name="PhysicalDeviceMemoryDecompressionFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMemoryDecompressionFeaturesNV">
      <argument name="memoryDecompression_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryDecompressionFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceMemoryDecompressionFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryDecompressionFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryDecompressionFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMemoryDecompressionFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryDecompressionFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMemoryDecompression">
      <argument name="memoryDecompression_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMemoryDecompressionFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMemoryDecompressionFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMemoryDecompressionFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMemoryDecompressionFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="memoryDecompression" />
  </struct>
  <struct name="PhysicalDeviceMemoryDecompressionPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMemoryDecompressionPropertiesNV">
      <argument name="decompressionMethods_" type="vk::MemoryDecompressionMethodFlagsNV" default_raw="{}" />
      <argument name="maxDecompressionIndirectCount_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryDecompressionPropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceMemoryDecompressionPropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMemoryDecompressionPropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryDecompressionPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMemoryDecompressionPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMemoryDecompressionPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMemoryDecompressionPropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMemoryDecompressionPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMemoryDecompressionPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMemoryDecompressionPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="decompressionMethods" />
    <field name="maxDecompressionIndirectCount" />
  </struct>
  <struct name="BindPipelineIndirectCommandNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindPipelineIndirectCommandNV">
      <argument name="pipelineAddress_" type="vk::DeviceAddress" default_raw="{}" />
    </constructor>
    <constructor name="BindPipelineIndirectCommandNV">
      <argument name="rhs" type="const BindPipelineIndirectCommandNV &amp;" />
    </constructor>
    <constructor name="BindPipelineIndirectCommandNV">
      <argument name="rhs" type="const VkBindPipelineIndirectCommandNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindPipelineIndirectCommandNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindPipelineIndirectCommandNV &amp;" />
    </method>
    <method name="setPipelineAddress">
      <argument name="pipelineAddress_" type="vk::DeviceAddress" />
    </method>
    <conversion_function name="operator const VkBindPipelineIndirectCommandNV &amp;" />
    <conversion_function name="operator VkBindPipelineIndirectCommandNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindPipelineIndirectCommandNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindPipelineIndirectCommandNV &amp;" />
    </method>
    <field name="pipelineAddress" />
  </struct>
  <struct name="ComputePipelineIndirectBufferInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ComputePipelineIndirectBufferInfoNV">
      <argument name="deviceAddress_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="size_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="pipelineDeviceAddressCaptureReplay_" type="vk::DeviceAddress" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ComputePipelineIndirectBufferInfoNV">
      <argument name="rhs" type="const ComputePipelineIndirectBufferInfoNV &amp;" />
    </constructor>
    <constructor name="ComputePipelineIndirectBufferInfoNV">
      <argument name="rhs" type="const VkComputePipelineIndirectBufferInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ComputePipelineIndirectBufferInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkComputePipelineIndirectBufferInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDeviceAddress">
      <argument name="deviceAddress_" type="vk::DeviceAddress" />
    </method>
    <method name="setSize">
      <argument name="size_" type="vk::DeviceSize" />
    </method>
    <method name="setPipelineDeviceAddressCaptureReplay">
      <argument name="pipelineDeviceAddressCaptureReplay_" type="vk::DeviceAddress" />
    </method>
    <conversion_function name="operator const VkComputePipelineIndirectBufferInfoNV &amp;" />
    <conversion_function name="operator VkComputePipelineIndirectBufferInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ComputePipelineIndirectBufferInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ComputePipelineIndirectBufferInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceAddress" />
    <field name="size" />
    <field name="pipelineDeviceAddressCaptureReplay" />
  </struct>
  <struct name="PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV">
      <argument name="deviceGeneratedCompute_" type="vk::Bool32" default_raw="{}" />
      <argument name="deviceGeneratedComputePipelines_" type="vk::Bool32" default_raw="{}" />
      <argument name="deviceGeneratedComputeCaptureReplay_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDeviceGeneratedCompute">
      <argument name="deviceGeneratedCompute_" type="vk::Bool32" />
    </method>
    <method name="setDeviceGeneratedComputePipelines">
      <argument name="deviceGeneratedComputePipelines_" type="vk::Bool32" />
    </method>
    <method name="setDeviceGeneratedComputeCaptureReplay">
      <argument name="deviceGeneratedComputeCaptureReplay_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="deviceGeneratedCompute" />
    <field name="deviceGeneratedComputePipelines" />
    <field name="deviceGeneratedComputeCaptureReplay" />
  </struct>
  <struct name="PipelineIndirectDeviceAddressInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineIndirectDeviceAddressInfoNV">
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" default_raw="VULKAN_HPP_NAMESPACE::PipelineBindPoint::eGraphics" />
      <argument name="pipeline_" type="vk::Pipeline" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineIndirectDeviceAddressInfoNV">
      <argument name="rhs" type="const PipelineIndirectDeviceAddressInfoNV &amp;" />
    </constructor>
    <constructor name="PipelineIndirectDeviceAddressInfoNV">
      <argument name="rhs" type="const VkPipelineIndirectDeviceAddressInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineIndirectDeviceAddressInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineIndirectDeviceAddressInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPipelineBindPoint">
      <argument name="pipelineBindPoint_" type="vk::PipelineBindPoint" />
    </method>
    <method name="setPipeline">
      <argument name="pipeline_" type="vk::Pipeline" />
    </method>
    <conversion_function name="operator const VkPipelineIndirectDeviceAddressInfoNV &amp;" />
    <conversion_function name="operator VkPipelineIndirectDeviceAddressInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineIndirectDeviceAddressInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineIndirectDeviceAddressInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipelineBindPoint" />
    <field name="pipeline" />
  </struct>
  <struct name="PhysicalDeviceLinearColorAttachmentFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceLinearColorAttachmentFeaturesNV">
      <argument name="linearColorAttachment_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceLinearColorAttachmentFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceLinearColorAttachmentFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceLinearColorAttachmentFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceLinearColorAttachmentFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceLinearColorAttachmentFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceLinearColorAttachmentFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setLinearColorAttachment">
      <argument name="linearColorAttachment_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceLinearColorAttachmentFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceLinearColorAttachmentFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceLinearColorAttachmentFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceLinearColorAttachmentFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="linearColorAttachment" />
  </struct>
  <struct name="PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT">
      <argument name="imageCompressionControlSwapchain_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setImageCompressionControlSwapchain">
      <argument name="imageCompressionControlSwapchain_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageCompressionControlSwapchain" />
  </struct>
  <struct name="ImageViewSampleWeightCreateInfoQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageViewSampleWeightCreateInfoQCOM">
      <argument name="filterCenter_" type="vk::Offset2D" default_raw="{}" />
      <argument name="filterSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="numPhases_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageViewSampleWeightCreateInfoQCOM">
      <argument name="rhs" type="const ImageViewSampleWeightCreateInfoQCOM &amp;" />
    </constructor>
    <constructor name="ImageViewSampleWeightCreateInfoQCOM">
      <argument name="rhs" type="const VkImageViewSampleWeightCreateInfoQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageViewSampleWeightCreateInfoQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageViewSampleWeightCreateInfoQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFilterCenter">
      <argument name="filterCenter_" type="const vk::Offset2D &amp;" />
    </method>
    <method name="setFilterSize">
      <argument name="filterSize_" type="const vk::Extent2D &amp;" />
    </method>
    <method name="setNumPhases">
      <argument name="numPhases_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkImageViewSampleWeightCreateInfoQCOM &amp;" />
    <conversion_function name="operator VkImageViewSampleWeightCreateInfoQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageViewSampleWeightCreateInfoQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageViewSampleWeightCreateInfoQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="filterCenter" />
    <field name="filterSize" />
    <field name="numPhases" />
  </struct>
  <struct name="PhysicalDeviceImageProcessingFeaturesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageProcessingFeaturesQCOM">
      <argument name="textureSampleWeighted_" type="vk::Bool32" default_raw="{}" />
      <argument name="textureBoxFilter_" type="vk::Bool32" default_raw="{}" />
      <argument name="textureBlockMatch_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageProcessingFeaturesQCOM">
      <argument name="rhs" type="const PhysicalDeviceImageProcessingFeaturesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageProcessingFeaturesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceImageProcessingFeaturesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageProcessingFeaturesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageProcessingFeaturesQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTextureSampleWeighted">
      <argument name="textureSampleWeighted_" type="vk::Bool32" />
    </method>
    <method name="setTextureBoxFilter">
      <argument name="textureBoxFilter_" type="vk::Bool32" />
    </method>
    <method name="setTextureBlockMatch">
      <argument name="textureBlockMatch_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageProcessingFeaturesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageProcessingFeaturesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageProcessingFeaturesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageProcessingFeaturesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="textureSampleWeighted" />
    <field name="textureBoxFilter" />
    <field name="textureBlockMatch" />
  </struct>
  <struct name="PhysicalDeviceImageProcessingPropertiesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageProcessingPropertiesQCOM">
      <argument name="maxWeightFilterPhases_" type="uint32_t" default_raw="{}" />
      <argument name="maxWeightFilterDimension_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxBlockMatchRegion_" type="vk::Extent2D" default_raw="{}" />
      <argument name="maxBoxFilterBlockSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageProcessingPropertiesQCOM">
      <argument name="rhs" type="const PhysicalDeviceImageProcessingPropertiesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageProcessingPropertiesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceImageProcessingPropertiesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageProcessingPropertiesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageProcessingPropertiesQCOM &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageProcessingPropertiesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageProcessingPropertiesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageProcessingPropertiesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageProcessingPropertiesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxWeightFilterPhases" />
    <field name="maxWeightFilterDimension" />
    <field name="maxBlockMatchRegion" />
    <field name="maxBoxFilterBlockSize" />
  </struct>
  <struct name="PhysicalDeviceNestedCommandBufferFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceNestedCommandBufferFeaturesEXT">
      <argument name="nestedCommandBuffer_" type="vk::Bool32" default_raw="{}" />
      <argument name="nestedCommandBufferRendering_" type="vk::Bool32" default_raw="{}" />
      <argument name="nestedCommandBufferSimultaneousUse_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceNestedCommandBufferFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceNestedCommandBufferFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceNestedCommandBufferFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceNestedCommandBufferFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceNestedCommandBufferFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceNestedCommandBufferFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setNestedCommandBuffer">
      <argument name="nestedCommandBuffer_" type="vk::Bool32" />
    </method>
    <method name="setNestedCommandBufferRendering">
      <argument name="nestedCommandBufferRendering_" type="vk::Bool32" />
    </method>
    <method name="setNestedCommandBufferSimultaneousUse">
      <argument name="nestedCommandBufferSimultaneousUse_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceNestedCommandBufferFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceNestedCommandBufferFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceNestedCommandBufferFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceNestedCommandBufferFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="nestedCommandBuffer" />
    <field name="nestedCommandBufferRendering" />
    <field name="nestedCommandBufferSimultaneousUse" />
  </struct>
  <struct name="PhysicalDeviceNestedCommandBufferPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceNestedCommandBufferPropertiesEXT">
      <argument name="maxCommandBufferNestingLevel_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceNestedCommandBufferPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceNestedCommandBufferPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceNestedCommandBufferPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceNestedCommandBufferPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceNestedCommandBufferPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceNestedCommandBufferPropertiesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMaxCommandBufferNestingLevel">
      <argument name="maxCommandBufferNestingLevel_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceNestedCommandBufferPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceNestedCommandBufferPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceNestedCommandBufferPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceNestedCommandBufferPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxCommandBufferNestingLevel" />
  </struct>
  <struct name="ExternalMemoryAcquireUnmodifiedEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ExternalMemoryAcquireUnmodifiedEXT">
      <argument name="acquireUnmodifiedMemory_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ExternalMemoryAcquireUnmodifiedEXT">
      <argument name="rhs" type="const ExternalMemoryAcquireUnmodifiedEXT &amp;" />
    </constructor>
    <constructor name="ExternalMemoryAcquireUnmodifiedEXT">
      <argument name="rhs" type="const VkExternalMemoryAcquireUnmodifiedEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ExternalMemoryAcquireUnmodifiedEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkExternalMemoryAcquireUnmodifiedEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setAcquireUnmodifiedMemory">
      <argument name="acquireUnmodifiedMemory_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkExternalMemoryAcquireUnmodifiedEXT &amp;" />
    <conversion_function name="operator VkExternalMemoryAcquireUnmodifiedEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ExternalMemoryAcquireUnmodifiedEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ExternalMemoryAcquireUnmodifiedEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="acquireUnmodifiedMemory" />
  </struct>
  <struct name="ColorBlendAdvancedEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ColorBlendAdvancedEXT">
      <argument name="advancedBlendOp_" type="vk::BlendOp" default_raw="VULKAN_HPP_NAMESPACE::BlendOp::eAdd" />
      <argument name="srcPremultiplied_" type="vk::Bool32" default_raw="{}" />
      <argument name="dstPremultiplied_" type="vk::Bool32" default_raw="{}" />
      <argument name="blendOverlap_" type="vk::BlendOverlapEXT" default_raw="VULKAN_HPP_NAMESPACE::BlendOverlapEXT::eUncorrelated" />
      <argument name="clampResults_" type="vk::Bool32" default_raw="{}" />
    </constructor>
    <constructor name="ColorBlendAdvancedEXT">
      <argument name="rhs" type="const ColorBlendAdvancedEXT &amp;" />
    </constructor>
    <constructor name="ColorBlendAdvancedEXT">
      <argument name="rhs" type="const VkColorBlendAdvancedEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ColorBlendAdvancedEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkColorBlendAdvancedEXT &amp;" />
    </method>
    <method name="setAdvancedBlendOp">
      <argument name="advancedBlendOp_" type="vk::BlendOp" />
    </method>
    <method name="setSrcPremultiplied">
      <argument name="srcPremultiplied_" type="vk::Bool32" />
    </method>
    <method name="setDstPremultiplied">
      <argument name="dstPremultiplied_" type="vk::Bool32" />
    </method>
    <method name="setBlendOverlap">
      <argument name="blendOverlap_" type="vk::BlendOverlapEXT" />
    </method>
    <method name="setClampResults">
      <argument name="clampResults_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkColorBlendAdvancedEXT &amp;" />
    <conversion_function name="operator VkColorBlendAdvancedEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ColorBlendAdvancedEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ColorBlendAdvancedEXT &amp;" />
    </method>
    <field name="advancedBlendOp" />
    <field name="srcPremultiplied" />
    <field name="dstPremultiplied" />
    <field name="blendOverlap" />
    <field name="clampResults" />
  </struct>
  <struct name="ColorBlendEquationEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ColorBlendEquationEXT">
      <argument name="srcColorBlendFactor_" type="vk::BlendFactor" default_raw="VULKAN_HPP_NAMESPACE::BlendFactor::eZero" />
      <argument name="dstColorBlendFactor_" type="vk::BlendFactor" default_raw="VULKAN_HPP_NAMESPACE::BlendFactor::eZero" />
      <argument name="colorBlendOp_" type="vk::BlendOp" default_raw="VULKAN_HPP_NAMESPACE::BlendOp::eAdd" />
      <argument name="srcAlphaBlendFactor_" type="vk::BlendFactor" default_raw="VULKAN_HPP_NAMESPACE::BlendFactor::eZero" />
      <argument name="dstAlphaBlendFactor_" type="vk::BlendFactor" default_raw="VULKAN_HPP_NAMESPACE::BlendFactor::eZero" />
      <argument name="alphaBlendOp_" type="vk::BlendOp" default_raw="VULKAN_HPP_NAMESPACE::BlendOp::eAdd" />
    </constructor>
    <constructor name="ColorBlendEquationEXT">
      <argument name="rhs" type="const ColorBlendEquationEXT &amp;" />
    </constructor>
    <constructor name="ColorBlendEquationEXT">
      <argument name="rhs" type="const VkColorBlendEquationEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ColorBlendEquationEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkColorBlendEquationEXT &amp;" />
    </method>
    <method name="setSrcColorBlendFactor">
      <argument name="srcColorBlendFactor_" type="vk::BlendFactor" />
    </method>
    <method name="setDstColorBlendFactor">
      <argument name="dstColorBlendFactor_" type="vk::BlendFactor" />
    </method>
    <method name="setColorBlendOp">
      <argument name="colorBlendOp_" type="vk::BlendOp" />
    </method>
    <method name="setSrcAlphaBlendFactor">
      <argument name="srcAlphaBlendFactor_" type="vk::BlendFactor" />
    </method>
    <method name="setDstAlphaBlendFactor">
      <argument name="dstAlphaBlendFactor_" type="vk::BlendFactor" />
    </method>
    <method name="setAlphaBlendOp">
      <argument name="alphaBlendOp_" type="vk::BlendOp" />
    </method>
    <conversion_function name="operator const VkColorBlendEquationEXT &amp;" />
    <conversion_function name="operator VkColorBlendEquationEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ColorBlendEquationEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ColorBlendEquationEXT &amp;" />
    </method>
    <field name="srcColorBlendFactor" />
    <field name="dstColorBlendFactor" />
    <field name="colorBlendOp" />
    <field name="srcAlphaBlendFactor" />
    <field name="dstAlphaBlendFactor" />
    <field name="alphaBlendOp" />
  </struct>
  <struct name="PhysicalDeviceExtendedDynamicState3FeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExtendedDynamicState3FeaturesEXT">
      <argument name="extendedDynamicState3TessellationDomainOrigin_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3DepthClampEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3PolygonMode_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3RasterizationSamples_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3SampleMask_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3AlphaToCoverageEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3AlphaToOneEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3LogicOpEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3ColorBlendEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3ColorBlendEquation_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3ColorWriteMask_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3RasterizationStream_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3ConservativeRasterizationMode_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3ExtraPrimitiveOverestimationSize_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3DepthClipEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3SampleLocationsEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3ColorBlendAdvanced_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3ProvokingVertexMode_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3LineRasterizationMode_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3LineStippleEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3DepthClipNegativeOneToOne_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3ViewportWScalingEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3ViewportSwizzle_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3CoverageToColorEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3CoverageToColorLocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3CoverageModulationMode_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3CoverageModulationTableEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3CoverageModulationTable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3CoverageReductionMode_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3RepresentativeFragmentTestEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="extendedDynamicState3ShadingRateImageEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedDynamicState3FeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState3FeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedDynamicState3FeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedDynamicState3FeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState3FeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedDynamicState3FeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setExtendedDynamicState3TessellationDomainOrigin">
      <argument name="extendedDynamicState3TessellationDomainOrigin_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3DepthClampEnable">
      <argument name="extendedDynamicState3DepthClampEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3PolygonMode">
      <argument name="extendedDynamicState3PolygonMode_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3RasterizationSamples">
      <argument name="extendedDynamicState3RasterizationSamples_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3SampleMask">
      <argument name="extendedDynamicState3SampleMask_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3AlphaToCoverageEnable">
      <argument name="extendedDynamicState3AlphaToCoverageEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3AlphaToOneEnable">
      <argument name="extendedDynamicState3AlphaToOneEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3LogicOpEnable">
      <argument name="extendedDynamicState3LogicOpEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3ColorBlendEnable">
      <argument name="extendedDynamicState3ColorBlendEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3ColorBlendEquation">
      <argument name="extendedDynamicState3ColorBlendEquation_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3ColorWriteMask">
      <argument name="extendedDynamicState3ColorWriteMask_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3RasterizationStream">
      <argument name="extendedDynamicState3RasterizationStream_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3ConservativeRasterizationMode">
      <argument name="extendedDynamicState3ConservativeRasterizationMode_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3ExtraPrimitiveOverestimationSize">
      <argument name="extendedDynamicState3ExtraPrimitiveOverestimationSize_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3DepthClipEnable">
      <argument name="extendedDynamicState3DepthClipEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3SampleLocationsEnable">
      <argument name="extendedDynamicState3SampleLocationsEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3ColorBlendAdvanced">
      <argument name="extendedDynamicState3ColorBlendAdvanced_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3ProvokingVertexMode">
      <argument name="extendedDynamicState3ProvokingVertexMode_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3LineRasterizationMode">
      <argument name="extendedDynamicState3LineRasterizationMode_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3LineStippleEnable">
      <argument name="extendedDynamicState3LineStippleEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3DepthClipNegativeOneToOne">
      <argument name="extendedDynamicState3DepthClipNegativeOneToOne_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3ViewportWScalingEnable">
      <argument name="extendedDynamicState3ViewportWScalingEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3ViewportSwizzle">
      <argument name="extendedDynamicState3ViewportSwizzle_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3CoverageToColorEnable">
      <argument name="extendedDynamicState3CoverageToColorEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3CoverageToColorLocation">
      <argument name="extendedDynamicState3CoverageToColorLocation_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3CoverageModulationMode">
      <argument name="extendedDynamicState3CoverageModulationMode_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3CoverageModulationTableEnable">
      <argument name="extendedDynamicState3CoverageModulationTableEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3CoverageModulationTable">
      <argument name="extendedDynamicState3CoverageModulationTable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3CoverageReductionMode">
      <argument name="extendedDynamicState3CoverageReductionMode_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3RepresentativeFragmentTestEnable">
      <argument name="extendedDynamicState3RepresentativeFragmentTestEnable_" type="vk::Bool32" />
    </method>
    <method name="setExtendedDynamicState3ShadingRateImageEnable">
      <argument name="extendedDynamicState3ShadingRateImageEnable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExtendedDynamicState3FeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExtendedDynamicState3FeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState3FeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState3FeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="extendedDynamicState3TessellationDomainOrigin" />
    <field name="extendedDynamicState3DepthClampEnable" />
    <field name="extendedDynamicState3PolygonMode" />
    <field name="extendedDynamicState3RasterizationSamples" />
    <field name="extendedDynamicState3SampleMask" />
    <field name="extendedDynamicState3AlphaToCoverageEnable" />
    <field name="extendedDynamicState3AlphaToOneEnable" />
    <field name="extendedDynamicState3LogicOpEnable" />
    <field name="extendedDynamicState3ColorBlendEnable" />
    <field name="extendedDynamicState3ColorBlendEquation" />
    <field name="extendedDynamicState3ColorWriteMask" />
    <field name="extendedDynamicState3RasterizationStream" />
    <field name="extendedDynamicState3ConservativeRasterizationMode" />
    <field name="extendedDynamicState3ExtraPrimitiveOverestimationSize" />
    <field name="extendedDynamicState3DepthClipEnable" />
    <field name="extendedDynamicState3SampleLocationsEnable" />
    <field name="extendedDynamicState3ColorBlendAdvanced" />
    <field name="extendedDynamicState3ProvokingVertexMode" />
    <field name="extendedDynamicState3LineRasterizationMode" />
    <field name="extendedDynamicState3LineStippleEnable" />
    <field name="extendedDynamicState3DepthClipNegativeOneToOne" />
    <field name="extendedDynamicState3ViewportWScalingEnable" />
    <field name="extendedDynamicState3ViewportSwizzle" />
    <field name="extendedDynamicState3CoverageToColorEnable" />
    <field name="extendedDynamicState3CoverageToColorLocation" />
    <field name="extendedDynamicState3CoverageModulationMode" />
    <field name="extendedDynamicState3CoverageModulationTableEnable" />
    <field name="extendedDynamicState3CoverageModulationTable" />
    <field name="extendedDynamicState3CoverageReductionMode" />
    <field name="extendedDynamicState3RepresentativeFragmentTestEnable" />
    <field name="extendedDynamicState3ShadingRateImageEnable" />
  </struct>
  <struct name="PhysicalDeviceExtendedDynamicState3PropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExtendedDynamicState3PropertiesEXT">
      <argument name="dynamicPrimitiveTopologyUnrestricted_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedDynamicState3PropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState3PropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedDynamicState3PropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedDynamicState3PropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState3PropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedDynamicState3PropertiesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDynamicPrimitiveTopologyUnrestricted">
      <argument name="dynamicPrimitiveTopologyUnrestricted_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExtendedDynamicState3PropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExtendedDynamicState3PropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState3PropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExtendedDynamicState3PropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="dynamicPrimitiveTopologyUnrestricted" />
  </struct>
  <struct name="PhysicalDeviceSubpassMergeFeedbackFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceSubpassMergeFeedbackFeaturesEXT">
      <argument name="subpassMergeFeedback_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceSubpassMergeFeedbackFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceSubpassMergeFeedbackFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceSubpassMergeFeedbackFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceSubpassMergeFeedbackFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSubpassMergeFeedback">
      <argument name="subpassMergeFeedback_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceSubpassMergeFeedbackFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceSubpassMergeFeedbackFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="subpassMergeFeedback" />
  </struct>
  <struct name="RenderPassCreationControlEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassCreationControlEXT">
      <argument name="disallowMerging_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassCreationControlEXT">
      <argument name="rhs" type="const RenderPassCreationControlEXT &amp;" />
    </constructor>
    <constructor name="RenderPassCreationControlEXT">
      <argument name="rhs" type="const VkRenderPassCreationControlEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassCreationControlEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassCreationControlEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDisallowMerging">
      <argument name="disallowMerging_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkRenderPassCreationControlEXT &amp;" />
    <conversion_function name="operator VkRenderPassCreationControlEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassCreationControlEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassCreationControlEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="disallowMerging" />
  </struct>
  <struct name="RenderPassCreationFeedbackCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassCreationFeedbackCreateInfoEXT">
      <argument name="pRenderPassFeedback_" type="vk::RenderPassCreationFeedbackInfoEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassCreationFeedbackCreateInfoEXT">
      <argument name="rhs" type="const RenderPassCreationFeedbackCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="RenderPassCreationFeedbackCreateInfoEXT">
      <argument name="rhs" type="const VkRenderPassCreationFeedbackCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassCreationFeedbackCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassCreationFeedbackCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPRenderPassFeedback">
      <argument name="pRenderPassFeedback_" type="vk::RenderPassCreationFeedbackInfoEXT *" />
    </method>
    <conversion_function name="operator const VkRenderPassCreationFeedbackCreateInfoEXT &amp;" />
    <conversion_function name="operator VkRenderPassCreationFeedbackCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassCreationFeedbackCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassCreationFeedbackCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pRenderPassFeedback" />
  </struct>
  <struct name="RenderPassCreationFeedbackInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassCreationFeedbackInfoEXT">
      <argument name="postMergeSubpassCount_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="RenderPassCreationFeedbackInfoEXT">
      <argument name="rhs" type="const RenderPassCreationFeedbackInfoEXT &amp;" />
    </constructor>
    <constructor name="RenderPassCreationFeedbackInfoEXT">
      <argument name="rhs" type="const VkRenderPassCreationFeedbackInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassCreationFeedbackInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassCreationFeedbackInfoEXT &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassCreationFeedbackInfoEXT &amp;" />
    <conversion_function name="operator VkRenderPassCreationFeedbackInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassCreationFeedbackInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassCreationFeedbackInfoEXT &amp;" />
    </method>
    <field name="postMergeSubpassCount" />
  </struct>
  <struct name="RenderPassSubpassFeedbackCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassSubpassFeedbackCreateInfoEXT">
      <argument name="pSubpassFeedback_" type="vk::RenderPassSubpassFeedbackInfoEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderPassSubpassFeedbackCreateInfoEXT">
      <argument name="rhs" type="const RenderPassSubpassFeedbackCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="RenderPassSubpassFeedbackCreateInfoEXT">
      <argument name="rhs" type="const VkRenderPassSubpassFeedbackCreateInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassSubpassFeedbackCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassSubpassFeedbackCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPSubpassFeedback">
      <argument name="pSubpassFeedback_" type="vk::RenderPassSubpassFeedbackInfoEXT *" />
    </method>
    <conversion_function name="operator const VkRenderPassSubpassFeedbackCreateInfoEXT &amp;" />
    <conversion_function name="operator VkRenderPassSubpassFeedbackCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassSubpassFeedbackCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassSubpassFeedbackCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pSubpassFeedback" />
  </struct>
  <struct name="RenderPassSubpassFeedbackInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderPassSubpassFeedbackInfoEXT">
      <argument name="subpassMergeStatus_" type="vk::SubpassMergeStatusEXT" default_raw="VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eMerged" />
      <argument name="description_" type="const std::array&lt;char, 256U&gt; &amp;" default_raw="{}" />
      <argument name="postMergeIndex_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="RenderPassSubpassFeedbackInfoEXT">
      <argument name="rhs" type="const RenderPassSubpassFeedbackInfoEXT &amp;" />
    </constructor>
    <constructor name="RenderPassSubpassFeedbackInfoEXT">
      <argument name="rhs" type="const VkRenderPassSubpassFeedbackInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderPassSubpassFeedbackInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderPassSubpassFeedbackInfoEXT &amp;" />
    </method>
    <conversion_function name="operator const VkRenderPassSubpassFeedbackInfoEXT &amp;" />
    <conversion_function name="operator VkRenderPassSubpassFeedbackInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderPassSubpassFeedbackInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPassSubpassFeedbackInfoEXT &amp;" />
    </method>
    <field name="subpassMergeStatus" />
    <field name="description" />
    <field name="postMergeIndex" />
  </struct>
  <struct name="DirectDriverLoadingInfoLUNARG" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DirectDriverLoadingInfoLUNARG">
      <argument name="flags_" type="vk::DirectDriverLoadingFlagsLUNARG" default_raw="{}" />
      <argument name="pfnGetInstanceProcAddr_" type="PFN_vkGetInstanceProcAddrLUNARG" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DirectDriverLoadingInfoLUNARG">
      <argument name="rhs" type="const DirectDriverLoadingInfoLUNARG &amp;" />
    </constructor>
    <constructor name="DirectDriverLoadingInfoLUNARG">
      <argument name="rhs" type="const VkDirectDriverLoadingInfoLUNARG &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DirectDriverLoadingInfoLUNARG &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDirectDriverLoadingInfoLUNARG &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::DirectDriverLoadingFlagsLUNARG" />
    </method>
    <method name="setPfnGetInstanceProcAddr">
      <argument name="pfnGetInstanceProcAddr_" type="PFN_vkGetInstanceProcAddrLUNARG" />
    </method>
    <conversion_function name="operator const VkDirectDriverLoadingInfoLUNARG &amp;" />
    <conversion_function name="operator VkDirectDriverLoadingInfoLUNARG &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DirectDriverLoadingInfoLUNARG &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DirectDriverLoadingInfoLUNARG &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="pfnGetInstanceProcAddr" />
  </struct>
  <struct name="DirectDriverLoadingListLUNARG" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DirectDriverLoadingListLUNARG">
      <argument name="mode_" type="vk::DirectDriverLoadingModeLUNARG" default_raw="VULKAN_HPP_NAMESPACE::DirectDriverLoadingModeLUNARG::eExclusive" />
      <argument name="driverCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDrivers_" type="const vk::DirectDriverLoadingInfoLUNARG *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DirectDriverLoadingListLUNARG">
      <argument name="rhs" type="const DirectDriverLoadingListLUNARG &amp;" />
    </constructor>
    <constructor name="DirectDriverLoadingListLUNARG">
      <argument name="rhs" type="const VkDirectDriverLoadingListLUNARG &amp;" />
    </constructor>
    <constructor name="DirectDriverLoadingListLUNARG">
      <argument name="mode_" type="vk::DirectDriverLoadingModeLUNARG" />
      <argument name="drivers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DirectDriverLoadingInfoLUNARG&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DirectDriverLoadingListLUNARG &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDirectDriverLoadingListLUNARG &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMode">
      <argument name="mode_" type="vk::DirectDriverLoadingModeLUNARG" />
    </method>
    <method name="setDriverCount">
      <argument name="driverCount_" type="uint32_t" />
    </method>
    <method name="setPDrivers">
      <argument name="pDrivers_" type="const vk::DirectDriverLoadingInfoLUNARG *" />
    </method>
    <method name="setDrivers">
      <argument name="drivers_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DirectDriverLoadingInfoLUNARG&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkDirectDriverLoadingListLUNARG &amp;" />
    <conversion_function name="operator VkDirectDriverLoadingListLUNARG &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DirectDriverLoadingListLUNARG &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DirectDriverLoadingListLUNARG &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="mode" />
    <field name="driverCount" />
    <field name="pDrivers" />
  </struct>
  <struct name="PhysicalDeviceShaderModuleIdentifierFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderModuleIdentifierFeaturesEXT">
      <argument name="shaderModuleIdentifier_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderModuleIdentifierFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceShaderModuleIdentifierFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderModuleIdentifierFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderModuleIdentifierFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderModuleIdentifier">
      <argument name="shaderModuleIdentifier_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderModuleIdentifierFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderModuleIdentifierFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderModuleIdentifier" />
  </struct>
  <struct name="PhysicalDeviceShaderModuleIdentifierPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderModuleIdentifierPropertiesEXT">
      <argument name="shaderModuleIdentifierAlgorithmUUID_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderModuleIdentifierPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceShaderModuleIdentifierPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderModuleIdentifierPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderModuleIdentifierPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderModuleIdentifierPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderModuleIdentifierPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderModuleIdentifierAlgorithmUUID" />
  </struct>
  <struct name="PipelineShaderStageModuleIdentifierCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineShaderStageModuleIdentifierCreateInfoEXT">
      <argument name="identifierSize_" type="uint32_t" default_raw="{}" />
      <argument name="pIdentifier_" type="const uint8_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineShaderStageModuleIdentifierCreateInfoEXT">
      <argument name="rhs" type="const PipelineShaderStageModuleIdentifierCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineShaderStageModuleIdentifierCreateInfoEXT">
      <argument name="rhs" type="const VkPipelineShaderStageModuleIdentifierCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="PipelineShaderStageModuleIdentifierCreateInfoEXT">
      <argument name="identifier_" type="const vk::ArrayProxyNoTemporaries&lt;const uint8_t&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineShaderStageModuleIdentifierCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineShaderStageModuleIdentifierCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setIdentifierSize">
      <argument name="identifierSize_" type="uint32_t" />
    </method>
    <method name="setPIdentifier">
      <argument name="pIdentifier_" type="const uint8_t *" />
    </method>
    <method name="setIdentifier">
      <argument name="identifier_" type="const vk::ArrayProxyNoTemporaries&lt;const uint8_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineShaderStageModuleIdentifierCreateInfoEXT &amp;" />
    <conversion_function name="operator VkPipelineShaderStageModuleIdentifierCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineShaderStageModuleIdentifierCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineShaderStageModuleIdentifierCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="identifierSize" />
    <field name="pIdentifier" />
  </struct>
  <struct name="ShaderModuleIdentifierEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ShaderModuleIdentifierEXT">
      <argument name="identifierSize_" type="uint32_t" default_raw="{}" />
      <argument name="identifier_" type="const std::array&lt;uint8_t, 32U&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ShaderModuleIdentifierEXT">
      <argument name="rhs" type="const ShaderModuleIdentifierEXT &amp;" />
    </constructor>
    <constructor name="ShaderModuleIdentifierEXT">
      <argument name="rhs" type="const VkShaderModuleIdentifierEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ShaderModuleIdentifierEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkShaderModuleIdentifierEXT &amp;" />
    </method>
    <conversion_function name="operator const VkShaderModuleIdentifierEXT &amp;" />
    <conversion_function name="operator VkShaderModuleIdentifierEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ShaderModuleIdentifierEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ShaderModuleIdentifierEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="identifierSize" />
    <field name="identifier" />
  </struct>
  <type_alias name="PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT" />
  <struct name="PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT">
      <argument name="rasterizationOrderColorAttachmentAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="rasterizationOrderDepthAttachmentAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="rasterizationOrderStencilAttachmentAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRasterizationOrderColorAttachmentAccess">
      <argument name="rasterizationOrderColorAttachmentAccess_" type="vk::Bool32" />
    </method>
    <method name="setRasterizationOrderDepthAttachmentAccess">
      <argument name="rasterizationOrderDepthAttachmentAccess_" type="vk::Bool32" />
    </method>
    <method name="setRasterizationOrderStencilAttachmentAccess">
      <argument name="rasterizationOrderStencilAttachmentAccess_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="rasterizationOrderColorAttachmentAccess" />
    <field name="rasterizationOrderDepthAttachmentAccess" />
    <field name="rasterizationOrderStencilAttachmentAccess" />
  </struct>
  <struct name="OpticalFlowExecuteInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="OpticalFlowExecuteInfoNV">
      <argument name="flags_" type="vk::OpticalFlowExecuteFlagsNV" default_raw="{}" />
      <argument name="regionCount_" type="uint32_t" default_raw="{}" />
      <argument name="pRegions_" type="const vk::Rect2D *" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="OpticalFlowExecuteInfoNV">
      <argument name="rhs" type="const OpticalFlowExecuteInfoNV &amp;" />
    </constructor>
    <constructor name="OpticalFlowExecuteInfoNV">
      <argument name="rhs" type="const VkOpticalFlowExecuteInfoNV &amp;" />
    </constructor>
    <constructor name="OpticalFlowExecuteInfoNV">
      <argument name="flags_" type="vk::OpticalFlowExecuteFlagsNV" />
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const OpticalFlowExecuteInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkOpticalFlowExecuteInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::OpticalFlowExecuteFlagsNV" />
    </method>
    <method name="setRegionCount">
      <argument name="regionCount_" type="uint32_t" />
    </method>
    <method name="setPRegions">
      <argument name="pRegions_" type="const vk::Rect2D *" />
    </method>
    <method name="setRegions">
      <argument name="regions_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkOpticalFlowExecuteInfoNV &amp;" />
    <conversion_function name="operator VkOpticalFlowExecuteInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const OpticalFlowExecuteInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const OpticalFlowExecuteInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="regionCount" />
    <field name="pRegions" />
  </struct>
  <struct name="OpticalFlowImageFormatInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="OpticalFlowImageFormatInfoNV">
      <argument name="usage_" type="vk::OpticalFlowUsageFlagsNV" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="OpticalFlowImageFormatInfoNV">
      <argument name="rhs" type="const OpticalFlowImageFormatInfoNV &amp;" />
    </constructor>
    <constructor name="OpticalFlowImageFormatInfoNV">
      <argument name="rhs" type="const VkOpticalFlowImageFormatInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const OpticalFlowImageFormatInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkOpticalFlowImageFormatInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setUsage">
      <argument name="usage_" type="vk::OpticalFlowUsageFlagsNV" />
    </method>
    <conversion_function name="operator const VkOpticalFlowImageFormatInfoNV &amp;" />
    <conversion_function name="operator VkOpticalFlowImageFormatInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const OpticalFlowImageFormatInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const OpticalFlowImageFormatInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="usage" />
  </struct>
  <struct name="OpticalFlowImageFormatPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="OpticalFlowImageFormatPropertiesNV">
      <argument name="format_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="OpticalFlowImageFormatPropertiesNV">
      <argument name="rhs" type="const OpticalFlowImageFormatPropertiesNV &amp;" />
    </constructor>
    <constructor name="OpticalFlowImageFormatPropertiesNV">
      <argument name="rhs" type="const VkOpticalFlowImageFormatPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const OpticalFlowImageFormatPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkOpticalFlowImageFormatPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkOpticalFlowImageFormatPropertiesNV &amp;" />
    <conversion_function name="operator VkOpticalFlowImageFormatPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const OpticalFlowImageFormatPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const OpticalFlowImageFormatPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="format" />
  </struct>
  <struct name="OpticalFlowSessionCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="OpticalFlowSessionCreateInfoNV">
      <argument name="width_" type="uint32_t" default_raw="{}" />
      <argument name="height_" type="uint32_t" default_raw="{}" />
      <argument name="imageFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="flowVectorFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="costFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="outputGridSize_" type="vk::OpticalFlowGridSizeFlagsNV" default_raw="{}" />
      <argument name="hintGridSize_" type="vk::OpticalFlowGridSizeFlagsNV" default_raw="{}" />
      <argument name="performanceLevel_" type="vk::OpticalFlowPerformanceLevelNV" default_raw="VULKAN_HPP_NAMESPACE::OpticalFlowPerformanceLevelNV::eUnknown" />
      <argument name="flags_" type="vk::OpticalFlowSessionCreateFlagsNV" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="OpticalFlowSessionCreateInfoNV">
      <argument name="rhs" type="const OpticalFlowSessionCreateInfoNV &amp;" />
    </constructor>
    <constructor name="OpticalFlowSessionCreateInfoNV">
      <argument name="rhs" type="const VkOpticalFlowSessionCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const OpticalFlowSessionCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkOpticalFlowSessionCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setWidth">
      <argument name="width_" type="uint32_t" />
    </method>
    <method name="setHeight">
      <argument name="height_" type="uint32_t" />
    </method>
    <method name="setImageFormat">
      <argument name="imageFormat_" type="vk::Format" />
    </method>
    <method name="setFlowVectorFormat">
      <argument name="flowVectorFormat_" type="vk::Format" />
    </method>
    <method name="setCostFormat">
      <argument name="costFormat_" type="vk::Format" />
    </method>
    <method name="setOutputGridSize">
      <argument name="outputGridSize_" type="vk::OpticalFlowGridSizeFlagsNV" />
    </method>
    <method name="setHintGridSize">
      <argument name="hintGridSize_" type="vk::OpticalFlowGridSizeFlagsNV" />
    </method>
    <method name="setPerformanceLevel">
      <argument name="performanceLevel_" type="vk::OpticalFlowPerformanceLevelNV" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::OpticalFlowSessionCreateFlagsNV" />
    </method>
    <conversion_function name="operator const VkOpticalFlowSessionCreateInfoNV &amp;" />
    <conversion_function name="operator VkOpticalFlowSessionCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const OpticalFlowSessionCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const OpticalFlowSessionCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="width" />
    <field name="height" />
    <field name="imageFormat" />
    <field name="flowVectorFormat" />
    <field name="costFormat" />
    <field name="outputGridSize" />
    <field name="hintGridSize" />
    <field name="performanceLevel" />
    <field name="flags" />
  </struct>
  <struct name="OpticalFlowSessionCreatePrivateDataInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="OpticalFlowSessionCreatePrivateDataInfoNV">
      <argument name="id_" type="uint32_t" default_raw="{}" />
      <argument name="size_" type="uint32_t" default_raw="{}" />
      <argument name="pPrivateData_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="OpticalFlowSessionCreatePrivateDataInfoNV">
      <argument name="rhs" type="const OpticalFlowSessionCreatePrivateDataInfoNV &amp;" />
    </constructor>
    <constructor name="OpticalFlowSessionCreatePrivateDataInfoNV">
      <argument name="rhs" type="const VkOpticalFlowSessionCreatePrivateDataInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const OpticalFlowSessionCreatePrivateDataInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkOpticalFlowSessionCreatePrivateDataInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setId">
      <argument name="id_" type="uint32_t" />
    </method>
    <method name="setSize">
      <argument name="size_" type="uint32_t" />
    </method>
    <method name="setPPrivateData">
      <argument name="pPrivateData_" type="const void *" />
    </method>
    <conversion_function name="operator const VkOpticalFlowSessionCreatePrivateDataInfoNV &amp;" />
    <conversion_function name="operator VkOpticalFlowSessionCreatePrivateDataInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const OpticalFlowSessionCreatePrivateDataInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const OpticalFlowSessionCreatePrivateDataInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="id" />
    <field name="size" />
    <field name="pPrivateData" />
  </struct>
  <struct name="PhysicalDeviceOpticalFlowFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceOpticalFlowFeaturesNV">
      <argument name="opticalFlow_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceOpticalFlowFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceOpticalFlowFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceOpticalFlowFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceOpticalFlowFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceOpticalFlowFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceOpticalFlowFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setOpticalFlow">
      <argument name="opticalFlow_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceOpticalFlowFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceOpticalFlowFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceOpticalFlowFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceOpticalFlowFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="opticalFlow" />
  </struct>
  <struct name="PhysicalDeviceOpticalFlowPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceOpticalFlowPropertiesNV">
      <argument name="supportedOutputGridSizes_" type="vk::OpticalFlowGridSizeFlagsNV" default_raw="{}" />
      <argument name="supportedHintGridSizes_" type="vk::OpticalFlowGridSizeFlagsNV" default_raw="{}" />
      <argument name="hintSupported_" type="vk::Bool32" default_raw="{}" />
      <argument name="costSupported_" type="vk::Bool32" default_raw="{}" />
      <argument name="bidirectionalFlowSupported_" type="vk::Bool32" default_raw="{}" />
      <argument name="globalFlowSupported_" type="vk::Bool32" default_raw="{}" />
      <argument name="minWidth_" type="uint32_t" default_raw="{}" />
      <argument name="minHeight_" type="uint32_t" default_raw="{}" />
      <argument name="maxWidth_" type="uint32_t" default_raw="{}" />
      <argument name="maxHeight_" type="uint32_t" default_raw="{}" />
      <argument name="maxNumRegionsOfInterest_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceOpticalFlowPropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceOpticalFlowPropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceOpticalFlowPropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceOpticalFlowPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceOpticalFlowPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceOpticalFlowPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceOpticalFlowPropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceOpticalFlowPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceOpticalFlowPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceOpticalFlowPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="supportedOutputGridSizes" />
    <field name="supportedHintGridSizes" />
    <field name="hintSupported" />
    <field name="costSupported" />
    <field name="bidirectionalFlowSupported" />
    <field name="globalFlowSupported" />
    <field name="minWidth" />
    <field name="minHeight" />
    <field name="maxWidth" />
    <field name="maxHeight" />
    <field name="maxNumRegionsOfInterest" />
  </struct>
  <struct name="PhysicalDeviceLegacyDitheringFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceLegacyDitheringFeaturesEXT">
      <argument name="legacyDithering_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceLegacyDitheringFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceLegacyDitheringFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceLegacyDitheringFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceLegacyDitheringFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceLegacyDitheringFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceLegacyDitheringFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setLegacyDithering">
      <argument name="legacyDithering_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceLegacyDitheringFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceLegacyDitheringFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceLegacyDitheringFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceLegacyDitheringFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="legacyDithering" />
  </struct>
  <struct name="PhysicalDevicePipelineProtectedAccessFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePipelineProtectedAccessFeaturesEXT">
      <argument name="pipelineProtectedAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePipelineProtectedAccessFeaturesEXT">
      <argument name="rhs" type="const PhysicalDevicePipelineProtectedAccessFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePipelineProtectedAccessFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDevicePipelineProtectedAccessFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePipelineProtectedAccessFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePipelineProtectedAccessFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPipelineProtectedAccess">
      <argument name="pipelineProtectedAccess_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePipelineProtectedAccessFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDevicePipelineProtectedAccessFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePipelineProtectedAccessFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePipelineProtectedAccessFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipelineProtectedAccess" />
  </struct>
  <struct name="BufferUsageFlags2CreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BufferUsageFlags2CreateInfoKHR">
      <argument name="usage_" type="vk::BufferUsageFlags2KHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BufferUsageFlags2CreateInfoKHR">
      <argument name="rhs" type="const BufferUsageFlags2CreateInfoKHR &amp;" />
    </constructor>
    <constructor name="BufferUsageFlags2CreateInfoKHR">
      <argument name="rhs" type="const VkBufferUsageFlags2CreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BufferUsageFlags2CreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBufferUsageFlags2CreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setUsage">
      <argument name="usage_" type="vk::BufferUsageFlags2KHR" />
    </method>
    <conversion_function name="operator const VkBufferUsageFlags2CreateInfoKHR &amp;" />
    <conversion_function name="operator VkBufferUsageFlags2CreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BufferUsageFlags2CreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferUsageFlags2CreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="usage" />
  </struct>
  <struct name="DeviceImageSubresourceInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="DeviceImageSubresourceInfoKHR">
      <argument name="pCreateInfo_" type="const vk::ImageCreateInfo *" default_raw="{}" />
      <argument name="pSubresource_" type="const vk::ImageSubresource2KHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="DeviceImageSubresourceInfoKHR">
      <argument name="rhs" type="const DeviceImageSubresourceInfoKHR &amp;" />
    </constructor>
    <constructor name="DeviceImageSubresourceInfoKHR">
      <argument name="rhs" type="const VkDeviceImageSubresourceInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DeviceImageSubresourceInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkDeviceImageSubresourceInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPCreateInfo">
      <argument name="pCreateInfo_" type="const vk::ImageCreateInfo *" />
    </method>
    <method name="setPSubresource">
      <argument name="pSubresource_" type="const vk::ImageSubresource2KHR *" />
    </method>
    <conversion_function name="operator const VkDeviceImageSubresourceInfoKHR &amp;" />
    <conversion_function name="operator VkDeviceImageSubresourceInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const DeviceImageSubresourceInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceImageSubresourceInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pCreateInfo" />
    <field name="pSubresource" />
  </struct>
  <type_alias name="ImageSubresource2EXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="ImageSubresource2KHR" />
  <struct name="ImageSubresource2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ImageSubresource2KHR">
      <argument name="imageSubresource_" type="vk::ImageSubresource" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ImageSubresource2KHR">
      <argument name="rhs" type="const ImageSubresource2KHR &amp;" />
    </constructor>
    <constructor name="ImageSubresource2KHR">
      <argument name="rhs" type="const VkImageSubresource2KHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const ImageSubresource2KHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkImageSubresource2KHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setImageSubresource">
      <argument name="imageSubresource_" type="const vk::ImageSubresource &amp;" />
    </method>
    <conversion_function name="operator const VkImageSubresource2KHR &amp;" />
    <conversion_function name="operator VkImageSubresource2KHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ImageSubresource2KHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageSubresource2KHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="imageSubresource" />
  </struct>
  <struct name="PhysicalDeviceMaintenance5FeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMaintenance5FeaturesKHR">
      <argument name="maintenance5_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance5FeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceMaintenance5FeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance5FeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance5FeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance5FeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance5FeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMaintenance5">
      <argument name="maintenance5_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMaintenance5FeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMaintenance5FeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMaintenance5FeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance5FeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maintenance5" />
  </struct>
  <struct name="PhysicalDeviceMaintenance5PropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMaintenance5PropertiesKHR">
      <argument name="earlyFragmentMultisampleCoverageAfterSampleCounting_" type="vk::Bool32" default_raw="{}" />
      <argument name="earlyFragmentSampleMaskTestBeforeSampleCounting_" type="vk::Bool32" default_raw="{}" />
      <argument name="depthStencilSwizzleOneSupport_" type="vk::Bool32" default_raw="{}" />
      <argument name="polygonModePointSize_" type="vk::Bool32" default_raw="{}" />
      <argument name="nonStrictSinglePixelWideLinesUseParallelogram_" type="vk::Bool32" default_raw="{}" />
      <argument name="nonStrictWideLinesUseParallelogram_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance5PropertiesKHR">
      <argument name="rhs" type="const PhysicalDeviceMaintenance5PropertiesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance5PropertiesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance5PropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance5PropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance5PropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMaintenance5PropertiesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMaintenance5PropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMaintenance5PropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance5PropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="earlyFragmentMultisampleCoverageAfterSampleCounting" />
    <field name="earlyFragmentSampleMaskTestBeforeSampleCounting" />
    <field name="depthStencilSwizzleOneSupport" />
    <field name="polygonModePointSize" />
    <field name="nonStrictSinglePixelWideLinesUseParallelogram" />
    <field name="nonStrictWideLinesUseParallelogram" />
  </struct>
  <struct name="PipelineCreateFlags2CreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineCreateFlags2CreateInfoKHR">
      <argument name="flags_" type="vk::PipelineCreateFlags2KHR" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineCreateFlags2CreateInfoKHR">
      <argument name="rhs" type="const PipelineCreateFlags2CreateInfoKHR &amp;" />
    </constructor>
    <constructor name="PipelineCreateFlags2CreateInfoKHR">
      <argument name="rhs" type="const VkPipelineCreateFlags2CreateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineCreateFlags2CreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineCreateFlags2CreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::PipelineCreateFlags2KHR" />
    </method>
    <conversion_function name="operator const VkPipelineCreateFlags2CreateInfoKHR &amp;" />
    <conversion_function name="operator VkPipelineCreateFlags2CreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineCreateFlags2CreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineCreateFlags2CreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
  </struct>
  <struct name="RenderingAreaInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="RenderingAreaInfoKHR">
      <argument name="viewMask_" type="uint32_t" default_raw="{}" />
      <argument name="colorAttachmentCount_" type="uint32_t" default_raw="{}" />
      <argument name="pColorAttachmentFormats_" type="const vk::Format *" default_raw="{}" />
      <argument name="depthAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="stencilAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="RenderingAreaInfoKHR">
      <argument name="rhs" type="const RenderingAreaInfoKHR &amp;" />
    </constructor>
    <constructor name="RenderingAreaInfoKHR">
      <argument name="rhs" type="const VkRenderingAreaInfoKHR &amp;" />
    </constructor>
    <constructor name="RenderingAreaInfoKHR">
      <argument name="viewMask_" type="uint32_t" />
      <argument name="colorAttachmentFormats_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Format&gt; &amp;" />
      <argument name="depthAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="stencilAttachmentFormat_" type="vk::Format" default_raw="VULKAN_HPP_NAMESPACE::Format::eUndefined" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const RenderingAreaInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkRenderingAreaInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setViewMask">
      <argument name="viewMask_" type="uint32_t" />
    </method>
    <method name="setColorAttachmentCount">
      <argument name="colorAttachmentCount_" type="uint32_t" />
    </method>
    <method name="setPColorAttachmentFormats">
      <argument name="pColorAttachmentFormats_" type="const vk::Format *" />
    </method>
    <method name="setColorAttachmentFormats">
      <argument name="colorAttachmentFormats_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Format&gt; &amp;" />
    </method>
    <method name="setDepthAttachmentFormat">
      <argument name="depthAttachmentFormat_" type="vk::Format" />
    </method>
    <method name="setStencilAttachmentFormat">
      <argument name="stencilAttachmentFormat_" type="vk::Format" />
    </method>
    <conversion_function name="operator const VkRenderingAreaInfoKHR &amp;" />
    <conversion_function name="operator VkRenderingAreaInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const RenderingAreaInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderingAreaInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="viewMask" />
    <field name="colorAttachmentCount" />
    <field name="pColorAttachmentFormats" />
    <field name="depthAttachmentFormat" />
    <field name="stencilAttachmentFormat" />
  </struct>
  <type_alias name="SubresourceLayout2EXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="SubresourceLayout2KHR" />
  <struct name="SubresourceLayout2KHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SubresourceLayout2KHR">
      <argument name="subresourceLayout_" type="vk::SubresourceLayout" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SubresourceLayout2KHR">
      <argument name="rhs" type="const SubresourceLayout2KHR &amp;" />
    </constructor>
    <constructor name="SubresourceLayout2KHR">
      <argument name="rhs" type="const VkSubresourceLayout2KHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SubresourceLayout2KHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSubresourceLayout2KHR &amp;" />
    </method>
    <conversion_function name="operator const VkSubresourceLayout2KHR &amp;" />
    <conversion_function name="operator VkSubresourceLayout2KHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SubresourceLayout2KHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SubresourceLayout2KHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="subresourceLayout" />
  </struct>
  <struct name="PhysicalDeviceRayTracingPositionFetchFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRayTracingPositionFetchFeaturesKHR">
      <argument name="rayTracingPositionFetch_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingPositionFetchFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPositionFetchFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingPositionFetchFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPositionFetchFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRayTracingPositionFetch">
      <argument name="rayTracingPositionFetch_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPositionFetchFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingPositionFetchFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="rayTracingPositionFetch" />
  </struct>
  <struct name="PhysicalDeviceShaderObjectFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderObjectFeaturesEXT">
      <argument name="shaderObject_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderObjectFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceShaderObjectFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderObjectFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceShaderObjectFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderObjectFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderObjectFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderObject">
      <argument name="shaderObject_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderObjectFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderObjectFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderObjectFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderObjectFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderObject" />
  </struct>
  <struct name="PhysicalDeviceShaderObjectPropertiesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderObjectPropertiesEXT">
      <argument name="shaderBinaryUUID_" type="const std::array&lt;uint8_t, 16U&gt; &amp;" default_raw="{}" />
      <argument name="shaderBinaryVersion_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderObjectPropertiesEXT">
      <argument name="rhs" type="const PhysicalDeviceShaderObjectPropertiesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderObjectPropertiesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceShaderObjectPropertiesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderObjectPropertiesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderObjectPropertiesEXT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderObjectPropertiesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderObjectPropertiesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderObjectPropertiesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderObjectPropertiesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderBinaryUUID" />
    <field name="shaderBinaryVersion" />
  </struct>
  <struct name="ShaderCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="ShaderCreateInfoEXT">
      <argument name="flags_" type="vk::ShaderCreateFlagsEXT" default_raw="{}" />
      <argument name="stage_" type="vk::ShaderStageFlagBits" default_raw="VULKAN_HPP_NAMESPACE::ShaderStageFlagBits::eVertex" />
      <argument name="nextStage_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="codeType_" type="vk::ShaderCodeTypeEXT" default_raw="VULKAN_HPP_NAMESPACE::ShaderCodeTypeEXT::eBinary" />
      <argument name="codeSize_" type="size_t" default_raw="{}" />
      <argument name="pCode_" type="const void *" default_raw="{}" />
      <argument name="pName_" type="const char *" default_raw="{}" />
      <argument name="setLayoutCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSetLayouts_" type="const vk::DescriptorSetLayout *" default_raw="{}" />
      <argument name="pushConstantRangeCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPushConstantRanges_" type="const vk::PushConstantRange *" default_raw="{}" />
      <argument name="pSpecializationInfo_" type="const vk::SpecializationInfo *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="ShaderCreateInfoEXT">
      <argument name="rhs" type="const ShaderCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="ShaderCreateInfoEXT">
      <argument name="rhs" type="const VkShaderCreateInfoEXT &amp;" />
    </constructor>
    <method name="ShaderCreateInfoEXT" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const ShaderCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkShaderCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFlags">
      <argument name="flags_" type="vk::ShaderCreateFlagsEXT" />
    </method>
    <method name="setStage">
      <argument name="stage_" type="vk::ShaderStageFlagBits" />
    </method>
    <method name="setNextStage">
      <argument name="nextStage_" type="vk::ShaderStageFlags" />
    </method>
    <method name="setCodeType">
      <argument name="codeType_" type="vk::ShaderCodeTypeEXT" />
    </method>
    <method name="setCodeSize">
      <argument name="codeSize_" type="size_t" />
    </method>
    <method name="setPCode">
      <argument name="pCode_" type="const void *" />
    </method>
    <method name="setCode" template_raw="template &lt;typename T&gt;" />
    <method name="setPName">
      <argument name="pName_" type="const char *" />
    </method>
    <method name="setSetLayoutCount">
      <argument name="setLayoutCount_" type="uint32_t" />
    </method>
    <method name="setPSetLayouts">
      <argument name="pSetLayouts_" type="const vk::DescriptorSetLayout *" />
    </method>
    <method name="setSetLayouts">
      <argument name="setLayouts_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorSetLayout&gt; &amp;" />
    </method>
    <method name="setPushConstantRangeCount">
      <argument name="pushConstantRangeCount_" type="uint32_t" />
    </method>
    <method name="setPPushConstantRanges">
      <argument name="pPushConstantRanges_" type="const vk::PushConstantRange *" />
    </method>
    <method name="setPushConstantRanges">
      <argument name="pushConstantRanges_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::PushConstantRange&gt; &amp;" />
    </method>
    <method name="setPSpecializationInfo">
      <argument name="pSpecializationInfo_" type="const vk::SpecializationInfo *" />
    </method>
    <conversion_function name="operator const VkShaderCreateInfoEXT &amp;" />
    <conversion_function name="operator VkShaderCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const ShaderCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ShaderCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="flags" />
    <field name="stage" />
    <field name="nextStage" />
    <field name="codeType" />
    <field name="codeSize" />
    <field name="pCode" />
    <field name="pName" />
    <field name="setLayoutCount" />
    <field name="pSetLayouts" />
    <field name="pushConstantRangeCount" />
    <field name="pPushConstantRanges" />
    <field name="pSpecializationInfo" />
  </struct>
  <struct name="PhysicalDeviceTilePropertiesFeaturesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceTilePropertiesFeaturesQCOM">
      <argument name="tileProperties_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceTilePropertiesFeaturesQCOM">
      <argument name="rhs" type="const PhysicalDeviceTilePropertiesFeaturesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceTilePropertiesFeaturesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceTilePropertiesFeaturesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceTilePropertiesFeaturesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceTilePropertiesFeaturesQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTileProperties">
      <argument name="tileProperties_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceTilePropertiesFeaturesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceTilePropertiesFeaturesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceTilePropertiesFeaturesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceTilePropertiesFeaturesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="tileProperties" />
  </struct>
  <struct name="TilePropertiesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="TilePropertiesQCOM">
      <argument name="tileSize_" type="vk::Extent3D" default_raw="{}" />
      <argument name="apronSize_" type="vk::Extent2D" default_raw="{}" />
      <argument name="origin_" type="vk::Offset2D" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="TilePropertiesQCOM">
      <argument name="rhs" type="const TilePropertiesQCOM &amp;" />
    </constructor>
    <constructor name="TilePropertiesQCOM">
      <argument name="rhs" type="const VkTilePropertiesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const TilePropertiesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkTilePropertiesQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTileSize">
      <argument name="tileSize_" type="const vk::Extent3D &amp;" />
    </method>
    <method name="setApronSize">
      <argument name="apronSize_" type="const vk::Extent2D &amp;" />
    </method>
    <method name="setOrigin">
      <argument name="origin_" type="const vk::Offset2D &amp;" />
    </method>
    <conversion_function name="operator const VkTilePropertiesQCOM &amp;" />
    <conversion_function name="operator VkTilePropertiesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const TilePropertiesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const TilePropertiesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="tileSize" />
    <field name="apronSize" />
    <field name="origin" />
  </struct>
  <struct name="AmigoProfilingSubmitInfoSEC" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="AmigoProfilingSubmitInfoSEC">
      <argument name="firstDrawTimestamp_" type="uint64_t" default_raw="{}" />
      <argument name="swapBufferTimestamp_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="AmigoProfilingSubmitInfoSEC">
      <argument name="rhs" type="const AmigoProfilingSubmitInfoSEC &amp;" />
    </constructor>
    <constructor name="AmigoProfilingSubmitInfoSEC">
      <argument name="rhs" type="const VkAmigoProfilingSubmitInfoSEC &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const AmigoProfilingSubmitInfoSEC &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkAmigoProfilingSubmitInfoSEC &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setFirstDrawTimestamp">
      <argument name="firstDrawTimestamp_" type="uint64_t" />
    </method>
    <method name="setSwapBufferTimestamp">
      <argument name="swapBufferTimestamp_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkAmigoProfilingSubmitInfoSEC &amp;" />
    <conversion_function name="operator VkAmigoProfilingSubmitInfoSEC &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const AmigoProfilingSubmitInfoSEC &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AmigoProfilingSubmitInfoSEC &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="firstDrawTimestamp" />
    <field name="swapBufferTimestamp" />
  </struct>
  <struct name="PhysicalDeviceAmigoProfilingFeaturesSEC" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceAmigoProfilingFeaturesSEC">
      <argument name="amigoProfiling_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceAmigoProfilingFeaturesSEC">
      <argument name="rhs" type="const PhysicalDeviceAmigoProfilingFeaturesSEC &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceAmigoProfilingFeaturesSEC">
      <argument name="rhs" type="const VkPhysicalDeviceAmigoProfilingFeaturesSEC &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceAmigoProfilingFeaturesSEC &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceAmigoProfilingFeaturesSEC &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setAmigoProfiling">
      <argument name="amigoProfiling_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceAmigoProfilingFeaturesSEC &amp;" />
    <conversion_function name="operator VkPhysicalDeviceAmigoProfilingFeaturesSEC &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceAmigoProfilingFeaturesSEC &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceAmigoProfilingFeaturesSEC &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="amigoProfiling" />
  </struct>
  <struct name="PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM">
      <argument name="multiviewPerViewViewports_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMultiviewPerViewViewports">
      <argument name="multiviewPerViewViewports_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="multiviewPerViewViewports" />
  </struct>
  <struct name="PhysicalDeviceRayTracingInvocationReorderFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRayTracingInvocationReorderFeaturesNV">
      <argument name="rayTracingInvocationReorder_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingInvocationReorderFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceRayTracingInvocationReorderFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingInvocationReorderFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingInvocationReorderFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setRayTracingInvocationReorder">
      <argument name="rayTracingInvocationReorder_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRayTracingInvocationReorderFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingInvocationReorderFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="rayTracingInvocationReorder" />
  </struct>
  <struct name="PhysicalDeviceRayTracingInvocationReorderPropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceRayTracingInvocationReorderPropertiesNV">
      <argument name="rayTracingInvocationReorderReorderingHint_" type="vk::RayTracingInvocationReorderModeNV" default_raw="VULKAN_HPP_NAMESPACE::RayTracingInvocationReorderModeNV::eNone" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingInvocationReorderPropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceRayTracingInvocationReorderPropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceRayTracingInvocationReorderPropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingInvocationReorderPropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceRayTracingInvocationReorderPropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceRayTracingInvocationReorderPropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="rayTracingInvocationReorderReorderingHint" />
  </struct>
  <struct name="PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV">
      <argument name="extendedSparseAddressSpace_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setExtendedSparseAddressSpace">
      <argument name="extendedSparseAddressSpace_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="extendedSparseAddressSpace" />
  </struct>
  <struct name="PhysicalDeviceExtendedSparseAddressSpacePropertiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceExtendedSparseAddressSpacePropertiesNV">
      <argument name="extendedSparseAddressSpaceSize_" type="vk::DeviceSize" default_raw="{}" />
      <argument name="extendedSparseImageUsageFlags_" type="vk::ImageUsageFlags" default_raw="{}" />
      <argument name="extendedSparseBufferUsageFlags_" type="vk::BufferUsageFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedSparseAddressSpacePropertiesNV">
      <argument name="rhs" type="const PhysicalDeviceExtendedSparseAddressSpacePropertiesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceExtendedSparseAddressSpacePropertiesNV">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceExtendedSparseAddressSpacePropertiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceExtendedSparseAddressSpacePropertiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceExtendedSparseAddressSpacePropertiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="extendedSparseAddressSpaceSize" />
    <field name="extendedSparseImageUsageFlags" />
    <field name="extendedSparseBufferUsageFlags" />
  </struct>
  <struct name="MutableDescriptorTypeCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MutableDescriptorTypeCreateInfoEXT">
      <argument name="mutableDescriptorTypeListCount_" type="uint32_t" default_raw="{}" />
      <argument name="pMutableDescriptorTypeLists_" type="const vk::MutableDescriptorTypeListEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MutableDescriptorTypeCreateInfoEXT">
      <argument name="rhs" type="const MutableDescriptorTypeCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="MutableDescriptorTypeCreateInfoEXT">
      <argument name="rhs" type="const VkMutableDescriptorTypeCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="MutableDescriptorTypeCreateInfoEXT">
      <argument name="mutableDescriptorTypeLists_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MutableDescriptorTypeListEXT&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MutableDescriptorTypeCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMutableDescriptorTypeCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setMutableDescriptorTypeListCount">
      <argument name="mutableDescriptorTypeListCount_" type="uint32_t" />
    </method>
    <method name="setPMutableDescriptorTypeLists">
      <argument name="pMutableDescriptorTypeLists_" type="const vk::MutableDescriptorTypeListEXT *" />
    </method>
    <method name="setMutableDescriptorTypeLists">
      <argument name="mutableDescriptorTypeLists_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::MutableDescriptorTypeListEXT&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkMutableDescriptorTypeCreateInfoEXT &amp;" />
    <conversion_function name="operator VkMutableDescriptorTypeCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MutableDescriptorTypeCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MutableDescriptorTypeCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="mutableDescriptorTypeListCount" />
    <field name="pMutableDescriptorTypeLists" />
  </struct>
  <type_alias name="MutableDescriptorTypeCreateInfoVALVE" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="MutableDescriptorTypeCreateInfoEXT" />
  <struct name="MutableDescriptorTypeListEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MutableDescriptorTypeListEXT">
      <argument name="descriptorTypeCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDescriptorTypes_" type="const vk::DescriptorType *" default_raw="{}" />
    </constructor>
    <constructor name="MutableDescriptorTypeListEXT">
      <argument name="rhs" type="const MutableDescriptorTypeListEXT &amp;" />
    </constructor>
    <constructor name="MutableDescriptorTypeListEXT">
      <argument name="rhs" type="const VkMutableDescriptorTypeListEXT &amp;" />
    </constructor>
    <constructor name="MutableDescriptorTypeListEXT">
      <argument name="descriptorTypes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorType&gt; &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MutableDescriptorTypeListEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMutableDescriptorTypeListEXT &amp;" />
    </method>
    <method name="setDescriptorTypeCount">
      <argument name="descriptorTypeCount_" type="uint32_t" />
    </method>
    <method name="setPDescriptorTypes">
      <argument name="pDescriptorTypes_" type="const vk::DescriptorType *" />
    </method>
    <method name="setDescriptorTypes">
      <argument name="descriptorTypes_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorType&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkMutableDescriptorTypeListEXT &amp;" />
    <conversion_function name="operator VkMutableDescriptorTypeListEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MutableDescriptorTypeListEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MutableDescriptorTypeListEXT &amp;" />
    </method>
    <field name="descriptorTypeCount" />
    <field name="pDescriptorTypes" />
  </struct>
  <type_alias name="MutableDescriptorTypeListVALVE" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="MutableDescriptorTypeListEXT" />
  <struct name="PhysicalDeviceMutableDescriptorTypeFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMutableDescriptorTypeFeaturesEXT">
      <argument name="mutableDescriptorType_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMutableDescriptorTypeFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceMutableDescriptorTypeFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMutableDescriptorTypeFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMutableDescriptorTypeFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMutableDescriptorType">
      <argument name="mutableDescriptorType_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMutableDescriptorTypeFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMutableDescriptorTypeFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="mutableDescriptorType" />
  </struct>
  <type_alias name="PhysicalDeviceMutableDescriptorTypeFeaturesVALVE" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceMutableDescriptorTypeFeaturesEXT" />
  <struct name="LayerSettingEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="LayerSettingEXT">
      <argument name="pLayerName_" type="const char *" default_raw="{}" />
      <argument name="pSettingName_" type="const char *" default_raw="{}" />
      <argument name="type_" type="vk::LayerSettingTypeEXT" default_raw="VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT::eBool32" />
      <argument name="valueCount_" type="uint32_t" default_raw="{}" />
      <argument name="pValues_" type="const void *" default_raw="{}" />
    </constructor>
    <constructor name="LayerSettingEXT">
      <argument name="rhs" type="const LayerSettingEXT &amp;" />
    </constructor>
    <constructor name="LayerSettingEXT">
      <argument name="rhs" type="const VkLayerSettingEXT &amp;" />
    </constructor>
    <method name="LayerSettingEXT" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const LayerSettingEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkLayerSettingEXT &amp;" />
    </method>
    <method name="setPLayerName">
      <argument name="pLayerName_" type="const char *" />
    </method>
    <method name="setPSettingName">
      <argument name="pSettingName_" type="const char *" />
    </method>
    <method name="setType">
      <argument name="type_" type="vk::LayerSettingTypeEXT" />
    </method>
    <method name="setValueCount">
      <argument name="valueCount_" type="uint32_t" />
    </method>
    <method name="setPValues">
      <argument name="pValues_" type="const void *" />
    </method>
    <method name="setValues" template_raw="template &lt;typename T&gt;" />
    <conversion_function name="operator const VkLayerSettingEXT &amp;" />
    <conversion_function name="operator VkLayerSettingEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const LayerSettingEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const LayerSettingEXT &amp;" />
    </method>
    <field name="pLayerName" />
    <field name="pSettingName" />
    <field name="type" />
    <field name="valueCount" />
    <field name="pValues" />
  </struct>
  <struct name="LayerSettingsCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="LayerSettingsCreateInfoEXT">
      <argument name="settingCount_" type="uint32_t" default_raw="{}" />
      <argument name="pSettings_" type="const vk::LayerSettingEXT *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="LayerSettingsCreateInfoEXT">
      <argument name="rhs" type="const LayerSettingsCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="LayerSettingsCreateInfoEXT">
      <argument name="rhs" type="const VkLayerSettingsCreateInfoEXT &amp;" />
    </constructor>
    <constructor name="LayerSettingsCreateInfoEXT">
      <argument name="settings_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::LayerSettingEXT&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const LayerSettingsCreateInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkLayerSettingsCreateInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSettingCount">
      <argument name="settingCount_" type="uint32_t" />
    </method>
    <method name="setPSettings">
      <argument name="pSettings_" type="const vk::LayerSettingEXT *" />
    </method>
    <method name="setSettings">
      <argument name="settings_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::LayerSettingEXT&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkLayerSettingsCreateInfoEXT &amp;" />
    <conversion_function name="operator VkLayerSettingsCreateInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const LayerSettingsCreateInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const LayerSettingsCreateInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="settingCount" />
    <field name="pSettings" />
  </struct>
  <struct name="PhysicalDeviceShaderCoreBuiltinsFeaturesARM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderCoreBuiltinsFeaturesARM">
      <argument name="shaderCoreBuiltins_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderCoreBuiltinsFeaturesARM">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreBuiltinsFeaturesARM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderCoreBuiltinsFeaturesARM">
      <argument name="rhs" type="const VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreBuiltinsFeaturesARM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setShaderCoreBuiltins">
      <argument name="shaderCoreBuiltins_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreBuiltinsFeaturesARM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreBuiltinsFeaturesARM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderCoreBuiltins" />
  </struct>
  <struct name="PhysicalDeviceShaderCoreBuiltinsPropertiesARM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceShaderCoreBuiltinsPropertiesARM">
      <argument name="shaderCoreMask_" type="uint64_t" default_raw="{}" />
      <argument name="shaderCoreCount_" type="uint32_t" default_raw="{}" />
      <argument name="shaderWarpsPerCore_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceShaderCoreBuiltinsPropertiesARM">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreBuiltinsPropertiesARM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceShaderCoreBuiltinsPropertiesARM">
      <argument name="rhs" type="const VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreBuiltinsPropertiesARM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreBuiltinsPropertiesARM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceShaderCoreBuiltinsPropertiesARM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="shaderCoreMask" />
    <field name="shaderCoreCount" />
    <field name="shaderWarpsPerCore" />
  </struct>
  <struct name="PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT">
      <argument name="pipelineLibraryGroupHandles_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT">
      <argument name="rhs" type="const PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPipelineLibraryGroupHandles">
      <argument name="pipelineLibraryGroupHandles_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pipelineLibraryGroupHandles" />
  </struct>
  <struct name="PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT">
      <argument name="dynamicRenderingUnusedAttachments_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDynamicRenderingUnusedAttachments">
      <argument name="dynamicRenderingUnusedAttachments_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="dynamicRenderingUnusedAttachments" />
  </struct>
  <struct name="GetLatencyMarkerInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="GetLatencyMarkerInfoNV">
      <argument name="timingCount_" type="uint32_t" default_raw="{}" />
      <argument name="pTimings_" type="vk::LatencyTimingsFrameReportNV *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="GetLatencyMarkerInfoNV">
      <argument name="rhs" type="const GetLatencyMarkerInfoNV &amp;" />
    </constructor>
    <constructor name="GetLatencyMarkerInfoNV">
      <argument name="rhs" type="const VkGetLatencyMarkerInfoNV &amp;" />
    </constructor>
    <constructor name="GetLatencyMarkerInfoNV">
      <argument name="timings_" type="const vk::ArrayProxyNoTemporaries&lt;vk::LatencyTimingsFrameReportNV&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const GetLatencyMarkerInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkGetLatencyMarkerInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setTimingCount">
      <argument name="timingCount_" type="uint32_t" />
    </method>
    <method name="setPTimings">
      <argument name="pTimings_" type="vk::LatencyTimingsFrameReportNV *" />
    </method>
    <method name="setTimings">
      <argument name="timings_" type="const vk::ArrayProxyNoTemporaries&lt;vk::LatencyTimingsFrameReportNV&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkGetLatencyMarkerInfoNV &amp;" />
    <conversion_function name="operator VkGetLatencyMarkerInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const GetLatencyMarkerInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const GetLatencyMarkerInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="timingCount" />
    <field name="pTimings" />
  </struct>
  <struct name="LatencySleepInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="LatencySleepInfoNV">
      <argument name="signalSemaphore_" type="vk::Semaphore" default_raw="{}" />
      <argument name="value_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="LatencySleepInfoNV">
      <argument name="rhs" type="const LatencySleepInfoNV &amp;" />
    </constructor>
    <constructor name="LatencySleepInfoNV">
      <argument name="rhs" type="const VkLatencySleepInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const LatencySleepInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkLatencySleepInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setSignalSemaphore">
      <argument name="signalSemaphore_" type="vk::Semaphore" />
    </method>
    <method name="setValue">
      <argument name="value_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkLatencySleepInfoNV &amp;" />
    <conversion_function name="operator VkLatencySleepInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const LatencySleepInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const LatencySleepInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="signalSemaphore" />
    <field name="value" />
  </struct>
  <struct name="LatencySleepModeInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="LatencySleepModeInfoNV">
      <argument name="lowLatencyMode_" type="vk::Bool32" default_raw="{}" />
      <argument name="lowLatencyBoost_" type="vk::Bool32" default_raw="{}" />
      <argument name="minimumIntervalUs_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="LatencySleepModeInfoNV">
      <argument name="rhs" type="const LatencySleepModeInfoNV &amp;" />
    </constructor>
    <constructor name="LatencySleepModeInfoNV">
      <argument name="rhs" type="const VkLatencySleepModeInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const LatencySleepModeInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkLatencySleepModeInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setLowLatencyMode">
      <argument name="lowLatencyMode_" type="vk::Bool32" />
    </method>
    <method name="setLowLatencyBoost">
      <argument name="lowLatencyBoost_" type="vk::Bool32" />
    </method>
    <method name="setMinimumIntervalUs">
      <argument name="minimumIntervalUs_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkLatencySleepModeInfoNV &amp;" />
    <conversion_function name="operator VkLatencySleepModeInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const LatencySleepModeInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const LatencySleepModeInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="lowLatencyMode" />
    <field name="lowLatencyBoost" />
    <field name="minimumIntervalUs" />
  </struct>
  <struct name="LatencySubmissionPresentIdNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="LatencySubmissionPresentIdNV">
      <argument name="presentID_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="LatencySubmissionPresentIdNV">
      <argument name="rhs" type="const LatencySubmissionPresentIdNV &amp;" />
    </constructor>
    <constructor name="LatencySubmissionPresentIdNV">
      <argument name="rhs" type="const VkLatencySubmissionPresentIdNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const LatencySubmissionPresentIdNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkLatencySubmissionPresentIdNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPresentID">
      <argument name="presentID_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkLatencySubmissionPresentIdNV &amp;" />
    <conversion_function name="operator VkLatencySubmissionPresentIdNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const LatencySubmissionPresentIdNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const LatencySubmissionPresentIdNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentID" />
  </struct>
  <struct name="LatencySurfaceCapabilitiesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="LatencySurfaceCapabilitiesNV">
      <argument name="presentModeCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPresentModes_" type="vk::PresentModeKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="LatencySurfaceCapabilitiesNV">
      <argument name="rhs" type="const LatencySurfaceCapabilitiesNV &amp;" />
    </constructor>
    <constructor name="LatencySurfaceCapabilitiesNV">
      <argument name="rhs" type="const VkLatencySurfaceCapabilitiesNV &amp;" />
    </constructor>
    <constructor name="LatencySurfaceCapabilitiesNV">
      <argument name="presentModes_" type="const vk::ArrayProxyNoTemporaries&lt;vk::PresentModeKHR&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const LatencySurfaceCapabilitiesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkLatencySurfaceCapabilitiesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPresentModeCount">
      <argument name="presentModeCount_" type="uint32_t" />
    </method>
    <method name="setPPresentModes">
      <argument name="pPresentModes_" type="vk::PresentModeKHR *" />
    </method>
    <method name="setPresentModes">
      <argument name="presentModes_" type="const vk::ArrayProxyNoTemporaries&lt;vk::PresentModeKHR&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkLatencySurfaceCapabilitiesNV &amp;" />
    <conversion_function name="operator VkLatencySurfaceCapabilitiesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const LatencySurfaceCapabilitiesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const LatencySurfaceCapabilitiesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentModeCount" />
    <field name="pPresentModes" />
  </struct>
  <struct name="LatencyTimingsFrameReportNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="LatencyTimingsFrameReportNV">
      <argument name="presentID_" type="uint64_t" default_raw="{}" />
      <argument name="inputSampleTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="simStartTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="simEndTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="renderSubmitStartTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="renderSubmitEndTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="presentStartTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="presentEndTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="driverStartTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="driverEndTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="osRenderQueueStartTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="osRenderQueueEndTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="gpuRenderStartTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="gpuRenderEndTimeUs_" type="uint64_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="LatencyTimingsFrameReportNV">
      <argument name="rhs" type="const LatencyTimingsFrameReportNV &amp;" />
    </constructor>
    <constructor name="LatencyTimingsFrameReportNV">
      <argument name="rhs" type="const VkLatencyTimingsFrameReportNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const LatencyTimingsFrameReportNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkLatencyTimingsFrameReportNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPresentID">
      <argument name="presentID_" type="uint64_t" />
    </method>
    <method name="setInputSampleTimeUs">
      <argument name="inputSampleTimeUs_" type="uint64_t" />
    </method>
    <method name="setSimStartTimeUs">
      <argument name="simStartTimeUs_" type="uint64_t" />
    </method>
    <method name="setSimEndTimeUs">
      <argument name="simEndTimeUs_" type="uint64_t" />
    </method>
    <method name="setRenderSubmitStartTimeUs">
      <argument name="renderSubmitStartTimeUs_" type="uint64_t" />
    </method>
    <method name="setRenderSubmitEndTimeUs">
      <argument name="renderSubmitEndTimeUs_" type="uint64_t" />
    </method>
    <method name="setPresentStartTimeUs">
      <argument name="presentStartTimeUs_" type="uint64_t" />
    </method>
    <method name="setPresentEndTimeUs">
      <argument name="presentEndTimeUs_" type="uint64_t" />
    </method>
    <method name="setDriverStartTimeUs">
      <argument name="driverStartTimeUs_" type="uint64_t" />
    </method>
    <method name="setDriverEndTimeUs">
      <argument name="driverEndTimeUs_" type="uint64_t" />
    </method>
    <method name="setOsRenderQueueStartTimeUs">
      <argument name="osRenderQueueStartTimeUs_" type="uint64_t" />
    </method>
    <method name="setOsRenderQueueEndTimeUs">
      <argument name="osRenderQueueEndTimeUs_" type="uint64_t" />
    </method>
    <method name="setGpuRenderStartTimeUs">
      <argument name="gpuRenderStartTimeUs_" type="uint64_t" />
    </method>
    <method name="setGpuRenderEndTimeUs">
      <argument name="gpuRenderEndTimeUs_" type="uint64_t" />
    </method>
    <conversion_function name="operator const VkLatencyTimingsFrameReportNV &amp;" />
    <conversion_function name="operator VkLatencyTimingsFrameReportNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const LatencyTimingsFrameReportNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const LatencyTimingsFrameReportNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentID" />
    <field name="inputSampleTimeUs" />
    <field name="simStartTimeUs" />
    <field name="simEndTimeUs" />
    <field name="renderSubmitStartTimeUs" />
    <field name="renderSubmitEndTimeUs" />
    <field name="presentStartTimeUs" />
    <field name="presentEndTimeUs" />
    <field name="driverStartTimeUs" />
    <field name="driverEndTimeUs" />
    <field name="osRenderQueueStartTimeUs" />
    <field name="osRenderQueueEndTimeUs" />
    <field name="gpuRenderStartTimeUs" />
    <field name="gpuRenderEndTimeUs" />
  </struct>
  <struct name="OutOfBandQueueTypeInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="OutOfBandQueueTypeInfoNV">
      <argument name="queueType_" type="vk::OutOfBandQueueTypeNV" default_raw="VULKAN_HPP_NAMESPACE::OutOfBandQueueTypeNV::eRender" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="OutOfBandQueueTypeInfoNV">
      <argument name="rhs" type="const OutOfBandQueueTypeInfoNV &amp;" />
    </constructor>
    <constructor name="OutOfBandQueueTypeInfoNV">
      <argument name="rhs" type="const VkOutOfBandQueueTypeInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const OutOfBandQueueTypeInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkOutOfBandQueueTypeInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setQueueType">
      <argument name="queueType_" type="vk::OutOfBandQueueTypeNV" />
    </method>
    <conversion_function name="operator const VkOutOfBandQueueTypeInfoNV &amp;" />
    <conversion_function name="operator VkOutOfBandQueueTypeInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const OutOfBandQueueTypeInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const OutOfBandQueueTypeInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="queueType" />
  </struct>
  <struct name="SetLatencyMarkerInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SetLatencyMarkerInfoNV">
      <argument name="presentID_" type="uint64_t" default_raw="{}" />
      <argument name="marker_" type="vk::LatencyMarkerNV" default_raw="VULKAN_HPP_NAMESPACE::LatencyMarkerNV::eSimulationStart" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SetLatencyMarkerInfoNV">
      <argument name="rhs" type="const SetLatencyMarkerInfoNV &amp;" />
    </constructor>
    <constructor name="SetLatencyMarkerInfoNV">
      <argument name="rhs" type="const VkSetLatencyMarkerInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SetLatencyMarkerInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSetLatencyMarkerInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPresentID">
      <argument name="presentID_" type="uint64_t" />
    </method>
    <method name="setMarker">
      <argument name="marker_" type="vk::LatencyMarkerNV" />
    </method>
    <conversion_function name="operator const VkSetLatencyMarkerInfoNV &amp;" />
    <conversion_function name="operator VkSetLatencyMarkerInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SetLatencyMarkerInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SetLatencyMarkerInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="presentID" />
    <field name="marker" />
  </struct>
  <struct name="SwapchainLatencyCreateInfoNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SwapchainLatencyCreateInfoNV">
      <argument name="latencyModeEnable_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SwapchainLatencyCreateInfoNV">
      <argument name="rhs" type="const SwapchainLatencyCreateInfoNV &amp;" />
    </constructor>
    <constructor name="SwapchainLatencyCreateInfoNV">
      <argument name="rhs" type="const VkSwapchainLatencyCreateInfoNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SwapchainLatencyCreateInfoNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSwapchainLatencyCreateInfoNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setLatencyModeEnable">
      <argument name="latencyModeEnable_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkSwapchainLatencyCreateInfoNV &amp;" />
    <conversion_function name="operator VkSwapchainLatencyCreateInfoNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SwapchainLatencyCreateInfoNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SwapchainLatencyCreateInfoNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="latencyModeEnable" />
  </struct>
  <struct name="CooperativeMatrixPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CooperativeMatrixPropertiesKHR">
      <argument name="MSize_" type="uint32_t" default_raw="{}" />
      <argument name="NSize_" type="uint32_t" default_raw="{}" />
      <argument name="KSize_" type="uint32_t" default_raw="{}" />
      <argument name="AType_" type="vk::ComponentTypeKHR" default_raw="VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eFloat16" />
      <argument name="BType_" type="vk::ComponentTypeKHR" default_raw="VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eFloat16" />
      <argument name="CType_" type="vk::ComponentTypeKHR" default_raw="VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eFloat16" />
      <argument name="ResultType_" type="vk::ComponentTypeKHR" default_raw="VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eFloat16" />
      <argument name="saturatingAccumulation_" type="vk::Bool32" default_raw="{}" />
      <argument name="scope_" type="vk::ScopeKHR" default_raw="VULKAN_HPP_NAMESPACE::ScopeKHR::eDevice" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CooperativeMatrixPropertiesKHR">
      <argument name="rhs" type="const CooperativeMatrixPropertiesKHR &amp;" />
    </constructor>
    <constructor name="CooperativeMatrixPropertiesKHR">
      <argument name="rhs" type="const VkCooperativeMatrixPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CooperativeMatrixPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCooperativeMatrixPropertiesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMSize">
      <argument name="MSize_" type="uint32_t" />
    </method>
    <method name="setNSize">
      <argument name="NSize_" type="uint32_t" />
    </method>
    <method name="setKSize">
      <argument name="KSize_" type="uint32_t" />
    </method>
    <method name="setAType">
      <argument name="AType_" type="vk::ComponentTypeKHR" />
    </method>
    <method name="setBType">
      <argument name="BType_" type="vk::ComponentTypeKHR" />
    </method>
    <method name="setCType">
      <argument name="CType_" type="vk::ComponentTypeKHR" />
    </method>
    <method name="setResultType">
      <argument name="ResultType_" type="vk::ComponentTypeKHR" />
    </method>
    <method name="setSaturatingAccumulation">
      <argument name="saturatingAccumulation_" type="vk::Bool32" />
    </method>
    <method name="setScope">
      <argument name="scope_" type="vk::ScopeKHR" />
    </method>
    <conversion_function name="operator const VkCooperativeMatrixPropertiesKHR &amp;" />
    <conversion_function name="operator VkCooperativeMatrixPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CooperativeMatrixPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CooperativeMatrixPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="MSize" />
    <field name="NSize" />
    <field name="KSize" />
    <field name="AType" />
    <field name="BType" />
    <field name="CType" />
    <field name="ResultType" />
    <field name="saturatingAccumulation" />
    <field name="scope" />
  </struct>
  <struct name="PhysicalDeviceCooperativeMatrixFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCooperativeMatrixFeaturesKHR">
      <argument name="cooperativeMatrix_" type="vk::Bool32" default_raw="{}" />
      <argument name="cooperativeMatrixRobustBufferAccess_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCooperativeMatrixFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCooperativeMatrixFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceCooperativeMatrixFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCooperativeMatrixFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setCooperativeMatrix">
      <argument name="cooperativeMatrix_" type="vk::Bool32" />
    </method>
    <method name="setCooperativeMatrixRobustBufferAccess">
      <argument name="cooperativeMatrixRobustBufferAccess_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCooperativeMatrixFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCooperativeMatrixFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="cooperativeMatrix" />
    <field name="cooperativeMatrixRobustBufferAccess" />
  </struct>
  <struct name="PhysicalDeviceCooperativeMatrixPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCooperativeMatrixPropertiesKHR">
      <argument name="cooperativeMatrixSupportedStages_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCooperativeMatrixPropertiesKHR">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixPropertiesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCooperativeMatrixPropertiesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceCooperativeMatrixPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCooperativeMatrixPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCooperativeMatrixPropertiesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCooperativeMatrixPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCooperativeMatrixPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="cooperativeMatrixSupportedStages" />
  </struct>
  <struct name="MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM">
      <argument name="perViewRenderAreaCount_" type="uint32_t" default_raw="{}" />
      <argument name="pPerViewRenderAreas_" type="const vk::Rect2D *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM">
      <argument name="rhs" type="const MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &amp;" />
    </constructor>
    <constructor name="MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM">
      <argument name="rhs" type="const VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &amp;" />
    </constructor>
    <constructor name="MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM">
      <argument name="perViewRenderAreas_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPerViewRenderAreaCount">
      <argument name="perViewRenderAreaCount_" type="uint32_t" />
    </method>
    <method name="setPPerViewRenderAreas">
      <argument name="pPerViewRenderAreas_" type="const vk::Rect2D *" />
    </method>
    <method name="setPerViewRenderAreas">
      <argument name="perViewRenderAreas_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &amp;" />
    <conversion_function name="operator VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="perViewRenderAreaCount" />
    <field name="pPerViewRenderAreas" />
  </struct>
  <struct name="PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM">
      <argument name="multiviewPerViewRenderAreas_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMultiviewPerViewRenderAreas">
      <argument name="multiviewPerViewRenderAreas_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="multiviewPerViewRenderAreas" />
  </struct>
  <struct name="PhysicalDeviceVideoMaintenance1FeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVideoMaintenance1FeaturesKHR">
      <argument name="videoMaintenance1_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVideoMaintenance1FeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceVideoMaintenance1FeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVideoMaintenance1FeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceVideoMaintenance1FeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVideoMaintenance1FeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVideoMaintenance1FeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setVideoMaintenance1">
      <argument name="videoMaintenance1_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVideoMaintenance1FeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVideoMaintenance1FeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVideoMaintenance1FeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVideoMaintenance1FeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="videoMaintenance1" />
  </struct>
  <struct name="VideoInlineQueryInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VideoInlineQueryInfoKHR">
      <argument name="queryPool_" type="vk::QueryPool" default_raw="{}" />
      <argument name="firstQuery_" type="uint32_t" default_raw="{}" />
      <argument name="queryCount_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="VideoInlineQueryInfoKHR">
      <argument name="rhs" type="const VideoInlineQueryInfoKHR &amp;" />
    </constructor>
    <constructor name="VideoInlineQueryInfoKHR">
      <argument name="rhs" type="const VkVideoInlineQueryInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VideoInlineQueryInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVideoInlineQueryInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setQueryPool">
      <argument name="queryPool_" type="vk::QueryPool" />
    </method>
    <method name="setFirstQuery">
      <argument name="firstQuery_" type="uint32_t" />
    </method>
    <method name="setQueryCount">
      <argument name="queryCount_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVideoInlineQueryInfoKHR &amp;" />
    <conversion_function name="operator VkVideoInlineQueryInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VideoInlineQueryInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoInlineQueryInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="queryPool" />
    <field name="firstQuery" />
    <field name="queryCount" />
  </struct>
  <struct name="PhysicalDevicePerStageDescriptorSetFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDevicePerStageDescriptorSetFeaturesNV">
      <argument name="perStageDescriptorSet_" type="vk::Bool32" default_raw="{}" />
      <argument name="dynamicPipelineLayout_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDevicePerStageDescriptorSetFeaturesNV">
      <argument name="rhs" type="const PhysicalDevicePerStageDescriptorSetFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDevicePerStageDescriptorSetFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDevicePerStageDescriptorSetFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevicePerStageDescriptorSetFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDevicePerStageDescriptorSetFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setPerStageDescriptorSet">
      <argument name="perStageDescriptorSet_" type="vk::Bool32" />
    </method>
    <method name="setDynamicPipelineLayout">
      <argument name="dynamicPipelineLayout_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDevicePerStageDescriptorSetFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDevicePerStageDescriptorSetFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevicePerStageDescriptorSetFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevicePerStageDescriptorSetFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="perStageDescriptorSet" />
    <field name="dynamicPipelineLayout" />
  </struct>
  <struct name="PhysicalDeviceImageProcessing2FeaturesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageProcessing2FeaturesQCOM">
      <argument name="textureBlockMatch2_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageProcessing2FeaturesQCOM">
      <argument name="rhs" type="const PhysicalDeviceImageProcessing2FeaturesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageProcessing2FeaturesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceImageProcessing2FeaturesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageProcessing2FeaturesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageProcessing2FeaturesQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setTextureBlockMatch2">
      <argument name="textureBlockMatch2_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageProcessing2FeaturesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageProcessing2FeaturesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageProcessing2FeaturesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageProcessing2FeaturesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="textureBlockMatch2" />
  </struct>
  <struct name="PhysicalDeviceImageProcessing2PropertiesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceImageProcessing2PropertiesQCOM">
      <argument name="maxBlockMatchWindow_" type="vk::Extent2D" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceImageProcessing2PropertiesQCOM">
      <argument name="rhs" type="const PhysicalDeviceImageProcessing2PropertiesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceImageProcessing2PropertiesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceImageProcessing2PropertiesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceImageProcessing2PropertiesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceImageProcessing2PropertiesQCOM &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceImageProcessing2PropertiesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceImageProcessing2PropertiesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceImageProcessing2PropertiesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceImageProcessing2PropertiesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxBlockMatchWindow" />
  </struct>
  <struct name="SamplerBlockMatchWindowCreateInfoQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SamplerBlockMatchWindowCreateInfoQCOM">
      <argument name="windowExtent_" type="vk::Extent2D" default_raw="{}" />
      <argument name="windowCompareMode_" type="vk::BlockMatchWindowCompareModeQCOM" default_raw="VULKAN_HPP_NAMESPACE::BlockMatchWindowCompareModeQCOM::eMin" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SamplerBlockMatchWindowCreateInfoQCOM">
      <argument name="rhs" type="const SamplerBlockMatchWindowCreateInfoQCOM &amp;" />
    </constructor>
    <constructor name="SamplerBlockMatchWindowCreateInfoQCOM">
      <argument name="rhs" type="const VkSamplerBlockMatchWindowCreateInfoQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SamplerBlockMatchWindowCreateInfoQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSamplerBlockMatchWindowCreateInfoQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setWindowExtent">
      <argument name="windowExtent_" type="const vk::Extent2D &amp;" />
    </method>
    <method name="setWindowCompareMode">
      <argument name="windowCompareMode_" type="vk::BlockMatchWindowCompareModeQCOM" />
    </method>
    <conversion_function name="operator const VkSamplerBlockMatchWindowCreateInfoQCOM &amp;" />
    <conversion_function name="operator VkSamplerBlockMatchWindowCreateInfoQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SamplerBlockMatchWindowCreateInfoQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SamplerBlockMatchWindowCreateInfoQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="windowExtent" />
    <field name="windowCompareMode" />
  </struct>
  <struct name="BlitImageCubicWeightsInfoQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BlitImageCubicWeightsInfoQCOM">
      <argument name="cubicWeights_" type="vk::CubicFilterWeightsQCOM" default_raw="VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM::eCatmullRom" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BlitImageCubicWeightsInfoQCOM">
      <argument name="rhs" type="const BlitImageCubicWeightsInfoQCOM &amp;" />
    </constructor>
    <constructor name="BlitImageCubicWeightsInfoQCOM">
      <argument name="rhs" type="const VkBlitImageCubicWeightsInfoQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BlitImageCubicWeightsInfoQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBlitImageCubicWeightsInfoQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setCubicWeights">
      <argument name="cubicWeights_" type="vk::CubicFilterWeightsQCOM" />
    </method>
    <conversion_function name="operator const VkBlitImageCubicWeightsInfoQCOM &amp;" />
    <conversion_function name="operator VkBlitImageCubicWeightsInfoQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BlitImageCubicWeightsInfoQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BlitImageCubicWeightsInfoQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="cubicWeights" />
  </struct>
  <struct name="PhysicalDeviceCubicWeightsFeaturesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCubicWeightsFeaturesQCOM">
      <argument name="selectableCubicWeights_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCubicWeightsFeaturesQCOM">
      <argument name="rhs" type="const PhysicalDeviceCubicWeightsFeaturesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCubicWeightsFeaturesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceCubicWeightsFeaturesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCubicWeightsFeaturesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCubicWeightsFeaturesQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setSelectableCubicWeights">
      <argument name="selectableCubicWeights_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCubicWeightsFeaturesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCubicWeightsFeaturesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCubicWeightsFeaturesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCubicWeightsFeaturesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="selectableCubicWeights" />
  </struct>
  <struct name="SamplerCubicWeightsCreateInfoQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SamplerCubicWeightsCreateInfoQCOM">
      <argument name="cubicWeights_" type="vk::CubicFilterWeightsQCOM" default_raw="VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM::eCatmullRom" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SamplerCubicWeightsCreateInfoQCOM">
      <argument name="rhs" type="const SamplerCubicWeightsCreateInfoQCOM &amp;" />
    </constructor>
    <constructor name="SamplerCubicWeightsCreateInfoQCOM">
      <argument name="rhs" type="const VkSamplerCubicWeightsCreateInfoQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SamplerCubicWeightsCreateInfoQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSamplerCubicWeightsCreateInfoQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setCubicWeights">
      <argument name="cubicWeights_" type="vk::CubicFilterWeightsQCOM" />
    </method>
    <conversion_function name="operator const VkSamplerCubicWeightsCreateInfoQCOM &amp;" />
    <conversion_function name="operator VkSamplerCubicWeightsCreateInfoQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SamplerCubicWeightsCreateInfoQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SamplerCubicWeightsCreateInfoQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="cubicWeights" />
  </struct>
  <struct name="PhysicalDeviceYcbcrDegammaFeaturesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceYcbcrDegammaFeaturesQCOM">
      <argument name="ycbcrDegamma_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceYcbcrDegammaFeaturesQCOM">
      <argument name="rhs" type="const PhysicalDeviceYcbcrDegammaFeaturesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceYcbcrDegammaFeaturesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceYcbcrDegammaFeaturesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceYcbcrDegammaFeaturesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceYcbcrDegammaFeaturesQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setYcbcrDegamma">
      <argument name="ycbcrDegamma_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceYcbcrDegammaFeaturesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceYcbcrDegammaFeaturesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceYcbcrDegammaFeaturesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceYcbcrDegammaFeaturesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="ycbcrDegamma" />
  </struct>
  <struct name="SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM">
      <argument name="enableYDegamma_" type="vk::Bool32" default_raw="{}" />
      <argument name="enableCbCrDegamma_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM">
      <argument name="rhs" type="const SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM &amp;" />
    </constructor>
    <constructor name="SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM">
      <argument name="rhs" type="const VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setEnableYDegamma">
      <argument name="enableYDegamma_" type="vk::Bool32" />
    </method>
    <method name="setEnableCbCrDegamma">
      <argument name="enableCbCrDegamma_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM &amp;" />
    <conversion_function name="operator VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="enableYDegamma" />
    <field name="enableCbCrDegamma" />
  </struct>
  <struct name="PhysicalDeviceCubicClampFeaturesQCOM" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceCubicClampFeaturesQCOM">
      <argument name="cubicRangeClamp_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceCubicClampFeaturesQCOM">
      <argument name="rhs" type="const PhysicalDeviceCubicClampFeaturesQCOM &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceCubicClampFeaturesQCOM">
      <argument name="rhs" type="const VkPhysicalDeviceCubicClampFeaturesQCOM &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceCubicClampFeaturesQCOM &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceCubicClampFeaturesQCOM &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setCubicRangeClamp">
      <argument name="cubicRangeClamp_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceCubicClampFeaturesQCOM &amp;" />
    <conversion_function name="operator VkPhysicalDeviceCubicClampFeaturesQCOM &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceCubicClampFeaturesQCOM &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceCubicClampFeaturesQCOM &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="cubicRangeClamp" />
  </struct>
  <struct name="PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT">
      <argument name="attachmentFeedbackLoopDynamicState_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT">
      <argument name="rhs" type="const PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT">
      <argument name="rhs" type="const VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setAttachmentFeedbackLoopDynamicState">
      <argument name="attachmentFeedbackLoopDynamicState_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="attachmentFeedbackLoopDynamicState" />
  </struct>
  <type_alias name="PhysicalDeviceVertexAttributeDivisorFeaturesEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PhysicalDeviceVertexAttributeDivisorFeaturesKHR" />
  <struct name="PhysicalDeviceVertexAttributeDivisorFeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVertexAttributeDivisorFeaturesKHR">
      <argument name="vertexAttributeInstanceRateDivisor_" type="vk::Bool32" default_raw="{}" />
      <argument name="vertexAttributeInstanceRateZeroDivisor_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVertexAttributeDivisorFeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorFeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVertexAttributeDivisorFeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorFeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setVertexAttributeInstanceRateDivisor">
      <argument name="vertexAttributeInstanceRateDivisor_" type="vk::Bool32" />
    </method>
    <method name="setVertexAttributeInstanceRateZeroDivisor">
      <argument name="vertexAttributeInstanceRateZeroDivisor_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorFeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorFeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="vertexAttributeInstanceRateDivisor" />
    <field name="vertexAttributeInstanceRateZeroDivisor" />
  </struct>
  <struct name="PhysicalDeviceVertexAttributeDivisorPropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceVertexAttributeDivisorPropertiesKHR">
      <argument name="maxVertexAttribDivisor_" type="uint32_t" default_raw="{}" />
      <argument name="supportsNonZeroFirstInstance_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceVertexAttributeDivisorPropertiesKHR">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorPropertiesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceVertexAttributeDivisorPropertiesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorPropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorPropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceVertexAttributeDivisorPropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maxVertexAttribDivisor" />
    <field name="supportsNonZeroFirstInstance" />
  </struct>
  <type_alias name="PipelineVertexInputDivisorStateCreateInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="PipelineVertexInputDivisorStateCreateInfoKHR" />
  <struct name="PipelineVertexInputDivisorStateCreateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PipelineVertexInputDivisorStateCreateInfoKHR">
      <argument name="vertexBindingDivisorCount_" type="uint32_t" default_raw="{}" />
      <argument name="pVertexBindingDivisors_" type="const vk::VertexInputBindingDivisorDescriptionKHR *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PipelineVertexInputDivisorStateCreateInfoKHR">
      <argument name="rhs" type="const PipelineVertexInputDivisorStateCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="PipelineVertexInputDivisorStateCreateInfoKHR">
      <argument name="rhs" type="const VkPipelineVertexInputDivisorStateCreateInfoKHR &amp;" />
    </constructor>
    <constructor name="PipelineVertexInputDivisorStateCreateInfoKHR">
      <argument name="vertexBindingDivisors_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VertexInputBindingDivisorDescriptionKHR&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PipelineVertexInputDivisorStateCreateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPipelineVertexInputDivisorStateCreateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setVertexBindingDivisorCount">
      <argument name="vertexBindingDivisorCount_" type="uint32_t" />
    </method>
    <method name="setPVertexBindingDivisors">
      <argument name="pVertexBindingDivisors_" type="const vk::VertexInputBindingDivisorDescriptionKHR *" />
    </method>
    <method name="setVertexBindingDivisors">
      <argument name="vertexBindingDivisors_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::VertexInputBindingDivisorDescriptionKHR&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPipelineVertexInputDivisorStateCreateInfoKHR &amp;" />
    <conversion_function name="operator VkPipelineVertexInputDivisorStateCreateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PipelineVertexInputDivisorStateCreateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineVertexInputDivisorStateCreateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="vertexBindingDivisorCount" />
    <field name="pVertexBindingDivisors" />
  </struct>
  <type_alias name="VertexInputBindingDivisorDescriptionEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="VertexInputBindingDivisorDescriptionKHR" />
  <struct name="VertexInputBindingDivisorDescriptionKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="VertexInputBindingDivisorDescriptionKHR">
      <argument name="binding_" type="uint32_t" default_raw="{}" />
      <argument name="divisor_" type="uint32_t" default_raw="{}" />
    </constructor>
    <constructor name="VertexInputBindingDivisorDescriptionKHR">
      <argument name="rhs" type="const VertexInputBindingDivisorDescriptionKHR &amp;" />
    </constructor>
    <constructor name="VertexInputBindingDivisorDescriptionKHR">
      <argument name="rhs" type="const VkVertexInputBindingDivisorDescriptionKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const VertexInputBindingDivisorDescriptionKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkVertexInputBindingDivisorDescriptionKHR &amp;" />
    </method>
    <method name="setBinding">
      <argument name="binding_" type="uint32_t" />
    </method>
    <method name="setDivisor">
      <argument name="divisor_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkVertexInputBindingDivisorDescriptionKHR &amp;" />
    <conversion_function name="operator VkVertexInputBindingDivisorDescriptionKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const VertexInputBindingDivisorDescriptionKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VertexInputBindingDivisorDescriptionKHR &amp;" />
    </method>
    <field name="binding" />
    <field name="divisor" />
  </struct>
  <struct name="PhysicalDeviceLayeredDriverPropertiesMSFT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceLayeredDriverPropertiesMSFT">
      <argument name="underlyingAPI_" type="vk::LayeredDriverUnderlyingApiMSFT" default_raw="VULKAN_HPP_NAMESPACE::LayeredDriverUnderlyingApiMSFT::eNone" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceLayeredDriverPropertiesMSFT">
      <argument name="rhs" type="const PhysicalDeviceLayeredDriverPropertiesMSFT &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceLayeredDriverPropertiesMSFT">
      <argument name="rhs" type="const VkPhysicalDeviceLayeredDriverPropertiesMSFT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceLayeredDriverPropertiesMSFT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceLayeredDriverPropertiesMSFT &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceLayeredDriverPropertiesMSFT &amp;" />
    <conversion_function name="operator VkPhysicalDeviceLayeredDriverPropertiesMSFT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceLayeredDriverPropertiesMSFT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceLayeredDriverPropertiesMSFT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="underlyingAPI" />
  </struct>
  <type_alias name="CalibratedTimestampInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp" alias_raw="CalibratedTimestampInfoKHR" />
  <struct name="CalibratedTimestampInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="CalibratedTimestampInfoKHR">
      <argument name="timeDomain_" type="vk::TimeDomainKHR" default_raw="VULKAN_HPP_NAMESPACE::TimeDomainKHR::eDevice" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="CalibratedTimestampInfoKHR">
      <argument name="rhs" type="const CalibratedTimestampInfoKHR &amp;" />
    </constructor>
    <constructor name="CalibratedTimestampInfoKHR">
      <argument name="rhs" type="const VkCalibratedTimestampInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const CalibratedTimestampInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkCalibratedTimestampInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setTimeDomain">
      <argument name="timeDomain_" type="vk::TimeDomainKHR" />
    </method>
    <conversion_function name="operator const VkCalibratedTimestampInfoKHR &amp;" />
    <conversion_function name="operator VkCalibratedTimestampInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const CalibratedTimestampInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CalibratedTimestampInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="timeDomain" />
  </struct>
  <struct name="BindDescriptorBufferEmbeddedSamplersInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindDescriptorBufferEmbeddedSamplersInfoEXT">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="set_" type="uint32_t" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindDescriptorBufferEmbeddedSamplersInfoEXT">
      <argument name="rhs" type="const BindDescriptorBufferEmbeddedSamplersInfoEXT &amp;" />
    </constructor>
    <constructor name="BindDescriptorBufferEmbeddedSamplersInfoEXT">
      <argument name="rhs" type="const VkBindDescriptorBufferEmbeddedSamplersInfoEXT &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindDescriptorBufferEmbeddedSamplersInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindDescriptorBufferEmbeddedSamplersInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStageFlags">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::PipelineLayout" />
    </method>
    <method name="setSet">
      <argument name="set_" type="uint32_t" />
    </method>
    <conversion_function name="operator const VkBindDescriptorBufferEmbeddedSamplersInfoEXT &amp;" />
    <conversion_function name="operator VkBindDescriptorBufferEmbeddedSamplersInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindDescriptorBufferEmbeddedSamplersInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindDescriptorBufferEmbeddedSamplersInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stageFlags" />
    <field name="layout" />
    <field name="set" />
  </struct>
  <struct name="BindDescriptorSetsInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindDescriptorSetsInfoKHR">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="firstSet_" type="uint32_t" default_raw="{}" />
      <argument name="descriptorSetCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDescriptorSets_" type="const vk::DescriptorSet *" default_raw="{}" />
      <argument name="dynamicOffsetCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDynamicOffsets_" type="const uint32_t *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindDescriptorSetsInfoKHR">
      <argument name="rhs" type="const BindDescriptorSetsInfoKHR &amp;" />
    </constructor>
    <constructor name="BindDescriptorSetsInfoKHR">
      <argument name="rhs" type="const VkBindDescriptorSetsInfoKHR &amp;" />
    </constructor>
    <constructor name="BindDescriptorSetsInfoKHR">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" />
      <argument name="layout_" type="vk::PipelineLayout" />
      <argument name="firstSet_" type="uint32_t" />
      <argument name="descriptorSets_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorSet&gt; &amp;" />
      <argument name="dynamicOffsets_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindDescriptorSetsInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindDescriptorSetsInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStageFlags">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::PipelineLayout" />
    </method>
    <method name="setFirstSet">
      <argument name="firstSet_" type="uint32_t" />
    </method>
    <method name="setDescriptorSetCount">
      <argument name="descriptorSetCount_" type="uint32_t" />
    </method>
    <method name="setPDescriptorSets">
      <argument name="pDescriptorSets_" type="const vk::DescriptorSet *" />
    </method>
    <method name="setDescriptorSets">
      <argument name="descriptorSets_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DescriptorSet&gt; &amp;" />
    </method>
    <method name="setDynamicOffsetCount">
      <argument name="dynamicOffsetCount_" type="uint32_t" />
    </method>
    <method name="setPDynamicOffsets">
      <argument name="pDynamicOffsets_" type="const uint32_t *" />
    </method>
    <method name="setDynamicOffsets">
      <argument name="dynamicOffsets_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkBindDescriptorSetsInfoKHR &amp;" />
    <conversion_function name="operator VkBindDescriptorSetsInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindDescriptorSetsInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindDescriptorSetsInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stageFlags" />
    <field name="layout" />
    <field name="firstSet" />
    <field name="descriptorSetCount" />
    <field name="pDescriptorSets" />
    <field name="dynamicOffsetCount" />
    <field name="pDynamicOffsets" />
  </struct>
  <struct name="BindMemoryStatusKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="BindMemoryStatusKHR">
      <argument name="pResult_" type="vk::Result *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="BindMemoryStatusKHR">
      <argument name="rhs" type="const BindMemoryStatusKHR &amp;" />
    </constructor>
    <constructor name="BindMemoryStatusKHR">
      <argument name="rhs" type="const VkBindMemoryStatusKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const BindMemoryStatusKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkBindMemoryStatusKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setPResult">
      <argument name="pResult_" type="vk::Result *" />
    </method>
    <conversion_function name="operator const VkBindMemoryStatusKHR &amp;" />
    <conversion_function name="operator VkBindMemoryStatusKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const BindMemoryStatusKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BindMemoryStatusKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="pResult" />
  </struct>
  <struct name="PhysicalDeviceMaintenance6FeaturesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMaintenance6FeaturesKHR">
      <argument name="maintenance6_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance6FeaturesKHR">
      <argument name="rhs" type="const PhysicalDeviceMaintenance6FeaturesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance6FeaturesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance6FeaturesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance6FeaturesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance6FeaturesKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setMaintenance6">
      <argument name="maintenance6_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMaintenance6FeaturesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMaintenance6FeaturesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMaintenance6FeaturesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance6FeaturesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="maintenance6" />
  </struct>
  <struct name="PhysicalDeviceMaintenance6PropertiesKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceMaintenance6PropertiesKHR">
      <argument name="blockTexelViewCompatibleMultipleLayers_" type="vk::Bool32" default_raw="{}" />
      <argument name="maxCombinedImageSamplerDescriptorCount_" type="uint32_t" default_raw="{}" />
      <argument name="fragmentShadingRateClampCombinerInputs_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance6PropertiesKHR">
      <argument name="rhs" type="const PhysicalDeviceMaintenance6PropertiesKHR &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceMaintenance6PropertiesKHR">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance6PropertiesKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance6PropertiesKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceMaintenance6PropertiesKHR &amp;" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceMaintenance6PropertiesKHR &amp;" />
    <conversion_function name="operator VkPhysicalDeviceMaintenance6PropertiesKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceMaintenance6PropertiesKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceMaintenance6PropertiesKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="blockTexelViewCompatibleMultipleLayers" />
    <field name="maxCombinedImageSamplerDescriptorCount" />
    <field name="fragmentShadingRateClampCombinerInputs" />
  </struct>
  <struct name="PushConstantsInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PushConstantsInfoKHR">
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="stageFlags_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="offset_" type="uint32_t" default_raw="{}" />
      <argument name="size_" type="uint32_t" default_raw="{}" />
      <argument name="pValues_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PushConstantsInfoKHR">
      <argument name="rhs" type="const PushConstantsInfoKHR &amp;" />
    </constructor>
    <constructor name="PushConstantsInfoKHR">
      <argument name="rhs" type="const VkPushConstantsInfoKHR &amp;" />
    </constructor>
    <method name="PushConstantsInfoKHR" template_raw="template &lt;typename T&gt;" />
    <method name="operator=">
      <argument name="rhs" type="const PushConstantsInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPushConstantsInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::PipelineLayout" />
    </method>
    <method name="setStageFlags">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" />
    </method>
    <method name="setOffset">
      <argument name="offset_" type="uint32_t" />
    </method>
    <method name="setSize">
      <argument name="size_" type="uint32_t" />
    </method>
    <method name="setPValues">
      <argument name="pValues_" type="const void *" />
    </method>
    <method name="setValues" template_raw="template &lt;typename T&gt;" />
    <conversion_function name="operator const VkPushConstantsInfoKHR &amp;" />
    <conversion_function name="operator VkPushConstantsInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PushConstantsInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PushConstantsInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="layout" />
    <field name="stageFlags" />
    <field name="offset" />
    <field name="size" />
    <field name="pValues" />
  </struct>
  <struct name="PushDescriptorSetInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PushDescriptorSetInfoKHR">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="set_" type="uint32_t" default_raw="{}" />
      <argument name="descriptorWriteCount_" type="uint32_t" default_raw="{}" />
      <argument name="pDescriptorWrites_" type="const vk::WriteDescriptorSet *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PushDescriptorSetInfoKHR">
      <argument name="rhs" type="const PushDescriptorSetInfoKHR &amp;" />
    </constructor>
    <constructor name="PushDescriptorSetInfoKHR">
      <argument name="rhs" type="const VkPushDescriptorSetInfoKHR &amp;" />
    </constructor>
    <constructor name="PushDescriptorSetInfoKHR">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" />
      <argument name="layout_" type="vk::PipelineLayout" />
      <argument name="set_" type="uint32_t" />
      <argument name="descriptorWrites_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::WriteDescriptorSet&gt; &amp;" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PushDescriptorSetInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPushDescriptorSetInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStageFlags">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::PipelineLayout" />
    </method>
    <method name="setSet">
      <argument name="set_" type="uint32_t" />
    </method>
    <method name="setDescriptorWriteCount">
      <argument name="descriptorWriteCount_" type="uint32_t" />
    </method>
    <method name="setPDescriptorWrites">
      <argument name="pDescriptorWrites_" type="const vk::WriteDescriptorSet *" />
    </method>
    <method name="setDescriptorWrites">
      <argument name="descriptorWrites_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::WriteDescriptorSet&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkPushDescriptorSetInfoKHR &amp;" />
    <conversion_function name="operator VkPushDescriptorSetInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PushDescriptorSetInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PushDescriptorSetInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stageFlags" />
    <field name="layout" />
    <field name="set" />
    <field name="descriptorWriteCount" />
    <field name="pDescriptorWrites" />
  </struct>
  <struct name="PushDescriptorSetWithTemplateInfoKHR" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PushDescriptorSetWithTemplateInfoKHR">
      <argument name="descriptorUpdateTemplate_" type="vk::DescriptorUpdateTemplate" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="set_" type="uint32_t" default_raw="{}" />
      <argument name="pData_" type="const void *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PushDescriptorSetWithTemplateInfoKHR">
      <argument name="rhs" type="const PushDescriptorSetWithTemplateInfoKHR &amp;" />
    </constructor>
    <constructor name="PushDescriptorSetWithTemplateInfoKHR">
      <argument name="rhs" type="const VkPushDescriptorSetWithTemplateInfoKHR &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PushDescriptorSetWithTemplateInfoKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPushDescriptorSetWithTemplateInfoKHR &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setDescriptorUpdateTemplate">
      <argument name="descriptorUpdateTemplate_" type="vk::DescriptorUpdateTemplate" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::PipelineLayout" />
    </method>
    <method name="setSet">
      <argument name="set_" type="uint32_t" />
    </method>
    <method name="setPData">
      <argument name="pData_" type="const void *" />
    </method>
    <conversion_function name="operator const VkPushDescriptorSetWithTemplateInfoKHR &amp;" />
    <conversion_function name="operator VkPushDescriptorSetWithTemplateInfoKHR &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PushDescriptorSetWithTemplateInfoKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PushDescriptorSetWithTemplateInfoKHR &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="descriptorUpdateTemplate" />
    <field name="layout" />
    <field name="set" />
    <field name="pData" />
  </struct>
  <struct name="SetDescriptorBufferOffsetsInfoEXT" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="SetDescriptorBufferOffsetsInfoEXT">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" default_raw="{}" />
      <argument name="layout_" type="vk::PipelineLayout" default_raw="{}" />
      <argument name="firstSet_" type="uint32_t" default_raw="{}" />
      <argument name="setCount_" type="uint32_t" default_raw="{}" />
      <argument name="pBufferIndices_" type="const uint32_t *" default_raw="{}" />
      <argument name="pOffsets_" type="const vk::DeviceSize *" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <constructor name="SetDescriptorBufferOffsetsInfoEXT">
      <argument name="rhs" type="const SetDescriptorBufferOffsetsInfoEXT &amp;" />
    </constructor>
    <constructor name="SetDescriptorBufferOffsetsInfoEXT">
      <argument name="rhs" type="const VkSetDescriptorBufferOffsetsInfoEXT &amp;" />
    </constructor>
    <constructor name="SetDescriptorBufferOffsetsInfoEXT">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" />
      <argument name="layout_" type="vk::PipelineLayout" />
      <argument name="firstSet_" type="uint32_t" />
      <argument name="bufferIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
      <argument name="offsets_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DeviceSize&gt; &amp;" default_raw="{}" />
      <argument name="pNext_" type="const void *" default_raw="nullptr" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const SetDescriptorBufferOffsetsInfoEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkSetDescriptorBufferOffsetsInfoEXT &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="const void *" />
    </method>
    <method name="setStageFlags">
      <argument name="stageFlags_" type="vk::ShaderStageFlags" />
    </method>
    <method name="setLayout">
      <argument name="layout_" type="vk::PipelineLayout" />
    </method>
    <method name="setFirstSet">
      <argument name="firstSet_" type="uint32_t" />
    </method>
    <method name="setSetCount">
      <argument name="setCount_" type="uint32_t" />
    </method>
    <method name="setPBufferIndices">
      <argument name="pBufferIndices_" type="const uint32_t *" />
    </method>
    <method name="setBufferIndices">
      <argument name="bufferIndices_" type="const vk::ArrayProxyNoTemporaries&lt;const uint32_t&gt; &amp;" />
    </method>
    <method name="setPOffsets">
      <argument name="pOffsets_" type="const vk::DeviceSize *" />
    </method>
    <method name="setOffsets">
      <argument name="offsets_" type="const vk::ArrayProxyNoTemporaries&lt;const vk::DeviceSize&gt; &amp;" />
    </method>
    <conversion_function name="operator const VkSetDescriptorBufferOffsetsInfoEXT &amp;" />
    <conversion_function name="operator VkSetDescriptorBufferOffsetsInfoEXT &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const SetDescriptorBufferOffsetsInfoEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SetDescriptorBufferOffsetsInfoEXT &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="stageFlags" />
    <field name="layout" />
    <field name="firstSet" />
    <field name="setCount" />
    <field name="pBufferIndices" />
    <field name="pOffsets" />
  </struct>
  <struct name="PhysicalDeviceDescriptorPoolOverallocationFeaturesNV" namespace="vk" filename="vulkan/vulkan_structs.hpp">
    <constructor name="PhysicalDeviceDescriptorPoolOverallocationFeaturesNV">
      <argument name="descriptorPoolOverallocation_" type="vk::Bool32" default_raw="{}" />
      <argument name="pNext_" type="void *" default_raw="nullptr" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorPoolOverallocationFeaturesNV">
      <argument name="rhs" type="const PhysicalDeviceDescriptorPoolOverallocationFeaturesNV &amp;" />
    </constructor>
    <constructor name="PhysicalDeviceDescriptorPoolOverallocationFeaturesNV">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV &amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorPoolOverallocationFeaturesNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="const VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV &amp;" />
    </method>
    <method name="setPNext">
      <argument name="pNext_" type="void *" />
    </method>
    <method name="setDescriptorPoolOverallocation">
      <argument name="descriptorPoolOverallocation_" type="vk::Bool32" />
    </method>
    <conversion_function name="operator const VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV &amp;" />
    <conversion_function name="operator VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV &amp;" />
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDeviceDescriptorPoolOverallocationFeaturesNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDeviceDescriptorPoolOverallocationFeaturesNV &amp;" />
    </method>
    <field name="sType" />
    <field name="pNext" />
    <field name="descriptorPoolOverallocation" />
  </struct>
  <class name="isVulkanHandleType" namespace="vk" filename="vulkan/vulkan_handles.hpp" template_raw="template &lt;typename Type&gt;" />
  <class name="Buffer" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="Buffer" />
    <constructor name="Buffer">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Buffer">
      <argument name="buffer" type="VkBuffer" />
    </constructor>
    <method name="operator=">
      <argument name="buffer" type="VkBuffer" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Buffer &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Buffer &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const Buffer &amp;" />
    </method>
    <conversion_function name="operator VkBuffer_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="BufferView" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="BufferView" />
    <constructor name="BufferView">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="BufferView">
      <argument name="bufferView" type="VkBufferView" />
    </constructor>
    <method name="operator=">
      <argument name="bufferView" type="VkBufferView" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const BufferView &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const BufferView &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const BufferView &amp;" />
    </method>
    <conversion_function name="operator VkBufferView_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="CommandBuffer" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="CommandBuffer" />
    <constructor name="CommandBuffer">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="CommandBuffer">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </constructor>
    <method name="operator=">
      <argument name="commandBuffer" type="VkCommandBuffer" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const CommandBuffer &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CommandBuffer &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const CommandBuffer &amp;" />
    </method>
    <method name="begin" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="begin" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="end" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="reset" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindPipeline" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewport" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewport" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setScissor" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setScissor" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setLineWidth" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthBias" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setBlendConstants" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthBounds" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setStencilCompareMask" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setStencilWriteMask" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setStencilReference" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindDescriptorSets" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindDescriptorSets" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindIndexBuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindVertexBuffers" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindVertexBuffers" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="draw" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawIndexed" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawIndirect" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawIndexedIndirect" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="dispatch" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="dispatchIndirect" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="blitImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="blitImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBufferToImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBufferToImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImageToBuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImageToBuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="updateBuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="updateBuffer" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="fillBuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="clearColorImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="clearColorImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="clearDepthStencilImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="clearDepthStencilImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="clearAttachments" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="clearAttachments" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resolveImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resolveImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setEvent" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resetEvent" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitEvents" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitEvents" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pipelineBarrier" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pipelineBarrier" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginQuery" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endQuery" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resetQueryPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeTimestamp" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyQueryPoolResults" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushConstants" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushConstants" template_raw="template &lt;typename ValuesType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginRenderPass" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginRenderPass" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="nextSubpass" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endRenderPass" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="executeCommands" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="executeCommands" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDeviceMask" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="dispatchBase" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawIndirectCount" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawIndexedIndirectCount" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginRenderPass2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginRenderPass2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="nextSubpass2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="nextSubpass2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endRenderPass2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endRenderPass2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setEvent2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setEvent2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resetEvent2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitEvents2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitEvents2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pipelineBarrier2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pipelineBarrier2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeTimestamp2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBuffer2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBuffer2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImage2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImage2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBufferToImage2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBufferToImage2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImageToBuffer2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImageToBuffer2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="blitImage2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="blitImage2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resolveImage2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resolveImage2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginRendering" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginRendering" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endRendering" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCullMode" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setFrontFace" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPrimitiveTopology" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewportWithCount" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewportWithCount" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setScissorWithCount" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setScissorWithCount" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindVertexBuffers2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindVertexBuffers2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthTestEnable" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthWriteEnable" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthCompareOp" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthBoundsTestEnable" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setStencilTestEnable" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setStencilOp" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setRasterizerDiscardEnable" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthBiasEnable" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPrimitiveRestartEnable" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="debugMarkerBeginEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="debugMarkerBeginEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="debugMarkerEndEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="debugMarkerInsertEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="debugMarkerInsertEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginVideoCodingKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginVideoCodingKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endVideoCodingKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endVideoCodingKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="controlVideoCodingKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="controlVideoCodingKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="decodeVideoKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="decodeVideoKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindTransformFeedbackBuffersEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindTransformFeedbackBuffersEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginTransformFeedbackEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginTransformFeedbackEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endTransformFeedbackEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endTransformFeedbackEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginQueryIndexedEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endQueryIndexedEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawIndirectByteCountEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="cuLaunchKernelNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="cuLaunchKernelNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawIndirectCountAMD" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawIndexedIndirectCountAMD" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginRenderingKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginRenderingKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endRenderingKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDeviceMaskKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="dispatchBaseKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushDescriptorSetKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushDescriptorSetKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushDescriptorSetWithTemplateKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushDescriptorSetWithTemplateKHR" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginConditionalRenderingEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginConditionalRenderingEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endConditionalRenderingEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewportWScalingNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewportWScalingNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDiscardRectangleEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDiscardRectangleEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDiscardRectangleEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDiscardRectangleModeEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginRenderPass2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginRenderPass2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="nextSubpass2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="nextSubpass2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endRenderPass2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endRenderPass2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginDebugUtilsLabelEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginDebugUtilsLabelEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endDebugUtilsLabelEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="insertDebugUtilsLabelEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="insertDebugUtilsLabelEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setSampleLocationsEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setSampleLocationsEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildAccelerationStructuresKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildAccelerationStructuresKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildAccelerationStructuresIndirectKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildAccelerationStructuresIndirectKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyAccelerationStructureToMemoryKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyAccelerationStructureToMemoryKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryToAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryToAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeAccelerationStructuresPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeAccelerationStructuresPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="traceRaysKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="traceRaysKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="traceRaysIndirectKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="traceRaysIndirectKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setRayTracingPipelineStackSizeKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindShadingRateImageNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewportShadingRatePaletteNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewportShadingRatePaletteNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCoarseSampleOrderNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCoarseSampleOrderNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildAccelerationStructureNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildAccelerationStructureNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyAccelerationStructureNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="traceRaysNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeAccelerationStructuresPropertiesNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeAccelerationStructuresPropertiesNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawIndirectCountKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawIndexedIndirectCountKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeBufferMarkerAMD" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawMeshTasksNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawMeshTasksIndirectNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawMeshTasksIndirectCountNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setExclusiveScissorEnableNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setExclusiveScissorEnableNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setExclusiveScissorNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setExclusiveScissorNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCheckpointNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCheckpointNV" template_raw="template &lt;typename CheckpointMarkerType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPerformanceMarkerINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPerformanceMarkerINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPerformanceStreamMarkerINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPerformanceStreamMarkerINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPerformanceOverrideINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPerformanceOverrideINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setFragmentShadingRateKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setFragmentShadingRateKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setLineStippleEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCullModeEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setFrontFaceEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPrimitiveTopologyEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewportWithCountEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewportWithCountEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setScissorWithCountEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setScissorWithCountEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindVertexBuffers2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindVertexBuffers2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthTestEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthWriteEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthCompareOpEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthBoundsTestEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setStencilTestEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setStencilOpEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="preprocessGeneratedCommandsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="preprocessGeneratedCommandsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="executeGeneratedCommandsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="executeGeneratedCommandsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindPipelineShaderGroupNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthBias2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthBias2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="encodeVideoKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="encodeVideoKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setEvent2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setEvent2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resetEvent2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitEvents2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitEvents2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pipelineBarrier2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pipelineBarrier2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeTimestamp2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeBufferMarker2AMD" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindDescriptorBuffersEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindDescriptorBuffersEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDescriptorBufferOffsetsEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDescriptorBufferOffsetsEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindDescriptorBufferEmbeddedSamplersEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setFragmentShadingRateEnumNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawMeshTasksEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawMeshTasksIndirectEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawMeshTasksIndirectCountEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBuffer2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBuffer2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImage2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImage2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBufferToImage2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyBufferToImage2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImageToBuffer2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImageToBuffer2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="blitImage2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="blitImage2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resolveImage2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resolveImage2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setVertexInputEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setVertexInputEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="subpassShadingHUAWEI" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindInvocationMaskHUAWEI" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPatchControlPointsEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setRasterizerDiscardEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthBiasEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setLogicOpEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPrimitiveRestartEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setColorWriteEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setColorWriteEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="traceRaysIndirect2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawMultiEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawMultiEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawMultiIndexedEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawMultiIndexedEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildMicromapsEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildMicromapsEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMicromapToMemoryEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMicromapToMemoryEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryToMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryToMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeMicromapsPropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeMicromapsPropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawClusterHUAWEI" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="drawClusterIndirectHUAWEI" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryIndirectNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryToImageIndirectNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryToImageIndirectNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="decompressMemoryNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="decompressMemoryNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="decompressMemoryIndirectCountNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="updatePipelineIndirectBufferNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setTessellationDomainOriginEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthClampEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPolygonModeEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setRasterizationSamplesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setSampleMaskEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setSampleMaskEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setAlphaToCoverageEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setAlphaToOneEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setLogicOpEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setColorBlendEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setColorBlendEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setColorBlendEquationEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setColorBlendEquationEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setColorWriteMaskEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setColorWriteMaskEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setRasterizationStreamEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setConservativeRasterizationModeEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setExtraPrimitiveOverestimationSizeEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthClipEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setSampleLocationsEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setColorBlendAdvancedEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setColorBlendAdvancedEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setProvokingVertexModeEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setLineRasterizationModeEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setLineStippleEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDepthClipNegativeOneToOneEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewportWScalingEnableNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewportSwizzleNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setViewportSwizzleNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCoverageToColorEnableNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCoverageToColorLocationNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCoverageModulationModeNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCoverageModulationTableEnableNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCoverageModulationTableNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCoverageModulationTableNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setShadingRateImageEnableNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setRepresentativeFragmentTestEnableNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setCoverageReductionModeNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="opticalFlowExecuteNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="opticalFlowExecuteNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindIndexBuffer2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindShadersEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindShadersEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setAttachmentFeedbackLoopEnableEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindDescriptorSets2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindDescriptorSets2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushConstants2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushConstants2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushDescriptorSet2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushDescriptorSet2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushDescriptorSetWithTemplate2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="pushDescriptorSetWithTemplate2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDescriptorBufferOffsets2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDescriptorBufferOffsets2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindDescriptorBufferEmbeddedSamplers2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindDescriptorBufferEmbeddedSamplers2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <conversion_function name="operator VkCommandBuffer_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="CommandPool" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="CommandPool" />
    <constructor name="CommandPool">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="CommandPool">
      <argument name="commandPool" type="VkCommandPool" />
    </constructor>
    <method name="operator=">
      <argument name="commandPool" type="VkCommandPool" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const CommandPool &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CommandPool &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const CommandPool &amp;" />
    </method>
    <conversion_function name="operator VkCommandPool_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="DescriptorPool" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="DescriptorPool" />
    <constructor name="DescriptorPool">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DescriptorPool">
      <argument name="descriptorPool" type="VkDescriptorPool" />
    </constructor>
    <method name="operator=">
      <argument name="descriptorPool" type="VkDescriptorPool" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const DescriptorPool &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorPool &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const DescriptorPool &amp;" />
    </method>
    <conversion_function name="operator VkDescriptorPool_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="DescriptorSet" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="DescriptorSet" />
    <constructor name="DescriptorSet">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DescriptorSet">
      <argument name="descriptorSet" type="VkDescriptorSet" />
    </constructor>
    <method name="operator=">
      <argument name="descriptorSet" type="VkDescriptorSet" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const DescriptorSet &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorSet &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const DescriptorSet &amp;" />
    </method>
    <conversion_function name="operator VkDescriptorSet_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="DescriptorSetLayout" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="DescriptorSetLayout" />
    <constructor name="DescriptorSetLayout">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DescriptorSetLayout">
      <argument name="descriptorSetLayout" type="VkDescriptorSetLayout" />
    </constructor>
    <method name="operator=">
      <argument name="descriptorSetLayout" type="VkDescriptorSetLayout" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const DescriptorSetLayout &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorSetLayout &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const DescriptorSetLayout &amp;" />
    </method>
    <conversion_function name="operator VkDescriptorSetLayout_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="Device" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="Device" />
    <constructor name="Device">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Device">
      <argument name="device" type="VkDevice" />
    </constructor>
    <method name="operator=">
      <argument name="device" type="VkDevice" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Device &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Device &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const Device &amp;" />
    </method>
    <method name="getProcAddr" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getProcAddr" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueue" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueue" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitIdle" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="allocateMemory" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="allocateMemory" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="allocateMemoryUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="freeMemory" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="freeMemory" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="free" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="free" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="mapMemory" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="mapMemory" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="unmapMemory" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="flushMappedMemoryRanges" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="flushMappedMemoryRanges" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="invalidateMappedMemoryRanges" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="invalidateMappedMemoryRanges" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryCommitment" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryCommitment" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindBufferMemory" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindImageMemory" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirements" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirements" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirements" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirements" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSparseMemoryRequirements" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSparseMemoryRequirements" template_raw="template &lt;typename SparseImageMemoryRequirementsAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageMemoryRequirements&gt;" />
    <method name="getImageSparseMemoryRequirements" template_raw="template &lt;typename SparseImageMemoryRequirementsAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageMemoryRequirements&gt;" />
    <method name="createFence" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createFence" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createFenceUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyFence" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyFence" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resetFences" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resetFences" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFenceStatus" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitForFences" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitForFences" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSemaphore" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSemaphore" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSemaphoreUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroySemaphore" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroySemaphore" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createEvent" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createEvent" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createEventUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyEvent" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyEvent" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getEventStatus" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setEvent" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resetEvent" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createQueryPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createQueryPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createQueryPoolUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyQueryPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyQueryPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueryPoolResults" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueryPoolResults" template_raw="template &lt;typename DataType, typename DataTypeAllocator = std::allocator&lt;DataType&gt;" />
    <method name="getQueryPoolResult" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createBuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createBuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createBufferUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyBuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyBuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createBufferView" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createBufferView" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createBufferViewUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyBufferView" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyBufferView" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createImageUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyImage" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSubresourceLayout" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSubresourceLayout" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createImageView" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createImageView" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createImageViewUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyImageView" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyImageView" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createShaderModule" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createShaderModule" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createShaderModuleUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyShaderModule" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyShaderModule" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPipelineCache" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPipelineCache" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPipelineCacheUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyPipelineCache" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyPipelineCache" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelineCacheData" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelineCacheData" template_raw="template &lt;typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="getPipelineCacheData" template_raw="template &lt;typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="mergePipelineCaches" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="mergePipelineCaches" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createGraphicsPipelines" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createGraphicsPipelines" template_raw="template &lt;typename PipelineAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Pipeline&gt;" />
    <method name="createGraphicsPipelines" template_raw="template &lt;typename PipelineAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Pipeline&gt;" />
    <method name="createGraphicsPipeline" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createGraphicsPipelinesUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename PipelineAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::Pipeline, Dispatch&gt;" />
    <method name="createGraphicsPipelinesUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename PipelineAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::Pipeline, Dispatch&gt;" />
    <method name="createGraphicsPipelineUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createComputePipelines" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createComputePipelines" template_raw="template &lt;typename PipelineAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Pipeline&gt;" />
    <method name="createComputePipelines" template_raw="template &lt;typename PipelineAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Pipeline&gt;" />
    <method name="createComputePipeline" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createComputePipelinesUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename PipelineAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::Pipeline, Dispatch&gt;" />
    <method name="createComputePipelinesUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename PipelineAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::Pipeline, Dispatch&gt;" />
    <method name="createComputePipelineUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyPipeline" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyPipeline" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPipelineLayout" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPipelineLayout" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPipelineLayoutUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyPipelineLayout" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyPipelineLayout" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSampler" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSampler" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSamplerUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroySampler" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroySampler" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorSetLayout" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorSetLayout" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorSetLayoutUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDescriptorSetLayout" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDescriptorSetLayout" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorPoolUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDescriptorPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDescriptorPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resetDescriptorPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="allocateDescriptorSets" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="allocateDescriptorSets" template_raw="template &lt;typename DescriptorSetAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DescriptorSet&gt;" />
    <method name="allocateDescriptorSets" template_raw="template &lt;typename DescriptorSetAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DescriptorSet&gt;" />
    <method name="allocateDescriptorSetsUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename DescriptorSetAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::DescriptorSet, Dispatch&gt;" />
    <method name="allocateDescriptorSetsUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename DescriptorSetAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::DescriptorSet, Dispatch&gt;" />
    <method name="freeDescriptorSets" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="freeDescriptorSets" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="free" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="free" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="updateDescriptorSets" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="updateDescriptorSets" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createFramebuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createFramebuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createFramebufferUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyFramebuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyFramebuffer" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRenderPass" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRenderPass" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRenderPassUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyRenderPass" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyRenderPass" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRenderAreaGranularity" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRenderAreaGranularity" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createCommandPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createCommandPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createCommandPoolUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyCommandPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyCommandPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resetCommandPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="allocateCommandBuffers" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="allocateCommandBuffers" template_raw="template &lt;typename CommandBufferAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::CommandBuffer&gt;" />
    <method name="allocateCommandBuffers" template_raw="template &lt;typename CommandBufferAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::CommandBuffer&gt;" />
    <method name="allocateCommandBuffersUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename CommandBufferAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::CommandBuffer, Dispatch&gt;" />
    <method name="allocateCommandBuffersUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename CommandBufferAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::CommandBuffer, Dispatch&gt;" />
    <method name="freeCommandBuffers" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="freeCommandBuffers" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="free" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="free" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindBufferMemory2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindBufferMemory2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindImageMemory2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindImageMemory2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getGroupPeerMemoryFeatures" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getGroupPeerMemoryFeatures" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirements2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirements2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirements2" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirements2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirements2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirements2" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSparseMemoryRequirements2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSparseMemoryRequirements2" template_raw="template &lt;typename SparseImageMemoryRequirements2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageMemoryRequirements2&gt;" />
    <method name="getImageSparseMemoryRequirements2" template_raw="template &lt;typename SparseImageMemoryRequirements2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageMemoryRequirements2&gt;" />
    <method name="trimCommandPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueue2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueue2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSamplerYcbcrConversion" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSamplerYcbcrConversion" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSamplerYcbcrConversionUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroySamplerYcbcrConversion" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroySamplerYcbcrConversion" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorUpdateTemplate" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorUpdateTemplate" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorUpdateTemplateUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDescriptorUpdateTemplate" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDescriptorUpdateTemplate" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="updateDescriptorSetWithTemplate" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="updateDescriptorSetWithTemplate" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetLayoutSupport" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetLayoutSupport" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetLayoutSupport" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRenderPass2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRenderPass2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRenderPass2Unique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resetQueryPool" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSemaphoreCounterValue" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSemaphoreCounterValue" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitSemaphores" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitSemaphores" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="signalSemaphore" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="signalSemaphore" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferAddress" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferAddress" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferOpaqueCaptureAddress" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferOpaqueCaptureAddress" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryOpaqueCaptureAddress" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryOpaqueCaptureAddress" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPrivateDataSlot" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPrivateDataSlot" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPrivateDataSlotUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyPrivateDataSlot" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyPrivateDataSlot" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPrivateData" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPrivateData" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPrivateData" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirements" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirements" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirements" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirements" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirements" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirements" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSparseMemoryRequirements" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSparseMemoryRequirements" template_raw="template &lt;typename SparseImageMemoryRequirements2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageMemoryRequirements2&gt;" />
    <method name="getImageSparseMemoryRequirements" template_raw="template &lt;typename SparseImageMemoryRequirements2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageMemoryRequirements2&gt;" />
    <method name="createSwapchainKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSwapchainKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSwapchainKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroySwapchainKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroySwapchainKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSwapchainImagesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSwapchainImagesKHR" template_raw="template &lt;typename ImageAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Image&gt;" />
    <method name="getSwapchainImagesKHR" template_raw="template &lt;typename ImageAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Image&gt;" />
    <method name="acquireNextImageKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="acquireNextImageKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getGroupPresentCapabilitiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getGroupPresentCapabilitiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getGroupSurfacePresentModesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getGroupSurfacePresentModesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="acquireNextImage2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="acquireNextImage2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSharedSwapchainsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSharedSwapchainsKHR" template_raw="template &lt;typename SwapchainKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SwapchainKHR&gt;" />
    <method name="createSharedSwapchainsKHR" template_raw="template &lt;typename SwapchainKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SwapchainKHR&gt;" />
    <method name="createSharedSwapchainKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSharedSwapchainsKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename SwapchainKHRAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::SwapchainKHR, Dispatch&gt;" />
    <method name="createSharedSwapchainsKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename SwapchainKHRAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::SwapchainKHR, Dispatch&gt;" />
    <method name="createSharedSwapchainKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="debugMarkerSetObjectTagEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="debugMarkerSetObjectTagEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="debugMarkerSetObjectNameEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="debugMarkerSetObjectNameEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createVideoSessionKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createVideoSessionKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createVideoSessionKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyVideoSessionKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyVideoSessionKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getVideoSessionMemoryRequirementsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getVideoSessionMemoryRequirementsKHR" template_raw="template &lt;typename VideoSessionMemoryRequirementsKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::VideoSessionMemoryRequirementsKHR&gt;" />
    <method name="getVideoSessionMemoryRequirementsKHR" template_raw="template &lt;typename VideoSessionMemoryRequirementsKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::VideoSessionMemoryRequirementsKHR&gt;" />
    <method name="bindVideoSessionMemoryKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindVideoSessionMemoryKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createVideoSessionParametersKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createVideoSessionParametersKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createVideoSessionParametersKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="updateVideoSessionParametersKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="updateVideoSessionParametersKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyVideoSessionParametersKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyVideoSessionParametersKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createCuModuleNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createCuModuleNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createCuModuleNVXUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createCuFunctionNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createCuFunctionNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createCuFunctionNVXUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyCuModuleNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyCuModuleNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyCuFunctionNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyCuFunctionNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageViewHandleNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageViewHandleNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageViewAddressNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageViewAddressNVX" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getShaderInfoAMD" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getShaderInfoAMD" template_raw="template &lt;typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="getShaderInfoAMD" template_raw="template &lt;typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="getGroupPeerMemoryFeaturesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getGroupPeerMemoryFeaturesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="trimCommandPoolKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryFdKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryFdKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryFdPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryFdPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="importSemaphoreFdKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="importSemaphoreFdKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSemaphoreFdKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSemaphoreFdKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorUpdateTemplateKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorUpdateTemplateKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDescriptorUpdateTemplateKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDescriptorUpdateTemplateKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDescriptorUpdateTemplateKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="updateDescriptorSetWithTemplateKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="updateDescriptorSetWithTemplateKHR" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="displayPowerControlEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="displayPowerControlEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="registerEventEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="registerEventEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="registerEventEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="registerDisplayEventEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="registerDisplayEventEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="registerDisplayEventEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSwapchainCounterEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSwapchainCounterEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRefreshCycleDurationGOOGLE" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRefreshCycleDurationGOOGLE" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPastPresentationTimingGOOGLE" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPastPresentationTimingGOOGLE" template_raw="template &lt;typename PastPresentationTimingGOOGLEAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PastPresentationTimingGOOGLE&gt;" />
    <method name="getPastPresentationTimingGOOGLE" template_raw="template &lt;typename PastPresentationTimingGOOGLEAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PastPresentationTimingGOOGLE&gt;" />
    <method name="setHdrMetadataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setHdrMetadataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRenderPass2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRenderPass2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRenderPass2KHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSwapchainStatusKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="importFenceFdKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="importFenceFdKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFenceFdKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFenceFdKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="acquireProfilingLockKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="acquireProfilingLockKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="releaseProfilingLockKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDebugUtilsObjectNameEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDebugUtilsObjectNameEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDebugUtilsObjectTagEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setDebugUtilsObjectTagEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirements2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirements2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirements2KHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirements2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirements2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirements2KHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSparseMemoryRequirements2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSparseMemoryRequirements2KHR" template_raw="template &lt;typename SparseImageMemoryRequirements2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageMemoryRequirements2&gt;" />
    <method name="getImageSparseMemoryRequirements2KHR" template_raw="template &lt;typename SparseImageMemoryRequirements2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageMemoryRequirements2&gt;" />
    <method name="createAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createAccelerationStructureKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildAccelerationStructuresKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildAccelerationStructuresKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyAccelerationStructureToMemoryKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyAccelerationStructureToMemoryKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryToAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryToAccelerationStructureKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeAccelerationStructuresPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeAccelerationStructuresPropertiesKHR" template_raw="template &lt;typename DataType, typename DataTypeAllocator = std::allocator&lt;DataType&gt;" />
    <method name="writeAccelerationStructuresPropertyKHR" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureAddressKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureAddressKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureCompatibilityKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureCompatibilityKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureBuildSizesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureBuildSizesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRayTracingPipelinesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRayTracingPipelinesKHR" template_raw="template &lt;typename PipelineAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Pipeline&gt;" />
    <method name="createRayTracingPipelinesKHR" template_raw="template &lt;typename PipelineAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Pipeline&gt;" />
    <method name="createRayTracingPipelineKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRayTracingPipelinesKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename PipelineAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::Pipeline, Dispatch&gt;" />
    <method name="createRayTracingPipelinesKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename PipelineAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::Pipeline, Dispatch&gt;" />
    <method name="createRayTracingPipelineKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRayTracingShaderGroupHandlesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRayTracingShaderGroupHandlesKHR" template_raw="template &lt;typename DataType, typename DataTypeAllocator = std::allocator&lt;DataType&gt;" />
    <method name="getRayTracingShaderGroupHandleKHR" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRayTracingCaptureReplayShaderGroupHandlesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRayTracingCaptureReplayShaderGroupHandlesKHR" template_raw="template &lt;typename DataType, typename DataTypeAllocator = std::allocator&lt;DataType&gt;" />
    <method name="getRayTracingCaptureReplayShaderGroupHandleKHR" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRayTracingShaderGroupStackSizeKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSamplerYcbcrConversionKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSamplerYcbcrConversionKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createSamplerYcbcrConversionKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroySamplerYcbcrConversionKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroySamplerYcbcrConversionKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindBufferMemory2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindBufferMemory2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindImageMemory2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindImageMemory2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageDrmFormatModifierPropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageDrmFormatModifierPropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createValidationCacheEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createValidationCacheEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createValidationCacheEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyValidationCacheEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyValidationCacheEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="mergeValidationCachesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="mergeValidationCachesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getValidationCacheDataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getValidationCacheDataEXT" template_raw="template &lt;typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="getValidationCacheDataEXT" template_raw="template &lt;typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="createAccelerationStructureNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createAccelerationStructureNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createAccelerationStructureNVUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyAccelerationStructureNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyAccelerationStructureNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureMemoryRequirementsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureMemoryRequirementsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureMemoryRequirementsNV" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindAccelerationStructureMemoryNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindAccelerationStructureMemoryNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRayTracingPipelinesNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRayTracingPipelinesNV" template_raw="template &lt;typename PipelineAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Pipeline&gt;" />
    <method name="createRayTracingPipelinesNV" template_raw="template &lt;typename PipelineAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Pipeline&gt;" />
    <method name="createRayTracingPipelineNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createRayTracingPipelinesNVUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename PipelineAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::Pipeline, Dispatch&gt;" />
    <method name="createRayTracingPipelinesNVUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename PipelineAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::Pipeline, Dispatch&gt;" />
    <method name="createRayTracingPipelineNVUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRayTracingShaderGroupHandlesNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRayTracingShaderGroupHandlesNV" template_raw="template &lt;typename DataType, typename DataTypeAllocator = std::allocator&lt;DataType&gt;" />
    <method name="getRayTracingShaderGroupHandleNV" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureHandleNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureHandleNV" template_raw="template &lt;typename DataType, typename DataTypeAllocator = std::allocator&lt;DataType&gt;" />
    <method name="getAccelerationStructureHandleNV" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="compileDeferredNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetLayoutSupportKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetLayoutSupportKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetLayoutSupportKHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryHostPointerPropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryHostPointerPropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCalibratedTimestampsEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCalibratedTimestampsEXT" template_raw="template &lt;typename Uint64_tAllocator = std::allocator&lt;uint64_t&gt;" />
    <method name="getCalibratedTimestampsEXT" template_raw="template &lt;typename Uint64_tAllocator = std::allocator&lt;uint64_t&gt;" />
    <method name="getCalibratedTimestampEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSemaphoreCounterValueKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSemaphoreCounterValueKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitSemaphoresKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitSemaphoresKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="signalSemaphoreKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="signalSemaphoreKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="initializePerformanceApiINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="initializePerformanceApiINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="uninitializePerformanceApiINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="acquirePerformanceConfigurationINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="acquirePerformanceConfigurationINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="acquirePerformanceConfigurationINTELUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="releasePerformanceConfigurationINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="release" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPerformanceParameterINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPerformanceParameterINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setLocalDimmingAMD" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferAddressEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferAddressEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitForPresentKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferAddressKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferAddressKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferOpaqueCaptureAddressKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferOpaqueCaptureAddressKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryOpaqueCaptureAddressKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryOpaqueCaptureAddressKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="resetQueryPoolEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDeferredOperationKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDeferredOperationKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDeferredOperationKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDeferredOperationKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDeferredOperationKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDeferredOperationMaxConcurrencyKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDeferredOperationResultKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="deferredOperationJoinKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelineExecutablePropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelineExecutablePropertiesKHR" template_raw="template &lt;typename PipelineExecutablePropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PipelineExecutablePropertiesKHR&gt;" />
    <method name="getPipelineExecutablePropertiesKHR" template_raw="template &lt;typename PipelineExecutablePropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PipelineExecutablePropertiesKHR&gt;" />
    <method name="getPipelineExecutableStatisticsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelineExecutableStatisticsKHR" template_raw="template &lt;typename PipelineExecutableStatisticKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticKHR&gt;" />
    <method name="getPipelineExecutableStatisticsKHR" template_raw="template &lt;typename PipelineExecutableStatisticKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticKHR&gt;" />
    <method name="getPipelineExecutableInternalRepresentationsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelineExecutableInternalRepresentationsKHR" template_raw="template &lt;typename PipelineExecutableInternalRepresentationKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PipelineExecutableInternalRepresentationKHR&gt;" />
    <method name="getPipelineExecutableInternalRepresentationsKHR" template_raw="template &lt; typename PipelineExecutableInternalRepresentationKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PipelineExecutableInternalRepresentationKHR&gt;" />
    <method name="copyMemoryToImageEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryToImageEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImageToMemoryEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImageToMemoryEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImageToImageEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyImageToImageEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="transitionImageLayoutEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="transitionImageLayoutEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSubresourceLayout2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSubresourceLayout2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSubresourceLayout2EXT" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="mapMemory2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="mapMemory2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="unmapMemory2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="unmapMemory2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="releaseSwapchainImagesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="releaseSwapchainImagesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getGeneratedCommandsMemoryRequirementsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getGeneratedCommandsMemoryRequirementsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getGeneratedCommandsMemoryRequirementsNV" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createIndirectCommandsLayoutNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createIndirectCommandsLayoutNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createIndirectCommandsLayoutNVUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyIndirectCommandsLayoutNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyIndirectCommandsLayoutNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPrivateDataSlotEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPrivateDataSlotEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createPrivateDataSlotEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyPrivateDataSlotEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyPrivateDataSlotEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setPrivateDataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPrivateDataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPrivateDataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getEncodedVideoSessionParametersKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getEncodedVideoSessionParametersKHR" template_raw="template &lt;typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="getEncodedVideoSessionParametersKHR" template_raw="template &lt;typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="getEncodedVideoSessionParametersKHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="getEncodedVideoSessionParametersKHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="getDescriptorSetLayoutSizeEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetLayoutSizeEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetLayoutBindingOffsetEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetLayoutBindingOffsetEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorEXT" template_raw="template &lt;typename DescriptorType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageViewOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageViewOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSamplerOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSamplerOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getAccelerationStructureOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFaultInfoEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFaultInfoEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSubpassShadingMaxWorkgroupSizeHUAWEI" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSubpassShadingMaxWorkgroupSizeHUAWEI" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryRemoteAddressNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryRemoteAddressNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelinePropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelinePropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createMicromapEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildMicromapsEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="buildMicromapsEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMicromapToMemoryEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMicromapToMemoryEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryToMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="copyMemoryToMicromapEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeMicromapsPropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="writeMicromapsPropertiesEXT" template_raw="template &lt;typename DataType, typename DataTypeAllocator = std::allocator&lt;DataType&gt;" />
    <method name="writeMicromapsPropertyEXT" template_raw="template &lt;typename DataType, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMicromapCompatibilityEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMicromapCompatibilityEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMicromapBuildSizesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMicromapBuildSizesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setMemoryPriorityEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirementsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirementsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getBufferMemoryRequirementsKHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirementsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirementsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageMemoryRequirementsKHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSparseMemoryRequirementsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSparseMemoryRequirementsKHR" template_raw="template &lt;typename SparseImageMemoryRequirements2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageMemoryRequirements2&gt;" />
    <method name="getImageSparseMemoryRequirementsKHR" template_raw="template &lt;typename SparseImageMemoryRequirements2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageMemoryRequirements2&gt;" />
    <method name="getDescriptorSetLayoutHostMappingInfoVALVE" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetLayoutHostMappingInfoVALVE" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetHostMappingVALVE" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDescriptorSetHostMappingVALVE" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelineIndirectMemoryRequirementsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelineIndirectMemoryRequirementsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelineIndirectMemoryRequirementsNV" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelineIndirectAddressNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPipelineIndirectAddressNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getShaderModuleIdentifierEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getShaderModuleIdentifierEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getShaderModuleCreateInfoIdentifierEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getShaderModuleCreateInfoIdentifierEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createOpticalFlowSessionNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createOpticalFlowSessionNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createOpticalFlowSessionNVUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyOpticalFlowSessionNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyOpticalFlowSessionNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindOpticalFlowSessionImageNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRenderingAreaGranularityKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getRenderingAreaGranularityKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSubresourceLayoutKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSubresourceLayoutKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSubresourceLayoutKHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSubresourceLayout2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSubresourceLayout2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageSubresourceLayout2KHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createShadersEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createShadersEXT" template_raw="template &lt;typename ShaderEXTAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::ShaderEXT&gt;" />
    <method name="createShadersEXT" template_raw="template &lt;typename ShaderEXTAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::ShaderEXT&gt;" />
    <method name="createShaderEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createShadersEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename ShaderEXTAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::ShaderEXT, Dispatch&gt;" />
    <method name="createShadersEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE, typename ShaderEXTAllocator = std::allocator&lt;UniqueHandle&lt;VULKAN_HPP_NAMESPACE::ShaderEXT, Dispatch&gt;" />
    <method name="createShaderEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyShaderEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyShaderEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getShaderBinaryDataEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getShaderBinaryDataEXT" template_raw="template &lt;typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="getShaderBinaryDataEXT" template_raw="template &lt;typename Uint8_tAllocator = std::allocator&lt;uint8_t&gt;" />
    <method name="getFramebufferTilePropertiesQCOM" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFramebufferTilePropertiesQCOM" template_raw="template &lt;typename TilePropertiesQCOMAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::TilePropertiesQCOM&gt;" />
    <method name="getFramebufferTilePropertiesQCOM" template_raw="template &lt;typename TilePropertiesQCOMAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::TilePropertiesQCOM&gt;" />
    <method name="getDynamicRenderingTilePropertiesQCOM" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDynamicRenderingTilePropertiesQCOM" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setLatencySleepModeNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setLatencySleepModeNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="latencySleepNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="latencySleepNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setLatencyMarkerNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="setLatencyMarkerNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getLatencyTimingsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getLatencyTimingsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCalibratedTimestampsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCalibratedTimestampsKHR" template_raw="template &lt;typename Uint64_tAllocator = std::allocator&lt;uint64_t&gt;" />
    <method name="getCalibratedTimestampsKHR" template_raw="template &lt;typename Uint64_tAllocator = std::allocator&lt;uint64_t&gt;" />
    <method name="getCalibratedTimestampKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <conversion_function name="operator VkDevice_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="DeviceMemory" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="DeviceMemory" />
    <constructor name="DeviceMemory">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DeviceMemory">
      <argument name="deviceMemory" type="VkDeviceMemory" />
    </constructor>
    <method name="operator=">
      <argument name="deviceMemory" type="VkDeviceMemory" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const DeviceMemory &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeviceMemory &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const DeviceMemory &amp;" />
    </method>
    <conversion_function name="operator VkDeviceMemory_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="Event" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="Event" />
    <constructor name="Event">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Event">
      <argument name="event" type="VkEvent" />
    </constructor>
    <method name="operator=">
      <argument name="event" type="VkEvent" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Event &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Event &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const Event &amp;" />
    </method>
    <conversion_function name="operator VkEvent_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="Fence" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="Fence" />
    <constructor name="Fence">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Fence">
      <argument name="fence" type="VkFence" />
    </constructor>
    <method name="operator=">
      <argument name="fence" type="VkFence" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Fence &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Fence &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const Fence &amp;" />
    </method>
    <conversion_function name="operator VkFence_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="Framebuffer" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="Framebuffer" />
    <constructor name="Framebuffer">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Framebuffer">
      <argument name="framebuffer" type="VkFramebuffer" />
    </constructor>
    <method name="operator=">
      <argument name="framebuffer" type="VkFramebuffer" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Framebuffer &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Framebuffer &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const Framebuffer &amp;" />
    </method>
    <conversion_function name="operator VkFramebuffer_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="Image" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="Image" />
    <constructor name="Image">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Image">
      <argument name="image" type="VkImage" />
    </constructor>
    <method name="operator=">
      <argument name="image" type="VkImage" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Image &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Image &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const Image &amp;" />
    </method>
    <conversion_function name="operator VkImage_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="ImageView" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="ImageView" />
    <constructor name="ImageView">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="ImageView">
      <argument name="imageView" type="VkImageView" />
    </constructor>
    <method name="operator=">
      <argument name="imageView" type="VkImageView" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const ImageView &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ImageView &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const ImageView &amp;" />
    </method>
    <conversion_function name="operator VkImageView_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="Instance" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="Instance" />
    <constructor name="Instance">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Instance">
      <argument name="instance" type="VkInstance" />
    </constructor>
    <method name="operator=">
      <argument name="instance" type="VkInstance" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Instance &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Instance &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const Instance &amp;" />
    </method>
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="enumeratePhysicalDevices" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="enumeratePhysicalDevices" template_raw="template &lt;typename PhysicalDeviceAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDevice&gt;" />
    <method name="enumeratePhysicalDevices" template_raw="template &lt;typename PhysicalDeviceAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDevice&gt;" />
    <method name="getProcAddr" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getProcAddr" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="enumeratePhysicalDeviceGroups" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="enumeratePhysicalDeviceGroups" template_raw="template &lt;typename PhysicalDeviceGroupPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDeviceGroupProperties&gt;" />
    <method name="enumeratePhysicalDeviceGroups" template_raw="template &lt;typename PhysicalDeviceGroupPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDeviceGroupProperties&gt;" />
    <method name="destroySurfaceKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroySurfaceKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDisplayPlaneSurfaceKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDisplayPlaneSurfaceKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDisplayPlaneSurfaceKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDebugReportCallbackEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDebugReportCallbackEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDebugReportCallbackEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDebugReportCallbackEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDebugReportCallbackEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="debugReportMessageEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="debugReportMessageEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="enumeratePhysicalDeviceGroupsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="enumeratePhysicalDeviceGroupsKHR" template_raw="template &lt;typename PhysicalDeviceGroupPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDeviceGroupProperties&gt;" />
    <method name="enumeratePhysicalDeviceGroupsKHR" template_raw="template &lt;typename PhysicalDeviceGroupPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDeviceGroupProperties&gt;" />
    <method name="createDebugUtilsMessengerEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDebugUtilsMessengerEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDebugUtilsMessengerEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDebugUtilsMessengerEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroyDebugUtilsMessengerEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="destroy" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="submitDebugUtilsMessageEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="submitDebugUtilsMessageEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createHeadlessSurfaceEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createHeadlessSurfaceEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createHeadlessSurfaceEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <conversion_function name="operator VkInstance_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="PhysicalDevice" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="PhysicalDevice" />
    <constructor name="PhysicalDevice">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="PhysicalDevice">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
    </constructor>
    <method name="operator=">
      <argument name="physicalDevice" type="VkPhysicalDevice" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const PhysicalDevice &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PhysicalDevice &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const PhysicalDevice &amp;" />
    </method>
    <method name="getFeatures" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFeatures" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFormatProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFormatProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageFormatProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageFormatProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueueFamilyProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueueFamilyProperties" template_raw="template &lt;typename QueueFamilyPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::QueueFamilyProperties&gt;" />
    <method name="getQueueFamilyProperties" template_raw="template &lt;typename QueueFamilyPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::QueueFamilyProperties&gt;" />
    <method name="getMemoryProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDevice" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDevice" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDeviceUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="enumerateDeviceExtensionProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="enumerateDeviceExtensionProperties" template_raw="template &lt;typename ExtensionPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::ExtensionProperties&gt;" />
    <method name="enumerateDeviceExtensionProperties" template_raw="template &lt;typename ExtensionPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::ExtensionProperties&gt;" />
    <method name="enumerateDeviceLayerProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="enumerateDeviceLayerProperties" template_raw="template &lt;typename LayerPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::LayerProperties&gt;" />
    <method name="enumerateDeviceLayerProperties" template_raw="template &lt;typename LayerPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::LayerProperties&gt;" />
    <method name="getSparseImageFormatProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSparseImageFormatProperties" template_raw="template &lt;typename SparseImageFormatPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageFormatProperties&gt;" />
    <method name="getSparseImageFormatProperties" template_raw="template &lt;typename SparseImageFormatPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageFormatProperties&gt;" />
    <method name="getFeatures2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFeatures2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFeatures2" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getProperties2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getProperties2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getProperties2" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFormatProperties2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFormatProperties2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFormatProperties2" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageFormatProperties2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageFormatProperties2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageFormatProperties2" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueueFamilyProperties2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueueFamilyProperties2" template_raw="template &lt;typename QueueFamilyProperties2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::QueueFamilyProperties2&gt;" />
    <method name="getQueueFamilyProperties2" template_raw="template &lt;typename QueueFamilyProperties2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::QueueFamilyProperties2&gt;" />
    <method name="getQueueFamilyProperties2" template_raw="template &lt;typename StructureChain, typename StructureChainAllocator = std::allocator&lt;StructureChain&gt;" />
    <method name="getQueueFamilyProperties2" template_raw="template &lt;typename StructureChain, typename StructureChainAllocator = std::allocator&lt;StructureChain&gt;" />
    <method name="getMemoryProperties2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryProperties2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryProperties2" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSparseImageFormatProperties2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSparseImageFormatProperties2" template_raw="template &lt;typename SparseImageFormatProperties2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageFormatProperties2&gt;" />
    <method name="getSparseImageFormatProperties2" template_raw="template &lt;typename SparseImageFormatProperties2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageFormatProperties2&gt;" />
    <method name="getExternalBufferProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getExternalBufferProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getExternalFenceProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getExternalFenceProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getExternalSemaphoreProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getExternalSemaphoreProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getToolProperties" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getToolProperties" template_raw="template &lt;typename PhysicalDeviceToolPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDeviceToolProperties&gt;" />
    <method name="getToolProperties" template_raw="template &lt;typename PhysicalDeviceToolPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDeviceToolProperties&gt;" />
    <method name="getSurfaceSupportKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceSupportKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceCapabilitiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceCapabilitiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceFormatsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceFormatsKHR" template_raw="template &lt;typename SurfaceFormatKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SurfaceFormatKHR&gt;" />
    <method name="getSurfaceFormatsKHR" template_raw="template &lt;typename SurfaceFormatKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SurfaceFormatKHR&gt;" />
    <method name="getSurfacePresentModesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfacePresentModesKHR" template_raw="template &lt;typename PresentModeKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PresentModeKHR&gt;" />
    <method name="getSurfacePresentModesKHR" template_raw="template &lt;typename PresentModeKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PresentModeKHR&gt;" />
    <method name="getPresentRectanglesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getPresentRectanglesKHR" template_raw="template &lt;typename Rect2DAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Rect2D&gt;" />
    <method name="getPresentRectanglesKHR" template_raw="template &lt;typename Rect2DAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::Rect2D&gt;" />
    <method name="getDisplayPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDisplayPropertiesKHR" template_raw="template &lt;typename DisplayPropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayPropertiesKHR&gt;" />
    <method name="getDisplayPropertiesKHR" template_raw="template &lt;typename DisplayPropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayPropertiesKHR&gt;" />
    <method name="getDisplayPlanePropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDisplayPlanePropertiesKHR" template_raw="template &lt;typename DisplayPlanePropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayPlanePropertiesKHR&gt;" />
    <method name="getDisplayPlanePropertiesKHR" template_raw="template &lt;typename DisplayPlanePropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayPlanePropertiesKHR&gt;" />
    <method name="getDisplayPlaneSupportedDisplaysKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDisplayPlaneSupportedDisplaysKHR" template_raw="template &lt;typename DisplayKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayKHR&gt;" />
    <method name="getDisplayPlaneSupportedDisplaysKHR" template_raw="template &lt;typename DisplayKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayKHR&gt;" />
    <method name="getDisplayModePropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDisplayModePropertiesKHR" template_raw="template &lt;typename DisplayModePropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayModePropertiesKHR&gt;" />
    <method name="getDisplayModePropertiesKHR" template_raw="template &lt;typename DisplayModePropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayModePropertiesKHR&gt;" />
    <method name="createDisplayModeKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDisplayModeKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="createDisplayModeKHRUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDisplayPlaneCapabilitiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDisplayPlaneCapabilitiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getVideoCapabilitiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getVideoCapabilitiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getVideoCapabilitiesKHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getVideoFormatPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getVideoFormatPropertiesKHR" template_raw="template &lt;typename VideoFormatPropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::VideoFormatPropertiesKHR&gt;" />
    <method name="getVideoFormatPropertiesKHR" template_raw="template &lt;typename VideoFormatPropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::VideoFormatPropertiesKHR&gt;" />
    <method name="getExternalImageFormatPropertiesNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getExternalImageFormatPropertiesNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFeatures2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFeatures2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFeatures2KHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getProperties2KHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFormatProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFormatProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFormatProperties2KHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageFormatProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageFormatProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getImageFormatProperties2KHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueueFamilyProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueueFamilyProperties2KHR" template_raw="template &lt;typename QueueFamilyProperties2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::QueueFamilyProperties2&gt;" />
    <method name="getQueueFamilyProperties2KHR" template_raw="template &lt;typename QueueFamilyProperties2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::QueueFamilyProperties2&gt;" />
    <method name="getQueueFamilyProperties2KHR" template_raw="template &lt;typename StructureChain, typename StructureChainAllocator = std::allocator&lt;StructureChain&gt;" />
    <method name="getQueueFamilyProperties2KHR" template_raw="template &lt;typename StructureChain, typename StructureChainAllocator = std::allocator&lt;StructureChain&gt;" />
    <method name="getMemoryProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMemoryProperties2KHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSparseImageFormatProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSparseImageFormatProperties2KHR" template_raw="template &lt;typename SparseImageFormatProperties2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageFormatProperties2&gt;" />
    <method name="getSparseImageFormatProperties2KHR" template_raw="template &lt;typename SparseImageFormatProperties2Allocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SparseImageFormatProperties2&gt;" />
    <method name="getExternalBufferPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getExternalBufferPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getExternalSemaphorePropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getExternalSemaphorePropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="releaseDisplayEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceCapabilities2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceCapabilities2EXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getExternalFencePropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getExternalFencePropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="enumerateQueueFamilyPerformanceQueryCountersKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="enumerateQueueFamilyPerformanceQueryCountersKHR" template_raw="template &lt;typename PerformanceCounterKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PerformanceCounterKHR&gt;" />
    <method name="enumerateQueueFamilyPerformanceQueryCountersKHR" template_raw="template &lt;typename PerformanceCounterKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PerformanceCounterKHR&gt;" />
    <method name="getQueueFamilyPerformanceQueryPassesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getQueueFamilyPerformanceQueryPassesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceCapabilities2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceCapabilities2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceCapabilities2KHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceFormats2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSurfaceFormats2KHR" template_raw="template &lt;typename SurfaceFormat2KHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SurfaceFormat2KHR&gt;" />
    <method name="getSurfaceFormats2KHR" template_raw="template &lt;typename SurfaceFormat2KHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::SurfaceFormat2KHR&gt;" />
    <method name="getSurfaceFormats2KHR" template_raw="template &lt;typename StructureChain, typename StructureChainAllocator = std::allocator&lt;StructureChain&gt;" />
    <method name="getSurfaceFormats2KHR" template_raw="template &lt;typename StructureChain, typename StructureChainAllocator = std::allocator&lt;StructureChain&gt;" />
    <method name="getDisplayProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDisplayProperties2KHR" template_raw="template &lt;typename DisplayProperties2KHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayProperties2KHR&gt;" />
    <method name="getDisplayProperties2KHR" template_raw="template &lt;typename DisplayProperties2KHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayProperties2KHR&gt;" />
    <method name="getDisplayPlaneProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDisplayPlaneProperties2KHR" template_raw="template &lt;typename DisplayPlaneProperties2KHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayPlaneProperties2KHR&gt;" />
    <method name="getDisplayPlaneProperties2KHR" template_raw="template &lt;typename DisplayPlaneProperties2KHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayPlaneProperties2KHR&gt;" />
    <method name="getDisplayModeProperties2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDisplayModeProperties2KHR" template_raw="template &lt;typename DisplayModeProperties2KHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayModeProperties2KHR&gt;" />
    <method name="getDisplayModeProperties2KHR" template_raw="template &lt;typename DisplayModeProperties2KHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::DisplayModeProperties2KHR&gt;" />
    <method name="getDisplayPlaneCapabilities2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDisplayPlaneCapabilities2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMultisamplePropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getMultisamplePropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCalibrateableTimeDomainsEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCalibrateableTimeDomainsEXT" template_raw="template &lt;typename TimeDomainKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::TimeDomainKHR&gt;" />
    <method name="getCalibrateableTimeDomainsEXT" template_raw="template &lt;typename TimeDomainKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::TimeDomainKHR&gt;" />
    <method name="getFragmentShadingRatesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getFragmentShadingRatesKHR" template_raw="template &lt;typename PhysicalDeviceFragmentShadingRateKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDeviceFragmentShadingRateKHR&gt;" />
    <method name="getFragmentShadingRatesKHR" template_raw="template &lt;typename PhysicalDeviceFragmentShadingRateKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDeviceFragmentShadingRateKHR&gt;" />
    <method name="getToolPropertiesEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getToolPropertiesEXT" template_raw="template &lt;typename PhysicalDeviceToolPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDeviceToolProperties&gt;" />
    <method name="getToolPropertiesEXT" template_raw="template &lt;typename PhysicalDeviceToolPropertiesAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::PhysicalDeviceToolProperties&gt;" />
    <method name="getCooperativeMatrixPropertiesNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCooperativeMatrixPropertiesNV" template_raw="template &lt;typename CooperativeMatrixPropertiesNVAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::CooperativeMatrixPropertiesNV&gt;" />
    <method name="getCooperativeMatrixPropertiesNV" template_raw="template &lt;typename CooperativeMatrixPropertiesNVAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::CooperativeMatrixPropertiesNV&gt;" />
    <method name="getSupportedFramebufferMixedSamplesCombinationsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getSupportedFramebufferMixedSamplesCombinationsNV" template_raw="template &lt;typename FramebufferMixedSamplesCombinationNVAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::FramebufferMixedSamplesCombinationNV&gt;" />
    <method name="getSupportedFramebufferMixedSamplesCombinationsNV" template_raw="template &lt;typename FramebufferMixedSamplesCombinationNVAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::FramebufferMixedSamplesCombinationNV&gt;" />
    <method name="acquireDrmDisplayEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDrmDisplayEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDrmDisplayEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getDrmDisplayEXTUnique" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getVideoEncodeQualityLevelPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getVideoEncodeQualityLevelPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getVideoEncodeQualityLevelPropertiesKHR" template_raw="template &lt;typename X, typename Y, typename... Z, typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getOpticalFlowImageFormatsNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getOpticalFlowImageFormatsNV" template_raw="template &lt;typename OpticalFlowImageFormatPropertiesNVAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::OpticalFlowImageFormatPropertiesNV&gt;" />
    <method name="getOpticalFlowImageFormatsNV" template_raw="template &lt;typename OpticalFlowImageFormatPropertiesNVAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::OpticalFlowImageFormatPropertiesNV&gt;" />
    <method name="getCooperativeMatrixPropertiesKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCooperativeMatrixPropertiesKHR" template_raw="template &lt;typename CooperativeMatrixPropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::CooperativeMatrixPropertiesKHR&gt;" />
    <method name="getCooperativeMatrixPropertiesKHR" template_raw="template &lt;typename CooperativeMatrixPropertiesKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::CooperativeMatrixPropertiesKHR&gt;" />
    <method name="getCalibrateableTimeDomainsKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCalibrateableTimeDomainsKHR" template_raw="template &lt;typename TimeDomainKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::TimeDomainKHR&gt;" />
    <method name="getCalibrateableTimeDomainsKHR" template_raw="template &lt;typename TimeDomainKHRAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::TimeDomainKHR&gt;" />
    <conversion_function name="operator VkPhysicalDevice_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="Pipeline" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="Pipeline" />
    <constructor name="Pipeline">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Pipeline">
      <argument name="pipeline" type="VkPipeline" />
    </constructor>
    <method name="operator=">
      <argument name="pipeline" type="VkPipeline" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Pipeline &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Pipeline &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const Pipeline &amp;" />
    </method>
    <conversion_function name="operator VkPipeline_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="PipelineCache" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="PipelineCache" />
    <constructor name="PipelineCache">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="PipelineCache">
      <argument name="pipelineCache" type="VkPipelineCache" />
    </constructor>
    <method name="operator=">
      <argument name="pipelineCache" type="VkPipelineCache" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const PipelineCache &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineCache &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const PipelineCache &amp;" />
    </method>
    <conversion_function name="operator VkPipelineCache_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="PipelineLayout" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="PipelineLayout" />
    <constructor name="PipelineLayout">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="PipelineLayout">
      <argument name="pipelineLayout" type="VkPipelineLayout" />
    </constructor>
    <method name="operator=">
      <argument name="pipelineLayout" type="VkPipelineLayout" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const PipelineLayout &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PipelineLayout &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const PipelineLayout &amp;" />
    </method>
    <conversion_function name="operator VkPipelineLayout_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="QueryPool" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="QueryPool" />
    <constructor name="QueryPool">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="QueryPool">
      <argument name="queryPool" type="VkQueryPool" />
    </constructor>
    <method name="operator=">
      <argument name="queryPool" type="VkQueryPool" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const QueryPool &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const QueryPool &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const QueryPool &amp;" />
    </method>
    <conversion_function name="operator VkQueryPool_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="Queue" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="Queue" />
    <constructor name="Queue">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Queue">
      <argument name="queue" type="VkQueue" />
    </constructor>
    <method name="operator=">
      <argument name="queue" type="VkQueue" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Queue &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Queue &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const Queue &amp;" />
    </method>
    <method name="submit" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="submit" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="waitIdle" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindSparse" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="bindSparse" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="submit2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="submit2" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="presentKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="presentKHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginDebugUtilsLabelEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="beginDebugUtilsLabelEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="endDebugUtilsLabelEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="insertDebugUtilsLabelEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="insertDebugUtilsLabelEXT" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCheckpointDataNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCheckpointDataNV" template_raw="template &lt;typename CheckpointDataNVAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::CheckpointDataNV&gt;" />
    <method name="getCheckpointDataNV" template_raw="template &lt;typename CheckpointDataNVAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::CheckpointDataNV&gt;" />
    <method name="setPerformanceConfigurationINTEL" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="submit2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="submit2KHR" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCheckpointData2NV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="getCheckpointData2NV" template_raw="template &lt;typename CheckpointData2NVAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::CheckpointData2NV&gt;" />
    <method name="getCheckpointData2NV" template_raw="template &lt;typename CheckpointData2NVAllocator = std::allocator&lt;VULKAN_HPP_NAMESPACE::CheckpointData2NV&gt;" />
    <method name="notifyOutOfBandNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <method name="notifyOutOfBandNV" template_raw="template &lt;typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
    <conversion_function name="operator VkQueue_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="RenderPass" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="RenderPass" />
    <constructor name="RenderPass">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="RenderPass">
      <argument name="renderPass" type="VkRenderPass" />
    </constructor>
    <method name="operator=">
      <argument name="renderPass" type="VkRenderPass" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const RenderPass &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const RenderPass &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const RenderPass &amp;" />
    </method>
    <conversion_function name="operator VkRenderPass_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="Sampler" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="Sampler" />
    <constructor name="Sampler">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Sampler">
      <argument name="sampler" type="VkSampler" />
    </constructor>
    <method name="operator=">
      <argument name="sampler" type="VkSampler" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Sampler &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Sampler &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const Sampler &amp;" />
    </method>
    <conversion_function name="operator VkSampler_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="Semaphore" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="Semaphore" />
    <constructor name="Semaphore">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Semaphore">
      <argument name="semaphore" type="VkSemaphore" />
    </constructor>
    <method name="operator=">
      <argument name="semaphore" type="VkSemaphore" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const Semaphore &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const Semaphore &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const Semaphore &amp;" />
    </method>
    <conversion_function name="operator VkSemaphore_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="ShaderModule" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="ShaderModule" />
    <constructor name="ShaderModule">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="ShaderModule">
      <argument name="shaderModule" type="VkShaderModule" />
    </constructor>
    <method name="operator=">
      <argument name="shaderModule" type="VkShaderModule" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const ShaderModule &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ShaderModule &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const ShaderModule &amp;" />
    </method>
    <conversion_function name="operator VkShaderModule_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="DescriptorUpdateTemplate" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="DescriptorUpdateTemplate" />
    <constructor name="DescriptorUpdateTemplate">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DescriptorUpdateTemplate">
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
    </constructor>
    <method name="operator=">
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const DescriptorUpdateTemplate &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DescriptorUpdateTemplate &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const DescriptorUpdateTemplate &amp;" />
    </method>
    <conversion_function name="operator VkDescriptorUpdateTemplate_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="SamplerYcbcrConversion" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="SamplerYcbcrConversion" />
    <constructor name="SamplerYcbcrConversion">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="SamplerYcbcrConversion">
      <argument name="samplerYcbcrConversion" type="VkSamplerYcbcrConversion" />
    </constructor>
    <method name="operator=">
      <argument name="samplerYcbcrConversion" type="VkSamplerYcbcrConversion" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const SamplerYcbcrConversion &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SamplerYcbcrConversion &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const SamplerYcbcrConversion &amp;" />
    </method>
    <conversion_function name="operator VkSamplerYcbcrConversion_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="PrivateDataSlot" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="PrivateDataSlot" />
    <constructor name="PrivateDataSlot">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="PrivateDataSlot">
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
    </constructor>
    <method name="operator=">
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const PrivateDataSlot &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PrivateDataSlot &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const PrivateDataSlot &amp;" />
    </method>
    <conversion_function name="operator VkPrivateDataSlot_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="SurfaceKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="SurfaceKHR" />
    <constructor name="SurfaceKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="SurfaceKHR">
      <argument name="surfaceKHR" type="VkSurfaceKHR" />
    </constructor>
    <method name="operator=">
      <argument name="surfaceKHR" type="VkSurfaceKHR" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const SurfaceKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SurfaceKHR &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const SurfaceKHR &amp;" />
    </method>
    <conversion_function name="operator VkSurfaceKHR_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="SwapchainKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="SwapchainKHR" />
    <constructor name="SwapchainKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="SwapchainKHR">
      <argument name="swapchainKHR" type="VkSwapchainKHR" />
    </constructor>
    <method name="operator=">
      <argument name="swapchainKHR" type="VkSwapchainKHR" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const SwapchainKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const SwapchainKHR &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const SwapchainKHR &amp;" />
    </method>
    <conversion_function name="operator VkSwapchainKHR_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="DisplayKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="DisplayKHR" />
    <constructor name="DisplayKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DisplayKHR">
      <argument name="displayKHR" type="VkDisplayKHR" />
    </constructor>
    <method name="operator=">
      <argument name="displayKHR" type="VkDisplayKHR" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const DisplayKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayKHR &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const DisplayKHR &amp;" />
    </method>
    <conversion_function name="operator VkDisplayKHR_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="DisplayModeKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="DisplayModeKHR" />
    <constructor name="DisplayModeKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DisplayModeKHR">
      <argument name="displayModeKHR" type="VkDisplayModeKHR" />
    </constructor>
    <method name="operator=">
      <argument name="displayModeKHR" type="VkDisplayModeKHR" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const DisplayModeKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DisplayModeKHR &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const DisplayModeKHR &amp;" />
    </method>
    <conversion_function name="operator VkDisplayModeKHR_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="DebugReportCallbackEXT" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="DebugReportCallbackEXT" />
    <constructor name="DebugReportCallbackEXT">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DebugReportCallbackEXT">
      <argument name="debugReportCallbackEXT" type="VkDebugReportCallbackEXT" />
    </constructor>
    <method name="operator=">
      <argument name="debugReportCallbackEXT" type="VkDebugReportCallbackEXT" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const DebugReportCallbackEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DebugReportCallbackEXT &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const DebugReportCallbackEXT &amp;" />
    </method>
    <conversion_function name="operator VkDebugReportCallbackEXT_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="VideoSessionKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="VideoSessionKHR" />
    <constructor name="VideoSessionKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="VideoSessionKHR">
      <argument name="videoSessionKHR" type="VkVideoSessionKHR" />
    </constructor>
    <method name="operator=">
      <argument name="videoSessionKHR" type="VkVideoSessionKHR" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const VideoSessionKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoSessionKHR &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const VideoSessionKHR &amp;" />
    </method>
    <conversion_function name="operator VkVideoSessionKHR_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="VideoSessionParametersKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="VideoSessionParametersKHR" />
    <constructor name="VideoSessionParametersKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="VideoSessionParametersKHR">
      <argument name="videoSessionParametersKHR" type="VkVideoSessionParametersKHR" />
    </constructor>
    <method name="operator=">
      <argument name="videoSessionParametersKHR" type="VkVideoSessionParametersKHR" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const VideoSessionParametersKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const VideoSessionParametersKHR &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const VideoSessionParametersKHR &amp;" />
    </method>
    <conversion_function name="operator VkVideoSessionParametersKHR_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="CuFunctionNVX" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="CuFunctionNVX" />
    <constructor name="CuFunctionNVX">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="CuFunctionNVX">
      <argument name="cuFunctionNVX" type="VkCuFunctionNVX" />
    </constructor>
    <method name="operator=">
      <argument name="cuFunctionNVX" type="VkCuFunctionNVX" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const CuFunctionNVX &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CuFunctionNVX &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const CuFunctionNVX &amp;" />
    </method>
    <conversion_function name="operator VkCuFunctionNVX_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="CuModuleNVX" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="CuModuleNVX" />
    <constructor name="CuModuleNVX">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="CuModuleNVX">
      <argument name="cuModuleNVX" type="VkCuModuleNVX" />
    </constructor>
    <method name="operator=">
      <argument name="cuModuleNVX" type="VkCuModuleNVX" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const CuModuleNVX &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const CuModuleNVX &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const CuModuleNVX &amp;" />
    </method>
    <conversion_function name="operator VkCuModuleNVX_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="DebugUtilsMessengerEXT" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="DebugUtilsMessengerEXT" />
    <constructor name="DebugUtilsMessengerEXT">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DebugUtilsMessengerEXT">
      <argument name="debugUtilsMessengerEXT" type="VkDebugUtilsMessengerEXT" />
    </constructor>
    <method name="operator=">
      <argument name="debugUtilsMessengerEXT" type="VkDebugUtilsMessengerEXT" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const DebugUtilsMessengerEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DebugUtilsMessengerEXT &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const DebugUtilsMessengerEXT &amp;" />
    </method>
    <conversion_function name="operator VkDebugUtilsMessengerEXT_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="AccelerationStructureKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="AccelerationStructureKHR" />
    <constructor name="AccelerationStructureKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="AccelerationStructureKHR">
      <argument name="accelerationStructureKHR" type="VkAccelerationStructureKHR" />
    </constructor>
    <method name="operator=">
      <argument name="accelerationStructureKHR" type="VkAccelerationStructureKHR" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureKHR &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const AccelerationStructureKHR &amp;" />
    </method>
    <conversion_function name="operator VkAccelerationStructureKHR_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="ValidationCacheEXT" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="ValidationCacheEXT" />
    <constructor name="ValidationCacheEXT">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="ValidationCacheEXT">
      <argument name="validationCacheEXT" type="VkValidationCacheEXT" />
    </constructor>
    <method name="operator=">
      <argument name="validationCacheEXT" type="VkValidationCacheEXT" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const ValidationCacheEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ValidationCacheEXT &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const ValidationCacheEXT &amp;" />
    </method>
    <conversion_function name="operator VkValidationCacheEXT_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="AccelerationStructureNV" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="AccelerationStructureNV" />
    <constructor name="AccelerationStructureNV">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="AccelerationStructureNV">
      <argument name="accelerationStructureNV" type="VkAccelerationStructureNV" />
    </constructor>
    <method name="operator=">
      <argument name="accelerationStructureNV" type="VkAccelerationStructureNV" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const AccelerationStructureNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const AccelerationStructureNV &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const AccelerationStructureNV &amp;" />
    </method>
    <conversion_function name="operator VkAccelerationStructureNV_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="PerformanceConfigurationINTEL" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="PerformanceConfigurationINTEL" />
    <constructor name="PerformanceConfigurationINTEL">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="PerformanceConfigurationINTEL">
      <argument name="performanceConfigurationINTEL" type="VkPerformanceConfigurationINTEL" />
    </constructor>
    <method name="operator=">
      <argument name="performanceConfigurationINTEL" type="VkPerformanceConfigurationINTEL" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const PerformanceConfigurationINTEL &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const PerformanceConfigurationINTEL &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const PerformanceConfigurationINTEL &amp;" />
    </method>
    <conversion_function name="operator VkPerformanceConfigurationINTEL_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="DeferredOperationKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="DeferredOperationKHR" />
    <constructor name="DeferredOperationKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DeferredOperationKHR">
      <argument name="deferredOperationKHR" type="VkDeferredOperationKHR" />
    </constructor>
    <method name="operator=">
      <argument name="deferredOperationKHR" type="VkDeferredOperationKHR" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const DeferredOperationKHR &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const DeferredOperationKHR &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const DeferredOperationKHR &amp;" />
    </method>
    <conversion_function name="operator VkDeferredOperationKHR_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="IndirectCommandsLayoutNV" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="IndirectCommandsLayoutNV" />
    <constructor name="IndirectCommandsLayoutNV">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="IndirectCommandsLayoutNV">
      <argument name="indirectCommandsLayoutNV" type="VkIndirectCommandsLayoutNV" />
    </constructor>
    <method name="operator=">
      <argument name="indirectCommandsLayoutNV" type="VkIndirectCommandsLayoutNV" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const IndirectCommandsLayoutNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const IndirectCommandsLayoutNV &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const IndirectCommandsLayoutNV &amp;" />
    </method>
    <conversion_function name="operator VkIndirectCommandsLayoutNV_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="MicromapEXT" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="MicromapEXT" />
    <constructor name="MicromapEXT">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="MicromapEXT">
      <argument name="micromapEXT" type="VkMicromapEXT" />
    </constructor>
    <method name="operator=">
      <argument name="micromapEXT" type="VkMicromapEXT" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const MicromapEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const MicromapEXT &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const MicromapEXT &amp;" />
    </method>
    <conversion_function name="operator VkMicromapEXT_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="OpticalFlowSessionNV" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="OpticalFlowSessionNV" />
    <constructor name="OpticalFlowSessionNV">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="OpticalFlowSessionNV">
      <argument name="opticalFlowSessionNV" type="VkOpticalFlowSessionNV" />
    </constructor>
    <method name="operator=">
      <argument name="opticalFlowSessionNV" type="VkOpticalFlowSessionNV" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const OpticalFlowSessionNV &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const OpticalFlowSessionNV &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const OpticalFlowSessionNV &amp;" />
    </method>
    <conversion_function name="operator VkOpticalFlowSessionNV_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <class name="ShaderEXT" namespace="vk" filename="vulkan/vulkan_handles.hpp">
    <constructor name="ShaderEXT" />
    <constructor name="ShaderEXT">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="ShaderEXT">
      <argument name="shaderEXT" type="VkShaderEXT" />
    </constructor>
    <method name="operator=">
      <argument name="shaderEXT" type="VkShaderEXT" />
    </method>
    <method name="operator=">
      <argument name="" type="std::nullptr_t" />
    </method>
    <method name="operator==">
      <argument name="rhs" type="const ShaderEXT &amp;" />
    </method>
    <method name="operator!=">
      <argument name="rhs" type="const ShaderEXT &amp;" />
    </method>
    <method name="operator&lt;">
      <argument name="rhs" type="const ShaderEXT &amp;" />
    </method>
    <conversion_function name="operator VkShaderEXT_T *" />
    <conversion_function name="operator bool" />
    <method name="operator!" />
  </class>
  <type_alias name="UniqueBuffer" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;Buffer, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueBufferView" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;BufferView, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueCommandBuffer" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;CommandBuffer, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueCommandPool" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;CommandPool, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueDescriptorPool" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;DescriptorPool, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueDescriptorSet" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;DescriptorSet, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueDescriptorSetLayout" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;DescriptorSetLayout, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueDevice" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;Device, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueDeviceMemory" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;DeviceMemory, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueEvent" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;Event, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueFence" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;Fence, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueFramebuffer" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;Framebuffer, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueImage" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;Image, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueImageView" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;ImageView, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueInstance" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;Instance, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniquePipeline" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;Pipeline, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniquePipelineCache" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;PipelineCache, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniquePipelineLayout" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;PipelineLayout, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueQueryPool" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;QueryPool, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueRenderPass" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;RenderPass, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueSampler" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;Sampler, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueSemaphore" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;Semaphore, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueShaderModule" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;ShaderModule, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueDescriptorUpdateTemplate" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;DescriptorUpdateTemplate, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueSamplerYcbcrConversion" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;SamplerYcbcrConversion, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniquePrivateDataSlot" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;PrivateDataSlot, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueSurfaceKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;SurfaceKHR, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueSwapchainKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;SwapchainKHR, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueDisplayKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;DisplayKHR, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueDebugReportCallbackEXT" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;DebugReportCallbackEXT, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueVideoSessionKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;VideoSessionKHR, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueVideoSessionParametersKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;VideoSessionParametersKHR, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueCuFunctionNVX" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;CuFunctionNVX, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueCuModuleNVX" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;CuModuleNVX, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueDebugUtilsMessengerEXT" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;DebugUtilsMessengerEXT, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueAccelerationStructureKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;AccelerationStructureKHR, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueValidationCacheEXT" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;ValidationCacheEXT, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueAccelerationStructureNV" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;AccelerationStructureNV, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniquePerformanceConfigurationINTEL" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;PerformanceConfigurationINTEL, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueDeferredOperationKHR" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;DeferredOperationKHR, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueIndirectCommandsLayoutNV" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;IndirectCommandsLayoutNV, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueMicromapEXT" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;MicromapEXT, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueOpticalFlowSessionNV" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;OpticalFlowSessionNV, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="UniqueShaderEXT" namespace="vk" filename="vulkan/vulkan_handles.hpp" alias_raw="UniqueHandle&lt;ShaderEXT, VULKAN_HPP_DEFAULT_DISPATCHER_TYPE&gt;" />
  <type_alias name="SharedBuffer" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;Buffer&gt;" />
  <type_alias name="SharedBufferView" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;BufferView&gt;" />
  <type_alias name="SharedCommandBuffer" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;CommandBuffer&gt;" />
  <type_alias name="SharedCommandPool" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;CommandPool&gt;" />
  <type_alias name="SharedDescriptorPool" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;DescriptorPool&gt;" />
  <type_alias name="SharedDescriptorSet" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;DescriptorSet&gt;" />
  <type_alias name="SharedDescriptorSetLayout" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;DescriptorSetLayout&gt;" />
  <type_alias name="SharedDevice" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;Device&gt;" />
  <type_alias name="SharedDeviceMemory" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;DeviceMemory&gt;" />
  <type_alias name="SharedEvent" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;Event&gt;" />
  <type_alias name="SharedFence" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;Fence&gt;" />
  <type_alias name="SharedFramebuffer" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;Framebuffer&gt;" />
  <type_alias name="SharedImage" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;Image&gt;" />
  <type_alias name="SharedImageView" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;ImageView&gt;" />
  <type_alias name="SharedInstance" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;Instance&gt;" />
  <type_alias name="SharedPhysicalDevice" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;PhysicalDevice&gt;" />
  <type_alias name="SharedPipeline" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;Pipeline&gt;" />
  <type_alias name="SharedPipelineCache" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;PipelineCache&gt;" />
  <type_alias name="SharedPipelineLayout" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;PipelineLayout&gt;" />
  <type_alias name="SharedQueryPool" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;QueryPool&gt;" />
  <type_alias name="SharedQueue" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;Queue&gt;" />
  <type_alias name="SharedRenderPass" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;RenderPass&gt;" />
  <type_alias name="SharedSampler" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;Sampler&gt;" />
  <type_alias name="SharedSemaphore" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;Semaphore&gt;" />
  <type_alias name="SharedShaderModule" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;ShaderModule&gt;" />
  <type_alias name="SharedDescriptorUpdateTemplate" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;DescriptorUpdateTemplate&gt;" />
  <type_alias name="SharedSamplerYcbcrConversion" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;SamplerYcbcrConversion&gt;" />
  <type_alias name="SharedPrivateDataSlot" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;PrivateDataSlot&gt;" />
  <type_alias name="SharedSurfaceKHR" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;SurfaceKHR&gt;" />
  <type_alias name="SharedSwapchainKHR" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;SwapchainKHR&gt;" />
  <type_alias name="SharedDisplayKHR" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;DisplayKHR&gt;" />
  <type_alias name="SharedDisplayModeKHR" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;DisplayModeKHR&gt;" />
  <type_alias name="SharedDebugReportCallbackEXT" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;DebugReportCallbackEXT&gt;" />
  <type_alias name="SharedVideoSessionKHR" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;VideoSessionKHR&gt;" />
  <type_alias name="SharedVideoSessionParametersKHR" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;VideoSessionParametersKHR&gt;" />
  <type_alias name="SharedCuFunctionNVX" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;CuFunctionNVX&gt;" />
  <type_alias name="SharedCuModuleNVX" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;CuModuleNVX&gt;" />
  <type_alias name="SharedDebugUtilsMessengerEXT" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;DebugUtilsMessengerEXT&gt;" />
  <type_alias name="SharedAccelerationStructureKHR" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;AccelerationStructureKHR&gt;" />
  <type_alias name="SharedValidationCacheEXT" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;ValidationCacheEXT&gt;" />
  <type_alias name="SharedAccelerationStructureNV" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;AccelerationStructureNV&gt;" />
  <type_alias name="SharedPerformanceConfigurationINTEL" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;PerformanceConfigurationINTEL&gt;" />
  <type_alias name="SharedDeferredOperationKHR" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;DeferredOperationKHR&gt;" />
  <type_alias name="SharedIndirectCommandsLayoutNV" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;IndirectCommandsLayoutNV&gt;" />
  <type_alias name="SharedMicromapEXT" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;MicromapEXT&gt;" />
  <type_alias name="SharedOpticalFlowSessionNV" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;OpticalFlowSessionNV&gt;" />
  <type_alias name="SharedShaderEXT" namespace="vk" filename="vulkan/vulkan_shared.hpp" alias_raw="SharedHandle&lt;ShaderEXT&gt;" />
  <class name="StructExtends" namespace="vk" filename="vulkan/vulkan.hpp" template_raw="template &lt;typename X, typename Y&gt;" />
  <class name="DynamicLoader" namespace="vk" filename="vulkan/vulkan.hpp">
    <constructor name="DynamicLoader">
      <argument name="vulkanLibraryName" type="const std::string &amp;" default_raw="{}" />
    </constructor>
    <constructor name="DynamicLoader">
      <argument name="" type="const DynamicLoader &amp;" />
    </constructor>
    <constructor name="DynamicLoader">
      <argument name="other" type="DynamicLoader &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DynamicLoader &amp;" />
    </method>
    <method name="operator=">
      <argument name="other" type="DynamicLoader &amp;&amp;" />
    </method>
    <destructor name="~DynamicLoader" />
    <method name="getProcAddress" template_raw="template &lt;typename T&gt;" />
    <method name="success" />
  </class>
  <function name="blockExtent" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
  </function>
  <function name="blockSize" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
  </function>
  <function name="compatibilityClass" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
  </function>
  <function name="componentBits" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
    <argument name="component" type="uint8_t" />
  </function>
  <function name="componentCount" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
  </function>
  <function name="componentName" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
    <argument name="component" type="uint8_t" />
  </function>
  <function name="componentNumericFormat" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
    <argument name="component" type="uint8_t" />
  </function>
  <function name="componentPlaneIndex" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
    <argument name="component" type="uint8_t" />
  </function>
  <function name="componentsAreCompressed" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
  </function>
  <function name="compressionScheme" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
  </function>
  <function name="isCompressed" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
  </function>
  <function name="packed" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
  </function>
  <function name="planeCompatibleFormat" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
    <argument name="plane" type="uint8_t" />
  </function>
  <function name="planeCount" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
  </function>
  <function name="planeHeightDivisor" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
    <argument name="plane" type="uint8_t" />
  </function>
  <function name="planeWidthDivisor" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
    <argument name="plane" type="uint8_t" />
  </function>
  <function name="texelsPerBlock" namespace="vk" filename="vulkan/vulkan_format_traits.hpp">
    <argument name="format" type="vk::Format" />
  </function>
  <class name="Context" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Context" />
    <destructor name="~Context" />
    <constructor name="Context">
      <argument name="" type="const Context &amp;" />
    </constructor>
    <constructor name="Context">
      <argument name="rhs" type="Context &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Context &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Context &amp;&amp;" />
    </method>
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Context &amp;" />
    </method>
    <method name="createInstance">
      <argument name="createInfo" type="const vk::InstanceCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="enumerateInstanceExtensionProperties">
      <argument name="layerName" type="Optional&lt;const std::string&gt;" />
    </method>
    <method name="enumerateInstanceLayerProperties" />
    <method name="enumerateInstanceVersion" />
  </class>
  <class name="ContextDispatcher" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <base name="DispatchLoaderBase" />
    <constructor name="ContextDispatcher">
      <argument name="getProcAddr" type="PFN_vkGetInstanceProcAddr" />
    </constructor>
    <field name="vkGetInstanceProcAddr" />
    <field name="vkCreateInstance" />
    <field name="vkEnumerateInstanceExtensionProperties" />
    <field name="vkEnumerateInstanceLayerProperties" />
    <field name="vkEnumerateInstanceVersion" />
  </class>
  <class name="DeviceDispatcher" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <base name="DispatchLoaderBase" />
    <constructor name="DeviceDispatcher">
      <argument name="getProcAddr" type="PFN_vkGetDeviceProcAddr" />
      <argument name="device" type="VkDevice" />
    </constructor>
    <field name="vkGetDeviceProcAddr" />
    <field name="vkDestroyDevice" />
    <field name="vkGetDeviceQueue" />
    <field name="vkQueueSubmit" />
    <field name="vkQueueWaitIdle" />
    <field name="vkDeviceWaitIdle" />
    <field name="vkAllocateMemory" />
    <field name="vkFreeMemory" />
    <field name="vkMapMemory" />
    <field name="vkUnmapMemory" />
    <field name="vkFlushMappedMemoryRanges" />
    <field name="vkInvalidateMappedMemoryRanges" />
    <field name="vkGetDeviceMemoryCommitment" />
    <field name="vkBindBufferMemory" />
    <field name="vkBindImageMemory" />
    <field name="vkGetBufferMemoryRequirements" />
    <field name="vkGetImageMemoryRequirements" />
    <field name="vkGetImageSparseMemoryRequirements" />
    <field name="vkQueueBindSparse" />
    <field name="vkCreateFence" />
    <field name="vkDestroyFence" />
    <field name="vkResetFences" />
    <field name="vkGetFenceStatus" />
    <field name="vkWaitForFences" />
    <field name="vkCreateSemaphore" />
    <field name="vkDestroySemaphore" />
    <field name="vkCreateEvent" />
    <field name="vkDestroyEvent" />
    <field name="vkGetEventStatus" />
    <field name="vkSetEvent" />
    <field name="vkResetEvent" />
    <field name="vkCreateQueryPool" />
    <field name="vkDestroyQueryPool" />
    <field name="vkGetQueryPoolResults" />
    <field name="vkCreateBuffer" />
    <field name="vkDestroyBuffer" />
    <field name="vkCreateBufferView" />
    <field name="vkDestroyBufferView" />
    <field name="vkCreateImage" />
    <field name="vkDestroyImage" />
    <field name="vkGetImageSubresourceLayout" />
    <field name="vkCreateImageView" />
    <field name="vkDestroyImageView" />
    <field name="vkCreateShaderModule" />
    <field name="vkDestroyShaderModule" />
    <field name="vkCreatePipelineCache" />
    <field name="vkDestroyPipelineCache" />
    <field name="vkGetPipelineCacheData" />
    <field name="vkMergePipelineCaches" />
    <field name="vkCreateGraphicsPipelines" />
    <field name="vkCreateComputePipelines" />
    <field name="vkDestroyPipeline" />
    <field name="vkCreatePipelineLayout" />
    <field name="vkDestroyPipelineLayout" />
    <field name="vkCreateSampler" />
    <field name="vkDestroySampler" />
    <field name="vkCreateDescriptorSetLayout" />
    <field name="vkDestroyDescriptorSetLayout" />
    <field name="vkCreateDescriptorPool" />
    <field name="vkDestroyDescriptorPool" />
    <field name="vkResetDescriptorPool" />
    <field name="vkAllocateDescriptorSets" />
    <field name="vkFreeDescriptorSets" />
    <field name="vkUpdateDescriptorSets" />
    <field name="vkCreateFramebuffer" />
    <field name="vkDestroyFramebuffer" />
    <field name="vkCreateRenderPass" />
    <field name="vkDestroyRenderPass" />
    <field name="vkGetRenderAreaGranularity" />
    <field name="vkCreateCommandPool" />
    <field name="vkDestroyCommandPool" />
    <field name="vkResetCommandPool" />
    <field name="vkAllocateCommandBuffers" />
    <field name="vkFreeCommandBuffers" />
    <field name="vkBeginCommandBuffer" />
    <field name="vkEndCommandBuffer" />
    <field name="vkResetCommandBuffer" />
    <field name="vkCmdBindPipeline" />
    <field name="vkCmdSetViewport" />
    <field name="vkCmdSetScissor" />
    <field name="vkCmdSetLineWidth" />
    <field name="vkCmdSetDepthBias" />
    <field name="vkCmdSetBlendConstants" />
    <field name="vkCmdSetDepthBounds" />
    <field name="vkCmdSetStencilCompareMask" />
    <field name="vkCmdSetStencilWriteMask" />
    <field name="vkCmdSetStencilReference" />
    <field name="vkCmdBindDescriptorSets" />
    <field name="vkCmdBindIndexBuffer" />
    <field name="vkCmdBindVertexBuffers" />
    <field name="vkCmdDraw" />
    <field name="vkCmdDrawIndexed" />
    <field name="vkCmdDrawIndirect" />
    <field name="vkCmdDrawIndexedIndirect" />
    <field name="vkCmdDispatch" />
    <field name="vkCmdDispatchIndirect" />
    <field name="vkCmdCopyBuffer" />
    <field name="vkCmdCopyImage" />
    <field name="vkCmdBlitImage" />
    <field name="vkCmdCopyBufferToImage" />
    <field name="vkCmdCopyImageToBuffer" />
    <field name="vkCmdUpdateBuffer" />
    <field name="vkCmdFillBuffer" />
    <field name="vkCmdClearColorImage" />
    <field name="vkCmdClearDepthStencilImage" />
    <field name="vkCmdClearAttachments" />
    <field name="vkCmdResolveImage" />
    <field name="vkCmdSetEvent" />
    <field name="vkCmdResetEvent" />
    <field name="vkCmdWaitEvents" />
    <field name="vkCmdPipelineBarrier" />
    <field name="vkCmdBeginQuery" />
    <field name="vkCmdEndQuery" />
    <field name="vkCmdResetQueryPool" />
    <field name="vkCmdWriteTimestamp" />
    <field name="vkCmdCopyQueryPoolResults" />
    <field name="vkCmdPushConstants" />
    <field name="vkCmdBeginRenderPass" />
    <field name="vkCmdNextSubpass" />
    <field name="vkCmdEndRenderPass" />
    <field name="vkCmdExecuteCommands" />
    <field name="vkBindBufferMemory2" />
    <field name="vkBindImageMemory2" />
    <field name="vkGetDeviceGroupPeerMemoryFeatures" />
    <field name="vkCmdSetDeviceMask" />
    <field name="vkCmdDispatchBase" />
    <field name="vkGetImageMemoryRequirements2" />
    <field name="vkGetBufferMemoryRequirements2" />
    <field name="vkGetImageSparseMemoryRequirements2" />
    <field name="vkTrimCommandPool" />
    <field name="vkGetDeviceQueue2" />
    <field name="vkCreateSamplerYcbcrConversion" />
    <field name="vkDestroySamplerYcbcrConversion" />
    <field name="vkCreateDescriptorUpdateTemplate" />
    <field name="vkDestroyDescriptorUpdateTemplate" />
    <field name="vkUpdateDescriptorSetWithTemplate" />
    <field name="vkGetDescriptorSetLayoutSupport" />
    <field name="vkCmdDrawIndirectCount" />
    <field name="vkCmdDrawIndexedIndirectCount" />
    <field name="vkCreateRenderPass2" />
    <field name="vkCmdBeginRenderPass2" />
    <field name="vkCmdNextSubpass2" />
    <field name="vkCmdEndRenderPass2" />
    <field name="vkResetQueryPool" />
    <field name="vkGetSemaphoreCounterValue" />
    <field name="vkWaitSemaphores" />
    <field name="vkSignalSemaphore" />
    <field name="vkGetBufferDeviceAddress" />
    <field name="vkGetBufferOpaqueCaptureAddress" />
    <field name="vkGetDeviceMemoryOpaqueCaptureAddress" />
    <field name="vkCreatePrivateDataSlot" />
    <field name="vkDestroyPrivateDataSlot" />
    <field name="vkSetPrivateData" />
    <field name="vkGetPrivateData" />
    <field name="vkCmdSetEvent2" />
    <field name="vkCmdResetEvent2" />
    <field name="vkCmdWaitEvents2" />
    <field name="vkCmdPipelineBarrier2" />
    <field name="vkCmdWriteTimestamp2" />
    <field name="vkQueueSubmit2" />
    <field name="vkCmdCopyBuffer2" />
    <field name="vkCmdCopyImage2" />
    <field name="vkCmdCopyBufferToImage2" />
    <field name="vkCmdCopyImageToBuffer2" />
    <field name="vkCmdBlitImage2" />
    <field name="vkCmdResolveImage2" />
    <field name="vkCmdBeginRendering" />
    <field name="vkCmdEndRendering" />
    <field name="vkCmdSetCullMode" />
    <field name="vkCmdSetFrontFace" />
    <field name="vkCmdSetPrimitiveTopology" />
    <field name="vkCmdSetViewportWithCount" />
    <field name="vkCmdSetScissorWithCount" />
    <field name="vkCmdBindVertexBuffers2" />
    <field name="vkCmdSetDepthTestEnable" />
    <field name="vkCmdSetDepthWriteEnable" />
    <field name="vkCmdSetDepthCompareOp" />
    <field name="vkCmdSetDepthBoundsTestEnable" />
    <field name="vkCmdSetStencilTestEnable" />
    <field name="vkCmdSetStencilOp" />
    <field name="vkCmdSetRasterizerDiscardEnable" />
    <field name="vkCmdSetDepthBiasEnable" />
    <field name="vkCmdSetPrimitiveRestartEnable" />
    <field name="vkGetDeviceBufferMemoryRequirements" />
    <field name="vkGetDeviceImageMemoryRequirements" />
    <field name="vkGetDeviceImageSparseMemoryRequirements" />
    <field name="vkCreateSwapchainKHR" />
    <field name="vkDestroySwapchainKHR" />
    <field name="vkGetSwapchainImagesKHR" />
    <field name="vkAcquireNextImageKHR" />
    <field name="vkQueuePresentKHR" />
    <field name="vkGetDeviceGroupPresentCapabilitiesKHR" />
    <field name="vkGetDeviceGroupSurfacePresentModesKHR" />
    <field name="vkAcquireNextImage2KHR" />
    <field name="vkCreateSharedSwapchainsKHR" />
    <field name="vkDebugMarkerSetObjectTagEXT" />
    <field name="vkDebugMarkerSetObjectNameEXT" />
    <field name="vkCmdDebugMarkerBeginEXT" />
    <field name="vkCmdDebugMarkerEndEXT" />
    <field name="vkCmdDebugMarkerInsertEXT" />
    <field name="vkCreateVideoSessionKHR" />
    <field name="vkDestroyVideoSessionKHR" />
    <field name="vkGetVideoSessionMemoryRequirementsKHR" />
    <field name="vkBindVideoSessionMemoryKHR" />
    <field name="vkCreateVideoSessionParametersKHR" />
    <field name="vkUpdateVideoSessionParametersKHR" />
    <field name="vkDestroyVideoSessionParametersKHR" />
    <field name="vkCmdBeginVideoCodingKHR" />
    <field name="vkCmdEndVideoCodingKHR" />
    <field name="vkCmdControlVideoCodingKHR" />
    <field name="vkCmdDecodeVideoKHR" />
    <field name="vkCmdBindTransformFeedbackBuffersEXT" />
    <field name="vkCmdBeginTransformFeedbackEXT" />
    <field name="vkCmdEndTransformFeedbackEXT" />
    <field name="vkCmdBeginQueryIndexedEXT" />
    <field name="vkCmdEndQueryIndexedEXT" />
    <field name="vkCmdDrawIndirectByteCountEXT" />
    <field name="vkCreateCuModuleNVX" />
    <field name="vkCreateCuFunctionNVX" />
    <field name="vkDestroyCuModuleNVX" />
    <field name="vkDestroyCuFunctionNVX" />
    <field name="vkCmdCuLaunchKernelNVX" />
    <field name="vkGetImageViewHandleNVX" />
    <field name="vkGetImageViewAddressNVX" />
    <field name="vkCmdDrawIndirectCountAMD" />
    <field name="vkCmdDrawIndexedIndirectCountAMD" />
    <field name="vkGetShaderInfoAMD" />
    <field name="vkCmdBeginRenderingKHR" />
    <field name="vkCmdEndRenderingKHR" />
    <field name="vkGetMemoryWin32HandleNV_placeholder" />
    <field name="vkGetDeviceGroupPeerMemoryFeaturesKHR" />
    <field name="vkCmdSetDeviceMaskKHR" />
    <field name="vkCmdDispatchBaseKHR" />
    <field name="vkTrimCommandPoolKHR" />
    <field name="vkGetMemoryWin32HandleKHR_placeholder" />
    <field name="vkGetMemoryWin32HandlePropertiesKHR_placeholder" />
    <field name="vkGetMemoryFdKHR" />
    <field name="vkGetMemoryFdPropertiesKHR" />
    <field name="vkImportSemaphoreWin32HandleKHR_placeholder" />
    <field name="vkGetSemaphoreWin32HandleKHR_placeholder" />
    <field name="vkImportSemaphoreFdKHR" />
    <field name="vkGetSemaphoreFdKHR" />
    <field name="vkCmdPushDescriptorSetKHR" />
    <field name="vkCmdPushDescriptorSetWithTemplateKHR" />
    <field name="vkCmdBeginConditionalRenderingEXT" />
    <field name="vkCmdEndConditionalRenderingEXT" />
    <field name="vkCreateDescriptorUpdateTemplateKHR" />
    <field name="vkDestroyDescriptorUpdateTemplateKHR" />
    <field name="vkUpdateDescriptorSetWithTemplateKHR" />
    <field name="vkCmdSetViewportWScalingNV" />
    <field name="vkDisplayPowerControlEXT" />
    <field name="vkRegisterDeviceEventEXT" />
    <field name="vkRegisterDisplayEventEXT" />
    <field name="vkGetSwapchainCounterEXT" />
    <field name="vkGetRefreshCycleDurationGOOGLE" />
    <field name="vkGetPastPresentationTimingGOOGLE" />
    <field name="vkCmdSetDiscardRectangleEXT" />
    <field name="vkCmdSetDiscardRectangleEnableEXT" />
    <field name="vkCmdSetDiscardRectangleModeEXT" />
    <field name="vkSetHdrMetadataEXT" />
    <field name="vkCreateRenderPass2KHR" />
    <field name="vkCmdBeginRenderPass2KHR" />
    <field name="vkCmdNextSubpass2KHR" />
    <field name="vkCmdEndRenderPass2KHR" />
    <field name="vkGetSwapchainStatusKHR" />
    <field name="vkImportFenceWin32HandleKHR_placeholder" />
    <field name="vkGetFenceWin32HandleKHR_placeholder" />
    <field name="vkImportFenceFdKHR" />
    <field name="vkGetFenceFdKHR" />
    <field name="vkAcquireProfilingLockKHR" />
    <field name="vkReleaseProfilingLockKHR" />
    <field name="vkSetDebugUtilsObjectNameEXT" />
    <field name="vkSetDebugUtilsObjectTagEXT" />
    <field name="vkQueueBeginDebugUtilsLabelEXT" />
    <field name="vkQueueEndDebugUtilsLabelEXT" />
    <field name="vkQueueInsertDebugUtilsLabelEXT" />
    <field name="vkCmdBeginDebugUtilsLabelEXT" />
    <field name="vkCmdEndDebugUtilsLabelEXT" />
    <field name="vkCmdInsertDebugUtilsLabelEXT" />
    <field name="vkGetAndroidHardwareBufferPropertiesANDROID_placeholder" />
    <field name="vkGetMemoryAndroidHardwareBufferANDROID_placeholder" />
    <field name="vkCreateExecutionGraphPipelinesAMDX_placeholder" />
    <field name="vkGetExecutionGraphPipelineScratchSizeAMDX_placeholder" />
    <field name="vkGetExecutionGraphPipelineNodeIndexAMDX_placeholder" />
    <field name="vkCmdInitializeGraphScratchMemoryAMDX_placeholder" />
    <field name="vkCmdDispatchGraphAMDX_placeholder" />
    <field name="vkCmdDispatchGraphIndirectAMDX_placeholder" />
    <field name="vkCmdDispatchGraphIndirectCountAMDX_placeholder" />
    <field name="vkCmdSetSampleLocationsEXT" />
    <field name="vkGetImageMemoryRequirements2KHR" />
    <field name="vkGetBufferMemoryRequirements2KHR" />
    <field name="vkGetImageSparseMemoryRequirements2KHR" />
    <field name="vkCreateAccelerationStructureKHR" />
    <field name="vkDestroyAccelerationStructureKHR" />
    <field name="vkCmdBuildAccelerationStructuresKHR" />
    <field name="vkCmdBuildAccelerationStructuresIndirectKHR" />
    <field name="vkBuildAccelerationStructuresKHR" />
    <field name="vkCopyAccelerationStructureKHR" />
    <field name="vkCopyAccelerationStructureToMemoryKHR" />
    <field name="vkCopyMemoryToAccelerationStructureKHR" />
    <field name="vkWriteAccelerationStructuresPropertiesKHR" />
    <field name="vkCmdCopyAccelerationStructureKHR" />
    <field name="vkCmdCopyAccelerationStructureToMemoryKHR" />
    <field name="vkCmdCopyMemoryToAccelerationStructureKHR" />
    <field name="vkGetAccelerationStructureDeviceAddressKHR" />
    <field name="vkCmdWriteAccelerationStructuresPropertiesKHR" />
    <field name="vkGetDeviceAccelerationStructureCompatibilityKHR" />
    <field name="vkGetAccelerationStructureBuildSizesKHR" />
    <field name="vkCmdTraceRaysKHR" />
    <field name="vkCreateRayTracingPipelinesKHR" />
    <field name="vkGetRayTracingShaderGroupHandlesKHR" />
    <field name="vkGetRayTracingCaptureReplayShaderGroupHandlesKHR" />
    <field name="vkCmdTraceRaysIndirectKHR" />
    <field name="vkGetRayTracingShaderGroupStackSizeKHR" />
    <field name="vkCmdSetRayTracingPipelineStackSizeKHR" />
    <field name="vkCreateSamplerYcbcrConversionKHR" />
    <field name="vkDestroySamplerYcbcrConversionKHR" />
    <field name="vkBindBufferMemory2KHR" />
    <field name="vkBindImageMemory2KHR" />
    <field name="vkGetImageDrmFormatModifierPropertiesEXT" />
    <field name="vkCreateValidationCacheEXT" />
    <field name="vkDestroyValidationCacheEXT" />
    <field name="vkMergeValidationCachesEXT" />
    <field name="vkGetValidationCacheDataEXT" />
    <field name="vkCmdBindShadingRateImageNV" />
    <field name="vkCmdSetViewportShadingRatePaletteNV" />
    <field name="vkCmdSetCoarseSampleOrderNV" />
    <field name="vkCreateAccelerationStructureNV" />
    <field name="vkDestroyAccelerationStructureNV" />
    <field name="vkGetAccelerationStructureMemoryRequirementsNV" />
    <field name="vkBindAccelerationStructureMemoryNV" />
    <field name="vkCmdBuildAccelerationStructureNV" />
    <field name="vkCmdCopyAccelerationStructureNV" />
    <field name="vkCmdTraceRaysNV" />
    <field name="vkCreateRayTracingPipelinesNV" />
    <field name="vkGetRayTracingShaderGroupHandlesNV" />
    <field name="vkGetAccelerationStructureHandleNV" />
    <field name="vkCmdWriteAccelerationStructuresPropertiesNV" />
    <field name="vkCompileDeferredNV" />
    <field name="vkGetDescriptorSetLayoutSupportKHR" />
    <field name="vkCmdDrawIndirectCountKHR" />
    <field name="vkCmdDrawIndexedIndirectCountKHR" />
    <field name="vkGetMemoryHostPointerPropertiesEXT" />
    <field name="vkCmdWriteBufferMarkerAMD" />
    <field name="vkGetCalibratedTimestampsEXT" />
    <field name="vkCmdDrawMeshTasksNV" />
    <field name="vkCmdDrawMeshTasksIndirectNV" />
    <field name="vkCmdDrawMeshTasksIndirectCountNV" />
    <field name="vkCmdSetExclusiveScissorEnableNV" />
    <field name="vkCmdSetExclusiveScissorNV" />
    <field name="vkCmdSetCheckpointNV" />
    <field name="vkGetQueueCheckpointDataNV" />
    <field name="vkGetSemaphoreCounterValueKHR" />
    <field name="vkWaitSemaphoresKHR" />
    <field name="vkSignalSemaphoreKHR" />
    <field name="vkInitializePerformanceApiINTEL" />
    <field name="vkUninitializePerformanceApiINTEL" />
    <field name="vkCmdSetPerformanceMarkerINTEL" />
    <field name="vkCmdSetPerformanceStreamMarkerINTEL" />
    <field name="vkCmdSetPerformanceOverrideINTEL" />
    <field name="vkAcquirePerformanceConfigurationINTEL" />
    <field name="vkReleasePerformanceConfigurationINTEL" />
    <field name="vkQueueSetPerformanceConfigurationINTEL" />
    <field name="vkGetPerformanceParameterINTEL" />
    <field name="vkSetLocalDimmingAMD" />
    <field name="vkCmdSetFragmentShadingRateKHR" />
    <field name="vkGetBufferDeviceAddressEXT" />
    <field name="vkWaitForPresentKHR" />
    <field name="vkAcquireFullScreenExclusiveModeEXT_placeholder" />
    <field name="vkReleaseFullScreenExclusiveModeEXT_placeholder" />
    <field name="vkGetDeviceGroupSurfacePresentModes2EXT_placeholder" />
    <field name="vkGetBufferDeviceAddressKHR" />
    <field name="vkGetBufferOpaqueCaptureAddressKHR" />
    <field name="vkGetDeviceMemoryOpaqueCaptureAddressKHR" />
    <field name="vkCmdSetLineStippleEXT" />
    <field name="vkResetQueryPoolEXT" />
    <field name="vkCmdSetCullModeEXT" />
    <field name="vkCmdSetFrontFaceEXT" />
    <field name="vkCmdSetPrimitiveTopologyEXT" />
    <field name="vkCmdSetViewportWithCountEXT" />
    <field name="vkCmdSetScissorWithCountEXT" />
    <field name="vkCmdBindVertexBuffers2EXT" />
    <field name="vkCmdSetDepthTestEnableEXT" />
    <field name="vkCmdSetDepthWriteEnableEXT" />
    <field name="vkCmdSetDepthCompareOpEXT" />
    <field name="vkCmdSetDepthBoundsTestEnableEXT" />
    <field name="vkCmdSetStencilTestEnableEXT" />
    <field name="vkCmdSetStencilOpEXT" />
    <field name="vkCreateDeferredOperationKHR" />
    <field name="vkDestroyDeferredOperationKHR" />
    <field name="vkGetDeferredOperationMaxConcurrencyKHR" />
    <field name="vkGetDeferredOperationResultKHR" />
    <field name="vkDeferredOperationJoinKHR" />
    <field name="vkGetPipelineExecutablePropertiesKHR" />
    <field name="vkGetPipelineExecutableStatisticsKHR" />
    <field name="vkGetPipelineExecutableInternalRepresentationsKHR" />
    <field name="vkCopyMemoryToImageEXT" />
    <field name="vkCopyImageToMemoryEXT" />
    <field name="vkCopyImageToImageEXT" />
    <field name="vkTransitionImageLayoutEXT" />
    <field name="vkGetImageSubresourceLayout2EXT" />
    <field name="vkMapMemory2KHR" />
    <field name="vkUnmapMemory2KHR" />
    <field name="vkReleaseSwapchainImagesEXT" />
    <field name="vkGetGeneratedCommandsMemoryRequirementsNV" />
    <field name="vkCmdPreprocessGeneratedCommandsNV" />
    <field name="vkCmdExecuteGeneratedCommandsNV" />
    <field name="vkCmdBindPipelineShaderGroupNV" />
    <field name="vkCreateIndirectCommandsLayoutNV" />
    <field name="vkDestroyIndirectCommandsLayoutNV" />
    <field name="vkCmdSetDepthBias2EXT" />
    <field name="vkCreatePrivateDataSlotEXT" />
    <field name="vkDestroyPrivateDataSlotEXT" />
    <field name="vkSetPrivateDataEXT" />
    <field name="vkGetPrivateDataEXT" />
    <field name="vkGetEncodedVideoSessionParametersKHR" />
    <field name="vkCmdEncodeVideoKHR" />
    <field name="vkCreateCudaModuleNV_placeholder" />
    <field name="vkGetCudaModuleCacheNV_placeholder" />
    <field name="vkCreateCudaFunctionNV_placeholder" />
    <field name="vkDestroyCudaModuleNV_placeholder" />
    <field name="vkDestroyCudaFunctionNV_placeholder" />
    <field name="vkCmdCudaLaunchKernelNV_placeholder" />
    <field name="vkExportMetalObjectsEXT_placeholder" />
    <field name="vkCmdSetEvent2KHR" />
    <field name="vkCmdResetEvent2KHR" />
    <field name="vkCmdWaitEvents2KHR" />
    <field name="vkCmdPipelineBarrier2KHR" />
    <field name="vkCmdWriteTimestamp2KHR" />
    <field name="vkQueueSubmit2KHR" />
    <field name="vkCmdWriteBufferMarker2AMD" />
    <field name="vkGetQueueCheckpointData2NV" />
    <field name="vkGetDescriptorSetLayoutSizeEXT" />
    <field name="vkGetDescriptorSetLayoutBindingOffsetEXT" />
    <field name="vkGetDescriptorEXT" />
    <field name="vkCmdBindDescriptorBuffersEXT" />
    <field name="vkCmdSetDescriptorBufferOffsetsEXT" />
    <field name="vkCmdBindDescriptorBufferEmbeddedSamplersEXT" />
    <field name="vkGetBufferOpaqueCaptureDescriptorDataEXT" />
    <field name="vkGetImageOpaqueCaptureDescriptorDataEXT" />
    <field name="vkGetImageViewOpaqueCaptureDescriptorDataEXT" />
    <field name="vkGetSamplerOpaqueCaptureDescriptorDataEXT" />
    <field name="vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT" />
    <field name="vkCmdSetFragmentShadingRateEnumNV" />
    <field name="vkCmdDrawMeshTasksEXT" />
    <field name="vkCmdDrawMeshTasksIndirectEXT" />
    <field name="vkCmdDrawMeshTasksIndirectCountEXT" />
    <field name="vkCmdCopyBuffer2KHR" />
    <field name="vkCmdCopyImage2KHR" />
    <field name="vkCmdCopyBufferToImage2KHR" />
    <field name="vkCmdCopyImageToBuffer2KHR" />
    <field name="vkCmdBlitImage2KHR" />
    <field name="vkCmdResolveImage2KHR" />
    <field name="vkGetDeviceFaultInfoEXT" />
    <field name="vkCmdSetVertexInputEXT" />
    <field name="vkGetMemoryZirconHandleFUCHSIA_placeholder" />
    <field name="vkGetMemoryZirconHandlePropertiesFUCHSIA_placeholder" />
    <field name="vkImportSemaphoreZirconHandleFUCHSIA_placeholder" />
    <field name="vkGetSemaphoreZirconHandleFUCHSIA_placeholder" />
    <field name="vkCreateBufferCollectionFUCHSIA_placeholder" />
    <field name="vkSetBufferCollectionImageConstraintsFUCHSIA_placeholder" />
    <field name="vkSetBufferCollectionBufferConstraintsFUCHSIA_placeholder" />
    <field name="vkDestroyBufferCollectionFUCHSIA_placeholder" />
    <field name="vkGetBufferCollectionPropertiesFUCHSIA_placeholder" />
    <field name="vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI" />
    <field name="vkCmdSubpassShadingHUAWEI" />
    <field name="vkCmdBindInvocationMaskHUAWEI" />
    <field name="vkGetMemoryRemoteAddressNV" />
    <field name="vkGetPipelinePropertiesEXT" />
    <field name="vkCmdSetPatchControlPointsEXT" />
    <field name="vkCmdSetRasterizerDiscardEnableEXT" />
    <field name="vkCmdSetDepthBiasEnableEXT" />
    <field name="vkCmdSetLogicOpEXT" />
    <field name="vkCmdSetPrimitiveRestartEnableEXT" />
    <field name="vkCmdSetColorWriteEnableEXT" />
    <field name="vkCmdTraceRaysIndirect2KHR" />
    <field name="vkCmdDrawMultiEXT" />
    <field name="vkCmdDrawMultiIndexedEXT" />
    <field name="vkCreateMicromapEXT" />
    <field name="vkDestroyMicromapEXT" />
    <field name="vkCmdBuildMicromapsEXT" />
    <field name="vkBuildMicromapsEXT" />
    <field name="vkCopyMicromapEXT" />
    <field name="vkCopyMicromapToMemoryEXT" />
    <field name="vkCopyMemoryToMicromapEXT" />
    <field name="vkWriteMicromapsPropertiesEXT" />
    <field name="vkCmdCopyMicromapEXT" />
    <field name="vkCmdCopyMicromapToMemoryEXT" />
    <field name="vkCmdCopyMemoryToMicromapEXT" />
    <field name="vkCmdWriteMicromapsPropertiesEXT" />
    <field name="vkGetDeviceMicromapCompatibilityEXT" />
    <field name="vkGetMicromapBuildSizesEXT" />
    <field name="vkCmdDrawClusterHUAWEI" />
    <field name="vkCmdDrawClusterIndirectHUAWEI" />
    <field name="vkSetDeviceMemoryPriorityEXT" />
    <field name="vkGetDeviceBufferMemoryRequirementsKHR" />
    <field name="vkGetDeviceImageMemoryRequirementsKHR" />
    <field name="vkGetDeviceImageSparseMemoryRequirementsKHR" />
    <field name="vkGetDescriptorSetLayoutHostMappingInfoVALVE" />
    <field name="vkGetDescriptorSetHostMappingVALVE" />
    <field name="vkCmdCopyMemoryIndirectNV" />
    <field name="vkCmdCopyMemoryToImageIndirectNV" />
    <field name="vkCmdDecompressMemoryNV" />
    <field name="vkCmdDecompressMemoryIndirectCountNV" />
    <field name="vkGetPipelineIndirectMemoryRequirementsNV" />
    <field name="vkCmdUpdatePipelineIndirectBufferNV" />
    <field name="vkGetPipelineIndirectDeviceAddressNV" />
    <field name="vkCmdSetTessellationDomainOriginEXT" />
    <field name="vkCmdSetDepthClampEnableEXT" />
    <field name="vkCmdSetPolygonModeEXT" />
    <field name="vkCmdSetRasterizationSamplesEXT" />
    <field name="vkCmdSetSampleMaskEXT" />
    <field name="vkCmdSetAlphaToCoverageEnableEXT" />
    <field name="vkCmdSetAlphaToOneEnableEXT" />
    <field name="vkCmdSetLogicOpEnableEXT" />
    <field name="vkCmdSetColorBlendEnableEXT" />
    <field name="vkCmdSetColorBlendEquationEXT" />
    <field name="vkCmdSetColorWriteMaskEXT" />
    <field name="vkCmdSetRasterizationStreamEXT" />
    <field name="vkCmdSetConservativeRasterizationModeEXT" />
    <field name="vkCmdSetExtraPrimitiveOverestimationSizeEXT" />
    <field name="vkCmdSetDepthClipEnableEXT" />
    <field name="vkCmdSetSampleLocationsEnableEXT" />
    <field name="vkCmdSetColorBlendAdvancedEXT" />
    <field name="vkCmdSetProvokingVertexModeEXT" />
    <field name="vkCmdSetLineRasterizationModeEXT" />
    <field name="vkCmdSetLineStippleEnableEXT" />
    <field name="vkCmdSetDepthClipNegativeOneToOneEXT" />
    <field name="vkCmdSetViewportWScalingEnableNV" />
    <field name="vkCmdSetViewportSwizzleNV" />
    <field name="vkCmdSetCoverageToColorEnableNV" />
    <field name="vkCmdSetCoverageToColorLocationNV" />
    <field name="vkCmdSetCoverageModulationModeNV" />
    <field name="vkCmdSetCoverageModulationTableEnableNV" />
    <field name="vkCmdSetCoverageModulationTableNV" />
    <field name="vkCmdSetShadingRateImageEnableNV" />
    <field name="vkCmdSetRepresentativeFragmentTestEnableNV" />
    <field name="vkCmdSetCoverageReductionModeNV" />
    <field name="vkGetShaderModuleIdentifierEXT" />
    <field name="vkGetShaderModuleCreateInfoIdentifierEXT" />
    <field name="vkCreateOpticalFlowSessionNV" />
    <field name="vkDestroyOpticalFlowSessionNV" />
    <field name="vkBindOpticalFlowSessionImageNV" />
    <field name="vkCmdOpticalFlowExecuteNV" />
    <field name="vkCmdBindIndexBuffer2KHR" />
    <field name="vkGetRenderingAreaGranularityKHR" />
    <field name="vkGetDeviceImageSubresourceLayoutKHR" />
    <field name="vkGetImageSubresourceLayout2KHR" />
    <field name="vkCreateShadersEXT" />
    <field name="vkDestroyShaderEXT" />
    <field name="vkGetShaderBinaryDataEXT" />
    <field name="vkCmdBindShadersEXT" />
    <field name="vkGetFramebufferTilePropertiesQCOM" />
    <field name="vkGetDynamicRenderingTilePropertiesQCOM" />
    <field name="vkSetLatencySleepModeNV" />
    <field name="vkLatencySleepNV" />
    <field name="vkSetLatencyMarkerNV" />
    <field name="vkGetLatencyTimingsNV" />
    <field name="vkQueueNotifyOutOfBandNV" />
    <field name="vkCmdSetAttachmentFeedbackLoopEnableEXT" />
    <field name="vkGetScreenBufferPropertiesQNX_placeholder" />
    <field name="vkGetCalibratedTimestampsKHR" />
    <field name="vkCmdBindDescriptorSets2KHR" />
    <field name="vkCmdPushConstants2KHR" />
    <field name="vkCmdPushDescriptorSet2KHR" />
    <field name="vkCmdPushDescriptorSetWithTemplate2KHR" />
    <field name="vkCmdSetDescriptorBufferOffsets2EXT" />
    <field name="vkCmdBindDescriptorBufferEmbeddedSamplers2EXT" />
  </class>
  <function name="exchange" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp" template_raw="template &lt;class T, class U = T&gt;" />
  <class name="InstanceDispatcher" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <base name="DispatchLoaderBase" />
    <constructor name="InstanceDispatcher">
      <argument name="getProcAddr" type="PFN_vkGetInstanceProcAddr" />
      <argument name="instance" type="VkInstance" />
    </constructor>
    <field name="vkDestroyInstance" />
    <field name="vkEnumeratePhysicalDevices" />
    <field name="vkGetPhysicalDeviceFeatures" />
    <field name="vkGetPhysicalDeviceFormatProperties" />
    <field name="vkGetPhysicalDeviceImageFormatProperties" />
    <field name="vkGetPhysicalDeviceProperties" />
    <field name="vkGetPhysicalDeviceQueueFamilyProperties" />
    <field name="vkGetPhysicalDeviceMemoryProperties" />
    <field name="vkGetInstanceProcAddr" />
    <field name="vkCreateDevice" />
    <field name="vkEnumerateDeviceExtensionProperties" />
    <field name="vkEnumerateDeviceLayerProperties" />
    <field name="vkGetPhysicalDeviceSparseImageFormatProperties" />
    <field name="vkEnumeratePhysicalDeviceGroups" />
    <field name="vkGetPhysicalDeviceFeatures2" />
    <field name="vkGetPhysicalDeviceProperties2" />
    <field name="vkGetPhysicalDeviceFormatProperties2" />
    <field name="vkGetPhysicalDeviceImageFormatProperties2" />
    <field name="vkGetPhysicalDeviceQueueFamilyProperties2" />
    <field name="vkGetPhysicalDeviceMemoryProperties2" />
    <field name="vkGetPhysicalDeviceSparseImageFormatProperties2" />
    <field name="vkGetPhysicalDeviceExternalBufferProperties" />
    <field name="vkGetPhysicalDeviceExternalFenceProperties" />
    <field name="vkGetPhysicalDeviceExternalSemaphoreProperties" />
    <field name="vkGetPhysicalDeviceToolProperties" />
    <field name="vkDestroySurfaceKHR" />
    <field name="vkGetPhysicalDeviceSurfaceSupportKHR" />
    <field name="vkGetPhysicalDeviceSurfaceCapabilitiesKHR" />
    <field name="vkGetPhysicalDeviceSurfaceFormatsKHR" />
    <field name="vkGetPhysicalDeviceSurfacePresentModesKHR" />
    <field name="vkGetPhysicalDevicePresentRectanglesKHR" />
    <field name="vkGetPhysicalDeviceDisplayPropertiesKHR" />
    <field name="vkGetPhysicalDeviceDisplayPlanePropertiesKHR" />
    <field name="vkGetDisplayPlaneSupportedDisplaysKHR" />
    <field name="vkGetDisplayModePropertiesKHR" />
    <field name="vkCreateDisplayModeKHR" />
    <field name="vkGetDisplayPlaneCapabilitiesKHR" />
    <field name="vkCreateDisplayPlaneSurfaceKHR" />
    <field name="vkCreateXlibSurfaceKHR_placeholder" />
    <field name="vkGetPhysicalDeviceXlibPresentationSupportKHR_placeholder" />
    <field name="vkCreateXcbSurfaceKHR_placeholder" />
    <field name="vkGetPhysicalDeviceXcbPresentationSupportKHR_placeholder" />
    <field name="vkCreateWaylandSurfaceKHR_placeholder" />
    <field name="vkGetPhysicalDeviceWaylandPresentationSupportKHR_placeholder" />
    <field name="vkCreateAndroidSurfaceKHR_placeholder" />
    <field name="vkCreateWin32SurfaceKHR_placeholder" />
    <field name="vkGetPhysicalDeviceWin32PresentationSupportKHR_placeholder" />
    <field name="vkCreateDebugReportCallbackEXT" />
    <field name="vkDestroyDebugReportCallbackEXT" />
    <field name="vkDebugReportMessageEXT" />
    <field name="vkGetPhysicalDeviceVideoCapabilitiesKHR" />
    <field name="vkGetPhysicalDeviceVideoFormatPropertiesKHR" />
    <field name="vkCreateStreamDescriptorSurfaceGGP_placeholder" />
    <field name="vkGetPhysicalDeviceExternalImageFormatPropertiesNV" />
    <field name="vkGetPhysicalDeviceFeatures2KHR" />
    <field name="vkGetPhysicalDeviceProperties2KHR" />
    <field name="vkGetPhysicalDeviceFormatProperties2KHR" />
    <field name="vkGetPhysicalDeviceImageFormatProperties2KHR" />
    <field name="vkGetPhysicalDeviceQueueFamilyProperties2KHR" />
    <field name="vkGetPhysicalDeviceMemoryProperties2KHR" />
    <field name="vkGetPhysicalDeviceSparseImageFormatProperties2KHR" />
    <field name="vkCreateViSurfaceNN_placeholder" />
    <field name="vkEnumeratePhysicalDeviceGroupsKHR" />
    <field name="vkGetPhysicalDeviceExternalBufferPropertiesKHR" />
    <field name="vkGetPhysicalDeviceExternalSemaphorePropertiesKHR" />
    <field name="vkReleaseDisplayEXT" />
    <field name="vkAcquireXlibDisplayEXT_placeholder" />
    <field name="vkGetRandROutputDisplayEXT_placeholder" />
    <field name="vkGetPhysicalDeviceSurfaceCapabilities2EXT" />
    <field name="vkGetPhysicalDeviceExternalFencePropertiesKHR" />
    <field name="vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR" />
    <field name="vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR" />
    <field name="vkGetPhysicalDeviceSurfaceCapabilities2KHR" />
    <field name="vkGetPhysicalDeviceSurfaceFormats2KHR" />
    <field name="vkGetPhysicalDeviceDisplayProperties2KHR" />
    <field name="vkGetPhysicalDeviceDisplayPlaneProperties2KHR" />
    <field name="vkGetDisplayModeProperties2KHR" />
    <field name="vkGetDisplayPlaneCapabilities2KHR" />
    <field name="vkCreateIOSSurfaceMVK_placeholder" />
    <field name="vkCreateMacOSSurfaceMVK_placeholder" />
    <field name="vkCreateDebugUtilsMessengerEXT" />
    <field name="vkDestroyDebugUtilsMessengerEXT" />
    <field name="vkSubmitDebugUtilsMessageEXT" />
    <field name="vkGetPhysicalDeviceMultisamplePropertiesEXT" />
    <field name="vkGetPhysicalDeviceCalibrateableTimeDomainsEXT" />
    <field name="vkCreateImagePipeSurfaceFUCHSIA_placeholder" />
    <field name="vkCreateMetalSurfaceEXT_placeholder" />
    <field name="vkGetPhysicalDeviceFragmentShadingRatesKHR" />
    <field name="vkGetPhysicalDeviceToolPropertiesEXT" />
    <field name="vkGetPhysicalDeviceCooperativeMatrixPropertiesNV" />
    <field name="vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV" />
    <field name="vkGetPhysicalDeviceSurfacePresentModes2EXT_placeholder" />
    <field name="vkCreateHeadlessSurfaceEXT" />
    <field name="vkAcquireDrmDisplayEXT" />
    <field name="vkGetDrmDisplayEXT" />
    <field name="vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR" />
    <field name="vkAcquireWinrtDisplayNV_placeholder" />
    <field name="vkGetWinrtDisplayNV_placeholder" />
    <field name="vkCreateDirectFBSurfaceEXT_placeholder" />
    <field name="vkGetPhysicalDeviceDirectFBPresentationSupportEXT_placeholder" />
    <field name="vkCreateScreenSurfaceQNX_placeholder" />
    <field name="vkGetPhysicalDeviceScreenPresentationSupportQNX_placeholder" />
    <field name="vkGetPhysicalDeviceOpticalFlowImageFormatsNV" />
    <field name="vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR" />
    <field name="vkGetPhysicalDeviceCalibrateableTimeDomainsKHR" />
    <field name="vkGetDeviceProcAddr" />
  </class>
  <class name="Buffer" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Buffer">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::BufferCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Buffer">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="buffer" type="VkBuffer" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Buffer">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~Buffer" />
    <constructor name="Buffer" />
    <constructor name="Buffer">
      <argument name="" type="const Buffer &amp;" />
    </constructor>
    <constructor name="Buffer">
      <argument name="rhs" type="Buffer &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Buffer &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Buffer &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Buffer &amp;" />
    </method>
    <method name="bindMemory">
      <argument name="memory" type="vk::DeviceMemory" />
      <argument name="memoryOffset" type="vk::DeviceSize" />
    </method>
    <method name="getMemoryRequirements" />
  </class>
  <class name="BufferView" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="BufferView">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::BufferViewCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="BufferView">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="bufferView" type="VkBufferView" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="BufferView">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~BufferView" />
    <constructor name="BufferView" />
    <constructor name="BufferView">
      <argument name="" type="const BufferView &amp;" />
    </constructor>
    <constructor name="BufferView">
      <argument name="rhs" type="BufferView &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const BufferView &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="BufferView &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::BufferView &amp;" />
    </method>
  </class>
  <class name="CommandBuffer" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="CommandBuffer">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="commandBuffer" type="VkCommandBuffer" />
      <argument name="commandPool" type="VkCommandPool" />
    </constructor>
    <constructor name="CommandBuffer">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~CommandBuffer" />
    <constructor name="CommandBuffer" />
    <constructor name="CommandBuffer">
      <argument name="" type="const CommandBuffer &amp;" />
    </constructor>
    <constructor name="CommandBuffer">
      <argument name="rhs" type="CommandBuffer &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const CommandBuffer &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="CommandBuffer &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::CommandBuffer &amp;" />
    </method>
    <method name="begin">
      <argument name="beginInfo" type="const vk::CommandBufferBeginInfo &amp;" />
    </method>
    <method name="end" />
    <method name="reset">
      <argument name="flags" type="vk::CommandBufferResetFlags" />
    </method>
    <method name="bindPipeline">
      <argument name="pipelineBindPoint" type="vk::PipelineBindPoint" />
      <argument name="pipeline" type="vk::Pipeline" />
    </method>
    <method name="setViewport">
      <argument name="firstViewport" type="uint32_t" />
      <argument name="viewports" type="const vk::ArrayProxy&lt;const vk::Viewport&gt; &amp;" />
    </method>
    <method name="setScissor">
      <argument name="firstScissor" type="uint32_t" />
      <argument name="scissors" type="const vk::ArrayProxy&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <method name="setLineWidth">
      <argument name="lineWidth" type="float" />
    </method>
    <method name="setDepthBias">
      <argument name="depthBiasConstantFactor" type="float" />
      <argument name="depthBiasClamp" type="float" />
      <argument name="depthBiasSlopeFactor" type="float" />
    </method>
    <method name="setBlendConstants">
      <argument name="blendConstants" type="const float[4]" />
    </method>
    <method name="setDepthBounds">
      <argument name="minDepthBounds" type="float" />
      <argument name="maxDepthBounds" type="float" />
    </method>
    <method name="setStencilCompareMask">
      <argument name="faceMask" type="vk::StencilFaceFlags" />
      <argument name="compareMask" type="uint32_t" />
    </method>
    <method name="setStencilWriteMask">
      <argument name="faceMask" type="vk::StencilFaceFlags" />
      <argument name="writeMask" type="uint32_t" />
    </method>
    <method name="setStencilReference">
      <argument name="faceMask" type="vk::StencilFaceFlags" />
      <argument name="reference" type="uint32_t" />
    </method>
    <method name="bindDescriptorSets">
      <argument name="pipelineBindPoint" type="vk::PipelineBindPoint" />
      <argument name="layout" type="vk::PipelineLayout" />
      <argument name="firstSet" type="uint32_t" />
      <argument name="descriptorSets" type="const vk::ArrayProxy&lt;const vk::DescriptorSet&gt; &amp;" />
      <argument name="dynamicOffsets" type="const vk::ArrayProxy&lt;const uint32_t&gt; &amp;" />
    </method>
    <method name="bindIndexBuffer">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="indexType" type="vk::IndexType" />
    </method>
    <method name="bindVertexBuffers">
      <argument name="firstBinding" type="uint32_t" />
      <argument name="buffers" type="const vk::ArrayProxy&lt;const vk::Buffer&gt; &amp;" />
      <argument name="offsets" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
    </method>
    <method name="draw">
      <argument name="vertexCount" type="uint32_t" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstVertex" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
    </method>
    <method name="drawIndexed">
      <argument name="indexCount" type="uint32_t" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstIndex" type="uint32_t" />
      <argument name="vertexOffset" type="int32_t" />
      <argument name="firstInstance" type="uint32_t" />
    </method>
    <method name="drawIndirect">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="drawIndexedIndirect">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="dispatch">
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="dispatchIndirect">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
    </method>
    <method name="copyBuffer">
      <argument name="srcBuffer" type="vk::Buffer" />
      <argument name="dstBuffer" type="vk::Buffer" />
      <argument name="regions" type="const vk::ArrayProxy&lt;const vk::BufferCopy&gt; &amp;" />
    </method>
    <method name="copyImage">
      <argument name="srcImage" type="vk::Image" />
      <argument name="srcImageLayout" type="vk::ImageLayout" />
      <argument name="dstImage" type="vk::Image" />
      <argument name="dstImageLayout" type="vk::ImageLayout" />
      <argument name="regions" type="const vk::ArrayProxy&lt;const vk::ImageCopy&gt; &amp;" />
    </method>
    <method name="blitImage">
      <argument name="srcImage" type="vk::Image" />
      <argument name="srcImageLayout" type="vk::ImageLayout" />
      <argument name="dstImage" type="vk::Image" />
      <argument name="dstImageLayout" type="vk::ImageLayout" />
      <argument name="regions" type="const vk::ArrayProxy&lt;const vk::ImageBlit&gt; &amp;" />
      <argument name="filter" type="vk::Filter" />
    </method>
    <method name="copyBufferToImage">
      <argument name="srcBuffer" type="vk::Buffer" />
      <argument name="dstImage" type="vk::Image" />
      <argument name="dstImageLayout" type="vk::ImageLayout" />
      <argument name="regions" type="const vk::ArrayProxy&lt;const vk::BufferImageCopy&gt; &amp;" />
    </method>
    <method name="copyImageToBuffer">
      <argument name="srcImage" type="vk::Image" />
      <argument name="srcImageLayout" type="vk::ImageLayout" />
      <argument name="dstBuffer" type="vk::Buffer" />
      <argument name="regions" type="const vk::ArrayProxy&lt;const vk::BufferImageCopy&gt; &amp;" />
    </method>
    <method name="updateBuffer" template_raw="template &lt;typename DataType&gt;" />
    <method name="fillBuffer">
      <argument name="dstBuffer" type="vk::Buffer" />
      <argument name="dstOffset" type="vk::DeviceSize" />
      <argument name="size" type="vk::DeviceSize" />
      <argument name="data" type="uint32_t" />
    </method>
    <method name="clearColorImage">
      <argument name="image" type="vk::Image" />
      <argument name="imageLayout" type="vk::ImageLayout" />
      <argument name="color" type="const vk::ClearColorValue &amp;" />
      <argument name="ranges" type="const vk::ArrayProxy&lt;const vk::ImageSubresourceRange&gt; &amp;" />
    </method>
    <method name="clearDepthStencilImage">
      <argument name="image" type="vk::Image" />
      <argument name="imageLayout" type="vk::ImageLayout" />
      <argument name="depthStencil" type="const vk::ClearDepthStencilValue &amp;" />
      <argument name="ranges" type="const vk::ArrayProxy&lt;const vk::ImageSubresourceRange&gt; &amp;" />
    </method>
    <method name="clearAttachments">
      <argument name="attachments" type="const vk::ArrayProxy&lt;const vk::ClearAttachment&gt; &amp;" />
      <argument name="rects" type="const vk::ArrayProxy&lt;const vk::ClearRect&gt; &amp;" />
    </method>
    <method name="resolveImage">
      <argument name="srcImage" type="vk::Image" />
      <argument name="srcImageLayout" type="vk::ImageLayout" />
      <argument name="dstImage" type="vk::Image" />
      <argument name="dstImageLayout" type="vk::ImageLayout" />
      <argument name="regions" type="const vk::ArrayProxy&lt;const vk::ImageResolve&gt; &amp;" />
    </method>
    <method name="setEvent">
      <argument name="event" type="vk::Event" />
      <argument name="stageMask" type="vk::PipelineStageFlags" />
    </method>
    <method name="resetEvent">
      <argument name="event" type="vk::Event" />
      <argument name="stageMask" type="vk::PipelineStageFlags" />
    </method>
    <method name="waitEvents">
      <argument name="events" type="const vk::ArrayProxy&lt;const vk::Event&gt; &amp;" />
      <argument name="srcStageMask" type="vk::PipelineStageFlags" />
      <argument name="dstStageMask" type="vk::PipelineStageFlags" />
      <argument name="memoryBarriers" type="const vk::ArrayProxy&lt;const vk::MemoryBarrier&gt; &amp;" />
      <argument name="bufferMemoryBarriers" type="const vk::ArrayProxy&lt;const vk::BufferMemoryBarrier&gt; &amp;" />
      <argument name="imageMemoryBarriers" type="const vk::ArrayProxy&lt;const vk::ImageMemoryBarrier&gt; &amp;" />
    </method>
    <method name="pipelineBarrier">
      <argument name="srcStageMask" type="vk::PipelineStageFlags" />
      <argument name="dstStageMask" type="vk::PipelineStageFlags" />
      <argument name="dependencyFlags" type="vk::DependencyFlags" />
      <argument name="memoryBarriers" type="const vk::ArrayProxy&lt;const vk::MemoryBarrier&gt; &amp;" />
      <argument name="bufferMemoryBarriers" type="const vk::ArrayProxy&lt;const vk::BufferMemoryBarrier&gt; &amp;" />
      <argument name="imageMemoryBarriers" type="const vk::ArrayProxy&lt;const vk::ImageMemoryBarrier&gt; &amp;" />
    </method>
    <method name="beginQuery">
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="query" type="uint32_t" />
      <argument name="flags" type="vk::QueryControlFlags" />
    </method>
    <method name="endQuery">
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="resetQueryPool">
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
    </method>
    <method name="writeTimestamp">
      <argument name="pipelineStage" type="vk::PipelineStageFlagBits" />
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="copyQueryPoolResults">
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
      <argument name="dstBuffer" type="vk::Buffer" />
      <argument name="dstOffset" type="vk::DeviceSize" />
      <argument name="stride" type="vk::DeviceSize" />
      <argument name="flags" type="vk::QueryResultFlags" />
    </method>
    <method name="pushConstants" template_raw="template &lt;typename ValuesType&gt;" />
    <method name="beginRenderPass">
      <argument name="renderPassBegin" type="const vk::RenderPassBeginInfo &amp;" />
      <argument name="contents" type="vk::SubpassContents" />
    </method>
    <method name="nextSubpass">
      <argument name="contents" type="vk::SubpassContents" />
    </method>
    <method name="endRenderPass" />
    <method name="executeCommands">
      <argument name="commandBuffers" type="const vk::ArrayProxy&lt;const vk::CommandBuffer&gt; &amp;" />
    </method>
    <method name="setDeviceMask">
      <argument name="deviceMask" type="uint32_t" />
    </method>
    <method name="dispatchBase">
      <argument name="baseGroupX" type="uint32_t" />
      <argument name="baseGroupY" type="uint32_t" />
      <argument name="baseGroupZ" type="uint32_t" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="drawIndirectCount">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="countBuffer" type="vk::Buffer" />
      <argument name="countBufferOffset" type="vk::DeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="drawIndexedIndirectCount">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="countBuffer" type="vk::Buffer" />
      <argument name="countBufferOffset" type="vk::DeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="beginRenderPass2">
      <argument name="renderPassBegin" type="const vk::RenderPassBeginInfo &amp;" />
      <argument name="subpassBeginInfo" type="const vk::SubpassBeginInfo &amp;" />
    </method>
    <method name="nextSubpass2">
      <argument name="subpassBeginInfo" type="const vk::SubpassBeginInfo &amp;" />
      <argument name="subpassEndInfo" type="const vk::SubpassEndInfo &amp;" />
    </method>
    <method name="endRenderPass2">
      <argument name="subpassEndInfo" type="const vk::SubpassEndInfo &amp;" />
    </method>
    <method name="setEvent2">
      <argument name="event" type="vk::Event" />
      <argument name="dependencyInfo" type="const vk::DependencyInfo &amp;" />
    </method>
    <method name="resetEvent2">
      <argument name="event" type="vk::Event" />
      <argument name="stageMask" type="vk::PipelineStageFlags2" />
    </method>
    <method name="waitEvents2">
      <argument name="events" type="const vk::ArrayProxy&lt;const vk::Event&gt; &amp;" />
      <argument name="dependencyInfos" type="const vk::ArrayProxy&lt;const vk::DependencyInfo&gt; &amp;" />
    </method>
    <method name="pipelineBarrier2">
      <argument name="dependencyInfo" type="const vk::DependencyInfo &amp;" />
    </method>
    <method name="writeTimestamp2">
      <argument name="stage" type="vk::PipelineStageFlags2" />
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="copyBuffer2">
      <argument name="copyBufferInfo" type="const vk::CopyBufferInfo2 &amp;" />
    </method>
    <method name="copyImage2">
      <argument name="copyImageInfo" type="const vk::CopyImageInfo2 &amp;" />
    </method>
    <method name="copyBufferToImage2">
      <argument name="copyBufferToImageInfo" type="const vk::CopyBufferToImageInfo2 &amp;" />
    </method>
    <method name="copyImageToBuffer2">
      <argument name="copyImageToBufferInfo" type="const vk::CopyImageToBufferInfo2 &amp;" />
    </method>
    <method name="blitImage2">
      <argument name="blitImageInfo" type="const vk::BlitImageInfo2 &amp;" />
    </method>
    <method name="resolveImage2">
      <argument name="resolveImageInfo" type="const vk::ResolveImageInfo2 &amp;" />
    </method>
    <method name="beginRendering">
      <argument name="renderingInfo" type="const vk::RenderingInfo &amp;" />
    </method>
    <method name="endRendering" />
    <method name="setCullMode">
      <argument name="cullMode" type="vk::CullModeFlags" />
    </method>
    <method name="setFrontFace">
      <argument name="frontFace" type="vk::FrontFace" />
    </method>
    <method name="setPrimitiveTopology">
      <argument name="primitiveTopology" type="vk::PrimitiveTopology" />
    </method>
    <method name="setViewportWithCount">
      <argument name="viewports" type="const vk::ArrayProxy&lt;const vk::Viewport&gt; &amp;" />
    </method>
    <method name="setScissorWithCount">
      <argument name="scissors" type="const vk::ArrayProxy&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <method name="bindVertexBuffers2">
      <argument name="firstBinding" type="uint32_t" />
      <argument name="buffers" type="const vk::ArrayProxy&lt;const vk::Buffer&gt; &amp;" />
      <argument name="offsets" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
      <argument name="sizes" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
      <argument name="strides" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
    </method>
    <method name="setDepthTestEnable">
      <argument name="depthTestEnable" type="vk::Bool32" />
    </method>
    <method name="setDepthWriteEnable">
      <argument name="depthWriteEnable" type="vk::Bool32" />
    </method>
    <method name="setDepthCompareOp">
      <argument name="depthCompareOp" type="vk::CompareOp" />
    </method>
    <method name="setDepthBoundsTestEnable">
      <argument name="depthBoundsTestEnable" type="vk::Bool32" />
    </method>
    <method name="setStencilTestEnable">
      <argument name="stencilTestEnable" type="vk::Bool32" />
    </method>
    <method name="setStencilOp">
      <argument name="faceMask" type="vk::StencilFaceFlags" />
      <argument name="failOp" type="vk::StencilOp" />
      <argument name="passOp" type="vk::StencilOp" />
      <argument name="depthFailOp" type="vk::StencilOp" />
      <argument name="compareOp" type="vk::CompareOp" />
    </method>
    <method name="setRasterizerDiscardEnable">
      <argument name="rasterizerDiscardEnable" type="vk::Bool32" />
    </method>
    <method name="setDepthBiasEnable">
      <argument name="depthBiasEnable" type="vk::Bool32" />
    </method>
    <method name="setPrimitiveRestartEnable">
      <argument name="primitiveRestartEnable" type="vk::Bool32" />
    </method>
    <method name="debugMarkerBeginEXT">
      <argument name="markerInfo" type="const vk::DebugMarkerMarkerInfoEXT &amp;" />
    </method>
    <method name="debugMarkerEndEXT" />
    <method name="debugMarkerInsertEXT">
      <argument name="markerInfo" type="const vk::DebugMarkerMarkerInfoEXT &amp;" />
    </method>
    <method name="beginVideoCodingKHR">
      <argument name="beginInfo" type="const vk::VideoBeginCodingInfoKHR &amp;" />
    </method>
    <method name="endVideoCodingKHR">
      <argument name="endCodingInfo" type="const vk::VideoEndCodingInfoKHR &amp;" />
    </method>
    <method name="controlVideoCodingKHR">
      <argument name="codingControlInfo" type="const vk::VideoCodingControlInfoKHR &amp;" />
    </method>
    <method name="decodeVideoKHR">
      <argument name="decodeInfo" type="const vk::VideoDecodeInfoKHR &amp;" />
    </method>
    <method name="bindTransformFeedbackBuffersEXT">
      <argument name="firstBinding" type="uint32_t" />
      <argument name="buffers" type="const vk::ArrayProxy&lt;const vk::Buffer&gt; &amp;" />
      <argument name="offsets" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
      <argument name="sizes" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
    </method>
    <method name="beginTransformFeedbackEXT">
      <argument name="firstCounterBuffer" type="uint32_t" />
      <argument name="counterBuffers" type="const vk::ArrayProxy&lt;const vk::Buffer&gt; &amp;" />
      <argument name="counterBufferOffsets" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
    </method>
    <method name="endTransformFeedbackEXT">
      <argument name="firstCounterBuffer" type="uint32_t" />
      <argument name="counterBuffers" type="const vk::ArrayProxy&lt;const vk::Buffer&gt; &amp;" />
      <argument name="counterBufferOffsets" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
    </method>
    <method name="beginQueryIndexedEXT">
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="query" type="uint32_t" />
      <argument name="flags" type="vk::QueryControlFlags" />
      <argument name="index" type="uint32_t" />
    </method>
    <method name="endQueryIndexedEXT">
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="query" type="uint32_t" />
      <argument name="index" type="uint32_t" />
    </method>
    <method name="drawIndirectByteCountEXT">
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
      <argument name="counterBuffer" type="vk::Buffer" />
      <argument name="counterBufferOffset" type="vk::DeviceSize" />
      <argument name="counterOffset" type="uint32_t" />
      <argument name="vertexStride" type="uint32_t" />
    </method>
    <method name="cuLaunchKernelNVX">
      <argument name="launchInfo" type="const vk::CuLaunchInfoNVX &amp;" />
    </method>
    <method name="drawIndirectCountAMD">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="countBuffer" type="vk::Buffer" />
      <argument name="countBufferOffset" type="vk::DeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="drawIndexedIndirectCountAMD">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="countBuffer" type="vk::Buffer" />
      <argument name="countBufferOffset" type="vk::DeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="beginRenderingKHR">
      <argument name="renderingInfo" type="const vk::RenderingInfo &amp;" />
    </method>
    <method name="endRenderingKHR" />
    <method name="setDeviceMaskKHR">
      <argument name="deviceMask" type="uint32_t" />
    </method>
    <method name="dispatchBaseKHR">
      <argument name="baseGroupX" type="uint32_t" />
      <argument name="baseGroupY" type="uint32_t" />
      <argument name="baseGroupZ" type="uint32_t" />
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="pushDescriptorSetKHR">
      <argument name="pipelineBindPoint" type="vk::PipelineBindPoint" />
      <argument name="layout" type="vk::PipelineLayout" />
      <argument name="set" type="uint32_t" />
      <argument name="descriptorWrites" type="const vk::ArrayProxy&lt;const vk::WriteDescriptorSet&gt; &amp;" />
    </method>
    <method name="pushDescriptorSetWithTemplateKHR" template_raw="template &lt;typename DataType&gt;" />
    <method name="beginConditionalRenderingEXT">
      <argument name="conditionalRenderingBegin" type="const vk::ConditionalRenderingBeginInfoEXT &amp;" />
    </method>
    <method name="endConditionalRenderingEXT" />
    <method name="setViewportWScalingNV">
      <argument name="firstViewport" type="uint32_t" />
      <argument name="viewportWScalings" type="const vk::ArrayProxy&lt;const vk::ViewportWScalingNV&gt; &amp;" />
    </method>
    <method name="setDiscardRectangleEXT">
      <argument name="firstDiscardRectangle" type="uint32_t" />
      <argument name="discardRectangles" type="const vk::ArrayProxy&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <method name="setDiscardRectangleEnableEXT">
      <argument name="discardRectangleEnable" type="vk::Bool32" />
    </method>
    <method name="setDiscardRectangleModeEXT">
      <argument name="discardRectangleMode" type="vk::DiscardRectangleModeEXT" />
    </method>
    <method name="beginRenderPass2KHR">
      <argument name="renderPassBegin" type="const vk::RenderPassBeginInfo &amp;" />
      <argument name="subpassBeginInfo" type="const vk::SubpassBeginInfo &amp;" />
    </method>
    <method name="nextSubpass2KHR">
      <argument name="subpassBeginInfo" type="const vk::SubpassBeginInfo &amp;" />
      <argument name="subpassEndInfo" type="const vk::SubpassEndInfo &amp;" />
    </method>
    <method name="endRenderPass2KHR">
      <argument name="subpassEndInfo" type="const vk::SubpassEndInfo &amp;" />
    </method>
    <method name="beginDebugUtilsLabelEXT">
      <argument name="labelInfo" type="const vk::DebugUtilsLabelEXT &amp;" />
    </method>
    <method name="endDebugUtilsLabelEXT" />
    <method name="insertDebugUtilsLabelEXT">
      <argument name="labelInfo" type="const vk::DebugUtilsLabelEXT &amp;" />
    </method>
    <method name="setSampleLocationsEXT">
      <argument name="sampleLocationsInfo" type="const vk::SampleLocationsInfoEXT &amp;" />
    </method>
    <method name="buildAccelerationStructuresKHR">
      <argument name="infos" type="const vk::ArrayProxy&lt;const vk::AccelerationStructureBuildGeometryInfoKHR&gt; &amp;" />
      <argument name="pBuildRangeInfos" type="const vk::ArrayProxy&lt;const vk::AccelerationStructureBuildRangeInfoKHR *const&gt; &amp;" />
    </method>
    <method name="buildAccelerationStructuresIndirectKHR">
      <argument name="infos" type="const vk::ArrayProxy&lt;const vk::AccelerationStructureBuildGeometryInfoKHR&gt; &amp;" />
      <argument name="indirectDeviceAddresses" type="const vk::ArrayProxy&lt;const vk::DeviceAddress&gt; &amp;" />
      <argument name="indirectStrides" type="const vk::ArrayProxy&lt;const uint32_t&gt; &amp;" />
      <argument name="pMaxPrimitiveCounts" type="const vk::ArrayProxy&lt;const uint32_t *const&gt; &amp;" />
    </method>
    <method name="copyAccelerationStructureKHR">
      <argument name="info" type="const vk::CopyAccelerationStructureInfoKHR &amp;" />
    </method>
    <method name="copyAccelerationStructureToMemoryKHR">
      <argument name="info" type="const vk::CopyAccelerationStructureToMemoryInfoKHR &amp;" />
    </method>
    <method name="copyMemoryToAccelerationStructureKHR">
      <argument name="info" type="const vk::CopyMemoryToAccelerationStructureInfoKHR &amp;" />
    </method>
    <method name="writeAccelerationStructuresPropertiesKHR">
      <argument name="accelerationStructures" type="const vk::ArrayProxy&lt;const vk::AccelerationStructureKHR&gt; &amp;" />
      <argument name="queryType" type="vk::QueryType" />
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="firstQuery" type="uint32_t" />
    </method>
    <method name="traceRaysKHR">
      <argument name="raygenShaderBindingTable" type="const vk::StridedDeviceAddressRegionKHR &amp;" />
      <argument name="missShaderBindingTable" type="const vk::StridedDeviceAddressRegionKHR &amp;" />
      <argument name="hitShaderBindingTable" type="const vk::StridedDeviceAddressRegionKHR &amp;" />
      <argument name="callableShaderBindingTable" type="const vk::StridedDeviceAddressRegionKHR &amp;" />
      <argument name="width" type="uint32_t" />
      <argument name="height" type="uint32_t" />
      <argument name="depth" type="uint32_t" />
    </method>
    <method name="traceRaysIndirectKHR">
      <argument name="raygenShaderBindingTable" type="const vk::StridedDeviceAddressRegionKHR &amp;" />
      <argument name="missShaderBindingTable" type="const vk::StridedDeviceAddressRegionKHR &amp;" />
      <argument name="hitShaderBindingTable" type="const vk::StridedDeviceAddressRegionKHR &amp;" />
      <argument name="callableShaderBindingTable" type="const vk::StridedDeviceAddressRegionKHR &amp;" />
      <argument name="indirectDeviceAddress" type="vk::DeviceAddress" />
    </method>
    <method name="setRayTracingPipelineStackSizeKHR">
      <argument name="pipelineStackSize" type="uint32_t" />
    </method>
    <method name="bindShadingRateImageNV">
      <argument name="imageView" type="vk::ImageView" />
      <argument name="imageLayout" type="vk::ImageLayout" />
    </method>
    <method name="setViewportShadingRatePaletteNV">
      <argument name="firstViewport" type="uint32_t" />
      <argument name="shadingRatePalettes" type="const vk::ArrayProxy&lt;const vk::ShadingRatePaletteNV&gt; &amp;" />
    </method>
    <method name="setCoarseSampleOrderNV">
      <argument name="sampleOrderType" type="vk::CoarseSampleOrderTypeNV" />
      <argument name="customSampleOrders" type="const vk::ArrayProxy&lt;const vk::CoarseSampleOrderCustomNV&gt; &amp;" />
    </method>
    <method name="buildAccelerationStructureNV">
      <argument name="info" type="const vk::AccelerationStructureInfoNV &amp;" />
      <argument name="instanceData" type="vk::Buffer" />
      <argument name="instanceOffset" type="vk::DeviceSize" />
      <argument name="update" type="vk::Bool32" />
      <argument name="dst" type="vk::AccelerationStructureNV" />
      <argument name="src" type="vk::AccelerationStructureNV" />
      <argument name="scratch" type="vk::Buffer" />
      <argument name="scratchOffset" type="vk::DeviceSize" />
    </method>
    <method name="copyAccelerationStructureNV">
      <argument name="dst" type="vk::AccelerationStructureNV" />
      <argument name="src" type="vk::AccelerationStructureNV" />
      <argument name="mode" type="vk::CopyAccelerationStructureModeKHR" />
    </method>
    <method name="traceRaysNV">
      <argument name="raygenShaderBindingTableBuffer" type="vk::Buffer" />
      <argument name="raygenShaderBindingOffset" type="vk::DeviceSize" />
      <argument name="missShaderBindingTableBuffer" type="vk::Buffer" />
      <argument name="missShaderBindingOffset" type="vk::DeviceSize" />
      <argument name="missShaderBindingStride" type="vk::DeviceSize" />
      <argument name="hitShaderBindingTableBuffer" type="vk::Buffer" />
      <argument name="hitShaderBindingOffset" type="vk::DeviceSize" />
      <argument name="hitShaderBindingStride" type="vk::DeviceSize" />
      <argument name="callableShaderBindingTableBuffer" type="vk::Buffer" />
      <argument name="callableShaderBindingOffset" type="vk::DeviceSize" />
      <argument name="callableShaderBindingStride" type="vk::DeviceSize" />
      <argument name="width" type="uint32_t" />
      <argument name="height" type="uint32_t" />
      <argument name="depth" type="uint32_t" />
    </method>
    <method name="writeAccelerationStructuresPropertiesNV">
      <argument name="accelerationStructures" type="const vk::ArrayProxy&lt;const vk::AccelerationStructureNV&gt; &amp;" />
      <argument name="queryType" type="vk::QueryType" />
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="firstQuery" type="uint32_t" />
    </method>
    <method name="drawIndirectCountKHR">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="countBuffer" type="vk::Buffer" />
      <argument name="countBufferOffset" type="vk::DeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="drawIndexedIndirectCountKHR">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="countBuffer" type="vk::Buffer" />
      <argument name="countBufferOffset" type="vk::DeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="writeBufferMarkerAMD">
      <argument name="pipelineStage" type="vk::PipelineStageFlagBits" />
      <argument name="dstBuffer" type="vk::Buffer" />
      <argument name="dstOffset" type="vk::DeviceSize" />
      <argument name="marker" type="uint32_t" />
    </method>
    <method name="drawMeshTasksNV">
      <argument name="taskCount" type="uint32_t" />
      <argument name="firstTask" type="uint32_t" />
    </method>
    <method name="drawMeshTasksIndirectNV">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="drawMeshTasksIndirectCountNV">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="countBuffer" type="vk::Buffer" />
      <argument name="countBufferOffset" type="vk::DeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="setExclusiveScissorEnableNV">
      <argument name="firstExclusiveScissor" type="uint32_t" />
      <argument name="exclusiveScissorEnables" type="const vk::ArrayProxy&lt;const vk::Bool32&gt; &amp;" />
    </method>
    <method name="setExclusiveScissorNV">
      <argument name="firstExclusiveScissor" type="uint32_t" />
      <argument name="exclusiveScissors" type="const vk::ArrayProxy&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <method name="setCheckpointNV" template_raw="template &lt;typename CheckpointMarkerType&gt;" />
    <method name="setPerformanceMarkerINTEL">
      <argument name="markerInfo" type="const vk::PerformanceMarkerInfoINTEL &amp;" />
    </method>
    <method name="setPerformanceStreamMarkerINTEL">
      <argument name="markerInfo" type="const vk::PerformanceStreamMarkerInfoINTEL &amp;" />
    </method>
    <method name="setPerformanceOverrideINTEL">
      <argument name="overrideInfo" type="const vk::PerformanceOverrideInfoINTEL &amp;" />
    </method>
    <method name="setFragmentShadingRateKHR">
      <argument name="fragmentSize" type="const vk::Extent2D &amp;" />
      <argument name="combinerOps" type="const vk::FragmentShadingRateCombinerOpKHR[2]" />
    </method>
    <method name="setLineStippleEXT">
      <argument name="lineStippleFactor" type="uint32_t" />
      <argument name="lineStipplePattern" type="uint16_t" />
    </method>
    <method name="setCullModeEXT">
      <argument name="cullMode" type="vk::CullModeFlags" />
    </method>
    <method name="setFrontFaceEXT">
      <argument name="frontFace" type="vk::FrontFace" />
    </method>
    <method name="setPrimitiveTopologyEXT">
      <argument name="primitiveTopology" type="vk::PrimitiveTopology" />
    </method>
    <method name="setViewportWithCountEXT">
      <argument name="viewports" type="const vk::ArrayProxy&lt;const vk::Viewport&gt; &amp;" />
    </method>
    <method name="setScissorWithCountEXT">
      <argument name="scissors" type="const vk::ArrayProxy&lt;const vk::Rect2D&gt; &amp;" />
    </method>
    <method name="bindVertexBuffers2EXT">
      <argument name="firstBinding" type="uint32_t" />
      <argument name="buffers" type="const vk::ArrayProxy&lt;const vk::Buffer&gt; &amp;" />
      <argument name="offsets" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
      <argument name="sizes" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
      <argument name="strides" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
    </method>
    <method name="setDepthTestEnableEXT">
      <argument name="depthTestEnable" type="vk::Bool32" />
    </method>
    <method name="setDepthWriteEnableEXT">
      <argument name="depthWriteEnable" type="vk::Bool32" />
    </method>
    <method name="setDepthCompareOpEXT">
      <argument name="depthCompareOp" type="vk::CompareOp" />
    </method>
    <method name="setDepthBoundsTestEnableEXT">
      <argument name="depthBoundsTestEnable" type="vk::Bool32" />
    </method>
    <method name="setStencilTestEnableEXT">
      <argument name="stencilTestEnable" type="vk::Bool32" />
    </method>
    <method name="setStencilOpEXT">
      <argument name="faceMask" type="vk::StencilFaceFlags" />
      <argument name="failOp" type="vk::StencilOp" />
      <argument name="passOp" type="vk::StencilOp" />
      <argument name="depthFailOp" type="vk::StencilOp" />
      <argument name="compareOp" type="vk::CompareOp" />
    </method>
    <method name="preprocessGeneratedCommandsNV">
      <argument name="generatedCommandsInfo" type="const vk::GeneratedCommandsInfoNV &amp;" />
    </method>
    <method name="executeGeneratedCommandsNV">
      <argument name="isPreprocessed" type="vk::Bool32" />
      <argument name="generatedCommandsInfo" type="const vk::GeneratedCommandsInfoNV &amp;" />
    </method>
    <method name="bindPipelineShaderGroupNV">
      <argument name="pipelineBindPoint" type="vk::PipelineBindPoint" />
      <argument name="pipeline" type="vk::Pipeline" />
      <argument name="groupIndex" type="uint32_t" />
    </method>
    <method name="setDepthBias2EXT">
      <argument name="depthBiasInfo" type="const vk::DepthBiasInfoEXT &amp;" />
    </method>
    <method name="encodeVideoKHR">
      <argument name="encodeInfo" type="const vk::VideoEncodeInfoKHR &amp;" />
    </method>
    <method name="setEvent2KHR">
      <argument name="event" type="vk::Event" />
      <argument name="dependencyInfo" type="const vk::DependencyInfo &amp;" />
    </method>
    <method name="resetEvent2KHR">
      <argument name="event" type="vk::Event" />
      <argument name="stageMask" type="vk::PipelineStageFlags2" />
    </method>
    <method name="waitEvents2KHR">
      <argument name="events" type="const vk::ArrayProxy&lt;const vk::Event&gt; &amp;" />
      <argument name="dependencyInfos" type="const vk::ArrayProxy&lt;const vk::DependencyInfo&gt; &amp;" />
    </method>
    <method name="pipelineBarrier2KHR">
      <argument name="dependencyInfo" type="const vk::DependencyInfo &amp;" />
    </method>
    <method name="writeTimestamp2KHR">
      <argument name="stage" type="vk::PipelineStageFlags2" />
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="query" type="uint32_t" />
    </method>
    <method name="writeBufferMarker2AMD">
      <argument name="stage" type="vk::PipelineStageFlags2" />
      <argument name="dstBuffer" type="vk::Buffer" />
      <argument name="dstOffset" type="vk::DeviceSize" />
      <argument name="marker" type="uint32_t" />
    </method>
    <method name="bindDescriptorBuffersEXT">
      <argument name="bindingInfos" type="const vk::ArrayProxy&lt;const vk::DescriptorBufferBindingInfoEXT&gt; &amp;" />
    </method>
    <method name="setDescriptorBufferOffsetsEXT">
      <argument name="pipelineBindPoint" type="vk::PipelineBindPoint" />
      <argument name="layout" type="vk::PipelineLayout" />
      <argument name="firstSet" type="uint32_t" />
      <argument name="bufferIndices" type="const vk::ArrayProxy&lt;const uint32_t&gt; &amp;" />
      <argument name="offsets" type="const vk::ArrayProxy&lt;const vk::DeviceSize&gt; &amp;" />
    </method>
    <method name="bindDescriptorBufferEmbeddedSamplersEXT">
      <argument name="pipelineBindPoint" type="vk::PipelineBindPoint" />
      <argument name="layout" type="vk::PipelineLayout" />
      <argument name="set" type="uint32_t" />
    </method>
    <method name="setFragmentShadingRateEnumNV">
      <argument name="shadingRate" type="vk::FragmentShadingRateNV" />
      <argument name="combinerOps" type="const vk::FragmentShadingRateCombinerOpKHR[2]" />
    </method>
    <method name="drawMeshTasksEXT">
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="drawMeshTasksIndirectEXT">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="drawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="drawMeshTasksIndirectCountEXT">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="countBuffer" type="vk::Buffer" />
      <argument name="countBufferOffset" type="vk::DeviceSize" />
      <argument name="maxDrawCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="copyBuffer2KHR">
      <argument name="copyBufferInfo" type="const vk::CopyBufferInfo2 &amp;" />
    </method>
    <method name="copyImage2KHR">
      <argument name="copyImageInfo" type="const vk::CopyImageInfo2 &amp;" />
    </method>
    <method name="copyBufferToImage2KHR">
      <argument name="copyBufferToImageInfo" type="const vk::CopyBufferToImageInfo2 &amp;" />
    </method>
    <method name="copyImageToBuffer2KHR">
      <argument name="copyImageToBufferInfo" type="const vk::CopyImageToBufferInfo2 &amp;" />
    </method>
    <method name="blitImage2KHR">
      <argument name="blitImageInfo" type="const vk::BlitImageInfo2 &amp;" />
    </method>
    <method name="resolveImage2KHR">
      <argument name="resolveImageInfo" type="const vk::ResolveImageInfo2 &amp;" />
    </method>
    <method name="setVertexInputEXT">
      <argument name="vertexBindingDescriptions" type="const vk::ArrayProxy&lt;const vk::VertexInputBindingDescription2EXT&gt; &amp;" />
      <argument name="vertexAttributeDescriptions" type="const vk::ArrayProxy&lt;const vk::VertexInputAttributeDescription2EXT&gt; &amp;" />
    </method>
    <method name="subpassShadingHUAWEI" />
    <method name="bindInvocationMaskHUAWEI">
      <argument name="imageView" type="vk::ImageView" />
      <argument name="imageLayout" type="vk::ImageLayout" />
    </method>
    <method name="setPatchControlPointsEXT">
      <argument name="patchControlPoints" type="uint32_t" />
    </method>
    <method name="setRasterizerDiscardEnableEXT">
      <argument name="rasterizerDiscardEnable" type="vk::Bool32" />
    </method>
    <method name="setDepthBiasEnableEXT">
      <argument name="depthBiasEnable" type="vk::Bool32" />
    </method>
    <method name="setLogicOpEXT">
      <argument name="logicOp" type="vk::LogicOp" />
    </method>
    <method name="setPrimitiveRestartEnableEXT">
      <argument name="primitiveRestartEnable" type="vk::Bool32" />
    </method>
    <method name="setColorWriteEnableEXT">
      <argument name="colorWriteEnables" type="const vk::ArrayProxy&lt;const vk::Bool32&gt; &amp;" />
    </method>
    <method name="traceRaysIndirect2KHR">
      <argument name="indirectDeviceAddress" type="vk::DeviceAddress" />
    </method>
    <method name="drawMultiEXT">
      <argument name="vertexInfo" type="const vk::StridedArrayProxy&lt;const vk::MultiDrawInfoEXT&gt; &amp;" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
    </method>
    <method name="drawMultiIndexedEXT">
      <argument name="indexInfo" type="const vk::StridedArrayProxy&lt;const vk::MultiDrawIndexedInfoEXT&gt; &amp;" />
      <argument name="instanceCount" type="uint32_t" />
      <argument name="firstInstance" type="uint32_t" />
      <argument name="vertexOffset" type="Optional&lt;const int32_t&gt;" />
    </method>
    <method name="buildMicromapsEXT">
      <argument name="infos" type="const vk::ArrayProxy&lt;const vk::MicromapBuildInfoEXT&gt; &amp;" />
    </method>
    <method name="copyMicromapEXT">
      <argument name="info" type="const vk::CopyMicromapInfoEXT &amp;" />
    </method>
    <method name="copyMicromapToMemoryEXT">
      <argument name="info" type="const vk::CopyMicromapToMemoryInfoEXT &amp;" />
    </method>
    <method name="copyMemoryToMicromapEXT">
      <argument name="info" type="const vk::CopyMemoryToMicromapInfoEXT &amp;" />
    </method>
    <method name="writeMicromapsPropertiesEXT">
      <argument name="micromaps" type="const vk::ArrayProxy&lt;const vk::MicromapEXT&gt; &amp;" />
      <argument name="queryType" type="vk::QueryType" />
      <argument name="queryPool" type="vk::QueryPool" />
      <argument name="firstQuery" type="uint32_t" />
    </method>
    <method name="drawClusterHUAWEI">
      <argument name="groupCountX" type="uint32_t" />
      <argument name="groupCountY" type="uint32_t" />
      <argument name="groupCountZ" type="uint32_t" />
    </method>
    <method name="drawClusterIndirectHUAWEI">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
    </method>
    <method name="copyMemoryIndirectNV">
      <argument name="copyBufferAddress" type="vk::DeviceAddress" />
      <argument name="copyCount" type="uint32_t" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="copyMemoryToImageIndirectNV">
      <argument name="copyBufferAddress" type="vk::DeviceAddress" />
      <argument name="stride" type="uint32_t" />
      <argument name="dstImage" type="vk::Image" />
      <argument name="dstImageLayout" type="vk::ImageLayout" />
      <argument name="imageSubresources" type="const vk::ArrayProxy&lt;const vk::ImageSubresourceLayers&gt; &amp;" />
    </method>
    <method name="decompressMemoryNV">
      <argument name="decompressMemoryRegions" type="const vk::ArrayProxy&lt;const vk::DecompressMemoryRegionNV&gt; &amp;" />
    </method>
    <method name="decompressMemoryIndirectCountNV">
      <argument name="indirectCommandsAddress" type="vk::DeviceAddress" />
      <argument name="indirectCommandsCountAddress" type="vk::DeviceAddress" />
      <argument name="stride" type="uint32_t" />
    </method>
    <method name="updatePipelineIndirectBufferNV">
      <argument name="pipelineBindPoint" type="vk::PipelineBindPoint" />
      <argument name="pipeline" type="vk::Pipeline" />
    </method>
    <method name="setTessellationDomainOriginEXT">
      <argument name="domainOrigin" type="vk::TessellationDomainOrigin" />
    </method>
    <method name="setDepthClampEnableEXT">
      <argument name="depthClampEnable" type="vk::Bool32" />
    </method>
    <method name="setPolygonModeEXT">
      <argument name="polygonMode" type="vk::PolygonMode" />
    </method>
    <method name="setRasterizationSamplesEXT">
      <argument name="rasterizationSamples" type="vk::SampleCountFlagBits" />
    </method>
    <method name="setSampleMaskEXT">
      <argument name="samples" type="vk::SampleCountFlagBits" />
      <argument name="sampleMask" type="const vk::ArrayProxy&lt;const vk::SampleMask&gt; &amp;" />
    </method>
    <method name="setAlphaToCoverageEnableEXT">
      <argument name="alphaToCoverageEnable" type="vk::Bool32" />
    </method>
    <method name="setAlphaToOneEnableEXT">
      <argument name="alphaToOneEnable" type="vk::Bool32" />
    </method>
    <method name="setLogicOpEnableEXT">
      <argument name="logicOpEnable" type="vk::Bool32" />
    </method>
    <method name="setColorBlendEnableEXT">
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="colorBlendEnables" type="const vk::ArrayProxy&lt;const vk::Bool32&gt; &amp;" />
    </method>
    <method name="setColorBlendEquationEXT">
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="colorBlendEquations" type="const vk::ArrayProxy&lt;const vk::ColorBlendEquationEXT&gt; &amp;" />
    </method>
    <method name="setColorWriteMaskEXT">
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="colorWriteMasks" type="const vk::ArrayProxy&lt;const vk::ColorComponentFlags&gt; &amp;" />
    </method>
    <method name="setRasterizationStreamEXT">
      <argument name="rasterizationStream" type="uint32_t" />
    </method>
    <method name="setConservativeRasterizationModeEXT">
      <argument name="conservativeRasterizationMode" type="vk::ConservativeRasterizationModeEXT" />
    </method>
    <method name="setExtraPrimitiveOverestimationSizeEXT">
      <argument name="extraPrimitiveOverestimationSize" type="float" />
    </method>
    <method name="setDepthClipEnableEXT">
      <argument name="depthClipEnable" type="vk::Bool32" />
    </method>
    <method name="setSampleLocationsEnableEXT">
      <argument name="sampleLocationsEnable" type="vk::Bool32" />
    </method>
    <method name="setColorBlendAdvancedEXT">
      <argument name="firstAttachment" type="uint32_t" />
      <argument name="colorBlendAdvanced" type="const vk::ArrayProxy&lt;const vk::ColorBlendAdvancedEXT&gt; &amp;" />
    </method>
    <method name="setProvokingVertexModeEXT">
      <argument name="provokingVertexMode" type="vk::ProvokingVertexModeEXT" />
    </method>
    <method name="setLineRasterizationModeEXT">
      <argument name="lineRasterizationMode" type="vk::LineRasterizationModeEXT" />
    </method>
    <method name="setLineStippleEnableEXT">
      <argument name="stippledLineEnable" type="vk::Bool32" />
    </method>
    <method name="setDepthClipNegativeOneToOneEXT">
      <argument name="negativeOneToOne" type="vk::Bool32" />
    </method>
    <method name="setViewportWScalingEnableNV">
      <argument name="viewportWScalingEnable" type="vk::Bool32" />
    </method>
    <method name="setViewportSwizzleNV">
      <argument name="firstViewport" type="uint32_t" />
      <argument name="viewportSwizzles" type="const vk::ArrayProxy&lt;const vk::ViewportSwizzleNV&gt; &amp;" />
    </method>
    <method name="setCoverageToColorEnableNV">
      <argument name="coverageToColorEnable" type="vk::Bool32" />
    </method>
    <method name="setCoverageToColorLocationNV">
      <argument name="coverageToColorLocation" type="uint32_t" />
    </method>
    <method name="setCoverageModulationModeNV">
      <argument name="coverageModulationMode" type="vk::CoverageModulationModeNV" />
    </method>
    <method name="setCoverageModulationTableEnableNV">
      <argument name="coverageModulationTableEnable" type="vk::Bool32" />
    </method>
    <method name="setCoverageModulationTableNV">
      <argument name="coverageModulationTable" type="const vk::ArrayProxy&lt;const float&gt; &amp;" />
    </method>
    <method name="setShadingRateImageEnableNV">
      <argument name="shadingRateImageEnable" type="vk::Bool32" />
    </method>
    <method name="setRepresentativeFragmentTestEnableNV">
      <argument name="representativeFragmentTestEnable" type="vk::Bool32" />
    </method>
    <method name="setCoverageReductionModeNV">
      <argument name="coverageReductionMode" type="vk::CoverageReductionModeNV" />
    </method>
    <method name="opticalFlowExecuteNV">
      <argument name="session" type="vk::OpticalFlowSessionNV" />
      <argument name="executeInfo" type="const vk::OpticalFlowExecuteInfoNV &amp;" />
    </method>
    <method name="bindIndexBuffer2KHR">
      <argument name="buffer" type="vk::Buffer" />
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="size" type="vk::DeviceSize" />
      <argument name="indexType" type="vk::IndexType" />
    </method>
    <method name="bindShadersEXT">
      <argument name="stages" type="const vk::ArrayProxy&lt;const vk::ShaderStageFlagBits&gt; &amp;" />
      <argument name="shaders" type="const vk::ArrayProxy&lt;const vk::ShaderEXT&gt; &amp;" />
    </method>
    <method name="setAttachmentFeedbackLoopEnableEXT">
      <argument name="aspectMask" type="vk::ImageAspectFlags" />
    </method>
    <method name="bindDescriptorSets2KHR">
      <argument name="bindDescriptorSetsInfo" type="const vk::BindDescriptorSetsInfoKHR &amp;" />
    </method>
    <method name="pushConstants2KHR">
      <argument name="pushConstantsInfo" type="const vk::PushConstantsInfoKHR &amp;" />
    </method>
    <method name="pushDescriptorSet2KHR">
      <argument name="pushDescriptorSetInfo" type="const vk::PushDescriptorSetInfoKHR &amp;" />
    </method>
    <method name="pushDescriptorSetWithTemplate2KHR">
      <argument name="pushDescriptorSetWithTemplateInfo" type="const vk::PushDescriptorSetWithTemplateInfoKHR &amp;" />
    </method>
    <method name="setDescriptorBufferOffsets2EXT">
      <argument name="setDescriptorBufferOffsetsInfo" type="const vk::SetDescriptorBufferOffsetsInfoEXT &amp;" />
    </method>
    <method name="bindDescriptorBufferEmbeddedSamplers2EXT">
      <argument name="bindDescriptorBufferEmbeddedSamplersInfo" type="const vk::BindDescriptorBufferEmbeddedSamplersInfoEXT &amp;" />
    </method>
  </class>
  <class name="CommandBuffers" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="CommandBuffers">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="allocateInfo" type="const vk::CommandBufferAllocateInfo &amp;" />
    </constructor>
    <constructor name="CommandBuffers">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="CommandBuffers" />
    <constructor name="CommandBuffers">
      <argument name="" type="const CommandBuffers &amp;" />
    </constructor>
    <constructor name="CommandBuffers">
      <argument name="rhs" type="CommandBuffers &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const CommandBuffers &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="CommandBuffers &amp;&amp;" />
    </method>
  </class>
  <class name="CommandPool" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="CommandPool">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::CommandPoolCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="CommandPool">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="commandPool" type="VkCommandPool" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="CommandPool">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~CommandPool" />
    <constructor name="CommandPool" />
    <constructor name="CommandPool">
      <argument name="" type="const CommandPool &amp;" />
    </constructor>
    <constructor name="CommandPool">
      <argument name="rhs" type="CommandPool &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const CommandPool &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="CommandPool &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::CommandPool &amp;" />
    </method>
    <method name="reset">
      <argument name="flags" type="vk::CommandPoolResetFlags" />
    </method>
    <method name="trim">
      <argument name="flags" type="vk::CommandPoolTrimFlags" />
    </method>
    <method name="trimKHR">
      <argument name="flags" type="vk::CommandPoolTrimFlags" />
    </method>
  </class>
  <class name="DescriptorPool" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DescriptorPool">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::DescriptorPoolCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DescriptorPool">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="descriptorPool" type="VkDescriptorPool" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DescriptorPool">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~DescriptorPool" />
    <constructor name="DescriptorPool" />
    <constructor name="DescriptorPool">
      <argument name="" type="const DescriptorPool &amp;" />
    </constructor>
    <constructor name="DescriptorPool">
      <argument name="rhs" type="DescriptorPool &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DescriptorPool &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DescriptorPool &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::DescriptorPool &amp;" />
    </method>
    <method name="reset">
      <argument name="flags" type="vk::DescriptorPoolResetFlags" />
    </method>
  </class>
  <class name="DescriptorSet" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DescriptorSet">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="descriptorSet" type="VkDescriptorSet" />
      <argument name="descriptorPool" type="VkDescriptorPool" />
    </constructor>
    <constructor name="DescriptorSet">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~DescriptorSet" />
    <constructor name="DescriptorSet" />
    <constructor name="DescriptorSet">
      <argument name="" type="const DescriptorSet &amp;" />
    </constructor>
    <constructor name="DescriptorSet">
      <argument name="rhs" type="DescriptorSet &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DescriptorSet &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DescriptorSet &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::DescriptorSet &amp;" />
    </method>
    <method name="updateWithTemplate" template_raw="template &lt;typename DataType&gt;" />
    <method name="updateWithTemplateKHR" template_raw="template &lt;typename DataType&gt;" />
    <method name="getHostMappingVALVE" />
  </class>
  <class name="DescriptorSetLayout" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DescriptorSetLayout">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::DescriptorSetLayoutCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DescriptorSetLayout">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="descriptorSetLayout" type="VkDescriptorSetLayout" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DescriptorSetLayout">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~DescriptorSetLayout" />
    <constructor name="DescriptorSetLayout" />
    <constructor name="DescriptorSetLayout">
      <argument name="" type="const DescriptorSetLayout &amp;" />
    </constructor>
    <constructor name="DescriptorSetLayout">
      <argument name="rhs" type="DescriptorSetLayout &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DescriptorSetLayout &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DescriptorSetLayout &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::DescriptorSetLayout &amp;" />
    </method>
    <method name="getSizeEXT" />
    <method name="getBindingOffsetEXT">
      <argument name="binding" type="uint32_t" />
    </method>
  </class>
  <class name="DescriptorSets" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DescriptorSets">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="allocateInfo" type="const vk::DescriptorSetAllocateInfo &amp;" />
    </constructor>
    <constructor name="DescriptorSets">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DescriptorSets" />
    <constructor name="DescriptorSets">
      <argument name="" type="const DescriptorSets &amp;" />
    </constructor>
    <constructor name="DescriptorSets">
      <argument name="rhs" type="DescriptorSets &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DescriptorSets &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DescriptorSets &amp;&amp;" />
    </method>
  </class>
  <class name="Device" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Device">
      <argument name="physicalDevice" type="const vk::raii::PhysicalDevice &amp;" />
      <argument name="createInfo" type="const vk::DeviceCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Device">
      <argument name="physicalDevice" type="const vk::raii::PhysicalDevice &amp;" />
      <argument name="device" type="VkDevice" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Device">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~Device" />
    <constructor name="Device" />
    <constructor name="Device">
      <argument name="" type="const Device &amp;" />
    </constructor>
    <constructor name="Device">
      <argument name="rhs" type="Device &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Device &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Device &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Device &amp;" />
    </method>
    <method name="getProcAddr">
      <argument name="name" type="const std::string &amp;" />
    </method>
    <method name="getQueue">
      <argument name="queueFamilyIndex" type="uint32_t" />
      <argument name="queueIndex" type="uint32_t" />
    </method>
    <method name="waitIdle" />
    <method name="allocateMemory">
      <argument name="allocateInfo" type="const vk::MemoryAllocateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="flushMappedMemoryRanges">
      <argument name="memoryRanges" type="const vk::ArrayProxy&lt;const vk::MappedMemoryRange&gt; &amp;" />
    </method>
    <method name="invalidateMappedMemoryRanges">
      <argument name="memoryRanges" type="const vk::ArrayProxy&lt;const vk::MappedMemoryRange&gt; &amp;" />
    </method>
    <method name="createFence">
      <argument name="createInfo" type="const vk::FenceCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="resetFences">
      <argument name="fences" type="const vk::ArrayProxy&lt;const vk::Fence&gt; &amp;" />
    </method>
    <method name="waitForFences">
      <argument name="fences" type="const vk::ArrayProxy&lt;const vk::Fence&gt; &amp;" />
      <argument name="waitAll" type="vk::Bool32" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="createSemaphore">
      <argument name="createInfo" type="const vk::SemaphoreCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createEvent">
      <argument name="createInfo" type="const vk::EventCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createQueryPool">
      <argument name="createInfo" type="const vk::QueryPoolCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createBuffer">
      <argument name="createInfo" type="const vk::BufferCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createBufferView">
      <argument name="createInfo" type="const vk::BufferViewCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createImage">
      <argument name="createInfo" type="const vk::ImageCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createImageView">
      <argument name="createInfo" type="const vk::ImageViewCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createShaderModule">
      <argument name="createInfo" type="const vk::ShaderModuleCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createPipelineCache">
      <argument name="createInfo" type="const vk::PipelineCacheCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createGraphicsPipelines">
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::GraphicsPipelineCreateInfo&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createGraphicsPipeline">
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfo" type="const vk::GraphicsPipelineCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createComputePipelines">
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::ComputePipelineCreateInfo&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createComputePipeline">
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfo" type="const vk::ComputePipelineCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createPipelineLayout">
      <argument name="createInfo" type="const vk::PipelineLayoutCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createSampler">
      <argument name="createInfo" type="const vk::SamplerCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createDescriptorSetLayout">
      <argument name="createInfo" type="const vk::DescriptorSetLayoutCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createDescriptorPool">
      <argument name="createInfo" type="const vk::DescriptorPoolCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="allocateDescriptorSets">
      <argument name="allocateInfo" type="const vk::DescriptorSetAllocateInfo &amp;" />
    </method>
    <method name="updateDescriptorSets">
      <argument name="descriptorWrites" type="const vk::ArrayProxy&lt;const vk::WriteDescriptorSet&gt; &amp;" />
      <argument name="descriptorCopies" type="const vk::ArrayProxy&lt;const vk::CopyDescriptorSet&gt; &amp;" />
    </method>
    <method name="createFramebuffer">
      <argument name="createInfo" type="const vk::FramebufferCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createRenderPass">
      <argument name="createInfo" type="const vk::RenderPassCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createCommandPool">
      <argument name="createInfo" type="const vk::CommandPoolCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="allocateCommandBuffers">
      <argument name="allocateInfo" type="const vk::CommandBufferAllocateInfo &amp;" />
    </method>
    <method name="bindBufferMemory2">
      <argument name="bindInfos" type="const vk::ArrayProxy&lt;const vk::BindBufferMemoryInfo&gt; &amp;" />
    </method>
    <method name="bindImageMemory2">
      <argument name="bindInfos" type="const vk::ArrayProxy&lt;const vk::BindImageMemoryInfo&gt; &amp;" />
    </method>
    <method name="getGroupPeerMemoryFeatures">
      <argument name="heapIndex" type="uint32_t" />
      <argument name="localDeviceIndex" type="uint32_t" />
      <argument name="remoteDeviceIndex" type="uint32_t" />
    </method>
    <method name="getImageMemoryRequirements2">
      <argument name="info" type="const vk::ImageMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="getImageMemoryRequirements2" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getBufferMemoryRequirements2">
      <argument name="info" type="const vk::BufferMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="getBufferMemoryRequirements2" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getImageSparseMemoryRequirements2">
      <argument name="info" type="const vk::ImageSparseMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="getQueue2">
      <argument name="queueInfo" type="const vk::DeviceQueueInfo2 &amp;" />
    </method>
    <method name="createSamplerYcbcrConversion">
      <argument name="createInfo" type="const vk::SamplerYcbcrConversionCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createDescriptorUpdateTemplate">
      <argument name="createInfo" type="const vk::DescriptorUpdateTemplateCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="getDescriptorSetLayoutSupport">
      <argument name="createInfo" type="const vk::DescriptorSetLayoutCreateInfo &amp;" />
    </method>
    <method name="getDescriptorSetLayoutSupport" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="createRenderPass2">
      <argument name="createInfo" type="const vk::RenderPassCreateInfo2 &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="waitSemaphores">
      <argument name="waitInfo" type="const vk::SemaphoreWaitInfo &amp;" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="signalSemaphore">
      <argument name="signalInfo" type="const vk::SemaphoreSignalInfo &amp;" />
    </method>
    <method name="getBufferAddress">
      <argument name="info" type="const vk::BufferDeviceAddressInfo &amp;" />
    </method>
    <method name="getBufferOpaqueCaptureAddress">
      <argument name="info" type="const vk::BufferDeviceAddressInfo &amp;" />
    </method>
    <method name="getMemoryOpaqueCaptureAddress">
      <argument name="info" type="const vk::DeviceMemoryOpaqueCaptureAddressInfo &amp;" />
    </method>
    <method name="createPrivateDataSlot">
      <argument name="createInfo" type="const vk::PrivateDataSlotCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="setPrivateData">
      <argument name="objectType_" type="vk::ObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="vk::PrivateDataSlot" />
      <argument name="data" type="uint64_t" />
    </method>
    <method name="getPrivateData">
      <argument name="objectType_" type="vk::ObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="vk::PrivateDataSlot" />
    </method>
    <method name="getBufferMemoryRequirements">
      <argument name="info" type="const vk::DeviceBufferMemoryRequirements &amp;" />
    </method>
    <method name="getBufferMemoryRequirements" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getImageMemoryRequirements">
      <argument name="info" type="const vk::DeviceImageMemoryRequirements &amp;" />
    </method>
    <method name="getImageMemoryRequirements" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getImageSparseMemoryRequirements">
      <argument name="info" type="const vk::DeviceImageMemoryRequirements &amp;" />
    </method>
    <method name="createSwapchainKHR">
      <argument name="createInfo" type="const vk::SwapchainCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="getGroupPresentCapabilitiesKHR" />
    <method name="getGroupSurfacePresentModesKHR">
      <argument name="surface" type="vk::SurfaceKHR" />
    </method>
    <method name="acquireNextImage2KHR">
      <argument name="acquireInfo" type="const vk::AcquireNextImageInfoKHR &amp;" />
    </method>
    <method name="createSharedSwapchainsKHR">
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::SwapchainCreateInfoKHR&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createSharedSwapchainKHR">
      <argument name="createInfo" type="const vk::SwapchainCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="debugMarkerSetObjectTagEXT">
      <argument name="tagInfo" type="const vk::DebugMarkerObjectTagInfoEXT &amp;" />
    </method>
    <method name="debugMarkerSetObjectNameEXT">
      <argument name="nameInfo" type="const vk::DebugMarkerObjectNameInfoEXT &amp;" />
    </method>
    <method name="createVideoSessionKHR">
      <argument name="createInfo" type="const vk::VideoSessionCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createVideoSessionParametersKHR">
      <argument name="createInfo" type="const vk::VideoSessionParametersCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createCuModuleNVX">
      <argument name="createInfo" type="const vk::CuModuleCreateInfoNVX &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createCuFunctionNVX">
      <argument name="createInfo" type="const vk::CuFunctionCreateInfoNVX &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="getImageViewHandleNVX">
      <argument name="info" type="const vk::ImageViewHandleInfoNVX &amp;" />
    </method>
    <method name="getGroupPeerMemoryFeaturesKHR">
      <argument name="heapIndex" type="uint32_t" />
      <argument name="localDeviceIndex" type="uint32_t" />
      <argument name="remoteDeviceIndex" type="uint32_t" />
    </method>
    <method name="getMemoryFdKHR">
      <argument name="getFdInfo" type="const vk::MemoryGetFdInfoKHR &amp;" />
    </method>
    <method name="getMemoryFdPropertiesKHR">
      <argument name="handleType" type="vk::ExternalMemoryHandleTypeFlagBits" />
      <argument name="fd" type="int" />
    </method>
    <method name="importSemaphoreFdKHR">
      <argument name="importSemaphoreFdInfo" type="const vk::ImportSemaphoreFdInfoKHR &amp;" />
    </method>
    <method name="getSemaphoreFdKHR">
      <argument name="getFdInfo" type="const vk::SemaphoreGetFdInfoKHR &amp;" />
    </method>
    <method name="createDescriptorUpdateTemplateKHR">
      <argument name="createInfo" type="const vk::DescriptorUpdateTemplateCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="destroyDescriptorUpdateTemplateKHR">
      <argument name="descriptorUpdateTemplate" type="vk::DescriptorUpdateTemplate" />
      <argument name="allocator" type="Optional&lt;const vk::AllocationCallbacks&gt;" />
    </method>
    <method name="displayPowerControlEXT">
      <argument name="display" type="vk::DisplayKHR" />
      <argument name="displayPowerInfo" type="const vk::DisplayPowerInfoEXT &amp;" />
    </method>
    <method name="registerEventEXT">
      <argument name="deviceEventInfo" type="const vk::DeviceEventInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="registerDisplayEventEXT">
      <argument name="display" type="const vk::raii::DisplayKHR &amp;" />
      <argument name="displayEventInfo" type="const vk::DisplayEventInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="setHdrMetadataEXT">
      <argument name="swapchains" type="const vk::ArrayProxy&lt;const vk::SwapchainKHR&gt; &amp;" />
      <argument name="metadata" type="const vk::ArrayProxy&lt;const vk::HdrMetadataEXT&gt; &amp;" />
    </method>
    <method name="createRenderPass2KHR">
      <argument name="createInfo" type="const vk::RenderPassCreateInfo2 &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="importFenceFdKHR">
      <argument name="importFenceFdInfo" type="const vk::ImportFenceFdInfoKHR &amp;" />
    </method>
    <method name="getFenceFdKHR">
      <argument name="getFdInfo" type="const vk::FenceGetFdInfoKHR &amp;" />
    </method>
    <method name="acquireProfilingLockKHR">
      <argument name="info" type="const vk::AcquireProfilingLockInfoKHR &amp;" />
    </method>
    <method name="releaseProfilingLockKHR" />
    <method name="setDebugUtilsObjectNameEXT">
      <argument name="nameInfo" type="const vk::DebugUtilsObjectNameInfoEXT &amp;" />
    </method>
    <method name="setDebugUtilsObjectTagEXT">
      <argument name="tagInfo" type="const vk::DebugUtilsObjectTagInfoEXT &amp;" />
    </method>
    <method name="getImageMemoryRequirements2KHR">
      <argument name="info" type="const vk::ImageMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="getImageMemoryRequirements2KHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getBufferMemoryRequirements2KHR">
      <argument name="info" type="const vk::BufferMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="getBufferMemoryRequirements2KHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getImageSparseMemoryRequirements2KHR">
      <argument name="info" type="const vk::ImageSparseMemoryRequirementsInfo2 &amp;" />
    </method>
    <method name="createAccelerationStructureKHR">
      <argument name="createInfo" type="const vk::AccelerationStructureCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="buildAccelerationStructuresKHR">
      <argument name="deferredOperation" type="vk::DeferredOperationKHR" />
      <argument name="infos" type="const vk::ArrayProxy&lt;const vk::AccelerationStructureBuildGeometryInfoKHR&gt; &amp;" />
      <argument name="pBuildRangeInfos" type="const vk::ArrayProxy&lt;const vk::AccelerationStructureBuildRangeInfoKHR *const&gt; &amp;" />
    </method>
    <method name="copyAccelerationStructureKHR">
      <argument name="deferredOperation" type="vk::DeferredOperationKHR" />
      <argument name="info" type="const vk::CopyAccelerationStructureInfoKHR &amp;" />
    </method>
    <method name="copyAccelerationStructureToMemoryKHR">
      <argument name="deferredOperation" type="vk::DeferredOperationKHR" />
      <argument name="info" type="const vk::CopyAccelerationStructureToMemoryInfoKHR &amp;" />
    </method>
    <method name="copyMemoryToAccelerationStructureKHR">
      <argument name="deferredOperation" type="vk::DeferredOperationKHR" />
      <argument name="info" type="const vk::CopyMemoryToAccelerationStructureInfoKHR &amp;" />
    </method>
    <method name="writeAccelerationStructuresPropertiesKHR" template_raw="template &lt;typename DataType&gt;" />
    <method name="writeAccelerationStructuresPropertyKHR" template_raw="template &lt;typename DataType&gt;" />
    <method name="getAccelerationStructureAddressKHR">
      <argument name="info" type="const vk::AccelerationStructureDeviceAddressInfoKHR &amp;" />
    </method>
    <method name="getAccelerationStructureCompatibilityKHR">
      <argument name="versionInfo" type="const vk::AccelerationStructureVersionInfoKHR &amp;" />
    </method>
    <method name="getAccelerationStructureBuildSizesKHR">
      <argument name="buildType" type="vk::AccelerationStructureBuildTypeKHR" />
      <argument name="buildInfo" type="const vk::AccelerationStructureBuildGeometryInfoKHR &amp;" />
      <argument name="maxPrimitiveCounts" type="const vk::ArrayProxy&lt;const uint32_t&gt; &amp;" />
    </method>
    <method name="createRayTracingPipelinesKHR">
      <argument name="deferredOperation" type="const vk::Optional&lt;const vk::raii::DeferredOperationKHR&gt; &amp;" />
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::RayTracingPipelineCreateInfoKHR&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createRayTracingPipelineKHR">
      <argument name="deferredOperation" type="const vk::Optional&lt;const vk::raii::DeferredOperationKHR&gt; &amp;" />
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfo" type="const vk::RayTracingPipelineCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createSamplerYcbcrConversionKHR">
      <argument name="createInfo" type="const vk::SamplerYcbcrConversionCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="destroySamplerYcbcrConversionKHR">
      <argument name="ycbcrConversion" type="vk::SamplerYcbcrConversion" />
      <argument name="allocator" type="Optional&lt;const vk::AllocationCallbacks&gt;" />
    </method>
    <method name="bindBufferMemory2KHR">
      <argument name="bindInfos" type="const vk::ArrayProxy&lt;const vk::BindBufferMemoryInfo&gt; &amp;" />
    </method>
    <method name="bindImageMemory2KHR">
      <argument name="bindInfos" type="const vk::ArrayProxy&lt;const vk::BindImageMemoryInfo&gt; &amp;" />
    </method>
    <method name="createValidationCacheEXT">
      <argument name="createInfo" type="const vk::ValidationCacheCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createAccelerationStructureNV">
      <argument name="createInfo" type="const vk::AccelerationStructureCreateInfoNV &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="getAccelerationStructureMemoryRequirementsNV">
      <argument name="info" type="const vk::AccelerationStructureMemoryRequirementsInfoNV &amp;" />
    </method>
    <method name="getAccelerationStructureMemoryRequirementsNV" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="bindAccelerationStructureMemoryNV">
      <argument name="bindInfos" type="const vk::ArrayProxy&lt;const vk::BindAccelerationStructureMemoryInfoNV&gt; &amp;" />
    </method>
    <method name="createRayTracingPipelinesNV">
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::RayTracingPipelineCreateInfoNV&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createRayTracingPipelineNV">
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfo" type="const vk::RayTracingPipelineCreateInfoNV &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="getDescriptorSetLayoutSupportKHR">
      <argument name="createInfo" type="const vk::DescriptorSetLayoutCreateInfo &amp;" />
    </method>
    <method name="getDescriptorSetLayoutSupportKHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getMemoryHostPointerPropertiesEXT">
      <argument name="handleType" type="vk::ExternalMemoryHandleTypeFlagBits" />
      <argument name="pHostPointer" type="const void *" />
    </method>
    <method name="getCalibratedTimestampsEXT">
      <argument name="timestampInfos" type="const vk::ArrayProxy&lt;const vk::CalibratedTimestampInfoKHR&gt; &amp;" />
    </method>
    <method name="getCalibratedTimestampEXT">
      <argument name="timestampInfo" type="const vk::CalibratedTimestampInfoKHR &amp;" />
    </method>
    <method name="waitSemaphoresKHR">
      <argument name="waitInfo" type="const vk::SemaphoreWaitInfo &amp;" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="signalSemaphoreKHR">
      <argument name="signalInfo" type="const vk::SemaphoreSignalInfo &amp;" />
    </method>
    <method name="initializePerformanceApiINTEL">
      <argument name="initializeInfo" type="const vk::InitializePerformanceApiInfoINTEL &amp;" />
    </method>
    <method name="uninitializePerformanceApiINTEL" />
    <method name="acquirePerformanceConfigurationINTEL">
      <argument name="acquireInfo" type="const vk::PerformanceConfigurationAcquireInfoINTEL &amp;" />
    </method>
    <method name="getPerformanceParameterINTEL">
      <argument name="parameter" type="vk::PerformanceParameterTypeINTEL" />
    </method>
    <method name="getBufferAddressEXT">
      <argument name="info" type="const vk::BufferDeviceAddressInfo &amp;" />
    </method>
    <method name="getBufferAddressKHR">
      <argument name="info" type="const vk::BufferDeviceAddressInfo &amp;" />
    </method>
    <method name="getBufferOpaqueCaptureAddressKHR">
      <argument name="info" type="const vk::BufferDeviceAddressInfo &amp;" />
    </method>
    <method name="getMemoryOpaqueCaptureAddressKHR">
      <argument name="info" type="const vk::DeviceMemoryOpaqueCaptureAddressInfo &amp;" />
    </method>
    <method name="createDeferredOperationKHR">
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="getPipelineExecutablePropertiesKHR">
      <argument name="pipelineInfo" type="const vk::PipelineInfoKHR &amp;" />
    </method>
    <method name="getPipelineExecutableStatisticsKHR">
      <argument name="executableInfo" type="const vk::PipelineExecutableInfoKHR &amp;" />
    </method>
    <method name="getPipelineExecutableInternalRepresentationsKHR">
      <argument name="executableInfo" type="const vk::PipelineExecutableInfoKHR &amp;" />
    </method>
    <method name="copyMemoryToImageEXT">
      <argument name="copyMemoryToImageInfo" type="const vk::CopyMemoryToImageInfoEXT &amp;" />
    </method>
    <method name="copyImageToMemoryEXT">
      <argument name="copyImageToMemoryInfo" type="const vk::CopyImageToMemoryInfoEXT &amp;" />
    </method>
    <method name="copyImageToImageEXT">
      <argument name="copyImageToImageInfo" type="const vk::CopyImageToImageInfoEXT &amp;" />
    </method>
    <method name="transitionImageLayoutEXT">
      <argument name="transitions" type="const vk::ArrayProxy&lt;const vk::HostImageLayoutTransitionInfoEXT&gt; &amp;" />
    </method>
    <method name="mapMemory2KHR">
      <argument name="memoryMapInfo" type="const vk::MemoryMapInfoKHR &amp;" />
    </method>
    <method name="unmapMemory2KHR">
      <argument name="memoryUnmapInfo" type="const vk::MemoryUnmapInfoKHR &amp;" />
    </method>
    <method name="releaseSwapchainImagesEXT">
      <argument name="releaseInfo" type="const vk::ReleaseSwapchainImagesInfoEXT &amp;" />
    </method>
    <method name="getGeneratedCommandsMemoryRequirementsNV">
      <argument name="info" type="const vk::GeneratedCommandsMemoryRequirementsInfoNV &amp;" />
    </method>
    <method name="getGeneratedCommandsMemoryRequirementsNV" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="createIndirectCommandsLayoutNV">
      <argument name="createInfo" type="const vk::IndirectCommandsLayoutCreateInfoNV &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createPrivateDataSlotEXT">
      <argument name="createInfo" type="const vk::PrivateDataSlotCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="destroyPrivateDataSlotEXT">
      <argument name="privateDataSlot" type="vk::PrivateDataSlot" />
      <argument name="allocator" type="Optional&lt;const vk::AllocationCallbacks&gt;" />
    </method>
    <method name="setPrivateDataEXT">
      <argument name="objectType_" type="vk::ObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="vk::PrivateDataSlot" />
      <argument name="data" type="uint64_t" />
    </method>
    <method name="getPrivateDataEXT">
      <argument name="objectType_" type="vk::ObjectType" />
      <argument name="objectHandle" type="uint64_t" />
      <argument name="privateDataSlot" type="vk::PrivateDataSlot" />
    </method>
    <method name="getEncodedVideoSessionParametersKHR">
      <argument name="videoSessionParametersInfo" type="const vk::VideoEncodeSessionParametersGetInfoKHR &amp;" />
    </method>
    <method name="getEncodedVideoSessionParametersKHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getDescriptorEXT">
      <argument name="descriptorInfo" type="const vk::DescriptorGetInfoEXT &amp;" />
      <argument name="dataSize" type="size_t" />
      <argument name="pDescriptor" type="void *" />
    </method>
    <method name="getDescriptorEXT" template_raw="template &lt;typename DescriptorType&gt;" />
    <method name="getBufferOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename DataType&gt;" />
    <method name="getImageOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename DataType&gt;" />
    <method name="getImageViewOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename DataType&gt;" />
    <method name="getSamplerOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename DataType&gt;" />
    <method name="getAccelerationStructureOpaqueCaptureDescriptorDataEXT" template_raw="template &lt;typename DataType&gt;" />
    <method name="getFaultInfoEXT" />
    <method name="getMemoryRemoteAddressNV">
      <argument name="memoryGetRemoteAddressInfo" type="const vk::MemoryGetRemoteAddressInfoNV &amp;" />
    </method>
    <method name="getPipelinePropertiesEXT">
      <argument name="pipelineInfo" type="const vk::PipelineInfoEXT &amp;" />
    </method>
    <method name="createMicromapEXT">
      <argument name="createInfo" type="const vk::MicromapCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="buildMicromapsEXT">
      <argument name="deferredOperation" type="vk::DeferredOperationKHR" />
      <argument name="infos" type="const vk::ArrayProxy&lt;const vk::MicromapBuildInfoEXT&gt; &amp;" />
    </method>
    <method name="copyMicromapEXT">
      <argument name="deferredOperation" type="vk::DeferredOperationKHR" />
      <argument name="info" type="const vk::CopyMicromapInfoEXT &amp;" />
    </method>
    <method name="copyMicromapToMemoryEXT">
      <argument name="deferredOperation" type="vk::DeferredOperationKHR" />
      <argument name="info" type="const vk::CopyMicromapToMemoryInfoEXT &amp;" />
    </method>
    <method name="copyMemoryToMicromapEXT">
      <argument name="deferredOperation" type="vk::DeferredOperationKHR" />
      <argument name="info" type="const vk::CopyMemoryToMicromapInfoEXT &amp;" />
    </method>
    <method name="writeMicromapsPropertiesEXT" template_raw="template &lt;typename DataType&gt;" />
    <method name="writeMicromapsPropertyEXT" template_raw="template &lt;typename DataType&gt;" />
    <method name="getMicromapCompatibilityEXT">
      <argument name="versionInfo" type="const vk::MicromapVersionInfoEXT &amp;" />
    </method>
    <method name="getMicromapBuildSizesEXT">
      <argument name="buildType" type="vk::AccelerationStructureBuildTypeKHR" />
      <argument name="buildInfo" type="const vk::MicromapBuildInfoEXT &amp;" />
    </method>
    <method name="getBufferMemoryRequirementsKHR">
      <argument name="info" type="const vk::DeviceBufferMemoryRequirements &amp;" />
    </method>
    <method name="getBufferMemoryRequirementsKHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getImageMemoryRequirementsKHR">
      <argument name="info" type="const vk::DeviceImageMemoryRequirements &amp;" />
    </method>
    <method name="getImageMemoryRequirementsKHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getImageSparseMemoryRequirementsKHR">
      <argument name="info" type="const vk::DeviceImageMemoryRequirements &amp;" />
    </method>
    <method name="getDescriptorSetLayoutHostMappingInfoVALVE">
      <argument name="bindingReference" type="const vk::DescriptorSetBindingReferenceVALVE &amp;" />
    </method>
    <method name="getPipelineIndirectMemoryRequirementsNV">
      <argument name="createInfo" type="const vk::ComputePipelineCreateInfo &amp;" />
    </method>
    <method name="getPipelineIndirectMemoryRequirementsNV" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getPipelineIndirectAddressNV">
      <argument name="info" type="const vk::PipelineIndirectDeviceAddressInfoNV &amp;" />
    </method>
    <method name="getShaderModuleCreateInfoIdentifierEXT">
      <argument name="createInfo" type="const vk::ShaderModuleCreateInfo &amp;" />
    </method>
    <method name="createOpticalFlowSessionNV">
      <argument name="createInfo" type="const vk::OpticalFlowSessionCreateInfoNV &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="getRenderingAreaGranularityKHR">
      <argument name="renderingAreaInfo" type="const vk::RenderingAreaInfoKHR &amp;" />
    </method>
    <method name="getImageSubresourceLayoutKHR">
      <argument name="info" type="const vk::DeviceImageSubresourceInfoKHR &amp;" />
    </method>
    <method name="getImageSubresourceLayoutKHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="createShadersEXT">
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::ShaderCreateInfoEXT&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createShaderEXT">
      <argument name="createInfo" type="const vk::ShaderCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="getDynamicRenderingTilePropertiesQCOM">
      <argument name="renderingInfo" type="const vk::RenderingInfo &amp;" />
    </method>
    <method name="getCalibratedTimestampsKHR">
      <argument name="timestampInfos" type="const vk::ArrayProxy&lt;const vk::CalibratedTimestampInfoKHR&gt; &amp;" />
    </method>
    <method name="getCalibratedTimestampKHR">
      <argument name="timestampInfo" type="const vk::CalibratedTimestampInfoKHR &amp;" />
    </method>
  </class>
  <class name="DeviceMemory" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DeviceMemory">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="allocateInfo" type="const vk::MemoryAllocateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DeviceMemory">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="memory" type="VkDeviceMemory" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DeviceMemory">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~DeviceMemory" />
    <constructor name="DeviceMemory" />
    <constructor name="DeviceMemory">
      <argument name="" type="const DeviceMemory &amp;" />
    </constructor>
    <constructor name="DeviceMemory">
      <argument name="rhs" type="DeviceMemory &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DeviceMemory &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DeviceMemory &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::DeviceMemory &amp;" />
    </method>
    <method name="mapMemory">
      <argument name="offset" type="vk::DeviceSize" />
      <argument name="size" type="vk::DeviceSize" />
      <argument name="flags" type="vk::MemoryMapFlags" />
    </method>
    <method name="unmapMemory" />
    <method name="getCommitment" />
    <method name="setPriorityEXT">
      <argument name="priority" type="float" />
    </method>
  </class>
  <class name="Event" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Event">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::EventCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Event">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="event" type="VkEvent" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Event">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~Event" />
    <constructor name="Event" />
    <constructor name="Event">
      <argument name="" type="const Event &amp;" />
    </constructor>
    <constructor name="Event">
      <argument name="rhs" type="Event &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Event &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Event &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Event &amp;" />
    </method>
    <method name="getStatus" />
    <method name="set" />
    <method name="reset" />
  </class>
  <class name="Fence" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Fence">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::FenceCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Fence">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="deviceEventInfo" type="const vk::DeviceEventInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Fence">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="display" type="const vk::raii::DisplayKHR &amp;" />
      <argument name="displayEventInfo" type="const vk::DisplayEventInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Fence">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="fence" type="VkFence" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Fence">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~Fence" />
    <constructor name="Fence" />
    <constructor name="Fence">
      <argument name="" type="const Fence &amp;" />
    </constructor>
    <constructor name="Fence">
      <argument name="rhs" type="Fence &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Fence &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Fence &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Fence &amp;" />
    </method>
    <method name="getStatus" />
  </class>
  <class name="Framebuffer" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Framebuffer">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::FramebufferCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Framebuffer">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="framebuffer" type="VkFramebuffer" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Framebuffer">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~Framebuffer" />
    <constructor name="Framebuffer" />
    <constructor name="Framebuffer">
      <argument name="" type="const Framebuffer &amp;" />
    </constructor>
    <constructor name="Framebuffer">
      <argument name="rhs" type="Framebuffer &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Framebuffer &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Framebuffer &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Framebuffer &amp;" />
    </method>
    <method name="getTilePropertiesQCOM" />
  </class>
  <class name="Image" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Image">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::ImageCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Image">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="image" type="VkImage" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Image">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~Image" />
    <constructor name="Image" />
    <constructor name="Image">
      <argument name="" type="const Image &amp;" />
    </constructor>
    <constructor name="Image">
      <argument name="rhs" type="Image &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Image &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Image &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Image &amp;" />
    </method>
    <method name="bindMemory">
      <argument name="memory" type="vk::DeviceMemory" />
      <argument name="memoryOffset" type="vk::DeviceSize" />
    </method>
    <method name="getMemoryRequirements" />
    <method name="getSparseMemoryRequirements" />
    <method name="getSubresourceLayout">
      <argument name="subresource" type="const vk::ImageSubresource &amp;" />
    </method>
    <method name="getDrmFormatModifierPropertiesEXT" />
    <method name="getSubresourceLayout2EXT">
      <argument name="subresource" type="const vk::ImageSubresource2KHR &amp;" />
    </method>
    <method name="getSubresourceLayout2EXT" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getSubresourceLayout2KHR">
      <argument name="subresource" type="const vk::ImageSubresource2KHR &amp;" />
    </method>
    <method name="getSubresourceLayout2KHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
  </class>
  <class name="ImageView" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="ImageView">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::ImageViewCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="ImageView">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="imageView" type="VkImageView" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="ImageView">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~ImageView" />
    <constructor name="ImageView" />
    <constructor name="ImageView">
      <argument name="" type="const ImageView &amp;" />
    </constructor>
    <constructor name="ImageView">
      <argument name="rhs" type="ImageView &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const ImageView &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="ImageView &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::ImageView &amp;" />
    </method>
    <method name="getAddressNVX" />
  </class>
  <class name="Instance" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Instance">
      <argument name="context" type="const vk::raii::Context &amp;" />
      <argument name="createInfo" type="const vk::InstanceCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Instance">
      <argument name="context" type="const vk::raii::Context &amp;" />
      <argument name="instance" type="VkInstance" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Instance">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~Instance" />
    <constructor name="Instance" />
    <constructor name="Instance">
      <argument name="" type="const Instance &amp;" />
    </constructor>
    <constructor name="Instance">
      <argument name="rhs" type="Instance &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Instance &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Instance &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Instance &amp;" />
    </method>
    <method name="enumeratePhysicalDevices" />
    <method name="getProcAddr">
      <argument name="name" type="const std::string &amp;" />
    </method>
    <method name="enumeratePhysicalDeviceGroups" />
    <method name="createDisplayPlaneSurfaceKHR">
      <argument name="createInfo" type="const vk::DisplaySurfaceCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="createDebugReportCallbackEXT">
      <argument name="createInfo" type="const vk::DebugReportCallbackCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="debugReportMessageEXT">
      <argument name="flags" type="vk::DebugReportFlagsEXT" />
      <argument name="objectType_" type="vk::DebugReportObjectTypeEXT" />
      <argument name="object" type="uint64_t" />
      <argument name="location" type="size_t" />
      <argument name="messageCode" type="int32_t" />
      <argument name="layerPrefix" type="const std::string &amp;" />
      <argument name="message" type="const std::string &amp;" />
    </method>
    <method name="enumeratePhysicalDeviceGroupsKHR" />
    <method name="createDebugUtilsMessengerEXT">
      <argument name="createInfo" type="const vk::DebugUtilsMessengerCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="submitDebugUtilsMessageEXT">
      <argument name="messageSeverity" type="vk::DebugUtilsMessageSeverityFlagBitsEXT" />
      <argument name="messageTypes" type="vk::DebugUtilsMessageTypeFlagsEXT" />
      <argument name="callbackData" type="const vk::DebugUtilsMessengerCallbackDataEXT &amp;" />
    </method>
    <method name="createHeadlessSurfaceEXT">
      <argument name="createInfo" type="const vk::HeadlessSurfaceCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
  </class>
  <class name="PhysicalDevice" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="PhysicalDevice">
      <argument name="instance" type="const vk::raii::Instance &amp;" />
      <argument name="physicalDevice" type="VkPhysicalDevice" />
    </constructor>
    <constructor name="PhysicalDevice">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~PhysicalDevice" />
    <constructor name="PhysicalDevice" />
    <constructor name="PhysicalDevice">
      <argument name="rhs" type="const PhysicalDevice &amp;" />
    </constructor>
    <constructor name="PhysicalDevice">
      <argument name="rhs" type="PhysicalDevice &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const PhysicalDevice &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="PhysicalDevice &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::PhysicalDevice &amp;" />
    </method>
    <method name="getFeatures" />
    <method name="getFormatProperties">
      <argument name="format" type="vk::Format" />
    </method>
    <method name="getImageFormatProperties">
      <argument name="format" type="vk::Format" />
      <argument name="type" type="vk::ImageType" />
      <argument name="tiling" type="vk::ImageTiling" />
      <argument name="usage" type="vk::ImageUsageFlags" />
      <argument name="flags" type="vk::ImageCreateFlags" />
    </method>
    <method name="getProperties" />
    <method name="getQueueFamilyProperties" />
    <method name="getMemoryProperties" />
    <method name="createDevice">
      <argument name="createInfo" type="const vk::DeviceCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="enumerateDeviceExtensionProperties">
      <argument name="layerName" type="Optional&lt;const std::string&gt;" />
    </method>
    <method name="enumerateDeviceLayerProperties" />
    <method name="getSparseImageFormatProperties">
      <argument name="format" type="vk::Format" />
      <argument name="type" type="vk::ImageType" />
      <argument name="samples" type="vk::SampleCountFlagBits" />
      <argument name="usage" type="vk::ImageUsageFlags" />
      <argument name="tiling" type="vk::ImageTiling" />
    </method>
    <method name="getFeatures2" />
    <method name="getFeatures2" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getProperties2" />
    <method name="getProperties2" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getFormatProperties2">
      <argument name="format" type="vk::Format" />
    </method>
    <method name="getFormatProperties2" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getImageFormatProperties2">
      <argument name="imageFormatInfo" type="const vk::PhysicalDeviceImageFormatInfo2 &amp;" />
    </method>
    <method name="getImageFormatProperties2" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getQueueFamilyProperties2" />
    <method name="getQueueFamilyProperties2" template_raw="template &lt;typename StructureChain&gt;" />
    <method name="getMemoryProperties2" />
    <method name="getMemoryProperties2" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getSparseImageFormatProperties2">
      <argument name="formatInfo" type="const vk::PhysicalDeviceSparseImageFormatInfo2 &amp;" />
    </method>
    <method name="getExternalBufferProperties">
      <argument name="externalBufferInfo" type="const vk::PhysicalDeviceExternalBufferInfo &amp;" />
    </method>
    <method name="getExternalFenceProperties">
      <argument name="externalFenceInfo" type="const vk::PhysicalDeviceExternalFenceInfo &amp;" />
    </method>
    <method name="getExternalSemaphoreProperties">
      <argument name="externalSemaphoreInfo" type="const vk::PhysicalDeviceExternalSemaphoreInfo &amp;" />
    </method>
    <method name="getToolProperties" />
    <method name="getSurfaceSupportKHR">
      <argument name="queueFamilyIndex" type="uint32_t" />
      <argument name="surface" type="vk::SurfaceKHR" />
    </method>
    <method name="getSurfaceCapabilitiesKHR">
      <argument name="surface" type="vk::SurfaceKHR" />
    </method>
    <method name="getSurfaceFormatsKHR">
      <argument name="surface" type="vk::SurfaceKHR" />
    </method>
    <method name="getSurfacePresentModesKHR">
      <argument name="surface" type="vk::SurfaceKHR" />
    </method>
    <method name="getPresentRectanglesKHR">
      <argument name="surface" type="vk::SurfaceKHR" />
    </method>
    <method name="getDisplayPropertiesKHR" />
    <method name="getDisplayPlanePropertiesKHR" />
    <method name="getDisplayPlaneSupportedDisplaysKHR">
      <argument name="planeIndex" type="uint32_t" />
    </method>
    <method name="getVideoCapabilitiesKHR">
      <argument name="videoProfile" type="const vk::VideoProfileInfoKHR &amp;" />
    </method>
    <method name="getVideoCapabilitiesKHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getVideoFormatPropertiesKHR">
      <argument name="videoFormatInfo" type="const vk::PhysicalDeviceVideoFormatInfoKHR &amp;" />
    </method>
    <method name="getExternalImageFormatPropertiesNV">
      <argument name="format" type="vk::Format" />
      <argument name="type" type="vk::ImageType" />
      <argument name="tiling" type="vk::ImageTiling" />
      <argument name="usage" type="vk::ImageUsageFlags" />
      <argument name="flags" type="vk::ImageCreateFlags" />
      <argument name="externalHandleType" type="vk::ExternalMemoryHandleTypeFlagsNV" />
    </method>
    <method name="getFeatures2KHR" />
    <method name="getFeatures2KHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getProperties2KHR" />
    <method name="getProperties2KHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getFormatProperties2KHR">
      <argument name="format" type="vk::Format" />
    </method>
    <method name="getFormatProperties2KHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getImageFormatProperties2KHR">
      <argument name="imageFormatInfo" type="const vk::PhysicalDeviceImageFormatInfo2 &amp;" />
    </method>
    <method name="getImageFormatProperties2KHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getQueueFamilyProperties2KHR" />
    <method name="getQueueFamilyProperties2KHR" template_raw="template &lt;typename StructureChain&gt;" />
    <method name="getMemoryProperties2KHR" />
    <method name="getMemoryProperties2KHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getSparseImageFormatProperties2KHR">
      <argument name="formatInfo" type="const vk::PhysicalDeviceSparseImageFormatInfo2 &amp;" />
    </method>
    <method name="getExternalBufferPropertiesKHR">
      <argument name="externalBufferInfo" type="const vk::PhysicalDeviceExternalBufferInfo &amp;" />
    </method>
    <method name="getExternalSemaphorePropertiesKHR">
      <argument name="externalSemaphoreInfo" type="const vk::PhysicalDeviceExternalSemaphoreInfo &amp;" />
    </method>
    <method name="getSurfaceCapabilities2EXT">
      <argument name="surface" type="vk::SurfaceKHR" />
    </method>
    <method name="getExternalFencePropertiesKHR">
      <argument name="externalFenceInfo" type="const vk::PhysicalDeviceExternalFenceInfo &amp;" />
    </method>
    <method name="getQueueFamilyPerformanceQueryPassesKHR">
      <argument name="performanceQueryCreateInfo" type="const vk::QueryPoolPerformanceCreateInfoKHR &amp;" />
    </method>
    <method name="getSurfaceCapabilities2KHR">
      <argument name="surfaceInfo" type="const vk::PhysicalDeviceSurfaceInfo2KHR &amp;" />
    </method>
    <method name="getSurfaceCapabilities2KHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getSurfaceFormats2KHR">
      <argument name="surfaceInfo" type="const vk::PhysicalDeviceSurfaceInfo2KHR &amp;" />
    </method>
    <method name="getSurfaceFormats2KHR" template_raw="template &lt;typename StructureChain&gt;" />
    <method name="getDisplayProperties2KHR" />
    <method name="getDisplayPlaneProperties2KHR" />
    <method name="getDisplayPlaneCapabilities2KHR">
      <argument name="displayPlaneInfo" type="const vk::DisplayPlaneInfo2KHR &amp;" />
    </method>
    <method name="getMultisamplePropertiesEXT">
      <argument name="samples" type="vk::SampleCountFlagBits" />
    </method>
    <method name="getCalibrateableTimeDomainsEXT" />
    <method name="getFragmentShadingRatesKHR" />
    <method name="getToolPropertiesEXT" />
    <method name="getCooperativeMatrixPropertiesNV" />
    <method name="getSupportedFramebufferMixedSamplesCombinationsNV" />
    <method name="acquireDrmDisplayEXT">
      <argument name="drmFd" type="int32_t" />
      <argument name="display" type="vk::DisplayKHR" />
    </method>
    <method name="getDrmDisplayEXT">
      <argument name="drmFd" type="int32_t" />
      <argument name="connectorId" type="uint32_t" />
    </method>
    <method name="getVideoEncodeQualityLevelPropertiesKHR">
      <argument name="qualityLevelInfo" type="const vk::PhysicalDeviceVideoEncodeQualityLevelInfoKHR &amp;" />
    </method>
    <method name="getVideoEncodeQualityLevelPropertiesKHR" template_raw="template &lt;typename X, typename Y, typename... Z&gt;" />
    <method name="getOpticalFlowImageFormatsNV">
      <argument name="opticalFlowImageFormatInfo" type="const vk::OpticalFlowImageFormatInfoNV &amp;" />
    </method>
    <method name="getCooperativeMatrixPropertiesKHR" />
    <method name="getCalibrateableTimeDomainsKHR" />
  </class>
  <class name="PhysicalDevices" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="PhysicalDevices">
      <argument name="instance" type="const vk::raii::Instance &amp;" />
    </constructor>
    <constructor name="PhysicalDevices">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="PhysicalDevices" />
    <constructor name="PhysicalDevices">
      <argument name="" type="const PhysicalDevices &amp;" />
    </constructor>
    <constructor name="PhysicalDevices">
      <argument name="rhs" type="PhysicalDevices &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const PhysicalDevices &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="PhysicalDevices &amp;&amp;" />
    </method>
  </class>
  <class name="Pipeline" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Pipeline">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfo" type="const vk::ComputePipelineCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Pipeline">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfo" type="const vk::GraphicsPipelineCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Pipeline">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="deferredOperation" type="const vk::Optional&lt;const vk::raii::DeferredOperationKHR&gt; &amp;" />
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfo" type="const vk::RayTracingPipelineCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Pipeline">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfo" type="const vk::RayTracingPipelineCreateInfoNV &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Pipeline">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="pipeline" type="VkPipeline" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
      <argument name="successCode" type="vk::Result" default_raw="VULKAN_HPP_NAMESPACE::Result::eSuccess" />
    </constructor>
    <constructor name="Pipeline">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~Pipeline" />
    <constructor name="Pipeline" />
    <constructor name="Pipeline">
      <argument name="" type="const Pipeline &amp;" />
    </constructor>
    <constructor name="Pipeline">
      <argument name="rhs" type="Pipeline &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Pipeline &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Pipeline &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getConstructorSuccessCode" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Pipeline &amp;" />
    </method>
    <method name="getShaderInfoAMD">
      <argument name="shaderStage" type="vk::ShaderStageFlagBits" />
      <argument name="infoType" type="vk::ShaderInfoTypeAMD" />
    </method>
    <method name="getRayTracingShaderGroupHandlesKHR" template_raw="template &lt;typename DataType&gt;" />
    <method name="getRayTracingShaderGroupHandleKHR" template_raw="template &lt;typename DataType&gt;" />
    <method name="getRayTracingCaptureReplayShaderGroupHandlesKHR" template_raw="template &lt;typename DataType&gt;" />
    <method name="getRayTracingCaptureReplayShaderGroupHandleKHR" template_raw="template &lt;typename DataType&gt;" />
    <method name="getRayTracingShaderGroupStackSizeKHR">
      <argument name="group" type="uint32_t" />
      <argument name="groupShader" type="vk::ShaderGroupShaderKHR" />
    </method>
    <method name="getRayTracingShaderGroupHandlesNV" template_raw="template &lt;typename DataType&gt;" />
    <method name="getRayTracingShaderGroupHandleNV" template_raw="template &lt;typename DataType&gt;" />
    <method name="compileDeferredNV">
      <argument name="shader" type="uint32_t" />
    </method>
  </class>
  <class name="PipelineCache" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="PipelineCache">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::PipelineCacheCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="PipelineCache">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="pipelineCache" type="VkPipelineCache" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="PipelineCache">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~PipelineCache" />
    <constructor name="PipelineCache" />
    <constructor name="PipelineCache">
      <argument name="" type="const PipelineCache &amp;" />
    </constructor>
    <constructor name="PipelineCache">
      <argument name="rhs" type="PipelineCache &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const PipelineCache &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="PipelineCache &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::PipelineCache &amp;" />
    </method>
    <method name="getData" />
    <method name="merge">
      <argument name="srcCaches" type="const vk::ArrayProxy&lt;const vk::PipelineCache&gt; &amp;" />
    </method>
  </class>
  <class name="PipelineLayout" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="PipelineLayout">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::PipelineLayoutCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="PipelineLayout">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="pipelineLayout" type="VkPipelineLayout" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="PipelineLayout">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~PipelineLayout" />
    <constructor name="PipelineLayout" />
    <constructor name="PipelineLayout">
      <argument name="" type="const PipelineLayout &amp;" />
    </constructor>
    <constructor name="PipelineLayout">
      <argument name="rhs" type="PipelineLayout &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const PipelineLayout &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="PipelineLayout &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::PipelineLayout &amp;" />
    </method>
  </class>
  <class name="Pipelines" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Pipelines">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::ComputePipelineCreateInfo&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Pipelines">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::GraphicsPipelineCreateInfo&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Pipelines">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="deferredOperation" type="const vk::Optional&lt;const vk::raii::DeferredOperationKHR&gt; &amp;" />
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::RayTracingPipelineCreateInfoKHR&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Pipelines">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="pipelineCache" type="const vk::Optional&lt;const vk::raii::PipelineCache&gt; &amp;" />
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::RayTracingPipelineCreateInfoNV&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Pipelines">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="Pipelines" />
    <constructor name="Pipelines">
      <argument name="" type="const Pipelines &amp;" />
    </constructor>
    <constructor name="Pipelines">
      <argument name="rhs" type="Pipelines &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Pipelines &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Pipelines &amp;&amp;" />
    </method>
  </class>
  <class name="QueryPool" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="QueryPool">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::QueryPoolCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="QueryPool">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="queryPool" type="VkQueryPool" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="QueryPool">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~QueryPool" />
    <constructor name="QueryPool" />
    <constructor name="QueryPool">
      <argument name="" type="const QueryPool &amp;" />
    </constructor>
    <constructor name="QueryPool">
      <argument name="rhs" type="QueryPool &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const QueryPool &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="QueryPool &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::QueryPool &amp;" />
    </method>
    <method name="getResults" template_raw="template &lt;typename DataType&gt;" />
    <method name="getResult" template_raw="template &lt;typename DataType&gt;" />
    <method name="reset">
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
    </method>
    <method name="resetEXT">
      <argument name="firstQuery" type="uint32_t" />
      <argument name="queryCount" type="uint32_t" />
    </method>
  </class>
  <class name="Queue" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Queue">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="queueFamilyIndex" type="uint32_t" />
      <argument name="queueIndex" type="uint32_t" />
    </constructor>
    <constructor name="Queue">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="queueInfo" type="const vk::DeviceQueueInfo2 &amp;" />
    </constructor>
    <constructor name="Queue">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="queue" type="VkQueue" />
    </constructor>
    <constructor name="Queue">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~Queue" />
    <constructor name="Queue" />
    <constructor name="Queue">
      <argument name="rhs" type="const Queue &amp;" />
    </constructor>
    <constructor name="Queue">
      <argument name="rhs" type="Queue &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const Queue &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Queue &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Queue &amp;" />
    </method>
    <method name="submit">
      <argument name="submits" type="const vk::ArrayProxy&lt;const vk::SubmitInfo&gt; &amp;" />
      <argument name="fence" type="vk::Fence" />
    </method>
    <method name="waitIdle" />
    <method name="bindSparse">
      <argument name="bindInfo" type="const vk::ArrayProxy&lt;const vk::BindSparseInfo&gt; &amp;" />
      <argument name="fence" type="vk::Fence" />
    </method>
    <method name="submit2">
      <argument name="submits" type="const vk::ArrayProxy&lt;const vk::SubmitInfo2&gt; &amp;" />
      <argument name="fence" type="vk::Fence" />
    </method>
    <method name="presentKHR">
      <argument name="presentInfo" type="const vk::PresentInfoKHR &amp;" />
    </method>
    <method name="beginDebugUtilsLabelEXT">
      <argument name="labelInfo" type="const vk::DebugUtilsLabelEXT &amp;" />
    </method>
    <method name="endDebugUtilsLabelEXT" />
    <method name="insertDebugUtilsLabelEXT">
      <argument name="labelInfo" type="const vk::DebugUtilsLabelEXT &amp;" />
    </method>
    <method name="getCheckpointDataNV" />
    <method name="setPerformanceConfigurationINTEL">
      <argument name="configuration" type="vk::PerformanceConfigurationINTEL" />
    </method>
    <method name="submit2KHR">
      <argument name="submits" type="const vk::ArrayProxy&lt;const vk::SubmitInfo2&gt; &amp;" />
      <argument name="fence" type="vk::Fence" />
    </method>
    <method name="getCheckpointData2NV" />
    <method name="notifyOutOfBandNV">
      <argument name="queueTypeInfo" type="const vk::OutOfBandQueueTypeInfoNV &amp;" />
    </method>
  </class>
  <class name="RenderPass" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="RenderPass">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::RenderPassCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="RenderPass">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::RenderPassCreateInfo2 &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="RenderPass">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="renderPass" type="VkRenderPass" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="RenderPass">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~RenderPass" />
    <constructor name="RenderPass" />
    <constructor name="RenderPass">
      <argument name="" type="const RenderPass &amp;" />
    </constructor>
    <constructor name="RenderPass">
      <argument name="rhs" type="RenderPass &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const RenderPass &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="RenderPass &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::RenderPass &amp;" />
    </method>
    <method name="getRenderAreaGranularity" />
    <method name="getSubpassShadingMaxWorkgroupSizeHUAWEI" />
  </class>
  <class name="Sampler" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Sampler">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::SamplerCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Sampler">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="sampler" type="VkSampler" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Sampler">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~Sampler" />
    <constructor name="Sampler" />
    <constructor name="Sampler">
      <argument name="" type="const Sampler &amp;" />
    </constructor>
    <constructor name="Sampler">
      <argument name="rhs" type="Sampler &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Sampler &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Sampler &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Sampler &amp;" />
    </method>
  </class>
  <class name="Semaphore" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="Semaphore">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::SemaphoreCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Semaphore">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="semaphore" type="VkSemaphore" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="Semaphore">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~Semaphore" />
    <constructor name="Semaphore" />
    <constructor name="Semaphore">
      <argument name="" type="const Semaphore &amp;" />
    </constructor>
    <constructor name="Semaphore">
      <argument name="rhs" type="Semaphore &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const Semaphore &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="Semaphore &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::Semaphore &amp;" />
    </method>
    <method name="getCounterValue" />
    <method name="getCounterValueKHR" />
  </class>
  <class name="ShaderModule" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="ShaderModule">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::ShaderModuleCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="ShaderModule">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="shaderModule" type="VkShaderModule" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="ShaderModule">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~ShaderModule" />
    <constructor name="ShaderModule" />
    <constructor name="ShaderModule">
      <argument name="" type="const ShaderModule &amp;" />
    </constructor>
    <constructor name="ShaderModule">
      <argument name="rhs" type="ShaderModule &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const ShaderModule &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="ShaderModule &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::ShaderModule &amp;" />
    </method>
    <method name="getIdentifierEXT" />
  </class>
  <class name="DescriptorUpdateTemplate" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DescriptorUpdateTemplate">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::DescriptorUpdateTemplateCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DescriptorUpdateTemplate">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="descriptorUpdateTemplate" type="VkDescriptorUpdateTemplate" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DescriptorUpdateTemplate">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~DescriptorUpdateTemplate" />
    <constructor name="DescriptorUpdateTemplate" />
    <constructor name="DescriptorUpdateTemplate">
      <argument name="" type="const DescriptorUpdateTemplate &amp;" />
    </constructor>
    <constructor name="DescriptorUpdateTemplate">
      <argument name="rhs" type="DescriptorUpdateTemplate &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DescriptorUpdateTemplate &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DescriptorUpdateTemplate &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::DescriptorUpdateTemplate &amp;" />
    </method>
  </class>
  <class name="SamplerYcbcrConversion" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="SamplerYcbcrConversion">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::SamplerYcbcrConversionCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="SamplerYcbcrConversion">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="ycbcrConversion" type="VkSamplerYcbcrConversion" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="SamplerYcbcrConversion">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~SamplerYcbcrConversion" />
    <constructor name="SamplerYcbcrConversion" />
    <constructor name="SamplerYcbcrConversion">
      <argument name="" type="const SamplerYcbcrConversion &amp;" />
    </constructor>
    <constructor name="SamplerYcbcrConversion">
      <argument name="rhs" type="SamplerYcbcrConversion &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const SamplerYcbcrConversion &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="SamplerYcbcrConversion &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::SamplerYcbcrConversion &amp;" />
    </method>
  </class>
  <class name="PrivateDataSlot" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="PrivateDataSlot">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::PrivateDataSlotCreateInfo &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="PrivateDataSlot">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="privateDataSlot" type="VkPrivateDataSlot" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="PrivateDataSlot">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~PrivateDataSlot" />
    <constructor name="PrivateDataSlot" />
    <constructor name="PrivateDataSlot">
      <argument name="" type="const PrivateDataSlot &amp;" />
    </constructor>
    <constructor name="PrivateDataSlot">
      <argument name="rhs" type="PrivateDataSlot &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const PrivateDataSlot &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="PrivateDataSlot &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::PrivateDataSlot &amp;" />
    </method>
  </class>
  <class name="SurfaceKHR" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="SurfaceKHR">
      <argument name="instance" type="const vk::raii::Instance &amp;" />
      <argument name="createInfo" type="const vk::DisplaySurfaceCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="SurfaceKHR">
      <argument name="instance" type="const vk::raii::Instance &amp;" />
      <argument name="createInfo" type="const vk::HeadlessSurfaceCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="SurfaceKHR">
      <argument name="instance" type="const vk::raii::Instance &amp;" />
      <argument name="surface" type="VkSurfaceKHR" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="SurfaceKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~SurfaceKHR" />
    <constructor name="SurfaceKHR" />
    <constructor name="SurfaceKHR">
      <argument name="" type="const SurfaceKHR &amp;" />
    </constructor>
    <constructor name="SurfaceKHR">
      <argument name="rhs" type="SurfaceKHR &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const SurfaceKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="SurfaceKHR &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getInstance" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::SurfaceKHR &amp;" />
    </method>
  </class>
  <class name="SwapchainKHR" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="SwapchainKHR">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::SwapchainCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="SwapchainKHR">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="swapchain" type="VkSwapchainKHR" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="SwapchainKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~SwapchainKHR" />
    <constructor name="SwapchainKHR" />
    <constructor name="SwapchainKHR">
      <argument name="" type="const SwapchainKHR &amp;" />
    </constructor>
    <constructor name="SwapchainKHR">
      <argument name="rhs" type="SwapchainKHR &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const SwapchainKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="SwapchainKHR &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::SwapchainKHR &amp;" />
    </method>
    <method name="getImages" />
    <method name="acquireNextImage">
      <argument name="timeout" type="uint64_t" />
      <argument name="semaphore" type="vk::Semaphore" />
      <argument name="fence" type="vk::Fence" />
    </method>
    <method name="getCounterEXT">
      <argument name="counter" type="vk::SurfaceCounterFlagBitsEXT" />
    </method>
    <method name="getRefreshCycleDurationGOOGLE" />
    <method name="getPastPresentationTimingGOOGLE" />
    <method name="getStatus" />
    <method name="setLocalDimmingAMD">
      <argument name="localDimmingEnable" type="vk::Bool32" />
    </method>
    <method name="waitForPresent">
      <argument name="presentId" type="uint64_t" />
      <argument name="timeout" type="uint64_t" />
    </method>
    <method name="setLatencySleepModeNV">
      <argument name="sleepModeInfo" type="const vk::LatencySleepModeInfoNV &amp;" />
    </method>
    <method name="latencySleepNV">
      <argument name="sleepInfo" type="const vk::LatencySleepInfoNV &amp;" />
    </method>
    <method name="setLatencyMarkerNV">
      <argument name="latencyMarkerInfo" type="const vk::SetLatencyMarkerInfoNV &amp;" />
    </method>
    <method name="getLatencyTimingsNV" />
  </class>
  <class name="SwapchainKHRs" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="SwapchainKHRs">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::SwapchainCreateInfoKHR&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="SwapchainKHRs">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="SwapchainKHRs" />
    <constructor name="SwapchainKHRs">
      <argument name="" type="const SwapchainKHRs &amp;" />
    </constructor>
    <constructor name="SwapchainKHRs">
      <argument name="rhs" type="SwapchainKHRs &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const SwapchainKHRs &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="SwapchainKHRs &amp;&amp;" />
    </method>
  </class>
  <class name="DisplayKHR" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DisplayKHR">
      <argument name="physicalDevice" type="const vk::raii::PhysicalDevice &amp;" />
      <argument name="drmFd" type="int32_t" />
      <argument name="connectorId" type="uint32_t" />
    </constructor>
    <constructor name="DisplayKHR">
      <argument name="physicalDevice" type="const vk::raii::PhysicalDevice &amp;" />
      <argument name="display" type="VkDisplayKHR" />
    </constructor>
    <constructor name="DisplayKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~DisplayKHR" />
    <constructor name="DisplayKHR" />
    <constructor name="DisplayKHR">
      <argument name="" type="const DisplayKHR &amp;" />
    </constructor>
    <constructor name="DisplayKHR">
      <argument name="rhs" type="DisplayKHR &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DisplayKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DisplayKHR &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getPhysicalDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::DisplayKHR &amp;" />
    </method>
    <method name="getModeProperties" />
    <method name="createMode">
      <argument name="createInfo" type="const vk::DisplayModeCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </method>
    <method name="getModeProperties2" />
  </class>
  <class name="DisplayKHRs" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DisplayKHRs">
      <argument name="physicalDevice" type="const vk::raii::PhysicalDevice &amp;" />
      <argument name="planeIndex" type="uint32_t" />
    </constructor>
    <constructor name="DisplayKHRs">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="DisplayKHRs" />
    <constructor name="DisplayKHRs">
      <argument name="" type="const DisplayKHRs &amp;" />
    </constructor>
    <constructor name="DisplayKHRs">
      <argument name="rhs" type="DisplayKHRs &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DisplayKHRs &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DisplayKHRs &amp;&amp;" />
    </method>
  </class>
  <class name="DisplayModeKHR" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DisplayModeKHR">
      <argument name="display" type="const vk::raii::DisplayKHR &amp;" />
      <argument name="createInfo" type="const vk::DisplayModeCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DisplayModeKHR">
      <argument name="display" type="const vk::raii::DisplayKHR &amp;" />
      <argument name="displayModeKHR" type="VkDisplayModeKHR" />
    </constructor>
    <constructor name="DisplayModeKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~DisplayModeKHR" />
    <constructor name="DisplayModeKHR" />
    <constructor name="DisplayModeKHR">
      <argument name="rhs" type="const DisplayModeKHR &amp;" />
    </constructor>
    <constructor name="DisplayModeKHR">
      <argument name="rhs" type="DisplayModeKHR &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="rhs" type="const DisplayModeKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DisplayModeKHR &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::DisplayModeKHR &amp;" />
    </method>
    <method name="getDisplayPlaneCapabilities">
      <argument name="planeIndex" type="uint32_t" />
    </method>
  </class>
  <class name="DebugReportCallbackEXT" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DebugReportCallbackEXT">
      <argument name="instance" type="const vk::raii::Instance &amp;" />
      <argument name="createInfo" type="const vk::DebugReportCallbackCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DebugReportCallbackEXT">
      <argument name="instance" type="const vk::raii::Instance &amp;" />
      <argument name="callback" type="VkDebugReportCallbackEXT" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DebugReportCallbackEXT">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~DebugReportCallbackEXT" />
    <constructor name="DebugReportCallbackEXT" />
    <constructor name="DebugReportCallbackEXT">
      <argument name="" type="const DebugReportCallbackEXT &amp;" />
    </constructor>
    <constructor name="DebugReportCallbackEXT">
      <argument name="rhs" type="DebugReportCallbackEXT &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DebugReportCallbackEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DebugReportCallbackEXT &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getInstance" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::DebugReportCallbackEXT &amp;" />
    </method>
  </class>
  <class name="VideoSessionKHR" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="VideoSessionKHR">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::VideoSessionCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="VideoSessionKHR">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="videoSession" type="VkVideoSessionKHR" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="VideoSessionKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~VideoSessionKHR" />
    <constructor name="VideoSessionKHR" />
    <constructor name="VideoSessionKHR">
      <argument name="" type="const VideoSessionKHR &amp;" />
    </constructor>
    <constructor name="VideoSessionKHR">
      <argument name="rhs" type="VideoSessionKHR &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const VideoSessionKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="VideoSessionKHR &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::VideoSessionKHR &amp;" />
    </method>
    <method name="getMemoryRequirements" />
    <method name="bindMemory">
      <argument name="bindSessionMemoryInfos" type="const vk::ArrayProxy&lt;const vk::BindVideoSessionMemoryInfoKHR&gt; &amp;" />
    </method>
  </class>
  <class name="VideoSessionParametersKHR" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="VideoSessionParametersKHR">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::VideoSessionParametersCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="VideoSessionParametersKHR">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="videoSessionParameters" type="VkVideoSessionParametersKHR" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="VideoSessionParametersKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~VideoSessionParametersKHR" />
    <constructor name="VideoSessionParametersKHR" />
    <constructor name="VideoSessionParametersKHR">
      <argument name="" type="const VideoSessionParametersKHR &amp;" />
    </constructor>
    <constructor name="VideoSessionParametersKHR">
      <argument name="rhs" type="VideoSessionParametersKHR &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const VideoSessionParametersKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="VideoSessionParametersKHR &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::VideoSessionParametersKHR &amp;" />
    </method>
    <method name="update">
      <argument name="updateInfo" type="const vk::VideoSessionParametersUpdateInfoKHR &amp;" />
    </method>
  </class>
  <class name="CuFunctionNVX" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="CuFunctionNVX">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::CuFunctionCreateInfoNVX &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="CuFunctionNVX">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="function" type="VkCuFunctionNVX" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="CuFunctionNVX">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~CuFunctionNVX" />
    <constructor name="CuFunctionNVX" />
    <constructor name="CuFunctionNVX">
      <argument name="" type="const CuFunctionNVX &amp;" />
    </constructor>
    <constructor name="CuFunctionNVX">
      <argument name="rhs" type="CuFunctionNVX &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const CuFunctionNVX &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="CuFunctionNVX &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::CuFunctionNVX &amp;" />
    </method>
  </class>
  <class name="CuModuleNVX" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="CuModuleNVX">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::CuModuleCreateInfoNVX &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="CuModuleNVX">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="module" type="VkCuModuleNVX" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="CuModuleNVX">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~CuModuleNVX" />
    <constructor name="CuModuleNVX" />
    <constructor name="CuModuleNVX">
      <argument name="" type="const CuModuleNVX &amp;" />
    </constructor>
    <constructor name="CuModuleNVX">
      <argument name="rhs" type="CuModuleNVX &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const CuModuleNVX &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="CuModuleNVX &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::CuModuleNVX &amp;" />
    </method>
  </class>
  <class name="DebugUtilsMessengerEXT" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DebugUtilsMessengerEXT">
      <argument name="instance" type="const vk::raii::Instance &amp;" />
      <argument name="createInfo" type="const vk::DebugUtilsMessengerCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DebugUtilsMessengerEXT">
      <argument name="instance" type="const vk::raii::Instance &amp;" />
      <argument name="messenger" type="VkDebugUtilsMessengerEXT" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DebugUtilsMessengerEXT">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~DebugUtilsMessengerEXT" />
    <constructor name="DebugUtilsMessengerEXT" />
    <constructor name="DebugUtilsMessengerEXT">
      <argument name="" type="const DebugUtilsMessengerEXT &amp;" />
    </constructor>
    <constructor name="DebugUtilsMessengerEXT">
      <argument name="rhs" type="DebugUtilsMessengerEXT &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DebugUtilsMessengerEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DebugUtilsMessengerEXT &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getInstance" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::DebugUtilsMessengerEXT &amp;" />
    </method>
  </class>
  <class name="AccelerationStructureKHR" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="AccelerationStructureKHR">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::AccelerationStructureCreateInfoKHR &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="AccelerationStructureKHR">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="accelerationStructure" type="VkAccelerationStructureKHR" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="AccelerationStructureKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~AccelerationStructureKHR" />
    <constructor name="AccelerationStructureKHR" />
    <constructor name="AccelerationStructureKHR">
      <argument name="" type="const AccelerationStructureKHR &amp;" />
    </constructor>
    <constructor name="AccelerationStructureKHR">
      <argument name="rhs" type="AccelerationStructureKHR &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const AccelerationStructureKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="AccelerationStructureKHR &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::AccelerationStructureKHR &amp;" />
    </method>
  </class>
  <class name="ValidationCacheEXT" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="ValidationCacheEXT">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::ValidationCacheCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="ValidationCacheEXT">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="validationCache" type="VkValidationCacheEXT" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="ValidationCacheEXT">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~ValidationCacheEXT" />
    <constructor name="ValidationCacheEXT" />
    <constructor name="ValidationCacheEXT">
      <argument name="" type="const ValidationCacheEXT &amp;" />
    </constructor>
    <constructor name="ValidationCacheEXT">
      <argument name="rhs" type="ValidationCacheEXT &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const ValidationCacheEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="ValidationCacheEXT &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::ValidationCacheEXT &amp;" />
    </method>
    <method name="merge">
      <argument name="srcCaches" type="const vk::ArrayProxy&lt;const vk::ValidationCacheEXT&gt; &amp;" />
    </method>
    <method name="getData" />
  </class>
  <class name="AccelerationStructureNV" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="AccelerationStructureNV">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::AccelerationStructureCreateInfoNV &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="AccelerationStructureNV">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="accelerationStructure" type="VkAccelerationStructureNV" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="AccelerationStructureNV">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~AccelerationStructureNV" />
    <constructor name="AccelerationStructureNV" />
    <constructor name="AccelerationStructureNV">
      <argument name="" type="const AccelerationStructureNV &amp;" />
    </constructor>
    <constructor name="AccelerationStructureNV">
      <argument name="rhs" type="AccelerationStructureNV &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const AccelerationStructureNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="AccelerationStructureNV &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::AccelerationStructureNV &amp;" />
    </method>
    <method name="getHandle" template_raw="template &lt;typename DataType&gt;" />
    <method name="getHandle" template_raw="template &lt;typename DataType&gt;" />
  </class>
  <class name="PerformanceConfigurationINTEL" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="PerformanceConfigurationINTEL">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="acquireInfo" type="const vk::PerformanceConfigurationAcquireInfoINTEL &amp;" />
    </constructor>
    <constructor name="PerformanceConfigurationINTEL">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="configuration" type="VkPerformanceConfigurationINTEL" />
    </constructor>
    <constructor name="PerformanceConfigurationINTEL">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~PerformanceConfigurationINTEL" />
    <constructor name="PerformanceConfigurationINTEL" />
    <constructor name="PerformanceConfigurationINTEL">
      <argument name="" type="const PerformanceConfigurationINTEL &amp;" />
    </constructor>
    <constructor name="PerformanceConfigurationINTEL">
      <argument name="rhs" type="PerformanceConfigurationINTEL &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const PerformanceConfigurationINTEL &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="PerformanceConfigurationINTEL &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::PerformanceConfigurationINTEL &amp;" />
    </method>
  </class>
  <class name="DeferredOperationKHR" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="DeferredOperationKHR">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DeferredOperationKHR">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="operation" type="VkDeferredOperationKHR" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="DeferredOperationKHR">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~DeferredOperationKHR" />
    <constructor name="DeferredOperationKHR" />
    <constructor name="DeferredOperationKHR">
      <argument name="" type="const DeferredOperationKHR &amp;" />
    </constructor>
    <constructor name="DeferredOperationKHR">
      <argument name="rhs" type="DeferredOperationKHR &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const DeferredOperationKHR &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="DeferredOperationKHR &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::DeferredOperationKHR &amp;" />
    </method>
    <method name="getMaxConcurrency" />
    <method name="getResult" />
    <method name="join" />
  </class>
  <class name="IndirectCommandsLayoutNV" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="IndirectCommandsLayoutNV">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::IndirectCommandsLayoutCreateInfoNV &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="IndirectCommandsLayoutNV">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="indirectCommandsLayout" type="VkIndirectCommandsLayoutNV" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="IndirectCommandsLayoutNV">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~IndirectCommandsLayoutNV" />
    <constructor name="IndirectCommandsLayoutNV" />
    <constructor name="IndirectCommandsLayoutNV">
      <argument name="" type="const IndirectCommandsLayoutNV &amp;" />
    </constructor>
    <constructor name="IndirectCommandsLayoutNV">
      <argument name="rhs" type="IndirectCommandsLayoutNV &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const IndirectCommandsLayoutNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="IndirectCommandsLayoutNV &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::IndirectCommandsLayoutNV &amp;" />
    </method>
  </class>
  <class name="MicromapEXT" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="MicromapEXT">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::MicromapCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="MicromapEXT">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="micromap" type="VkMicromapEXT" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="MicromapEXT">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~MicromapEXT" />
    <constructor name="MicromapEXT" />
    <constructor name="MicromapEXT">
      <argument name="" type="const MicromapEXT &amp;" />
    </constructor>
    <constructor name="MicromapEXT">
      <argument name="rhs" type="MicromapEXT &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const MicromapEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="MicromapEXT &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::MicromapEXT &amp;" />
    </method>
  </class>
  <class name="OpticalFlowSessionNV" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="OpticalFlowSessionNV">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::OpticalFlowSessionCreateInfoNV &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="OpticalFlowSessionNV">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="session" type="VkOpticalFlowSessionNV" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="OpticalFlowSessionNV">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~OpticalFlowSessionNV" />
    <constructor name="OpticalFlowSessionNV" />
    <constructor name="OpticalFlowSessionNV">
      <argument name="" type="const OpticalFlowSessionNV &amp;" />
    </constructor>
    <constructor name="OpticalFlowSessionNV">
      <argument name="rhs" type="OpticalFlowSessionNV &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const OpticalFlowSessionNV &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="OpticalFlowSessionNV &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::OpticalFlowSessionNV &amp;" />
    </method>
    <method name="bindImage">
      <argument name="bindingPoint" type="vk::OpticalFlowSessionBindingPointNV" />
      <argument name="view" type="vk::ImageView" />
      <argument name="layout" type="vk::ImageLayout" />
    </method>
  </class>
  <class name="ShaderEXT" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="ShaderEXT">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfo" type="const vk::ShaderCreateInfoEXT &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="ShaderEXT">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="shader" type="VkShaderEXT" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="ShaderEXT">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <destructor name="~ShaderEXT" />
    <constructor name="ShaderEXT" />
    <constructor name="ShaderEXT">
      <argument name="" type="const ShaderEXT &amp;" />
    </constructor>
    <constructor name="ShaderEXT">
      <argument name="rhs" type="ShaderEXT &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const ShaderEXT &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="ShaderEXT &amp;&amp;" />
    </method>
    <method name="operator*" />
    <method name="clear" />
    <method name="release" />
    <method name="getDevice" />
    <method name="getDispatcher" />
    <method name="swap">
      <argument name="rhs" type="vk::raii::ShaderEXT &amp;" />
    </method>
    <method name="getBinaryData" />
  </class>
  <class name="ShaderEXTs" namespace="vk::raii" filename="vulkan/vulkan_raii.hpp">
    <constructor name="ShaderEXTs">
      <argument name="device" type="const vk::raii::Device &amp;" />
      <argument name="createInfos" type="const vk::ArrayProxy&lt;vk::ShaderCreateInfoEXT&gt; &amp;" />
      <argument name="allocator" type="vk::Optional&lt;const vk::AllocationCallbacks&gt;" default_raw="{}" />
    </constructor>
    <constructor name="ShaderEXTs">
      <argument name="" type="std::nullptr_t" />
    </constructor>
    <constructor name="ShaderEXTs" />
    <constructor name="ShaderEXTs">
      <argument name="" type="const ShaderEXTs &amp;" />
    </constructor>
    <constructor name="ShaderEXTs">
      <argument name="rhs" type="ShaderEXTs &amp;&amp;" />
    </constructor>
    <method name="operator=">
      <argument name="" type="const ShaderEXTs &amp;" />
    </method>
    <method name="operator=">
      <argument name="rhs" type="ShaderEXTs &amp;&amp;" />
    </method>
  </class>
</registry>